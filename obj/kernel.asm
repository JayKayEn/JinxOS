
obj/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <_start+0xbffffff4>:
    .long   CHECHSUM

    .globl _start
_start = PADDR(_entry)
_entry:
    movw    $0x1234, 0x0472
c0100000:	02 b0 ad 1b 02 00    	add    0x21bad(%eax),%dh
c0100006:	00 00                	add    %al,(%eax)
c0100008:	fc                   	cld    
c0100009:	4f                   	dec    %edi
c010000a:	52                   	push   %edx
c010000b:	e4 66                	in     $0x66,%al

c010000c <_entry>:
c010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
c0100013:	34 12 

    movl    $(PADDR(bpgd)), %ecx
c0100015:	b9 00 40 14 00       	mov    $0x144000,%ecx
    movl    %ecx, %cr3
c010001a:	0f 22 d9             	mov    %ecx,%cr3

    movl    %cr4, %ecx
c010001d:	0f 20 e1             	mov    %cr4,%ecx
    orl     $PSE, %ecx
c0100020:	83 c9 10             	or     $0x10,%ecx
    movl    %ecx, %cr4
c0100023:	0f 22 e1             	mov    %ecx,%cr4

    movl    %cr0, %ecx
c0100026:	0f 20 c1             	mov    %cr0,%ecx
    orl     $(PE | PG | WP), %ecx
c0100029:	81 c9 01 00 01 80    	or     $0x80010001,%ecx
    movl    %ecx, %cr0
c010002f:	0f 22 c1             	mov    %ecx,%cr0

    mov     $vm, %ecx
c0100032:	b9 39 00 10 c0       	mov    $0xc0100039,%ecx
    jmp     *%ecx
c0100037:	ff e1                	jmp    *%ecx

c0100039 <vm>:
vm:
    movl    $0x0, %ebp
c0100039:	bd 00 00 00 00       	mov    $0x0,%ebp
    movl    $ebstack, %esp
c010003e:	bc 00 40 14 c0       	mov    $0xc0144000,%esp

    pushl   %ebx
c0100043:	53                   	push   %ebx
    pushl   %eax
c0100044:	50                   	push   %eax

    call    kmain
c0100045:	e8 6d 0a 00 00       	call   c0100ab7 <kmain>

c010004a <spin>:
spin:
    jmp spin
c010004a:	eb fe                	jmp    c010004a <spin>

c010004c <gdt_flush>:

    .code32
    .global gdt_flush
    .extern gdt_addr
gdt_flush:
    lgdt    (gdt_addr)
c010004c:	0f 01 15 a0 d2 14 c0 	lgdtl  0xc014d2a0
    movw    $0x10, %ax
c0100053:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax ,%ds
c0100057:	8e d8                	mov    %eax,%ds
    movw    %ax ,%es
c0100059:	8e c0                	mov    %eax,%es
    movw    %ax ,%fs
c010005b:	8e e0                	mov    %eax,%fs
    movw    %ax ,%gs
c010005d:	8e e8                	mov    %eax,%gs
    movw    %ax ,%ss
c010005f:	8e d0                	mov    %eax,%ss
    ljmp    $0x08, $flush
c0100061:	ea 68 00 10 c0 08 00 	ljmp   $0x8,$0xc0100068

c0100068 <flush>:
flush:
    ret
c0100068:	c3                   	ret    
c0100069:	90                   	nop

c010006a <isr0>:
//  0: Divide By Zero
    .global isr0
    .type isr0, @function
    .align 2
isr0:
    cli
c010006a:	fa                   	cli    
    pushl $0x0
c010006b:	6a 00                	push   $0x0
    pushl $0x0
c010006d:	6a 00                	push   $0x0
    jmp isr_common_stub
c010006f:	e9 83 00 00 00       	jmp    c01000f7 <isr_common_stub>

c0100074 <isr1>:
//  1: Debug
    .global isr1
    .type isr1, @function
    .align 2
isr1:
    cli
c0100074:	fa                   	cli    
    pushl $0x0
c0100075:	6a 00                	push   $0x0
    pushl $0x1
c0100077:	6a 01                	push   $0x1
    jmp isr_common_stub
c0100079:	eb 7c                	jmp    c01000f7 <isr_common_stub>
c010007b:	90                   	nop

c010007c <isr2>:
//  2: Non Maskable Interrupt
    .global isr2
    .type isr2, @function
    .align 2
isr2:
    cli
c010007c:	fa                   	cli    
    pushl $0x0
c010007d:	6a 00                	push   $0x0
    pushl $0x2
c010007f:	6a 02                	push   $0x2
    jmp isr_common_stub
c0100081:	eb 74                	jmp    c01000f7 <isr_common_stub>
c0100083:	90                   	nop

c0100084 <isr3>:
//  3: Int 3
    .global isr3
    .type isr3, @function
    .align 2
isr3:
    cli
c0100084:	fa                   	cli    
    pushl $0x0
c0100085:	6a 00                	push   $0x0
    pushl $0x3
c0100087:	6a 03                	push   $0x3
    jmp isr_common_stub
c0100089:	eb 6c                	jmp    c01000f7 <isr_common_stub>
c010008b:	90                   	nop

c010008c <isr4>:
//  4: INTO
    .global isr4
    .type isr4, @function
    .align 2
isr4:
    cli
c010008c:	fa                   	cli    
    pushl $0x0
c010008d:	6a 00                	push   $0x0
    pushl $0x4
c010008f:	6a 04                	push   $0x4
    jmp isr_common_stub
c0100091:	eb 64                	jmp    c01000f7 <isr_common_stub>
c0100093:	90                   	nop

c0100094 <isr5>:
//  5: Out of Bounds
    .global isr5
    .type isr5, @function
    .align 2
isr5:
    cli
c0100094:	fa                   	cli    
    pushl $0x0
c0100095:	6a 00                	push   $0x0
    pushl $0x5
c0100097:	6a 05                	push   $0x5
    jmp isr_common_stub
c0100099:	eb 5c                	jmp    c01000f7 <isr_common_stub>
c010009b:	90                   	nop

c010009c <isr6>:
//  6: Invalid Opcode
    .global isr6
    .type isr6, @function
    .align 2
isr6:
    cli
c010009c:	fa                   	cli    
    pushl $0x0
c010009d:	6a 00                	push   $0x0
    pushl $0x6
c010009f:	6a 06                	push   $0x6
    jmp isr_common_stub
c01000a1:	eb 54                	jmp    c01000f7 <isr_common_stub>
c01000a3:	90                   	nop

c01000a4 <isr7>:
//  7: Coprocessor Not Available
    .global isr7
    .type isr7, @function
    .align 2
isr7:
    cli
c01000a4:	fa                   	cli    
    pushl $0x0
c01000a5:	6a 00                	push   $0x0
    pushl $0x7
c01000a7:	6a 07                	push   $0x7
    jmp isr_common_stub
c01000a9:	eb 4c                	jmp    c01000f7 <isr_common_stub>
c01000ab:	90                   	nop

c01000ac <isr8>:
//  8: Double Fault
    .global isr8
    .type isr8, @function
    .align 2
isr8:
    cli
c01000ac:	fa                   	cli    
    pushl $0x8
c01000ad:	6a 08                	push   $0x8
    jmp isr_common_stub
c01000af:	eb 46                	jmp    c01000f7 <isr_common_stub>
c01000b1:	90                   	nop

c01000b2 <isr10>:
// 10: Bad TSS
    .global isr10
    .type isr10, @function
    .align 2
isr10:
    cli
c01000b2:	fa                   	cli    
    pushl $0xA
c01000b3:	6a 0a                	push   $0xa
    jmp isr_common_stub
c01000b5:	eb 40                	jmp    c01000f7 <isr_common_stub>
c01000b7:	90                   	nop

c01000b8 <isr11>:
// 11: Segment Not Present
    .global isr11
    .type isr11, @function
    .align 2
isr11:
    cli
c01000b8:	fa                   	cli    
    pushl $0xB
c01000b9:	6a 0b                	push   $0xb
    jmp isr_common_stub
c01000bb:	eb 3a                	jmp    c01000f7 <isr_common_stub>
c01000bd:	90                   	nop

c01000be <isr12>:
// 12: Stack Fault
    .global isr12
    .type isr12, @function
    .align 2
isr12:
    cli
c01000be:	fa                   	cli    
    pushl $0xC
c01000bf:	6a 0c                	push   $0xc
    jmp isr_common_stub
c01000c1:	eb 34                	jmp    c01000f7 <isr_common_stub>
c01000c3:	90                   	nop

c01000c4 <isr13>:
// 13: General Protection Fault
    .global isr13
    .type isr13, @function
    .align 2
isr13:
    cli
c01000c4:	fa                   	cli    
    pushl $0xD
c01000c5:	6a 0d                	push   $0xd
    jmp isr_common_stub
c01000c7:	eb 2e                	jmp    c01000f7 <isr_common_stub>
c01000c9:	90                   	nop

c01000ca <isr14>:
// 14: Page Fault
    .global isr14
    .type isr14, @function
    .align 2
isr14:
    cli
c01000ca:	fa                   	cli    
    pushl $0xE
c01000cb:	6a 0e                	push   $0xe
    jmp isr_common_stub
c01000cd:	eb 28                	jmp    c01000f7 <isr_common_stub>
c01000cf:	90                   	nop

c01000d0 <isr16>:
// 16: Floating Point
    .global isr16
    .type isr16, @function
    .align 2
isr16:
    cli
c01000d0:	fa                   	cli    
    pushl $0x0
c01000d1:	6a 00                	push   $0x0
    pushl $0x10
c01000d3:	6a 10                	push   $0x10
    jmp isr_common_stub
c01000d5:	eb 20                	jmp    c01000f7 <isr_common_stub>
c01000d7:	90                   	nop

c01000d8 <isr17>:
// 17: Alignment Check
    .global isr17
    .type isr17, @function
    .align 2
isr17:
    cli
c01000d8:	fa                   	cli    
    pushl $0x0
c01000d9:	6a 00                	push   $0x0
    pushl $0x11
c01000db:	6a 11                	push   $0x11
    jmp isr_common_stub
c01000dd:	eb 18                	jmp    c01000f7 <isr_common_stub>
c01000df:	90                   	nop

c01000e0 <isr18>:
// 18: Machine Check
    .global isr18
    .type isr18, @function
    .align 2
isr18:
    cli
c01000e0:	fa                   	cli    
    pushl $0x0
c01000e1:	6a 00                	push   $0x0
    pushl $0x12
c01000e3:	6a 12                	push   $0x12
    jmp isr_common_stub
c01000e5:	eb 10                	jmp    c01000f7 <isr_common_stub>
c01000e7:	90                   	nop

c01000e8 <isr19>:
// 19: Reserved
    .global isr19
    .type isr19, @function
    .align 2
isr19:
    cli
c01000e8:	fa                   	cli    
    pushl $0x0
c01000e9:	6a 00                	push   $0x0
    pushl $0x13
c01000eb:	6a 13                	push   $0x13
    jmp isr_common_stub
c01000ed:	eb 08                	jmp    c01000f7 <isr_common_stub>
c01000ef:	90                   	nop

c01000f0 <isr48>:
// 48: System Call
    .global isr48
    .type isr48, @function
    .align 2
isr48:
    cli
c01000f0:	fa                   	cli    
    pushl $0x0
c01000f1:	6a 00                	push   $0x0
    pushl $0x30
c01000f3:	6a 30                	push   $0x30
    jmp isr_common_stub
c01000f5:	eb 00                	jmp    c01000f7 <isr_common_stub>

c01000f7 <isr_common_stub>:

    .extern isr_handler
isr_common_stub:
    pushal
c01000f7:	60                   	pusha  
    pushl   %ds
c01000f8:	1e                   	push   %ds
    pushl   %es
c01000f9:	06                   	push   %es

    movw    $0x10, %ax
c01000fa:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax, %ds
c01000fe:	8e d8                	mov    %eax,%ds
    movw    %ax, %es
c0100100:	8e c0                	mov    %eax,%es

    pushl   %esp
c0100102:	54                   	push   %esp
    call    isr_handler
c0100103:	e8 78 04 00 00       	call   c0100580 <isr_handler>
    popl    %esp
c0100108:	5c                   	pop    %esp

    popl    %es
c0100109:	07                   	pop    %es
    popl    %ds
c010010a:	1f                   	pop    %ds
    popal
c010010b:	61                   	popa   

    addl     $0x8, %esp
c010010c:	83 c4 08             	add    $0x8,%esp
    iret
c010010f:	cf                   	iret   

c0100110 <irq0>:

// 32: IRQ0
    .global irq0
irq0:
    cli
c0100110:	fa                   	cli    
    pushl $0x0
c0100111:	6a 00                	push   $0x0
    pushl $0x20
c0100113:	6a 20                	push   $0x20
    jmp irq_common_stub
c0100115:	eb 69                	jmp    c0100180 <irq_common_stub>

c0100117 <irq1>:

// 33: IRQ1
    .global irq1
irq1:
    cli
c0100117:	fa                   	cli    
    pushl $0x0
c0100118:	6a 00                	push   $0x0
    pushl $0x21
c010011a:	6a 21                	push   $0x21
    jmp irq_common_stub
c010011c:	eb 62                	jmp    c0100180 <irq_common_stub>

c010011e <irq2>:

// 34: IRQ2
    .global irq2
irq2:
    cli
c010011e:	fa                   	cli    
    pushl $0x0
c010011f:	6a 00                	push   $0x0
    pushl $0x22
c0100121:	6a 22                	push   $0x22
    jmp irq_common_stub
c0100123:	eb 5b                	jmp    c0100180 <irq_common_stub>

c0100125 <irq3>:

// 35: IRQ3
    .global irq3
irq3:
    cli
c0100125:	fa                   	cli    
    pushl $0x0
c0100126:	6a 00                	push   $0x0
    pushl $0x23
c0100128:	6a 23                	push   $0x23
    jmp irq_common_stub
c010012a:	eb 54                	jmp    c0100180 <irq_common_stub>

c010012c <irq4>:

// 36: IRQ4
    .global irq4
irq4:
    cli
c010012c:	fa                   	cli    
    pushl $0x0
c010012d:	6a 00                	push   $0x0
    pushl $0x24
c010012f:	6a 24                	push   $0x24
    jmp irq_common_stub
c0100131:	eb 4d                	jmp    c0100180 <irq_common_stub>

c0100133 <irq5>:

// 37: IRQ5
    .global irq5
irq5:
    cli
c0100133:	fa                   	cli    
    pushl $0x0
c0100134:	6a 00                	push   $0x0
    pushl $0x25
c0100136:	6a 25                	push   $0x25
    jmp irq_common_stub
c0100138:	eb 46                	jmp    c0100180 <irq_common_stub>

c010013a <irq6>:

// 38: IRQ6
    .global irq6
irq6:
    cli
c010013a:	fa                   	cli    
    pushl $0x0
c010013b:	6a 00                	push   $0x0
    pushl $0x26
c010013d:	6a 26                	push   $0x26
    jmp irq_common_stub
c010013f:	eb 3f                	jmp    c0100180 <irq_common_stub>

c0100141 <irq7>:

// 39: IRQ7
    .global irq7
irq7:
    cli
c0100141:	fa                   	cli    
    pushl $0x0
c0100142:	6a 00                	push   $0x0
    pushl $0x27
c0100144:	6a 27                	push   $0x27
    jmp irq_common_stub
c0100146:	eb 38                	jmp    c0100180 <irq_common_stub>

c0100148 <irq8>:

// 40: IRQ8
    .global irq8
irq8:
    cli
c0100148:	fa                   	cli    
    pushl $0x0
c0100149:	6a 00                	push   $0x0
    pushl $0x28
c010014b:	6a 28                	push   $0x28
    jmp irq_common_stub
c010014d:	eb 31                	jmp    c0100180 <irq_common_stub>

c010014f <irq9>:

// 41: IRQ9
    .global irq9
irq9:
    cli
c010014f:	fa                   	cli    
    pushl $0x0
c0100150:	6a 00                	push   $0x0
    pushl $0x29
c0100152:	6a 29                	push   $0x29
    jmp irq_common_stub
c0100154:	eb 2a                	jmp    c0100180 <irq_common_stub>

c0100156 <irq10>:

// 42: IRQ10
    .global irq10
irq10:
    cli
c0100156:	fa                   	cli    
    pushl $0x0
c0100157:	6a 00                	push   $0x0
    pushl $0x2A
c0100159:	6a 2a                	push   $0x2a
    jmp irq_common_stub
c010015b:	eb 23                	jmp    c0100180 <irq_common_stub>

c010015d <irq11>:

// 43: IRQ11
    .global irq11
irq11:
    cli
c010015d:	fa                   	cli    
    pushl $0x0
c010015e:	6a 00                	push   $0x0
    pushl $0x2B
c0100160:	6a 2b                	push   $0x2b
    jmp irq_common_stub
c0100162:	eb 1c                	jmp    c0100180 <irq_common_stub>

c0100164 <irq12>:

// 44: IRQ12
    .global irq12
irq12:
    cli
c0100164:	fa                   	cli    
    pushl $0x0
c0100165:	6a 00                	push   $0x0
    pushl $0x2C
c0100167:	6a 2c                	push   $0x2c
    jmp irq_common_stub
c0100169:	eb 15                	jmp    c0100180 <irq_common_stub>

c010016b <irq13>:

// 45: IRQ13
    .global irq13
irq13:
    cli
c010016b:	fa                   	cli    
    pushl $0x0
c010016c:	6a 00                	push   $0x0
    pushl $0x2D
c010016e:	6a 2d                	push   $0x2d
    jmp irq_common_stub
c0100170:	eb 0e                	jmp    c0100180 <irq_common_stub>

c0100172 <irq14>:

// 46: IRQ14
    .global irq14
irq14:
    cli
c0100172:	fa                   	cli    
    pushl $0x0
c0100173:	6a 00                	push   $0x0
    pushl $0x2E
c0100175:	6a 2e                	push   $0x2e
    jmp irq_common_stub
c0100177:	eb 07                	jmp    c0100180 <irq_common_stub>

c0100179 <irq15>:

// 47: IRQ15
    .global irq15
irq15:
    cli
c0100179:	fa                   	cli    
    pushl $0x0
c010017a:	6a 00                	push   $0x0
    pushl $0x2F
c010017c:	6a 2f                	push   $0x2f
    jmp irq_common_stub
c010017e:	eb 00                	jmp    c0100180 <irq_common_stub>

c0100180 <irq_common_stub>:

    .extern irq_handler
irq_common_stub:
    pushal
c0100180:	60                   	pusha  
    pushl   %ds
c0100181:	1e                   	push   %ds
    pushl   %es
c0100182:	06                   	push   %es

    movw    $0x10, %ax
c0100183:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax, %ds
c0100187:	8e d8                	mov    %eax,%ds
    movw    %ax, %es
c0100189:	8e c0                	mov    %eax,%es

    pushl   %esp
c010018b:	54                   	push   %esp
    call    irq_handler
c010018c:	e8 ec 07 00 00       	call   c010097d <irq_handler>
    popl    %esp
c0100191:	5c                   	pop    %esp

    popl    %es
c0100192:	07                   	pop    %es
    popl    %ds
c0100193:	1f                   	pop    %ds
    popal
c0100194:	61                   	popa   

    addl     $0x8, %esp
c0100195:	83 c4 08             	add    $0x8,%esp
    iret
c0100198:	cf                   	iret   

c0100199 <gdt_set_gate>:
 *  | G | D | 0 | A | SegLen |  SegLen - 0xF
 *  +------------------------+
 *
 */
void
gdt_set_gate(uint8_t num, uint32_t base, uint32_t lim, uint8_t dpl, uint8_t type) {
c0100199:	55                   	push   %ebp
c010019a:	89 e5                	mov    %esp,%ebp
c010019c:	53                   	push   %ebx
c010019d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    gdt[num].limit_lo     = ((lim) >> 12) & 0xffff;
c01001a0:	0f b6 4d 08          	movzbl 0x8(%ebp),%ecx
c01001a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01001a7:	c1 e8 0c             	shr    $0xc,%eax
c01001aa:	66 89 04 cd 00 d2 14 	mov    %ax,-0x3feb2e00(,%ecx,8)
c01001b1:	c0 
    gdt[num].base_lo      = (base) & 0xffff;
c01001b2:	66 89 1c cd 02 d2 14 	mov    %bx,-0x3feb2dfe(,%ecx,8)
c01001b9:	c0 
    gdt[num].base_md      = ((base) >> 16) & 0xff;
c01001ba:	89 d8                	mov    %ebx,%eax
c01001bc:	c1 e8 10             	shr    $0x10,%eax
c01001bf:	88 04 cd 04 d2 14 c0 	mov    %al,-0x3feb2dfc(,%ecx,8)
    gdt[num].type         = type;
c01001c6:	8a 45 18             	mov    0x18(%ebp),%al
c01001c9:	83 e0 0f             	and    $0xf,%eax
c01001cc:	8a 14 cd 05 d2 14 c0 	mov    -0x3feb2dfb(,%ecx,8),%dl
c01001d3:	83 e2 f0             	and    $0xfffffff0,%edx
c01001d6:	09 d0                	or     %edx,%eax
    gdt[num].app          = 1;
c01001d8:	83 c8 10             	or     $0x10,%eax
    gdt[num].dpl          = dpl;
c01001db:	8a 55 14             	mov    0x14(%ebp),%dl
c01001de:	83 e2 03             	and    $0x3,%edx
c01001e1:	c1 e2 05             	shl    $0x5,%edx
c01001e4:	83 e0 9f             	and    $0xffffff9f,%eax
c01001e7:	09 d0                	or     %edx,%eax
    gdt[num].present      = 1;
c01001e9:	83 c8 80             	or     $0xffffff80,%eax
c01001ec:	88 04 cd 05 d2 14 c0 	mov    %al,-0x3feb2dfb(,%ecx,8)
    gdt[num].sd_lim_19_16 = (lim) >> 28;
c01001f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01001f6:	c1 e8 1c             	shr    $0x1c,%eax
    gdt[num].available    = 0;
    gdt[num].zero         = 0;
    gdt[num].operand_size = 1;
    gdt[num].granularity  = 1;
c01001f9:	83 c8 c0             	or     $0xffffffc0,%eax
c01001fc:	88 04 cd 06 d2 14 c0 	mov    %al,-0x3feb2dfa(,%ecx,8)
    gdt[num].base_hi      = (base) >> 24;
c0100203:	c1 eb 18             	shr    $0x18,%ebx
c0100206:	88 1c cd 07 d2 14 c0 	mov    %bl,-0x3feb2df9(,%ecx,8)
}
c010020d:	5b                   	pop    %ebx
c010020e:	5d                   	pop    %ebp
c010020f:	c3                   	ret    

c0100210 <gdt_set_gate16>:

void
gdt_set_gate16(uint8_t num, uint32_t base, uint32_t lim, uint8_t dpl, uint8_t type) {
c0100210:	55                   	push   %ebp
c0100211:	89 e5                	mov    %esp,%ebp
c0100213:	56                   	push   %esi
c0100214:	53                   	push   %ebx
c0100215:	8b 75 0c             	mov    0xc(%ebp),%esi
c0100218:	8b 4d 10             	mov    0x10(%ebp),%ecx
    gdt[num].limit_lo     = (lim) & 0xffff;
c010021b:	0f b6 5d 08          	movzbl 0x8(%ebp),%ebx
c010021f:	66 89 0c dd 00 d2 14 	mov    %cx,-0x3feb2e00(,%ebx,8)
c0100226:	c0 
    gdt[num].base_lo      = (base) & 0xffff;
c0100227:	66 89 34 dd 02 d2 14 	mov    %si,-0x3feb2dfe(,%ebx,8)
c010022e:	c0 
    gdt[num].base_md      = ((base) >> 16) & 0xff;
c010022f:	89 f0                	mov    %esi,%eax
c0100231:	c1 e8 10             	shr    $0x10,%eax
c0100234:	88 04 dd 04 d2 14 c0 	mov    %al,-0x3feb2dfc(,%ebx,8)
    gdt[num].type         = type;
c010023b:	8a 45 18             	mov    0x18(%ebp),%al
c010023e:	83 e0 0f             	and    $0xf,%eax
c0100241:	8a 14 dd 05 d2 14 c0 	mov    -0x3feb2dfb(,%ebx,8),%dl
c0100248:	83 e2 f0             	and    $0xfffffff0,%edx
c010024b:	09 d0                	or     %edx,%eax
    gdt[num].app          = 1;
c010024d:	83 c8 10             	or     $0x10,%eax
    gdt[num].dpl          = dpl;
c0100250:	8a 55 14             	mov    0x14(%ebp),%dl
c0100253:	83 e2 03             	and    $0x3,%edx
c0100256:	c1 e2 05             	shl    $0x5,%edx
c0100259:	83 e0 9f             	and    $0xffffff9f,%eax
c010025c:	09 d0                	or     %edx,%eax
    gdt[num].present      = 1;
c010025e:	83 c8 80             	or     $0xffffff80,%eax
c0100261:	88 04 dd 05 d2 14 c0 	mov    %al,-0x3feb2dfb(,%ebx,8)
    gdt[num].sd_lim_19_16 = (lim) >> 16;
c0100268:	c1 e9 10             	shr    $0x10,%ecx
c010026b:	83 e1 0f             	and    $0xf,%ecx
    gdt[num].available    = 0;
    gdt[num].zero         = 0;
    gdt[num].operand_size = 1;
    gdt[num].granularity  = 0;
c010026e:	83 c9 40             	or     $0x40,%ecx
c0100271:	88 0c dd 06 d2 14 c0 	mov    %cl,-0x3feb2dfa(,%ebx,8)
    gdt[num].base_hi      = (base) >> 24;
c0100278:	89 f0                	mov    %esi,%eax
c010027a:	c1 e8 18             	shr    $0x18,%eax
c010027d:	88 04 dd 07 d2 14 c0 	mov    %al,-0x3feb2df9(,%ebx,8)
}
c0100284:	5b                   	pop    %ebx
c0100285:	5e                   	pop    %esi
c0100286:	5d                   	pop    %ebp
c0100287:	c3                   	ret    

c0100288 <init_gdt>:

struct gdt_ptr gdt_addr;

void init_gdt(void) {
c0100288:	55                   	push   %ebp
c0100289:	89 e5                	mov    %esp,%ebp
c010028b:	83 ec 08             	sub    $0x8,%esp
    gdt_addr.limit = sizeof(struct gdt_entry) * GDT_ENTRIES - 1;
c010028e:	66 c7 05 a0 d2 14 c0 	movw   $0x67,0xc014d2a0
c0100295:	67 00 
    gdt_addr.base = (uint32_t) &gdt;
c0100297:	c7 05 a2 d2 14 c0 00 	movl   $0xc014d200,0xc014d2a2
c010029e:	d2 14 c0 

    gdt_set_gate(GDT_NULL,  0x0, 0x00000000, 0x00, 0x00);
c01002a1:	6a 00                	push   $0x0
c01002a3:	6a 00                	push   $0x0
c01002a5:	6a 00                	push   $0x0
c01002a7:	6a 00                	push   $0x0
c01002a9:	6a 00                	push   $0x0
c01002ab:	e8 e9 fe ff ff       	call   c0100199 <gdt_set_gate>
    gdt_set_gate(GDT_KCODE, 0x0, 0xFFFFFFFF, DPL_KERN, STA_R | STA_X);
c01002b0:	6a 0a                	push   $0xa
c01002b2:	6a 00                	push   $0x0
c01002b4:	6a ff                	push   $0xffffffff
c01002b6:	6a 00                	push   $0x0
c01002b8:	6a 01                	push   $0x1
c01002ba:	e8 da fe ff ff       	call   c0100199 <gdt_set_gate>
    gdt_set_gate(GDT_KDATA, 0x0, 0xFFFFFFFF, DPL_KERN, STA_W);
c01002bf:	83 c4 28             	add    $0x28,%esp
c01002c2:	6a 02                	push   $0x2
c01002c4:	6a 00                	push   $0x0
c01002c6:	6a ff                	push   $0xffffffff
c01002c8:	6a 00                	push   $0x0
c01002ca:	6a 02                	push   $0x2
c01002cc:	e8 c8 fe ff ff       	call   c0100199 <gdt_set_gate>
    gdt_set_gate(GDT_UCODE, 0x0, 0xBFFFFFFF, DPL_USER, STA_R | STA_X);
c01002d1:	6a 0a                	push   $0xa
c01002d3:	6a 03                	push   $0x3
c01002d5:	68 ff ff ff bf       	push   $0xbfffffff
c01002da:	6a 00                	push   $0x0
c01002dc:	6a 03                	push   $0x3
c01002de:	e8 b6 fe ff ff       	call   c0100199 <gdt_set_gate>
    gdt_set_gate(GDT_UDATA, 0x0, 0xBFFFFFFF, DPL_USER, STA_W);
c01002e3:	83 c4 28             	add    $0x28,%esp
c01002e6:	6a 02                	push   $0x2
c01002e8:	6a 03                	push   $0x3
c01002ea:	68 ff ff ff bf       	push   $0xbfffffff
c01002ef:	6a 00                	push   $0x0
c01002f1:	6a 04                	push   $0x4
c01002f3:	e8 a1 fe ff ff       	call   c0100199 <gdt_set_gate>

    extern void gdt_flush();    // in asm.S
    gdt_flush();
c01002f8:	83 c4 14             	add    $0x14,%esp
}
c01002fb:	c9                   	leave  
    gdt_set_gate(GDT_KDATA, 0x0, 0xFFFFFFFF, DPL_KERN, STA_W);
    gdt_set_gate(GDT_UCODE, 0x0, 0xBFFFFFFF, DPL_USER, STA_R | STA_X);
    gdt_set_gate(GDT_UDATA, 0x0, 0xBFFFFFFF, DPL_USER, STA_W);

    extern void gdt_flush();    // in asm.S
    gdt_flush();
c01002fc:	e9 4b fd ff ff       	jmp    c010004c <gdt_flush>

c0100301 <idt_set_gate>:
*  "Unhandled Interrupt" exception */
struct idt_entry idt[IDT_ENTRIES] = {{0}};
struct idt_ptr idtp;

void
idt_set_gate(uint8_t num, bool istrap, uint16_t sel, uint32_t off, uint8_t dpl) {
c0100301:	55                   	push   %ebp
c0100302:	89 e5                	mov    %esp,%ebp
c0100304:	53                   	push   %ebx
c0100305:	8b 4d 14             	mov    0x14(%ebp),%ecx
    idt[num].gd_off_15_0  = (uint32_t) (off) & 0xffff;
c0100308:	0f b6 55 08          	movzbl 0x8(%ebp),%edx
c010030c:	66 89 0c d5 00 c0 14 	mov    %cx,-0x3feb4000(,%edx,8)
c0100313:	c0 
    idt[num].gd_sel       = (sel);
c0100314:	8b 45 10             	mov    0x10(%ebp),%eax
c0100317:	66 89 04 d5 02 c0 14 	mov    %ax,-0x3feb3ffe(,%edx,8)
c010031e:	c0 
    idt[num].gd_zero      = 0;
c010031f:	c6 04 d5 04 c0 14 c0 	movb   $0x0,-0x3feb3ffc(,%edx,8)
c0100326:	00 
    idt[num].gd_type      = (istrap) ? STS_TG32 : STS_IG32;
c0100327:	80 7d 0c 01          	cmpb   $0x1,0xc(%ebp)
c010032b:	19 c0                	sbb    %eax,%eax
c010032d:	83 c0 0f             	add    $0xf,%eax
c0100330:	83 e0 0f             	and    $0xf,%eax
c0100333:	88 c3                	mov    %al,%bl
    idt[num].gd_s         = 0;
    idt[num].gd_dpl       = (dpl);
c0100335:	8a 45 18             	mov    0x18(%ebp),%al
c0100338:	83 e0 03             	and    $0x3,%eax
c010033b:	c1 e0 05             	shl    $0x5,%eax
c010033e:	09 d8                	or     %ebx,%eax
    idt[num].gd_p         = 1;
c0100340:	83 c8 80             	or     $0xffffff80,%eax
c0100343:	88 04 d5 05 c0 14 c0 	mov    %al,-0x3feb3ffb(,%edx,8)
    idt[num].gd_off_31_16 = (uint32_t) (off) >> 16;
c010034a:	c1 e9 10             	shr    $0x10,%ecx
c010034d:	66 89 0c d5 06 c0 14 	mov    %cx,-0x3feb3ffa(,%edx,8)
c0100354:	c0 
}
c0100355:	5b                   	pop    %ebx
c0100356:	5d                   	pop    %ebp
c0100357:	c3                   	ret    

c0100358 <idt_set_gate2>:

void
idt_set_gate2(uint8_t num, uint32_t base, uint16_t sel, uint8_t flags) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	56                   	push   %esi
c010035c:	53                   	push   %ebx
c010035d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100360:	8b 45 14             	mov    0x14(%ebp),%eax
    /* The interrupt routine's base address */
    idt[num].gd_off_15_0 = (base & 0xFFFF);
c0100363:	0f b6 4d 08          	movzbl 0x8(%ebp),%ecx
c0100367:	66 89 14 cd 00 c0 14 	mov    %dx,-0x3feb4000(,%ecx,8)
c010036e:	c0 
    idt[num].gd_off_31_16 = (base >> 16);
c010036f:	c1 ea 10             	shr    $0x10,%edx
c0100372:	66 89 14 cd 06 c0 14 	mov    %dx,-0x3feb3ffa(,%ecx,8)
c0100379:	c0 

    /* The segment or 'selector' that this IDT entry will use
    *  is set here, along with any access flags */
    idt[num].gd_sel = sel;
c010037a:	8b 55 10             	mov    0x10(%ebp),%edx
c010037d:	66 89 14 cd 02 c0 14 	mov    %dx,-0x3feb3ffe(,%ecx,8)
c0100384:	c0 
    idt[num].gd_zero = 0;
c0100385:	c6 04 cd 04 c0 14 c0 	movb   $0x0,-0x3feb3ffc(,%ecx,8)
c010038c:	00 

    idt[num].gd_type      = (flags & 0xF) ? STS_TG32 : STS_IG32;
c010038d:	88 c2                	mov    %al,%dl
c010038f:	83 e2 0f             	and    $0xf,%edx
c0100392:	80 fa 01             	cmp    $0x1,%dl
c0100395:	19 d2                	sbb    %edx,%edx
c0100397:	83 c2 0f             	add    $0xf,%edx
c010039a:	88 d3                	mov    %dl,%bl
c010039c:	83 e3 0f             	and    $0xf,%ebx
    idt[num].gd_s         = 0;
    idt[num].gd_dpl       = (flags >> 5) & 3;
c010039f:	89 c6                	mov    %eax,%esi
c01003a1:	83 e6 60             	and    $0x60,%esi
    idt[num].gd_p         = (flags >> 7) & 1;
c01003a4:	88 c2                	mov    %al,%dl
c01003a6:	83 e2 80             	and    $0xffffff80,%edx
c01003a9:	89 f0                	mov    %esi,%eax
c01003ab:	09 d8                	or     %ebx,%eax
c01003ad:	09 d0                	or     %edx,%eax
c01003af:	88 04 cd 05 c0 14 c0 	mov    %al,-0x3feb3ffb(,%ecx,8)
}
c01003b6:	5b                   	pop    %ebx
c01003b7:	5e                   	pop    %esi
c01003b8:	5d                   	pop    %ebp
c01003b9:	c3                   	ret    

c01003ba <init_idt>:

/* Installs the IDT */
void init_idt(void) {
c01003ba:	55                   	push   %ebp
c01003bb:	89 e5                	mov    %esp,%ebp
c01003bd:	83 ec 0c             	sub    $0xc,%esp
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp.limit = (sizeof(struct idt_entry) * IDT_ENTRIES) - 1;
c01003c0:	66 c7 05 b0 d2 14 c0 	movw   $0x7ff,0xc014d2b0
c01003c7:	ff 07 
    idtp.base = (uint32_t) &idt;
c01003c9:	c7 05 b2 d2 14 c0 00 	movl   $0xc014c000,0xc014d2b2
c01003d0:	c0 14 c0 

    /* Clear out the entire IDT, initializing it to zeros */
    memset(&idt, 0, sizeof(struct idt_entry) * IDT_ENTRIES);
c01003d3:	68 00 08 00 00       	push   $0x800
c01003d8:	6a 00                	push   $0x0
c01003da:	68 00 c0 14 c0       	push   $0xc014c000
c01003df:	e8 46 45 00 00       	call   c010492a <memset>
}
c01003e4:	83 c4 10             	add    $0x10,%esp
c01003e7:	c9                   	leave  
c01003e8:	c3                   	ret    

c01003e9 <init_isr>:
*  that correspond to that given entry. We set the access
*  flags to 0x8E. This means that the entry is present, is
*  running in ring 0 (kernel level), and has the lower 5 bits
*  set to the required '14', which is represented by 'E' in
*  hex. */
void init_isr(void) {
c01003e9:	55                   	push   %ebp
c01003ea:	89 e5                	mov    %esp,%ebp
c01003ec:	83 ec 14             	sub    $0x14,%esp
    idt_set_gate( 0, 1, GD_KT, (uint32_t)  isr0, DPL_KERN);
c01003ef:	6a 00                	push   $0x0
c01003f1:	68 6a 00 10 c0       	push   $0xc010006a
c01003f6:	6a 08                	push   $0x8
c01003f8:	6a 01                	push   $0x1
c01003fa:	6a 00                	push   $0x0
c01003fc:	e8 00 ff ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 1, 1, GD_KT, (uint32_t)  isr1, DPL_KERN);
c0100401:	83 c4 14             	add    $0x14,%esp
c0100404:	6a 00                	push   $0x0
c0100406:	68 74 00 10 c0       	push   $0xc0100074
c010040b:	6a 08                	push   $0x8
c010040d:	6a 01                	push   $0x1
c010040f:	6a 01                	push   $0x1
c0100411:	e8 eb fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 2, 1, GD_KT, (uint32_t)  isr2, DPL_KERN);
c0100416:	83 c4 14             	add    $0x14,%esp
c0100419:	6a 00                	push   $0x0
c010041b:	68 7c 00 10 c0       	push   $0xc010007c
c0100420:	6a 08                	push   $0x8
c0100422:	6a 01                	push   $0x1
c0100424:	6a 02                	push   $0x2
c0100426:	e8 d6 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 3, 1, GD_KT, (uint32_t)  isr3, DPL_USER);
c010042b:	83 c4 14             	add    $0x14,%esp
c010042e:	6a 03                	push   $0x3
c0100430:	68 84 00 10 c0       	push   $0xc0100084
c0100435:	6a 08                	push   $0x8
c0100437:	6a 01                	push   $0x1
c0100439:	6a 03                	push   $0x3
c010043b:	e8 c1 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 4, 1, GD_KT, (uint32_t)  isr4, DPL_KERN);
c0100440:	83 c4 14             	add    $0x14,%esp
c0100443:	6a 00                	push   $0x0
c0100445:	68 8c 00 10 c0       	push   $0xc010008c
c010044a:	6a 08                	push   $0x8
c010044c:	6a 01                	push   $0x1
c010044e:	6a 04                	push   $0x4
c0100450:	e8 ac fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 5, 1, GD_KT, (uint32_t)  isr5, DPL_KERN);
c0100455:	83 c4 14             	add    $0x14,%esp
c0100458:	6a 00                	push   $0x0
c010045a:	68 94 00 10 c0       	push   $0xc0100094
c010045f:	6a 08                	push   $0x8
c0100461:	6a 01                	push   $0x1
c0100463:	6a 05                	push   $0x5
c0100465:	e8 97 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 6, 1, GD_KT, (uint32_t)  isr6, DPL_KERN);
c010046a:	83 c4 14             	add    $0x14,%esp
c010046d:	6a 00                	push   $0x0
c010046f:	68 9c 00 10 c0       	push   $0xc010009c
c0100474:	6a 08                	push   $0x8
c0100476:	6a 01                	push   $0x1
c0100478:	6a 06                	push   $0x6
c010047a:	e8 82 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 7, 1, GD_KT, (uint32_t)  isr7, DPL_KERN);
c010047f:	83 c4 14             	add    $0x14,%esp
c0100482:	6a 00                	push   $0x0
c0100484:	68 a4 00 10 c0       	push   $0xc01000a4
c0100489:	6a 08                	push   $0x8
c010048b:	6a 01                	push   $0x1
c010048d:	6a 07                	push   $0x7
c010048f:	e8 6d fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate( 8, 1, GD_KT, (uint32_t)  isr8, DPL_KERN);
c0100494:	83 c4 14             	add    $0x14,%esp
c0100497:	6a 00                	push   $0x0
c0100499:	68 ac 00 10 c0       	push   $0xc01000ac
c010049e:	6a 08                	push   $0x8
c01004a0:	6a 01                	push   $0x1
c01004a2:	6a 08                	push   $0x8
c01004a4:	e8 58 fe ff ff       	call   c0100301 <idt_set_gate>

    idt_set_gate(10, 1, GD_KT, (uint32_t) isr10, DPL_KERN);
c01004a9:	83 c4 14             	add    $0x14,%esp
c01004ac:	6a 00                	push   $0x0
c01004ae:	68 b2 00 10 c0       	push   $0xc01000b2
c01004b3:	6a 08                	push   $0x8
c01004b5:	6a 01                	push   $0x1
c01004b7:	6a 0a                	push   $0xa
c01004b9:	e8 43 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(11, 1, GD_KT, (uint32_t) isr11, DPL_KERN);
c01004be:	83 c4 14             	add    $0x14,%esp
c01004c1:	6a 00                	push   $0x0
c01004c3:	68 b8 00 10 c0       	push   $0xc01000b8
c01004c8:	6a 08                	push   $0x8
c01004ca:	6a 01                	push   $0x1
c01004cc:	6a 0b                	push   $0xb
c01004ce:	e8 2e fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(12, 1, GD_KT, (uint32_t) isr12, DPL_KERN);
c01004d3:	83 c4 14             	add    $0x14,%esp
c01004d6:	6a 00                	push   $0x0
c01004d8:	68 be 00 10 c0       	push   $0xc01000be
c01004dd:	6a 08                	push   $0x8
c01004df:	6a 01                	push   $0x1
c01004e1:	6a 0c                	push   $0xc
c01004e3:	e8 19 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(13, 1, GD_KT, (uint32_t) isr13, DPL_KERN);
c01004e8:	83 c4 14             	add    $0x14,%esp
c01004eb:	6a 00                	push   $0x0
c01004ed:	68 c4 00 10 c0       	push   $0xc01000c4
c01004f2:	6a 08                	push   $0x8
c01004f4:	6a 01                	push   $0x1
c01004f6:	6a 0d                	push   $0xd
c01004f8:	e8 04 fe ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(14, 1, GD_KT, (uint32_t) isr14, DPL_KERN);
c01004fd:	83 c4 14             	add    $0x14,%esp
c0100500:	6a 00                	push   $0x0
c0100502:	68 ca 00 10 c0       	push   $0xc01000ca
c0100507:	6a 08                	push   $0x8
c0100509:	6a 01                	push   $0x1
c010050b:	6a 0e                	push   $0xe
c010050d:	e8 ef fd ff ff       	call   c0100301 <idt_set_gate>

    idt_set_gate(16, 1, GD_KT, (uint32_t) isr16, DPL_KERN);
c0100512:	83 c4 14             	add    $0x14,%esp
c0100515:	6a 00                	push   $0x0
c0100517:	68 d0 00 10 c0       	push   $0xc01000d0
c010051c:	6a 08                	push   $0x8
c010051e:	6a 01                	push   $0x1
c0100520:	6a 10                	push   $0x10
c0100522:	e8 da fd ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(17, 1, GD_KT, (uint32_t) isr17, DPL_KERN);
c0100527:	83 c4 14             	add    $0x14,%esp
c010052a:	6a 00                	push   $0x0
c010052c:	68 d8 00 10 c0       	push   $0xc01000d8
c0100531:	6a 08                	push   $0x8
c0100533:	6a 01                	push   $0x1
c0100535:	6a 11                	push   $0x11
c0100537:	e8 c5 fd ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(18, 1, GD_KT, (uint32_t) isr18, DPL_KERN);
c010053c:	83 c4 14             	add    $0x14,%esp
c010053f:	6a 00                	push   $0x0
c0100541:	68 e0 00 10 c0       	push   $0xc01000e0
c0100546:	6a 08                	push   $0x8
c0100548:	6a 01                	push   $0x1
c010054a:	6a 12                	push   $0x12
c010054c:	e8 b0 fd ff ff       	call   c0100301 <idt_set_gate>
    idt_set_gate(19, 1, GD_KT, (uint32_t) isr19, DPL_KERN);
c0100551:	83 c4 14             	add    $0x14,%esp
c0100554:	6a 00                	push   $0x0
c0100556:	68 e8 00 10 c0       	push   $0xc01000e8
c010055b:	6a 08                	push   $0x8
c010055d:	6a 01                	push   $0x1
c010055f:	6a 13                	push   $0x13
c0100561:	e8 9b fd ff ff       	call   c0100301 <idt_set_gate>

    idt_set_gate(48, 0, GD_KT, (uint32_t) isr48, DPL_USER);
c0100566:	83 c4 14             	add    $0x14,%esp
c0100569:	6a 03                	push   $0x3
c010056b:	68 f0 00 10 c0       	push   $0xc01000f0
c0100570:	6a 08                	push   $0x8
c0100572:	6a 00                	push   $0x0
c0100574:	6a 30                	push   $0x30
c0100576:	e8 86 fd ff ff       	call   c0100301 <idt_set_gate>
}
c010057b:	83 c4 20             	add    $0x20,%esp
c010057e:	c9                   	leave  
c010057f:	c3                   	ret    

c0100580 <isr_handler>:
    "Reserved",
    "Reserved",
    "Reserved"
};

void isr_handler(struct trapframe* r) {
c0100580:	55                   	push   %ebp
c0100581:	89 e5                	mov    %esp,%ebp
c0100583:	53                   	push   %ebx
c0100584:	51                   	push   %ecx
c0100585:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(r != NULL);
c0100588:	85 db                	test   %ebx,%ebx
c010058a:	75 28                	jne    c01005b4 <isr_handler+0x34>
c010058c:	83 ec 0c             	sub    $0xc,%esp
c010058f:	68 4c 01 11 c0       	push   $0xc011014c
c0100594:	6a 7e                	push   $0x7e
c0100596:	68 20 ff 10 c0       	push   $0xc010ff20
c010059b:	68 88 18 11 c0       	push   $0xc0111888
c01005a0:	68 2b ff 10 c0       	push   $0xc010ff2b
c01005a5:	e8 be 3c 00 00       	call   c0104268 <print>
c01005aa:	83 c4 20             	add    $0x20,%esp
c01005ad:	e8 d1 09 00 00       	call   c0100f83 <backtrace>
c01005b2:	fa                   	cli    
c01005b3:	f4                   	hlt    

    switch (r->int_no) {
c01005b4:	83 7b 28 30          	cmpl   $0x30,0x28(%ebx)
c01005b8:	75 2a                	jne    c01005e4 <isr_handler+0x64>
        case ISR_SYSCALL: {
            thisthread->context = r;
c01005ba:	e8 f7 22 00 00       	call   c01028b6 <cpunum>
c01005bf:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01005c6:	8b 40 08             	mov    0x8(%eax),%eax
c01005c9:	89 18                	mov    %ebx,(%eax)
            uint32_t syscallno = r->eax;
            uint32_t arg1 = r->edx;
            uint32_t arg2 = r->ecx;
            uint32_t arg3 = r->ebx;
            r->eax = syscall(syscallno, arg1, arg2, arg3);
c01005cb:	ff 73 18             	pushl  0x18(%ebx)
c01005ce:	ff 73 20             	pushl  0x20(%ebx)
c01005d1:	ff 73 1c             	pushl  0x1c(%ebx)
c01005d4:	ff 73 24             	pushl  0x24(%ebx)
c01005d7:	e8 db 03 00 00       	call   c01009b7 <syscall>
c01005dc:	89 43 24             	mov    %eax,0x24(%ebx)
            }

            for (;;);
        }
    }
}
c01005df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01005e2:	c9                   	leave  
c01005e3:	c3                   	ret    
            uint32_t arg3 = r->ebx;
            r->eax = syscall(syscallno, arg1, arg2, arg3);
            break;
        }
        default: {
            print("\n\t>>> ");
c01005e4:	83 ec 0c             	sub    $0xc,%esp
c01005e7:	68 55 ff 10 c0       	push   $0xc010ff55
c01005ec:	e8 77 3c 00 00       	call   c0104268 <print>
            if (r->int_no < 32) {
c01005f1:	8b 43 28             	mov    0x28(%ebx),%eax
c01005f4:	83 c4 10             	add    $0x10,%esp
c01005f7:	83 f8 1f             	cmp    $0x1f,%eax
c01005fa:	77 1a                	ja     c0100616 <isr_handler+0x96>
                print("Exception: ");
c01005fc:	83 ec 0c             	sub    $0xc,%esp
c01005ff:	68 5c ff 10 c0       	push   $0xc010ff5c
c0100604:	e8 5f 3c 00 00       	call   c0104268 <print>
                print(exception_messages[r->int_no]);
c0100609:	5a                   	pop    %edx
c010060a:	8b 43 28             	mov    0x28(%ebx),%eax
c010060d:	ff 34 85 60 01 11 c0 	pushl  -0x3feefea0(,%eax,4)
c0100614:	eb 26                	jmp    c010063c <isr_handler+0xbc>
            } else if(r->int_no < 48)
c0100616:	83 f8 2f             	cmp    $0x2f,%eax
c0100619:	77 0a                	ja     c0100625 <isr_handler+0xa5>
                print("Interrupt Request");
c010061b:	83 ec 0c             	sub    $0xc,%esp
c010061e:	68 68 ff 10 c0       	push   $0xc010ff68
c0100623:	eb 17                	jmp    c010063c <isr_handler+0xbc>
            else if (r->int_no == 48)
c0100625:	83 f8 30             	cmp    $0x30,%eax
c0100628:	75 0a                	jne    c0100634 <isr_handler+0xb4>
                print("System Call");
c010062a:	83 ec 0c             	sub    $0xc,%esp
c010062d:	68 7a ff 10 c0       	push   $0xc010ff7a
c0100632:	eb 08                	jmp    c010063c <isr_handler+0xbc>
            else
                print("Unanticipated exception");
c0100634:	83 ec 0c             	sub    $0xc,%esp
c0100637:	68 86 ff 10 c0       	push   $0xc010ff86
c010063c:	e8 27 3c 00 00       	call   c0104268 <print>
c0100641:	83 c4 10             	add    $0x10,%esp
            print(" (%u).  System halted.\n\n", r->int_no);
c0100644:	50                   	push   %eax
c0100645:	50                   	push   %eax
c0100646:	ff 73 28             	pushl  0x28(%ebx)
c0100649:	68 9e ff 10 c0       	push   $0xc010ff9e
c010064e:	e8 15 3c 00 00       	call   c0104268 <print>

            if (r->int_no == 13) {
c0100653:	83 c4 10             	add    $0x10,%esp
c0100656:	83 7b 28 0d          	cmpl   $0xd,0x28(%ebx)
c010065a:	75 28                	jne    c0100684 <isr_handler+0x104>
                print_regs(thisthread->context);
c010065c:	e8 55 22 00 00       	call   c01028b6 <cpunum>
c0100661:	83 ec 0c             	sub    $0xc,%esp
c0100664:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010066b:	8b 40 08             	mov    0x8(%eax),%eax
c010066e:	ff 30                	pushl  (%eax)
c0100670:	e8 9c 09 00 00       	call   c0101011 <print_regs>
                print("\n");
c0100675:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010067c:	e8 e7 3b 00 00       	call   c0104268 <print>
c0100681:	83 c4 10             	add    $0x10,%esp
            }
            print_regs(r);
c0100684:	83 ec 0c             	sub    $0xc,%esp
c0100687:	53                   	push   %ebx
c0100688:	e8 84 09 00 00       	call   c0101011 <print_regs>
            print("\n");
c010068d:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c0100694:	e8 cf 3b 00 00       	call   c0104268 <print>

            if (isr_routines[r->int_no] != NULL)
c0100699:	8b 43 28             	mov    0x28(%ebx),%eax
c010069c:	8b 04 85 20 c8 14 c0 	mov    -0x3feb37e0(,%eax,4),%eax
c01006a3:	83 c4 10             	add    $0x10,%esp
c01006a6:	85 c0                	test   %eax,%eax
c01006a8:	74 09                	je     c01006b3 <isr_handler+0x133>
                isr_routines[r->int_no](r);
c01006aa:	83 ec 0c             	sub    $0xc,%esp
c01006ad:	53                   	push   %ebx
c01006ae:	ff d0                	call   *%eax
c01006b0:	83 c4 10             	add    $0x10,%esp

            static volatile bool backtraced;

            if (!backtraced) {
c01006b3:	a0 00 c8 14 c0       	mov    0xc014c800,%al
c01006b8:	84 c0                	test   %al,%al
c01006ba:	75 13                	jne    c01006cf <isr_handler+0x14f>
                backtraced = true;
c01006bc:	c6 05 00 c8 14 c0 01 	movb   $0x1,0xc014c800
                backtrace_regs(r);
c01006c3:	83 ec 0c             	sub    $0xc,%esp
c01006c6:	53                   	push   %ebx
c01006c7:	e8 1b 08 00 00       	call   c0100ee7 <backtrace_regs>
c01006cc:	83 c4 10             	add    $0x10,%esp
c01006cf:	eb fe                	jmp    c01006cf <isr_handler+0x14f>

c01006d1 <isr_install_handler>:
            for (;;);
        }
    }
}

void isr_install_handler(int isr, void (*handler)(struct trapframe* r)) {
c01006d1:	55                   	push   %ebp
c01006d2:	89 e5                	mov    %esp,%ebp
c01006d4:	53                   	push   %ebx
c01006d5:	50                   	push   %eax
c01006d6:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(isr < NISR);
c01006d9:	83 fb 1f             	cmp    $0x1f,%ebx
c01006dc:	7e 2b                	jle    c0100709 <isr_install_handler+0x38>
c01006de:	83 ec 0c             	sub    $0xc,%esp
c01006e1:	68 38 01 11 c0       	push   $0xc0110138
c01006e6:	68 ae 00 00 00       	push   $0xae
c01006eb:	68 20 ff 10 c0       	push   $0xc010ff20
c01006f0:	68 b7 ff 10 c0       	push   $0xc010ffb7
c01006f5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01006fa:	e8 69 3b 00 00       	call   c0104268 <print>
c01006ff:	83 c4 20             	add    $0x20,%esp
c0100702:	e8 7c 08 00 00       	call   c0100f83 <backtrace>
c0100707:	fa                   	cli    
c0100708:	f4                   	hlt    
    isr_routines[isr] = handler;
c0100709:	8b 45 0c             	mov    0xc(%ebp),%eax
c010070c:	89 04 9d 20 c8 14 c0 	mov    %eax,-0x3feb37e0(,%ebx,4)
}
c0100713:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100716:	c9                   	leave  
c0100717:	c3                   	ret    

c0100718 <isr_uninstall_handler>:

void isr_uninstall_handler(int isr) {
c0100718:	55                   	push   %ebp
c0100719:	89 e5                	mov    %esp,%ebp
c010071b:	53                   	push   %ebx
c010071c:	50                   	push   %eax
c010071d:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(isr < NISR);
c0100720:	83 fb 1f             	cmp    $0x1f,%ebx
c0100723:	7e 2b                	jle    c0100750 <isr_uninstall_handler+0x38>
c0100725:	83 ec 0c             	sub    $0xc,%esp
c0100728:	68 20 01 11 c0       	push   $0xc0110120
c010072d:	68 b3 00 00 00       	push   $0xb3
c0100732:	68 20 ff 10 c0       	push   $0xc010ff20
c0100737:	68 b7 ff 10 c0       	push   $0xc010ffb7
c010073c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0100741:	e8 22 3b 00 00       	call   c0104268 <print>
c0100746:	83 c4 20             	add    $0x20,%esp
c0100749:	e8 35 08 00 00       	call   c0100f83 <backtrace>
c010074e:	fa                   	cli    
c010074f:	f4                   	hlt    
    isr_routines[isr] = NULL;
c0100750:	c7 04 9d 20 c8 14 c0 	movl   $0x0,-0x3feb37e0(,%ebx,4)
c0100757:	00 00 00 00 
}
c010075b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010075e:	c9                   	leave  
c010075f:	c3                   	ret    

c0100760 <irq_install_handler>:
extern void irq12(void);
extern void irq13(void);
extern void irq14(void);
extern void irq15(void);

void irq_install_handler(int irq, void (*handler)(struct trapframe* r)) {
c0100760:	55                   	push   %ebp
c0100761:	89 e5                	mov    %esp,%ebp
c0100763:	53                   	push   %ebx
c0100764:	50                   	push   %eax
c0100765:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(irq < NIRQ);
c0100768:	83 fb 0f             	cmp    $0xf,%ebx
c010076b:	7e 28                	jle    c0100795 <irq_install_handler+0x35>
c010076d:	83 ec 0c             	sub    $0xc,%esp
c0100770:	68 10 02 11 c0       	push   $0xc0110210
c0100775:	6a 1c                	push   $0x1c
c0100777:	68 e0 01 11 c0       	push   $0xc01101e0
c010077c:	68 eb 01 11 c0       	push   $0xc01101eb
c0100781:	68 2b ff 10 c0       	push   $0xc010ff2b
c0100786:	e8 dd 3a 00 00       	call   c0104268 <print>
c010078b:	83 c4 20             	add    $0x20,%esp
c010078e:	e8 f0 07 00 00       	call   c0100f83 <backtrace>
c0100793:	fa                   	cli    
c0100794:	f4                   	hlt    
    irq_routines[irq] = handler;
c0100795:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100798:	89 04 9d a0 c8 14 c0 	mov    %eax,-0x3feb3760(,%ebx,4)
}
c010079f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01007a2:	c9                   	leave  
c01007a3:	c3                   	ret    

c01007a4 <irq_uninstall_handler>:

void irq_uninstall_handler(int irq) {
c01007a4:	55                   	push   %ebp
c01007a5:	89 e5                	mov    %esp,%ebp
c01007a7:	53                   	push   %ebx
c01007a8:	50                   	push   %eax
c01007a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(irq < NIRQ);
c01007ac:	83 fb 0f             	cmp    $0xf,%ebx
c01007af:	7e 28                	jle    c01007d9 <irq_uninstall_handler+0x35>
c01007b1:	83 ec 0c             	sub    $0xc,%esp
c01007b4:	68 f8 01 11 c0       	push   $0xc01101f8
c01007b9:	6a 21                	push   $0x21
c01007bb:	68 e0 01 11 c0       	push   $0xc01101e0
c01007c0:	68 eb 01 11 c0       	push   $0xc01101eb
c01007c5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01007ca:	e8 99 3a 00 00       	call   c0104268 <print>
c01007cf:	83 c4 20             	add    $0x20,%esp
c01007d2:	e8 ac 07 00 00       	call   c0100f83 <backtrace>
c01007d7:	fa                   	cli    
c01007d8:	f4                   	hlt    
    irq_routines[irq] = NULL;
c01007d9:	c7 04 9d a0 c8 14 c0 	movl   $0x0,-0x3feb3760(,%ebx,4)
c01007e0:	00 00 00 00 
}
c01007e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01007e7:	c9                   	leave  
c01007e8:	c3                   	ret    

c01007e9 <irq_remap>:

void irq_remap(void) {
c01007e9:	55                   	push   %ebp
c01007ea:	89 e5                	mov    %esp,%ebp
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c01007ec:	ba 20 00 00 00       	mov    $0x20,%edx
c01007f1:	b0 11                	mov    $0x11,%al
c01007f3:	ee                   	out    %al,(%dx)
c01007f4:	ba 21 00 00 00       	mov    $0x21,%edx
c01007f9:	b0 20                	mov    $0x20,%al
c01007fb:	ee                   	out    %al,(%dx)
c01007fc:	b0 04                	mov    $0x4,%al
c01007fe:	ee                   	out    %al,(%dx)
c01007ff:	b0 01                	mov    $0x1,%al
c0100801:	ee                   	out    %al,(%dx)
c0100802:	ba a0 00 00 00       	mov    $0xa0,%edx
c0100807:	b0 11                	mov    $0x11,%al
c0100809:	ee                   	out    %al,(%dx)
c010080a:	ba a1 00 00 00       	mov    $0xa1,%edx
c010080f:	b0 28                	mov    $0x28,%al
c0100811:	ee                   	out    %al,(%dx)
c0100812:	b0 02                	mov    $0x2,%al
c0100814:	ee                   	out    %al,(%dx)
c0100815:	b0 01                	mov    $0x1,%al
c0100817:	ee                   	out    %al,(%dx)
c0100818:	ba 21 00 00 00       	mov    $0x21,%edx
c010081d:	31 c0                	xor    %eax,%eax
c010081f:	ee                   	out    %al,(%dx)
c0100820:	ba a1 00 00 00       	mov    $0xa1,%edx
c0100825:	ee                   	out    %al,(%dx)
    outb(0xA1, 0x02);
    outb(0xA1, 0x01);

    outb(0x21, 0x00);
    outb(0xA1, 0x00);
}
c0100826:	5d                   	pop    %ebp
c0100827:	c3                   	ret    

c0100828 <init_irq>:

void init_irq(void) {
c0100828:	55                   	push   %ebp
c0100829:	89 e5                	mov    %esp,%ebp
c010082b:	83 ec 08             	sub    $0x8,%esp
    irq_remap();
c010082e:	e8 b6 ff ff ff       	call   c01007e9 <irq_remap>

    idt_set_gate2(IRQ_OFFSET + IRQ_TIMER,  (unsigned) irq0,  0x08, 0x8E);
c0100833:	68 8e 00 00 00       	push   $0x8e
c0100838:	6a 08                	push   $0x8
c010083a:	68 10 01 10 c0       	push   $0xc0100110
c010083f:	6a 20                	push   $0x20
c0100841:	e8 12 fb ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_KBD,    (unsigned) irq1,  0x08, 0x8E);
c0100846:	68 8e 00 00 00       	push   $0x8e
c010084b:	6a 08                	push   $0x8
c010084d:	68 17 01 10 c0       	push   $0xc0100117
c0100852:	6a 21                	push   $0x21
c0100854:	e8 ff fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SLAVE,  (unsigned) irq2,  0x08, 0x8E);
c0100859:	83 c4 20             	add    $0x20,%esp
c010085c:	68 8e 00 00 00       	push   $0x8e
c0100861:	6a 08                	push   $0x8
c0100863:	68 1e 01 10 c0       	push   $0xc010011e
c0100868:	6a 22                	push   $0x22
c010086a:	e8 e9 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SER2,   (unsigned) irq3,  0x08, 0x8E);
c010086f:	68 8e 00 00 00       	push   $0x8e
c0100874:	6a 08                	push   $0x8
c0100876:	68 25 01 10 c0       	push   $0xc0100125
c010087b:	6a 23                	push   $0x23
c010087d:	e8 d6 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SER1,   (unsigned) irq4,  0x08, 0x8E);
c0100882:	83 c4 20             	add    $0x20,%esp
c0100885:	68 8e 00 00 00       	push   $0x8e
c010088a:	6a 08                	push   $0x8
c010088c:	68 2c 01 10 c0       	push   $0xc010012c
c0100891:	6a 24                	push   $0x24
c0100893:	e8 c0 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SOUND,  (unsigned) irq5,  0x08, 0x8E);
c0100898:	68 8e 00 00 00       	push   $0x8e
c010089d:	6a 08                	push   $0x8
c010089f:	68 33 01 10 c0       	push   $0xc0100133
c01008a4:	6a 25                	push   $0x25
c01008a6:	e8 ad fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_FLOPPY, (unsigned) irq6,  0x08, 0x8E);
c01008ab:	83 c4 20             	add    $0x20,%esp
c01008ae:	68 8e 00 00 00       	push   $0x8e
c01008b3:	6a 08                	push   $0x8
c01008b5:	68 3a 01 10 c0       	push   $0xc010013a
c01008ba:	6a 26                	push   $0x26
c01008bc:	e8 97 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SPUR,   (unsigned) irq7,  0x08, 0x8E);
c01008c1:	68 8e 00 00 00       	push   $0x8e
c01008c6:	6a 08                	push   $0x8
c01008c8:	68 41 01 10 c0       	push   $0xc0100141
c01008cd:	6a 27                	push   $0x27
c01008cf:	e8 84 fa ff ff       	call   c0100358 <idt_set_gate2>

    idt_set_gate2(IRQ_OFFSET + IRQ_RTC,    (unsigned) irq8,  0x08, 0x8E);
c01008d4:	83 c4 20             	add    $0x20,%esp
c01008d7:	68 8e 00 00 00       	push   $0x8e
c01008dc:	6a 08                	push   $0x8
c01008de:	68 48 01 10 c0       	push   $0xc0100148
c01008e3:	6a 28                	push   $0x28
c01008e5:	e8 6e fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_ACPI,   (unsigned) irq9,  0x08, 0x8E);
c01008ea:	68 8e 00 00 00       	push   $0x8e
c01008ef:	6a 08                	push   $0x8
c01008f1:	68 4f 01 10 c0       	push   $0xc010014f
c01008f6:	6a 29                	push   $0x29
c01008f8:	e8 5b fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_SCSI,   (unsigned) irq10, 0x08, 0x8E);
c01008fd:	83 c4 20             	add    $0x20,%esp
c0100900:	68 8e 00 00 00       	push   $0x8e
c0100905:	6a 08                	push   $0x8
c0100907:	68 56 01 10 c0       	push   $0xc0100156
c010090c:	6a 2a                	push   $0x2a
c010090e:	e8 45 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_NIC,    (unsigned) irq11, 0x08, 0x8E);
c0100913:	68 8e 00 00 00       	push   $0x8e
c0100918:	6a 08                	push   $0x8
c010091a:	68 5d 01 10 c0       	push   $0xc010015d
c010091f:	6a 2b                	push   $0x2b
c0100921:	e8 32 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_MOUSE,  (unsigned) irq12, 0x08, 0x8E);
c0100926:	83 c4 20             	add    $0x20,%esp
c0100929:	68 8e 00 00 00       	push   $0x8e
c010092e:	6a 08                	push   $0x8
c0100930:	68 64 01 10 c0       	push   $0xc0100164
c0100935:	6a 2c                	push   $0x2c
c0100937:	e8 1c fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_FPU,    (unsigned) irq13, 0x08, 0x8E);
c010093c:	68 8e 00 00 00       	push   $0x8e
c0100941:	6a 08                	push   $0x8
c0100943:	68 6b 01 10 c0       	push   $0xc010016b
c0100948:	6a 2d                	push   $0x2d
c010094a:	e8 09 fa ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_IDE,    (unsigned) irq14, 0x08, 0x8E);
c010094f:	83 c4 20             	add    $0x20,%esp
c0100952:	68 8e 00 00 00       	push   $0x8e
c0100957:	6a 08                	push   $0x8
c0100959:	68 72 01 10 c0       	push   $0xc0100172
c010095e:	6a 2e                	push   $0x2e
c0100960:	e8 f3 f9 ff ff       	call   c0100358 <idt_set_gate2>
    idt_set_gate2(IRQ_OFFSET + IRQ_IPI,    (unsigned) irq15, 0x08, 0x8E);
c0100965:	68 8e 00 00 00       	push   $0x8e
c010096a:	6a 08                	push   $0x8
c010096c:	68 79 01 10 c0       	push   $0xc0100179
c0100971:	6a 2f                	push   $0x2f
c0100973:	e8 e0 f9 ff ff       	call   c0100358 <idt_set_gate2>
}
c0100978:	83 c4 20             	add    $0x20,%esp
c010097b:	c9                   	leave  
c010097c:	c3                   	ret    

c010097d <irq_handler>:

void irq_handler(struct trapframe* r) {
c010097d:	55                   	push   %ebp
c010097e:	89 e5                	mov    %esp,%ebp
c0100980:	53                   	push   %ebx
c0100981:	50                   	push   %eax
c0100982:	8b 5d 08             	mov    0x8(%ebp),%ebx
    // thisthread->context = r;

    void (*handler)(struct trapframe * r) = irq_routines[r->int_no - IRQ_OFFSET];
c0100985:	8b 43 28             	mov    0x28(%ebx),%eax
c0100988:	8b 04 85 20 c8 14 c0 	mov    -0x3feb37e0(,%eax,4),%eax
    if (handler)
c010098f:	85 c0                	test   %eax,%eax
c0100991:	74 09                	je     c010099c <irq_handler+0x1f>
        handler(r);
c0100993:	83 ec 0c             	sub    $0xc,%esp
c0100996:	53                   	push   %ebx
c0100997:	ff d0                	call   *%eax
c0100999:	83 c4 10             	add    $0x10,%esp

    if (r->int_no >= 0x28)
c010099c:	83 7b 28 27          	cmpl   $0x27,0x28(%ebx)
c01009a0:	76 08                	jbe    c01009aa <irq_handler+0x2d>
c01009a2:	ba a0 00 00 00       	mov    $0xa0,%edx
c01009a7:	b0 20                	mov    $0x20,%al
c01009a9:	ee                   	out    %al,(%dx)
c01009aa:	ba 20 00 00 00       	mov    $0x20,%edx
c01009af:	b0 20                	mov    $0x20,%al
c01009b1:	ee                   	out    %al,(%dx)
        outb(0xA0, 0x20);

    outb(0x20, 0x20);
}
c01009b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01009b5:	c9                   	leave  
c01009b6:	c3                   	ret    

c01009b7 <syscall>:
#include <syscall.h>
#include <int.h>
#include <thread.h>

int
syscall(uint32_t num, uint32_t a1, uint32_t a2, uint32_t a3) {
c01009b7:	55                   	push   %ebp
c01009b8:	89 e5                	mov    %esp,%ebp
c01009ba:	56                   	push   %esi
c01009bb:	53                   	push   %ebx
c01009bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01009bf:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c01009c2:	8b 75 10             	mov    0x10(%ebp),%esi
    (void) a3;

    int ret = 0;

    switch (num) {
c01009c5:	83 f8 01             	cmp    $0x1,%eax
c01009c8:	74 1f                	je     c01009e9 <syscall+0x32>
c01009ca:	72 0f                	jb     c01009db <syscall+0x24>
c01009cc:	83 f8 02             	cmp    $0x2,%eax
c01009cf:	74 29                	je     c01009fa <syscall+0x43>
c01009d1:	83 f8 03             	cmp    $0x3,%eax
c01009d4:	74 2d                	je     c0100a03 <syscall+0x4c>
c01009d6:	e9 8c 00 00 00       	jmp    c0100a67 <syscall+0xb0>
        case syscall_putc:
            putc((char) a1);
c01009db:	83 ec 0c             	sub    $0xc,%esp
c01009de:	0f be db             	movsbl %bl,%ebx
c01009e1:	53                   	push   %ebx
c01009e2:	e8 a5 9e 00 00       	call   c010a88c <putc>
c01009e7:	eb 09                	jmp    c01009f2 <syscall+0x3b>
            break;
        case syscall_exit:
            thread_exit((int) a1);
c01009e9:	83 ec 0c             	sub    $0xc,%esp
c01009ec:	53                   	push   %ebx
c01009ed:	e8 8e 7f 00 00       	call   c0108980 <thread_exit>
            break;
c01009f2:	83 c4 10             	add    $0x10,%esp
c01009f5:	e9 8a 00 00 00       	jmp    c0100a84 <syscall+0xcd>
        case syscall_thread_yield:
            thread_switch(S_READY, NULL, NULL);
c01009fa:	52                   	push   %edx
c01009fb:	6a 00                	push   $0x0
c01009fd:	6a 00                	push   $0x0
c01009ff:	6a 01                	push   $0x1
c0100a01:	eb 5d                	jmp    c0100a60 <syscall+0xa9>
            break;
        case syscall_thread_wait:
            assert(a1 != 0);
c0100a03:	85 db                	test   %ebx,%ebx
c0100a05:	75 28                	jne    c0100a2f <syscall+0x78>
c0100a07:	83 ec 0c             	sub    $0xc,%esp
c0100a0a:	68 5c 02 11 c0       	push   $0xc011025c
c0100a0f:	6a 17                	push   $0x17
c0100a11:	68 24 02 11 c0       	push   $0xc0110224
c0100a16:	68 33 02 11 c0       	push   $0xc0110233
c0100a1b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0100a20:	e8 43 38 00 00       	call   c0104268 <print>
c0100a25:	83 c4 20             	add    $0x20,%esp
c0100a28:	e8 56 05 00 00       	call   c0100f83 <backtrace>
c0100a2d:	fa                   	cli    
c0100a2e:	f4                   	hlt    
            assert(a2 != 0);
c0100a2f:	85 f6                	test   %esi,%esi
c0100a31:	75 28                	jne    c0100a5b <syscall+0xa4>
c0100a33:	83 ec 0c             	sub    $0xc,%esp
c0100a36:	68 5c 02 11 c0       	push   $0xc011025c
c0100a3b:	6a 18                	push   $0x18
c0100a3d:	68 24 02 11 c0       	push   $0xc0110224
c0100a42:	68 3b 02 11 c0       	push   $0xc011023b
c0100a47:	68 2b ff 10 c0       	push   $0xc010ff2b
c0100a4c:	e8 17 38 00 00       	call   c0104268 <print>
c0100a51:	83 c4 20             	add    $0x20,%esp
c0100a54:	e8 2a 05 00 00       	call   c0100f83 <backtrace>
c0100a59:	fa                   	cli    
c0100a5a:	f4                   	hlt    
            thread_switch(S_SLEEP, (struct wchan*) a1, (struct spinlock*) a2);
c0100a5b:	50                   	push   %eax
c0100a5c:	56                   	push   %esi
c0100a5d:	53                   	push   %ebx
c0100a5e:	6a 02                	push   $0x2
c0100a60:	e8 41 7b 00 00       	call   c01085a6 <thread_switch>
c0100a65:	eb 8b                	jmp    c01009f2 <syscall+0x3b>
            break;
        default:
            panic("unhandled syscall no: %u", num);
c0100a67:	83 ec 0c             	sub    $0xc,%esp
c0100a6a:	50                   	push   %eax
c0100a6b:	68 43 02 11 c0       	push   $0xc0110243
c0100a70:	68 5c 02 11 c0       	push   $0xc011025c
c0100a75:	6a 1c                	push   $0x1c
c0100a77:	68 24 02 11 c0       	push   $0xc0110224
c0100a7c:	e8 f4 31 00 00       	call   c0103c75 <_panic>
c0100a81:	83 c4 20             	add    $0x20,%esp
    }

    return ret;
}
c0100a84:	31 c0                	xor    %eax,%eax
c0100a86:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0100a89:	5b                   	pop    %ebx
c0100a8a:	5e                   	pop    %esi
c0100a8b:	5d                   	pop    %ebp
c0100a8c:	c3                   	ret    

c0100a8d <thread_yield>:

    return ret;
}

void
thread_yield(void) {
c0100a8d:	55                   	push   %ebp
c0100a8e:	89 e5                	mov    %esp,%ebp
c0100a90:	53                   	push   %ebx
    // potentially change the condition codes and arbitrary
    // memory locations.

    int ret;

    asm volatile(
c0100a91:	31 d2                	xor    %edx,%edx
c0100a93:	b8 02 00 00 00       	mov    $0x2,%eax
c0100a98:	89 d1                	mov    %edx,%ecx
c0100a9a:	89 d3                	mov    %edx,%ebx
c0100a9c:	cd 30                	int    $0x30
}

void
thread_yield(void) {
    _syscall(syscall_thread_yield, false, 0, 0, 0);
}
c0100a9e:	5b                   	pop    %ebx
c0100a9f:	5d                   	pop    %ebp
c0100aa0:	c3                   	ret    

c0100aa1 <thread_wait>:

void
thread_wait(struct wchan* wc, struct spinlock* lk) {
c0100aa1:	55                   	push   %ebp
c0100aa2:	89 e5                	mov    %esp,%ebp
c0100aa4:	53                   	push   %ebx
    // potentially change the condition codes and arbitrary
    // memory locations.

    int ret;

    asm volatile(
c0100aa5:	31 db                	xor    %ebx,%ebx
c0100aa7:	b8 03 00 00 00       	mov    $0x3,%eax
c0100aac:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0100aaf:	8b 55 08             	mov    0x8(%ebp),%edx
c0100ab2:	cd 30                	int    $0x30
}

void
thread_wait(struct wchan* wc, struct spinlock* lk) {
    _syscall(syscall_thread_wait, false, (uint32_t) wc, (uint32_t) lk, 0);
}
c0100ab4:	5b                   	pop    %ebx
c0100ab5:	5d                   	pop    %ebp
c0100ab6:	c3                   	ret    

c0100ab7 <kmain>:
    print("\n");
    settextcolor(VGA_NORMAL);
}

void
kmain(uint32_t eax, size_t ebx) {
c0100ab7:	55                   	push   %ebp
c0100ab8:	89 e5                	mov    %esp,%ebp
c0100aba:	57                   	push   %edi
c0100abb:	56                   	push   %esi
c0100abc:	53                   	push   %ebx
c0100abd:	83 ec 1c             	sub    $0x1c,%esp
    demand(*(uint16_t*) 0x7DFE == 0xAA55);  // Reboot if false
c0100ac0:	66 81 3d fe 7d 00 00 	cmpw   $0xaa55,0x7dfe
c0100ac7:	55 aa 
c0100ac9:	74 08                	je     c0100ad3 <kmain+0x1c>
c0100acb:	ba 92 00 00 00       	mov    $0x92,%edx
c0100ad0:	b0 03                	mov    $0x3,%al
c0100ad2:	ee                   	out    %al,(%dx)
    demand(eax == 0x2BADB002);
c0100ad3:	81 7d 08 02 b0 ad 2b 	cmpl   $0x2badb002,0x8(%ebp)
c0100ada:	74 08                	je     c0100ae4 <kmain+0x2d>
c0100adc:	ba 92 00 00 00       	mov    $0x92,%edx
c0100ae1:	b0 03                	mov    $0x3,%al
c0100ae3:	ee                   	out    %al,(%dx)

    extern char _bss[], _ebss[];            // Init static data to zero
    memset(_bss, 0, _ebss - _bss);
c0100ae4:	51                   	push   %ecx
c0100ae5:	b8 08 f0 18 c0       	mov    $0xc018f008,%eax
c0100aea:	2d 00 c0 14 c0       	sub    $0xc014c000,%eax
c0100aef:	50                   	push   %eax
c0100af0:	6a 00                	push   $0x0
c0100af2:	68 00 c0 14 c0       	push   $0xc014c000
c0100af7:	e8 2e 3e 00 00       	call   c010492a <memset>

    init_cga();
c0100afc:	e8 9e 1a 00 00       	call   c010259f <init_cga>
    init_serial();
c0100b01:	e8 b9 21 00 00       	call   c0102cbf <init_serial>

    init_e820(ebx);
c0100b06:	5b                   	pop    %ebx
c0100b07:	ff 75 0c             	pushl  0xc(%ebp)
c0100b0a:	e8 dc 1a 00 00       	call   c01025eb <init_e820>

    init_gdt();
c0100b0f:	e8 74 f7 ff ff       	call   c0100288 <init_gdt>
    init_idt();
c0100b14:	e8 a1 f8 ff ff       	call   c01003ba <init_idt>
    init_isr();
c0100b19:	e8 cb f8 ff ff       	call   c01003e9 <init_isr>
    init_irq();
c0100b1e:	e8 05 fd ff ff       	call   c0100828 <init_irq>
    init_pit();
c0100b23:	e8 f5 20 00 00       	call   c0102c1d <init_pit>
    init_kbd();
c0100b28:	e8 5f 1d 00 00       	call   c010288c <init_kbd>

    init_rand();
c0100b2d:	e8 e7 3f 00 00       	call   c0104b19 <init_rand>

    init_mem();
c0100b32:	e8 b1 0f 00 00       	call   c0101ae8 <init_mem>
    init_kmm();
c0100b37:	e8 7e 0b 00 00       	call   c01016ba <init_kmm>
    init_pmm();
c0100b3c:	e8 ff 05 00 00       	call   c0101140 <init_pmm>
    init_vmm();
c0100b41:	e8 3c 0e 00 00       	call   c0101982 <init_vmm>

    init_acpi();
c0100b46:	e8 8a 16 00 00       	call   c01021d5 <init_acpi>

    init_wchan();
c0100b4b:	e8 42 2d 00 00       	call   c0103892 <init_wchan>

    // init_thread();
    init_smp();
c0100b50:	e8 a5 8a 00 00       	call   c01095fa <init_smp>
    init_cpu();
c0100b55:	e8 5e 8c 00 00       	call   c01097b8 <init_cpu>

    init_proc();
c0100b5a:	e8 40 96 00 00       	call   c010a19f <init_proc>

    init_lapic();
c0100b5f:	e8 b8 1d 00 00       	call   c010291c <init_lapic>
        "\t\t        _/  _/  _/    _/    _/_/           _/    _/    _/_/    \n",
        "\t\t _/    _/  _/  _/    _/  _/    _/         _/    _/        _/   \n",
        "\t\t  _/_/    _/  _/    _/  _/    _/           _/_/    _/_/_/      \n",
    };

    print("\n");
c0100b64:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c0100b6b:	e8 f8 36 00 00       	call   c0104268 <print>
c0100b70:	83 c4 10             	add    $0x10,%esp
    for (int i = 0, k = 0; i < 5; ++i, k = 0) {
c0100b73:	31 f6                	xor    %esi,%esi
    print("\n");
    settextcolor(VGA_NORMAL);
}

void
kmain(uint32_t eax, size_t ebx) {
c0100b75:	31 ff                	xor    %edi,%edi
c0100b77:	b8 06 00 00 00       	mov    $0x6,%eax
c0100b7c:	29 f0                	sub    %esi,%eax
c0100b7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100b81:	8b 1c b5 d8 03 11 c0 	mov    -0x3feefc28(,%esi,4),%ebx
        "\t\t  _/_/    _/  _/    _/  _/    _/           _/_/    _/_/_/      \n",
    };

    print("\n");
    for (int i = 0, k = 0; i < 5; ++i, k = 0) {
        for (int j = 0; j < 6 - i; ++j, ++k)    // whitespace
c0100b88:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
c0100b8b:	7d 13                	jge    c0100ba0 <kmain+0xe9>
            putc(title[i][k]);
c0100b8d:	83 ec 0c             	sub    $0xc,%esp
c0100b90:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
c0100b94:	50                   	push   %eax
c0100b95:	e8 f2 9c 00 00       	call   c010a88c <putc>
        "\t\t  _/_/    _/  _/    _/  _/    _/           _/_/    _/_/_/      \n",
    };

    print("\n");
    for (int i = 0, k = 0; i < 5; ++i, k = 0) {
        for (int j = 0; j < 6 - i; ++j, ++k)    // whitespace
c0100b9a:	47                   	inc    %edi
c0100b9b:	83 c4 10             	add    $0x10,%esp
c0100b9e:	eb e8                	jmp    c0100b88 <kmain+0xd1>
c0100ba0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c0100ba3:	85 ff                	test   %edi,%edi
c0100ba5:	79 02                	jns    c0100ba9 <kmain+0xf2>
c0100ba7:	31 ff                	xor    %edi,%edi
            putc(title[i][k]);
        settextcolor(VGA_DGREEN);
c0100ba9:	83 ec 0c             	sub    $0xc,%esp
c0100bac:	68 00 02 00 00       	push   $0x200
c0100bb1:	e8 db 19 00 00       	call   c0102591 <settextcolor>
c0100bb6:	89 7d e0             	mov    %edi,-0x20(%ebp)
c0100bb9:	8d 47 20             	lea    0x20(%edi),%eax
c0100bbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100bbf:	83 c4 10             	add    $0x10,%esp
        for (int j = 0; j < 32; ++j, ++k)       // "Jinx"
            putc(title[i][k]);
c0100bc2:	83 ec 0c             	sub    $0xc,%esp
c0100bc5:	0f be 14 3b          	movsbl (%ebx,%edi,1),%edx
c0100bc9:	52                   	push   %edx
c0100bca:	e8 bd 9c 00 00       	call   c010a88c <putc>
    print("\n");
    for (int i = 0, k = 0; i < 5; ++i, k = 0) {
        for (int j = 0; j < 6 - i; ++j, ++k)    // whitespace
            putc(title[i][k]);
        settextcolor(VGA_DGREEN);
        for (int j = 0; j < 32; ++j, ++k)       // "Jinx"
c0100bcf:	47                   	inc    %edi
c0100bd0:	83 c4 10             	add    $0x10,%esp
c0100bd3:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
c0100bd6:	75 ea                	jne    c0100bc2 <kmain+0x10b>
            putc(title[i][k]);
        settextcolor(VGA_DGREY);
c0100bd8:	83 ec 0c             	sub    $0xc,%esp
c0100bdb:	68 00 08 00 00       	push   $0x800
c0100be0:	e8 ac 19 00 00       	call   c0102591 <settextcolor>
c0100be5:	83 c4 10             	add    $0x10,%esp
        for (int j = 0; j < 27; ++j, ++k)       // "OS"
c0100be8:	31 ff                	xor    %edi,%edi
            putc(title[i][k]);
c0100bea:	03 5d e0             	add    -0x20(%ebp),%ebx
c0100bed:	83 ec 0c             	sub    $0xc,%esp
c0100bf0:	0f be 44 3b 20       	movsbl 0x20(%ebx,%edi,1),%eax
c0100bf5:	50                   	push   %eax
c0100bf6:	e8 91 9c 00 00       	call   c010a88c <putc>
            putc(title[i][k]);
        settextcolor(VGA_DGREEN);
        for (int j = 0; j < 32; ++j, ++k)       // "Jinx"
            putc(title[i][k]);
        settextcolor(VGA_DGREY);
        for (int j = 0; j < 27; ++j, ++k)       // "OS"
c0100bfb:	47                   	inc    %edi
c0100bfc:	83 c4 10             	add    $0x10,%esp
c0100bff:	83 ff 1b             	cmp    $0x1b,%edi
c0100c02:	75 e9                	jne    c0100bed <kmain+0x136>
            putc(title[i][k]);
        putc('\n');
c0100c04:	83 ec 0c             	sub    $0xc,%esp
c0100c07:	6a 0a                	push   $0xa
c0100c09:	e8 7e 9c 00 00       	call   c010a88c <putc>
        "\t\t _/    _/  _/  _/    _/  _/    _/         _/    _/        _/   \n",
        "\t\t  _/_/    _/  _/    _/  _/    _/           _/_/    _/_/_/      \n",
    };

    print("\n");
    for (int i = 0, k = 0; i < 5; ++i, k = 0) {
c0100c0e:	46                   	inc    %esi
c0100c0f:	83 c4 10             	add    $0x10,%esp
c0100c12:	83 fe 05             	cmp    $0x5,%esi
c0100c15:	0f 85 5a ff ff ff    	jne    c0100b75 <kmain+0xbe>
        settextcolor(VGA_DGREY);
        for (int j = 0; j < 27; ++j, ++k)       // "OS"
            putc(title[i][k]);
        putc('\n');
    }
    print("\n");
c0100c1b:	83 ec 0c             	sub    $0xc,%esp
c0100c1e:	68 35 04 11 c0       	push   $0xc0110435
c0100c23:	e8 40 36 00 00       	call   c0104268 <print>
    settextcolor(VGA_NORMAL);
c0100c28:	c7 04 24 00 0f 00 00 	movl   $0xf00,(%esp)
c0100c2f:	e8 5d 19 00 00       	call   c0102591 <settextcolor>

    init_lapic();

    jinx();

    proc_binary(user_hello);
c0100c34:	58                   	pop    %eax
c0100c35:	5a                   	pop    %edx
c0100c36:	68 20 53 14 c0       	push   $0xc0145320
c0100c3b:	68 64 02 11 c0       	push   $0xc0110264
c0100c40:	e8 6a 92 00 00       	call   c0109eaf <proc_program>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c0100c45:	fb                   	sti    

    // init_speaker();

    // thread_yield();

    print("userspace programs exited.\n");
c0100c46:	c7 04 24 6c 02 11 c0 	movl   $0xc011026c,(%esp)
c0100c4d:	e8 16 36 00 00       	call   c0104268 <print>
c0100c52:	83 c4 10             	add    $0x10,%esp

    for (;;)
        prompt();
c0100c55:	e8 0f 9d 00 00       	call   c010a969 <prompt>
c0100c5a:	eb f9                	jmp    c0100c55 <kmain+0x19e>

c0100c5c <stab_binsearch>:
//      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
//  will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct stab* stabs, int* region_left, int* region_right,
               int type, size_t addr) {
c0100c5c:	55                   	push   %ebp
c0100c5d:	89 e5                	mov    %esp,%ebp
c0100c5f:	57                   	push   %edi
c0100c60:	56                   	push   %esi
c0100c61:	53                   	push   %ebx
c0100c62:	83 ec 14             	sub    $0x14,%esp
c0100c65:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100c68:	89 d3                	mov    %edx,%ebx
c0100c6a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
    int l = *region_left, r = *region_right, any_matches = 0;
c0100c6d:	8b 3a                	mov    (%edx),%edi
c0100c6f:	8b 01                	mov    (%ecx),%eax
c0100c71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100c74:	31 f6                	xor    %esi,%esi

    while (l <= r) {
c0100c76:	3b 7d f0             	cmp    -0x10(%ebp),%edi
c0100c79:	7f 64                	jg     c0100cdf <stab_binsearch+0x83>
        int true_m = (l + r) / 2, m = true_m;
c0100c7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c7e:	01 f8                	add    %edi,%eax
c0100c80:	b9 02 00 00 00       	mov    $0x2,%ecx
c0100c85:	99                   	cltd   
c0100c86:	f7 f9                	idiv   %ecx
c0100c88:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100c8b:	6b c0 0c             	imul   $0xc,%eax,%eax
c0100c8e:	03 45 e0             	add    -0x20(%ebp),%eax
c0100c91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100c94:	8b 45 e8             	mov    -0x18(%ebp),%eax

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type)
c0100c97:	39 c7                	cmp    %eax,%edi
c0100c99:	7f 13                	jg     c0100cae <stab_binsearch+0x52>
c0100c9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c9e:	83 6d e4 0c          	subl   $0xc,-0x1c(%ebp)
c0100ca2:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
c0100ca6:	3b 4d 08             	cmp    0x8(%ebp),%ecx
c0100ca9:	74 09                	je     c0100cb4 <stab_binsearch+0x58>
            m--;
c0100cab:	48                   	dec    %eax
c0100cac:	eb e9                	jmp    c0100c97 <stab_binsearch+0x3b>
        if (m < l) {    // no match in [l, m]
            l = true_m + 1;
c0100cae:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0100cb1:	47                   	inc    %edi
            continue;
c0100cb2:	eb c2                	jmp    c0100c76 <stab_binsearch+0x1a>
        }

        // actual binary search
        any_matches = 1;
        if (stabs[m].n_value < addr) {
c0100cb4:	8b 72 08             	mov    0x8(%edx),%esi
c0100cb7:	39 75 0c             	cmp    %esi,0xc(%ebp)
c0100cba:	76 08                	jbe    c0100cc4 <stab_binsearch+0x68>
            *region_left = m;
c0100cbc:	89 03                	mov    %eax,(%ebx)
            l = true_m + 1;
c0100cbe:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0100cc1:	47                   	inc    %edi
c0100cc2:	eb 14                	jmp    c0100cd8 <stab_binsearch+0x7c>
        } else if (stabs[m].n_value > addr) {
c0100cc4:	73 0b                	jae    c0100cd1 <stab_binsearch+0x75>
            *region_right = m - 1;
c0100cc6:	48                   	dec    %eax
c0100cc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100cca:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0100ccd:	89 06                	mov    %eax,(%esi)
c0100ccf:	eb 07                	jmp    c0100cd8 <stab_binsearch+0x7c>
            r = m - 1;
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c0100cd1:	89 03                	mov    %eax,(%ebx)
            l = m;
            addr++;
c0100cd3:	ff 45 0c             	incl   0xc(%ebp)
c0100cd6:	89 c7                	mov    %eax,%edi
            l = true_m + 1;
            continue;
        }

        // actual binary search
        any_matches = 1;
c0100cd8:	be 01 00 00 00       	mov    $0x1,%esi
c0100cdd:	eb 97                	jmp    c0100c76 <stab_binsearch+0x1a>
            l = m;
            addr++;
        }
    }

    if (!any_matches)
c0100cdf:	85 f6                	test   %esi,%esi
c0100ce1:	8b 13                	mov    (%ebx),%edx
c0100ce3:	75 08                	jne    c0100ced <stab_binsearch+0x91>
        *region_right = *region_left - 1;
c0100ce5:	4a                   	dec    %edx
c0100ce6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100ce9:	89 10                	mov    %edx,(%eax)
c0100ceb:	eb 1e                	jmp    c0100d0b <stab_binsearch+0xaf>
    else {
        // find rightmost region containing 'addr'
        for (l = *region_right;
c0100ced:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100cf0:	8b 00                	mov    (%eax),%eax
c0100cf2:	39 d0                	cmp    %edx,%eax
c0100cf4:	7e 13                	jle    c0100d09 <stab_binsearch+0xad>
                l > *region_left && stabs[l].n_type != type;
c0100cf6:	6b c8 0c             	imul   $0xc,%eax,%ecx
c0100cf9:	8b 75 e0             	mov    -0x20(%ebp),%esi
c0100cfc:	0f b6 4c 0e 04       	movzbl 0x4(%esi,%ecx,1),%ecx
c0100d01:	39 4d 08             	cmp    %ecx,0x8(%ebp)
c0100d04:	74 03                	je     c0100d09 <stab_binsearch+0xad>
                l--)
c0100d06:	48                   	dec    %eax
c0100d07:	eb e9                	jmp    c0100cf2 <stab_binsearch+0x96>
            /* do nothing */;
        *region_left = l;
c0100d09:	89 03                	mov    %eax,(%ebx)
    }
}
c0100d0b:	83 c4 14             	add    $0x14,%esp
c0100d0e:	5b                   	pop    %ebx
c0100d0f:	5e                   	pop    %esi
c0100d10:	5f                   	pop    %edi
c0100d11:	5d                   	pop    %ebp
c0100d12:	c3                   	ret    

c0100d13 <debuginfo_eip>:
//  instruction address, 'addr'.  Returns 0 if information was found, and
//  negative if not.  But even if it returns negative it has stored some
//  information into '*info'.
//
int
debuginfo_eip(size_t addr, struct debuginfo* info) {
c0100d13:	55                   	push   %ebp
c0100d14:	89 e5                	mov    %esp,%ebp
c0100d16:	57                   	push   %edi
c0100d17:	56                   	push   %esi
c0100d18:	53                   	push   %ebx
c0100d19:	83 ec 3c             	sub    $0x3c,%esp
c0100d1c:	8b 75 08             	mov    0x8(%ebp),%esi
c0100d1f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    const struct stab* stabs, *stab_end;
    const char* stabstr, *stabstr_end;
    int lfile, rfile, lfun, rfun, lline, rline;

    // Initialize *info
    info->dbg_file = "<unknown>";
c0100d22:	c7 03 ec 03 11 c0    	movl   $0xc01103ec,(%ebx)
    info->dbg_line = 0;
c0100d28:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    info->dbg_fn_name = "<unknown>";
c0100d2f:	c7 43 08 ec 03 11 c0 	movl   $0xc01103ec,0x8(%ebx)
    info->dbg_fn_namelen = 9;
c0100d36:	c7 43 0c 09 00 00 00 	movl   $0x9,0xc(%ebx)
    info->dbg_fn_addr = addr;
c0100d3d:	89 73 10             	mov    %esi,0x10(%ebx)
    info->dbg_fn_narg = 0;
c0100d40:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)

    // Find the relevant set of stabs
    if (addr >= 0xbf800000) {
c0100d47:	81 fe ff ff 7f bf    	cmp    $0xbf7fffff,%esi
c0100d4d:	77 1f                	ja     c0100d6e <debuginfo_eip+0x5b>
        stabstr_end = _estabstr;
    } else {
        // Can't search for user-level addresses yet!
        // backtrace();
        const struct ustab* ustab = (const struct ustab*) USTABDATA;
        stabs = ustab->stabs;
c0100d4f:	8b 3d 00 00 20 00    	mov    0x200000,%edi
        stab_end = ustab->stab_end;
c0100d55:	a1 04 00 20 00       	mov    0x200004,%eax
        stabstr = ustab->stabstr;
c0100d5a:	8b 0d 08 00 20 00    	mov    0x200008,%ecx
c0100d60:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
        stabstr_end = ustab->stabstr_end;
c0100d63:	8b 0d 0c 00 20 00    	mov    0x20000c,%ecx
c0100d69:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c0100d6c:	eb 18                	jmp    c0100d86 <debuginfo_eip+0x73>
    // Find the relevant set of stabs
    if (addr >= 0xbf800000) {
        stabs = _stab;
        stab_end = _estab;
        stabstr = _stabstr;
        stabstr_end = _estabstr;
c0100d6e:	c7 45 c0 c3 bc 13 c0 	movl   $0xc013bcc3,-0x40(%ebp)

    // Find the relevant set of stabs
    if (addr >= 0xbf800000) {
        stabs = _stab;
        stab_end = _estab;
        stabstr = _stabstr;
c0100d75:	c7 45 c4 25 20 13 c0 	movl   $0xc0132025,-0x3c(%ebp)
    info->dbg_fn_narg = 0;

    // Find the relevant set of stabs
    if (addr >= 0xbf800000) {
        stabs = _stab;
        stab_end = _estab;
c0100d7c:	b8 24 20 13 c0       	mov    $0xc0132024,%eax
    info->dbg_fn_addr = addr;
    info->dbg_fn_narg = 0;

    // Find the relevant set of stabs
    if (addr >= 0xbf800000) {
        stabs = _stab;
c0100d81:	bf 00 40 11 c0       	mov    $0xc0114000,%edi
        stabstr = ustab->stabstr;
        stabstr_end = ustab->stabstr_end;
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
c0100d86:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0100d89:	39 55 c4             	cmp    %edx,-0x3c(%ebp)
c0100d8c:	72 08                	jb     c0100d96 <debuginfo_eip+0x83>
        return -1;
c0100d8e:	83 c8 ff             	or     $0xffffffff,%eax
c0100d91:	e9 49 01 00 00       	jmp    c0100edf <debuginfo_eip+0x1cc>
        stabstr = ustab->stabstr;
        stabstr_end = ustab->stabstr_end;
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
c0100d96:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100d99:	80 79 ff 00          	cmpb   $0x0,-0x1(%ecx)
c0100d9d:	75 ef                	jne    c0100d8e <debuginfo_eip+0x7b>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    lfile = 0;
c0100d9f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    rfile = (stab_end - stabs) - 1;
c0100da6:	29 f8                	sub    %edi,%eax
c0100da8:	c1 f8 02             	sar    $0x2,%eax
c0100dab:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100db1:	48                   	dec    %eax
c0100db2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100db5:	56                   	push   %esi
c0100db6:	6a 64                	push   $0x64
c0100db8:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0100dbb:	8d 55 d0             	lea    -0x30(%ebp),%edx
c0100dbe:	89 f8                	mov    %edi,%eax
c0100dc0:	e8 97 fe ff ff       	call   c0100c5c <stab_binsearch>
    if (lfile == 0)
c0100dc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100dc8:	59                   	pop    %ecx
c0100dc9:	5a                   	pop    %edx
c0100dca:	85 c0                	test   %eax,%eax
c0100dcc:	74 c0                	je     c0100d8e <debuginfo_eip+0x7b>
        return -1;

    // Search within that file's stabs for the function definition
    // (N_FUN).
    lfun = lfile;
c0100dce:	89 45 d8             	mov    %eax,-0x28(%ebp)
    rfun = rfile;
c0100dd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100dd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100dd7:	56                   	push   %esi
c0100dd8:	6a 24                	push   $0x24
c0100dda:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0100ddd:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0100de0:	89 f8                	mov    %edi,%eax
c0100de2:	e8 75 fe ff ff       	call   c0100c5c <stab_binsearch>

    if (lfun <= rfun) {
c0100de7:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0100dea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100ded:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0100df0:	5a                   	pop    %edx
c0100df1:	5a                   	pop    %edx
c0100df2:	39 c1                	cmp    %eax,%ecx
c0100df4:	7f 2d                	jg     c0100e23 <debuginfo_eip+0x110>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr)
c0100df6:	6b c1 0c             	imul   $0xc,%ecx,%eax
c0100df9:	01 f8                	add    %edi,%eax
c0100dfb:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0100dfe:	8b 10                	mov    (%eax),%edx
c0100e00:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0100e03:	2b 45 c4             	sub    -0x3c(%ebp),%eax
c0100e06:	39 c2                	cmp    %eax,%edx
c0100e08:	7d 06                	jge    c0100e10 <debuginfo_eip+0xfd>
            info->dbg_fn_name = stabstr + stabs[lfun].n_strx;
c0100e0a:	03 55 c4             	add    -0x3c(%ebp),%edx
c0100e0d:	89 53 08             	mov    %edx,0x8(%ebx)
        info->dbg_fn_addr = stabs[lfun].n_value;
c0100e10:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0100e13:	8b 40 08             	mov    0x8(%eax),%eax
c0100e16:	89 43 10             	mov    %eax,0x10(%ebx)
        addr -= info->dbg_fn_addr;
c0100e19:	29 c6                	sub    %eax,%esi
        // Search within the function definition for the line number.
        lline = lfun;
c0100e1b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
        rline = rfun;
c0100e1e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0100e21:	eb 0c                	jmp    c0100e2f <debuginfo_eip+0x11c>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->dbg_fn_addr = addr;
c0100e23:	89 73 10             	mov    %esi,0x10(%ebx)
        lline = lfile;
c0100e26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100e29:	89 45 e0             	mov    %eax,-0x20(%ebp)
        rline = rfile;
c0100e2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100e2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    // Ignore stuff after the colon.
    info->dbg_fn_namelen = strstr(info->dbg_fn_name, ":") - info->dbg_fn_name;
c0100e32:	50                   	push   %eax
c0100e33:	50                   	push   %eax
c0100e34:	68 f6 03 11 c0       	push   $0xc01103f6
c0100e39:	ff 73 08             	pushl  0x8(%ebx)
c0100e3c:	e8 87 39 00 00       	call   c01047c8 <strstr>
c0100e41:	2b 43 08             	sub    0x8(%ebx),%eax
c0100e44:	89 43 0c             	mov    %eax,0xc(%ebx)
    // Hint:
    //  There's a particular stabs type used for line numbers.
    //  Look at the STABS documentation and <inc/stab.h> to find
    //  which one.
    // Your code here.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100e47:	5a                   	pop    %edx
c0100e48:	59                   	pop    %ecx
c0100e49:	56                   	push   %esi
c0100e4a:	6a 44                	push   $0x44
c0100e4c:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
c0100e4f:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0100e52:	89 f8                	mov    %edi,%eax
c0100e54:	e8 03 fe ff ff       	call   c0100c5c <stab_binsearch>
    if (rline < lline)
c0100e59:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100e5c:	83 c4 10             	add    $0x10,%esp
c0100e5f:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
c0100e62:	0f 8c 26 ff ff ff    	jl     c0100d8e <debuginfo_eip+0x7b>
        return -1;
    info->dbg_line = stabs[lline].n_desc;
c0100e68:	6b c2 0c             	imul   $0xc,%edx,%eax
c0100e6b:	01 f8                	add    %edi,%eax
c0100e6d:	0f b7 48 06          	movzwl 0x6(%eax),%ecx
c0100e71:	89 4b 04             	mov    %ecx,0x4(%ebx)
    // Search backwards from the line number for the relevant filename
    // stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100e74:	8b 75 d0             	mov    -0x30(%ebp),%esi
c0100e77:	89 75 bc             	mov    %esi,-0x44(%ebp)
c0100e7a:	31 f6                	xor    %esi,%esi
c0100e7c:	39 55 bc             	cmp    %edx,-0x44(%ebp)
c0100e7f:	7f 38                	jg     c0100eb9 <debuginfo_eip+0x1a6>
            && stabs[lline].n_type != N_SOL
c0100e81:	8a 48 04             	mov    0x4(%eax),%cl
c0100e84:	80 f9 84             	cmp    $0x84,%cl
c0100e87:	74 16                	je     c0100e9f <debuginfo_eip+0x18c>
            && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
c0100e89:	80 f9 64             	cmp    $0x64,%cl
c0100e8c:	74 0b                	je     c0100e99 <debuginfo_eip+0x186>
c0100e8e:	4a                   	dec    %edx
c0100e8f:	83 e8 0c             	sub    $0xc,%eax
c0100e92:	be 01 00 00 00       	mov    $0x1,%esi
c0100e97:	eb e3                	jmp    c0100e7c <debuginfo_eip+0x169>
c0100e99:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
c0100e9d:	74 ef                	je     c0100e8e <debuginfo_eip+0x17b>
c0100e9f:	89 f1                	mov    %esi,%ecx
c0100ea1:	84 c9                	test   %cl,%cl
c0100ea3:	74 03                	je     c0100ea8 <debuginfo_eip+0x195>
c0100ea5:	89 55 e0             	mov    %edx,-0x20(%ebp)
        lline--;
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
c0100ea8:	8b 10                	mov    (%eax),%edx
c0100eaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0100ead:	2b 45 c4             	sub    -0x3c(%ebp),%eax
c0100eb0:	39 c2                	cmp    %eax,%edx
c0100eb2:	7d 05                	jge    c0100eb9 <debuginfo_eip+0x1a6>
        info->dbg_file = stabstr + stabs[lline].n_strx;
c0100eb4:	03 55 c4             	add    -0x3c(%ebp),%edx
c0100eb7:	89 13                	mov    %edx,(%ebx)


    // Set dbg_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun)
c0100eb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100ebc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0100ebf:	39 d0                	cmp    %edx,%eax
c0100ec1:	7c 04                	jl     c0100ec7 <debuginfo_eip+0x1b4>
        for (lline = lfun + 1;
                lline < rfun && stabs[lline].n_type == N_PSYM;
                lline++)
            info->dbg_fn_narg++;

    return 0;
c0100ec3:	31 c0                	xor    %eax,%eax
c0100ec5:	eb 18                	jmp    c0100edf <debuginfo_eip+0x1cc>


    // Set dbg_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun)
        for (lline = lfun + 1;
c0100ec7:	40                   	inc    %eax
c0100ec8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100ecb:	39 c2                	cmp    %eax,%edx
c0100ecd:	7e f4                	jle    c0100ec3 <debuginfo_eip+0x1b0>
c0100ecf:	40                   	inc    %eax
                lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ed0:	6b c8 0c             	imul   $0xc,%eax,%ecx
c0100ed3:	80 7c 0f f8 a0       	cmpb   $0xa0,-0x8(%edi,%ecx,1)
c0100ed8:	75 e9                	jne    c0100ec3 <debuginfo_eip+0x1b0>
                lline++)
            info->dbg_fn_narg++;
c0100eda:	ff 43 14             	incl   0x14(%ebx)
c0100edd:	eb ec                	jmp    c0100ecb <debuginfo_eip+0x1b8>

    return 0;
}
c0100edf:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0100ee2:	5b                   	pop    %ebx
c0100ee3:	5e                   	pop    %esi
c0100ee4:	5f                   	pop    %edi
c0100ee5:	5d                   	pop    %ebp
c0100ee6:	c3                   	ret    

c0100ee7 <backtrace_regs>:

void
backtrace_regs(struct trapframe* regs) {
c0100ee7:	55                   	push   %ebp
c0100ee8:	89 e5                	mov    %esp,%ebp
c0100eea:	57                   	push   %edi
c0100eeb:	56                   	push   %esi
c0100eec:	53                   	push   %ebx
c0100eed:	83 ec 38             	sub    $0x38,%esp
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
    uint32_t _ebp[2] = { regs->ebp, regs->eip };
c0100ef3:	8b 50 10             	mov    0x10(%eax),%edx
c0100ef6:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0100ef9:	8b 40 30             	mov    0x30(%eax),%eax
c0100efc:	89 45 cc             	mov    %eax,-0x34(%ebp)
    uint32_t* ebp = (uint32_t*) &_ebp;

    print("Stack backtrace:\n");
c0100eff:	68 f8 03 11 c0       	push   $0xc01103f8
c0100f04:	e8 5f 33 00 00       	call   c0104268 <print>
c0100f09:	83 c4 10             	add    $0x10,%esp
}

void
backtrace_regs(struct trapframe* regs) {
    uint32_t _ebp[2] = { regs->ebp, regs->eip };
    uint32_t* ebp = (uint32_t*) &_ebp;
c0100f0c:	8d 5d c8             	lea    -0x38(%ebp),%ebx

    print("Stack backtrace:\n");
    // char* file = NULL;
    while(ebp != NULL) {
        struct debuginfo info;
        debuginfo_eip(ebp[1], &info);
c0100f0f:	8d 7d d0             	lea    -0x30(%ebp),%edi
c0100f12:	51                   	push   %ecx
c0100f13:	51                   	push   %ecx
c0100f14:	57                   	push   %edi
c0100f15:	ff 73 04             	pushl  0x4(%ebx)
c0100f18:	e8 f6 fd ff ff       	call   c0100d13 <debuginfo_eip>
        print("\tebp %08x eip %08x args[%u]",
c0100f1d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0100f20:	ff 73 04             	pushl  0x4(%ebx)
c0100f23:	53                   	push   %ebx
c0100f24:	68 0a 04 11 c0       	push   $0xc011040a
c0100f29:	e8 3a 33 00 00       	call   c0104268 <print>
              ebp, ebp[1], info.dbg_fn_narg);
        for (int i = 0; i < info.dbg_fn_narg; ++i)
c0100f2e:	83 c4 20             	add    $0x20,%esp
c0100f31:	31 f6                	xor    %esi,%esi
c0100f33:	3b 75 e4             	cmp    -0x1c(%ebp),%esi
c0100f36:	7d 16                	jge    c0100f4e <backtrace_regs+0x67>
            print(" %08x", ebp[2 + i]);
c0100f38:	52                   	push   %edx
c0100f39:	52                   	push   %edx
c0100f3a:	ff 74 b3 08          	pushl  0x8(%ebx,%esi,4)
c0100f3e:	68 51 07 11 c0       	push   $0xc0110751
c0100f43:	e8 20 33 00 00       	call   c0104268 <print>
    while(ebp != NULL) {
        struct debuginfo info;
        debuginfo_eip(ebp[1], &info);
        print("\tebp %08x eip %08x args[%u]",
              ebp, ebp[1], info.dbg_fn_narg);
        for (int i = 0; i < info.dbg_fn_narg; ++i)
c0100f48:	46                   	inc    %esi
c0100f49:	83 c4 10             	add    $0x10,%esp
c0100f4c:	eb e5                	jmp    c0100f33 <backtrace_regs+0x4c>
            print(" %08x", ebp[2 + i]);
        print("\n");
c0100f4e:	83 ec 0c             	sub    $0xc,%esp
c0100f51:	68 35 04 11 c0       	push   $0xc0110435
c0100f56:	e8 0d 33 00 00       	call   c0104268 <print>
        print("\t\t%s:%d %.*s()\n\n",
c0100f5b:	58                   	pop    %eax
c0100f5c:	ff 75 d8             	pushl  -0x28(%ebp)
c0100f5f:	ff 75 dc             	pushl  -0x24(%ebp)
c0100f62:	ff 75 d4             	pushl  -0x2c(%ebp)
c0100f65:	ff 75 d0             	pushl  -0x30(%ebp)
c0100f68:	68 26 04 11 c0       	push   $0xc0110426
c0100f6d:	e8 f6 32 00 00       	call   c0104268 <print>
              info.dbg_file, info.dbg_line,
              info.dbg_fn_namelen, info.dbg_fn_name);
        ebp = (uint32_t*) ebp[0];
c0100f72:	8b 1b                	mov    (%ebx),%ebx
    uint32_t _ebp[2] = { regs->ebp, regs->eip };
    uint32_t* ebp = (uint32_t*) &_ebp;

    print("Stack backtrace:\n");
    // char* file = NULL;
    while(ebp != NULL) {
c0100f74:	83 c4 20             	add    $0x20,%esp
c0100f77:	85 db                	test   %ebx,%ebx
c0100f79:	75 97                	jne    c0100f12 <backtrace_regs+0x2b>
              info.dbg_file, info.dbg_line,
              info.dbg_fn_namelen, info.dbg_fn_name);
        ebp = (uint32_t*) ebp[0];
        // file = (char*) info.dbg_file;
    }
}
c0100f7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0100f7e:	5b                   	pop    %ebx
c0100f7f:	5e                   	pop    %esi
c0100f80:	5f                   	pop    %edi
c0100f81:	5d                   	pop    %ebp
c0100f82:	c3                   	ret    

c0100f83 <backtrace>:

void
backtrace(void) {
c0100f83:	55                   	push   %ebp
c0100f84:	89 e5                	mov    %esp,%ebp
c0100f86:	57                   	push   %edi
c0100f87:	56                   	push   %esi
c0100f88:	53                   	push   %ebx
c0100f89:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile("movl %%ebp,%0" : "=r" (ebp));
c0100f8c:	89 eb                	mov    %ebp,%ebx
    uint32_t* ebp = (uint32_t*) read_ebp();

    print("Stack backtrace:\n");
c0100f8e:	68 f8 03 11 c0       	push   $0xc01103f8
c0100f93:	e8 d0 32 00 00       	call   c0104268 <print>
    // char* file = NULL;
    while(ebp != NULL) {
c0100f98:	83 c4 10             	add    $0x10,%esp
        struct debuginfo info;
        debuginfo_eip(ebp[1], &info);
c0100f9b:	8d 7d d0             	lea    -0x30(%ebp),%edi
backtrace(void) {
    uint32_t* ebp = (uint32_t*) read_ebp();

    print("Stack backtrace:\n");
    // char* file = NULL;
    while(ebp != NULL) {
c0100f9e:	85 db                	test   %ebx,%ebx
c0100fa0:	74 67                	je     c0101009 <backtrace+0x86>
        struct debuginfo info;
        debuginfo_eip(ebp[1], &info);
c0100fa2:	51                   	push   %ecx
c0100fa3:	51                   	push   %ecx
c0100fa4:	57                   	push   %edi
c0100fa5:	ff 73 04             	pushl  0x4(%ebx)
c0100fa8:	e8 66 fd ff ff       	call   c0100d13 <debuginfo_eip>
        print("\tebp %08x eip %08x args[%u]",
c0100fad:	ff 75 e4             	pushl  -0x1c(%ebp)
c0100fb0:	ff 73 04             	pushl  0x4(%ebx)
c0100fb3:	53                   	push   %ebx
c0100fb4:	68 0a 04 11 c0       	push   $0xc011040a
c0100fb9:	e8 aa 32 00 00       	call   c0104268 <print>
              ebp, ebp[1], info.dbg_fn_narg);
        for (int i = 0; i < info.dbg_fn_narg; ++i)
c0100fbe:	83 c4 20             	add    $0x20,%esp
c0100fc1:	31 f6                	xor    %esi,%esi
c0100fc3:	3b 75 e4             	cmp    -0x1c(%ebp),%esi
c0100fc6:	7d 16                	jge    c0100fde <backtrace+0x5b>
            print(" %08x", ebp[2 + i]);
c0100fc8:	52                   	push   %edx
c0100fc9:	52                   	push   %edx
c0100fca:	ff 74 b3 08          	pushl  0x8(%ebx,%esi,4)
c0100fce:	68 51 07 11 c0       	push   $0xc0110751
c0100fd3:	e8 90 32 00 00       	call   c0104268 <print>
    while(ebp != NULL) {
        struct debuginfo info;
        debuginfo_eip(ebp[1], &info);
        print("\tebp %08x eip %08x args[%u]",
              ebp, ebp[1], info.dbg_fn_narg);
        for (int i = 0; i < info.dbg_fn_narg; ++i)
c0100fd8:	46                   	inc    %esi
c0100fd9:	83 c4 10             	add    $0x10,%esp
c0100fdc:	eb e5                	jmp    c0100fc3 <backtrace+0x40>
            print(" %08x", ebp[2 + i]);
        print("\n");
c0100fde:	83 ec 0c             	sub    $0xc,%esp
c0100fe1:	68 35 04 11 c0       	push   $0xc0110435
c0100fe6:	e8 7d 32 00 00       	call   c0104268 <print>
        print("\t\t%s:%d %.*s()\n\n",
c0100feb:	58                   	pop    %eax
c0100fec:	ff 75 d8             	pushl  -0x28(%ebp)
c0100fef:	ff 75 dc             	pushl  -0x24(%ebp)
c0100ff2:	ff 75 d4             	pushl  -0x2c(%ebp)
c0100ff5:	ff 75 d0             	pushl  -0x30(%ebp)
c0100ff8:	68 26 04 11 c0       	push   $0xc0110426
c0100ffd:	e8 66 32 00 00       	call   c0104268 <print>
              info.dbg_file, info.dbg_line,
              info.dbg_fn_namelen, info.dbg_fn_name);
        ebp = (uint32_t*) ebp[0];
c0101002:	8b 1b                	mov    (%ebx),%ebx
c0101004:	83 c4 20             	add    $0x20,%esp
c0101007:	eb 95                	jmp    c0100f9e <backtrace+0x1b>
        // file = (char*) info.dbg_file;
    }
}
c0101009:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010100c:	5b                   	pop    %ebx
c010100d:	5e                   	pop    %esi
c010100e:	5f                   	pop    %edi
c010100f:	5d                   	pop    %ebp
c0101010:	c3                   	ret    

c0101011 <print_regs>:

void
print_regs(struct trapframe* r) {
c0101011:	55                   	push   %ebp
c0101012:	89 e5                	mov    %esp,%ebp
c0101014:	53                   	push   %ebx
c0101015:	50                   	push   %eax
c0101016:	8b 5d 08             	mov    0x8(%ebp),%ebx
    if (r == NULL)
c0101019:	85 db                	test   %ebx,%ebx
c010101b:	75 10                	jne    c010102d <print_regs+0x1c>
        print("NULL");
c010101d:	c7 45 08 38 32 11 c0 	movl   $0xc0113238,0x8(%ebp)
        print("\tcs     : 0x%x\n", r->cs);
        print("\teflags : 0x%08x\n", r->eflags);
        print("\tesp    : %p\n", r->esp);
        print("\tss     : 0x%x\n", r->ss);
    }
}
c0101024:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101027:	c9                   	leave  
}

void
print_regs(struct trapframe* r) {
    if (r == NULL)
        print("NULL");
c0101028:	e9 3b 32 00 00       	jmp    c0104268 <print>
    else {
        print("regs: %08p\n", r);
c010102d:	50                   	push   %eax
c010102e:	50                   	push   %eax
c010102f:	53                   	push   %ebx
c0101030:	68 37 04 11 c0       	push   $0xc0110437
c0101035:	e8 2e 32 00 00       	call   c0104268 <print>
        print("\tes     : 0x%x\n", r->es);
c010103a:	5a                   	pop    %edx
c010103b:	59                   	pop    %ecx
c010103c:	ff 33                	pushl  (%ebx)
c010103e:	68 43 04 11 c0       	push   $0xc0110443
c0101043:	e8 20 32 00 00       	call   c0104268 <print>
        print("\tds     : 0x%x\n", r->ds);
c0101048:	58                   	pop    %eax
c0101049:	5a                   	pop    %edx
c010104a:	ff 73 04             	pushl  0x4(%ebx)
c010104d:	68 53 04 11 c0       	push   $0xc0110453
c0101052:	e8 11 32 00 00       	call   c0104268 <print>
        print("\tedi    : %p\n", r->edi);
c0101057:	59                   	pop    %ecx
c0101058:	58                   	pop    %eax
c0101059:	ff 73 08             	pushl  0x8(%ebx)
c010105c:	68 63 04 11 c0       	push   $0xc0110463
c0101061:	e8 02 32 00 00       	call   c0104268 <print>
        print("\tesi    : %p\n", r->esi);
c0101066:	58                   	pop    %eax
c0101067:	5a                   	pop    %edx
c0101068:	ff 73 0c             	pushl  0xc(%ebx)
c010106b:	68 71 04 11 c0       	push   $0xc0110471
c0101070:	e8 f3 31 00 00       	call   c0104268 <print>
        print("\tebp    : %p\n", r->ebp);
c0101075:	59                   	pop    %ecx
c0101076:	58                   	pop    %eax
c0101077:	ff 73 10             	pushl  0x10(%ebx)
c010107a:	68 7f 04 11 c0       	push   $0xc011047f
c010107f:	e8 e4 31 00 00       	call   c0104268 <print>
        print("\t_esp   : %p\n", r->_esp);
c0101084:	58                   	pop    %eax
c0101085:	5a                   	pop    %edx
c0101086:	ff 73 14             	pushl  0x14(%ebx)
c0101089:	68 8d 04 11 c0       	push   $0xc011048d
c010108e:	e8 d5 31 00 00       	call   c0104268 <print>
        print("\tebx    : %p\n", r->ebx);
c0101093:	59                   	pop    %ecx
c0101094:	58                   	pop    %eax
c0101095:	ff 73 18             	pushl  0x18(%ebx)
c0101098:	68 9b 04 11 c0       	push   $0xc011049b
c010109d:	e8 c6 31 00 00       	call   c0104268 <print>
        print("\tedx    : %p\n", r->edx);
c01010a2:	58                   	pop    %eax
c01010a3:	5a                   	pop    %edx
c01010a4:	ff 73 1c             	pushl  0x1c(%ebx)
c01010a7:	68 a9 04 11 c0       	push   $0xc01104a9
c01010ac:	e8 b7 31 00 00       	call   c0104268 <print>
        print("\tecx    : %p\n", r->ecx);
c01010b1:	59                   	pop    %ecx
c01010b2:	58                   	pop    %eax
c01010b3:	ff 73 20             	pushl  0x20(%ebx)
c01010b6:	68 b7 04 11 c0       	push   $0xc01104b7
c01010bb:	e8 a8 31 00 00       	call   c0104268 <print>
        print("\teax    : %p\n", r->eax);
c01010c0:	58                   	pop    %eax
c01010c1:	5a                   	pop    %edx
c01010c2:	ff 73 24             	pushl  0x24(%ebx)
c01010c5:	68 c5 04 11 c0       	push   $0xc01104c5
c01010ca:	e8 99 31 00 00       	call   c0104268 <print>
        print("\tintno  : %u\n", r->int_no);
c01010cf:	59                   	pop    %ecx
c01010d0:	58                   	pop    %eax
c01010d1:	ff 73 28             	pushl  0x28(%ebx)
c01010d4:	68 d3 04 11 c0       	push   $0xc01104d3
c01010d9:	e8 8a 31 00 00       	call   c0104268 <print>
        print("\tecode  : %u\n", r->err_code);
c01010de:	58                   	pop    %eax
c01010df:	5a                   	pop    %edx
c01010e0:	ff 73 2c             	pushl  0x2c(%ebx)
c01010e3:	68 e1 04 11 c0       	push   $0xc01104e1
c01010e8:	e8 7b 31 00 00       	call   c0104268 <print>
        print("\teip    : %p\n", r->eip);
c01010ed:	59                   	pop    %ecx
c01010ee:	58                   	pop    %eax
c01010ef:	ff 73 30             	pushl  0x30(%ebx)
c01010f2:	68 ef 04 11 c0       	push   $0xc01104ef
c01010f7:	e8 6c 31 00 00       	call   c0104268 <print>
        print("\tcs     : 0x%x\n", r->cs);
c01010fc:	58                   	pop    %eax
c01010fd:	5a                   	pop    %edx
c01010fe:	ff 73 34             	pushl  0x34(%ebx)
c0101101:	68 fd 04 11 c0       	push   $0xc01104fd
c0101106:	e8 5d 31 00 00       	call   c0104268 <print>
        print("\teflags : 0x%08x\n", r->eflags);
c010110b:	59                   	pop    %ecx
c010110c:	58                   	pop    %eax
c010110d:	ff 73 38             	pushl  0x38(%ebx)
c0101110:	68 0d 05 11 c0       	push   $0xc011050d
c0101115:	e8 4e 31 00 00       	call   c0104268 <print>
        print("\tesp    : %p\n", r->esp);
c010111a:	58                   	pop    %eax
c010111b:	5a                   	pop    %edx
c010111c:	ff 73 3c             	pushl  0x3c(%ebx)
c010111f:	68 1f 05 11 c0       	push   $0xc011051f
c0101124:	e8 3f 31 00 00       	call   c0104268 <print>
        print("\tss     : 0x%x\n", r->ss);
c0101129:	59                   	pop    %ecx
c010112a:	58                   	pop    %eax
c010112b:	ff 73 40             	pushl  0x40(%ebx)
c010112e:	68 2d 05 11 c0       	push   $0xc011052d
c0101133:	e8 30 31 00 00       	call   c0104268 <print>
c0101138:	83 c4 10             	add    $0x10,%esp
    }
}
c010113b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010113e:	c9                   	leave  
c010113f:	c3                   	ret    

c0101140 <init_pmm>:
#include <queue.h>

struct bitmap* physmap;

void
init_pmm(void) {
c0101140:	55                   	push   %ebp
c0101141:	89 e5                	mov    %esp,%ebp
c0101143:	57                   	push   %edi
c0101144:	56                   	push   %esi
c0101145:	53                   	push   %ebx
c0101146:	83 ec 1c             	sub    $0x1c,%esp
    size_t ram = 0;

    struct e820_e* e;
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e)
c0101149:	6b 1d e0 df 14 c0 14 	imul   $0x14,0xc014dfe0,%ebx
c0101150:	81 c3 e0 da 14 c0    	add    $0xc014dae0,%ebx
c0101156:	ba e0 da 14 c0       	mov    $0xc014dae0,%edx

struct bitmap* physmap;

void
init_pmm(void) {
    size_t ram = 0;
c010115b:	31 c0                	xor    %eax,%eax

    struct e820_e* e;
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e)
c010115d:	39 da                	cmp    %ebx,%edx
c010115f:	74 10                	je     c0101171 <init_pmm+0x31>
        ram = MAX(ram, (size_t)(e->addr + e->len));
c0101161:	8b 4a 08             	mov    0x8(%edx),%ecx
c0101164:	03 0a                	add    (%edx),%ecx
c0101166:	39 c8                	cmp    %ecx,%eax
c0101168:	73 02                	jae    c010116c <init_pmm+0x2c>
c010116a:	89 c8                	mov    %ecx,%eax
void
init_pmm(void) {
    size_t ram = 0;

    struct e820_e* e;
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e)
c010116c:	83 c2 14             	add    $0x14,%edx
c010116f:	eb ec                	jmp    c010115d <init_pmm+0x1d>
        ram = MAX(ram, (size_t)(e->addr + e->len));
    npages = ram >> PG_NBITS;
c0101171:	c1 e8 0c             	shr    $0xc,%eax
c0101174:	a3 ac d2 14 c0       	mov    %eax,0xc014d2ac
    physmap = bitmap_create(npages);
c0101179:	83 ec 0c             	sub    $0xc,%esp
c010117c:	50                   	push   %eax
c010117d:	e8 83 54 00 00       	call   c0106605 <bitmap_create>
c0101182:	a3 a0 da 14 c0       	mov    %eax,0xc014daa0
    for (size_t i = 0; i < npages; ++i) {
c0101187:	83 c4 10             	add    $0x10,%esp
c010118a:	31 db                	xor    %ebx,%ebx
c010118c:	3b 1d ac d2 14 c0    	cmp    0xc014d2ac,%ebx
c0101192:	73 51                	jae    c01011e5 <init_pmm+0xa5>
        assert(!bitmap_isset(physmap, i));
c0101194:	56                   	push   %esi
c0101195:	56                   	push   %esi
c0101196:	53                   	push   %ebx
c0101197:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c010119d:	e8 32 57 00 00       	call   c01068d4 <bitmap_isset>
c01011a2:	83 c4 10             	add    $0x10,%esp
c01011a5:	84 c0                	test   %al,%al
c01011a7:	74 28                	je     c01011d1 <init_pmm+0x91>
c01011a9:	83 ec 0c             	sub    $0xc,%esp
c01011ac:	68 c8 06 11 c0       	push   $0xc01106c8
c01011b1:	6a 17                	push   $0x17
c01011b3:	68 3d 05 11 c0       	push   $0xc011053d
c01011b8:	68 47 05 11 c0       	push   $0xc0110547
c01011bd:	68 2b ff 10 c0       	push   $0xc010ff2b
c01011c2:	e8 a1 30 00 00       	call   c0104268 <print>
c01011c7:	83 c4 20             	add    $0x20,%esp
c01011ca:	e8 b4 fd ff ff       	call   c0100f83 <backtrace>
c01011cf:	fa                   	cli    
c01011d0:	f4                   	hlt    
        bitmap_mark(physmap, i);
c01011d1:	51                   	push   %ecx
c01011d2:	51                   	push   %ecx
c01011d3:	53                   	push   %ebx
c01011d4:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c01011da:	e8 db 55 00 00       	call   c01067ba <bitmap_mark>
    struct e820_e* e;
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e)
        ram = MAX(ram, (size_t)(e->addr + e->len));
    npages = ram >> PG_NBITS;
    physmap = bitmap_create(npages);
    for (size_t i = 0; i < npages; ++i) {
c01011df:	43                   	inc    %ebx
c01011e0:	83 c4 10             	add    $0x10,%esp
c01011e3:	eb a7                	jmp    c010118c <init_pmm+0x4c>
c01011e5:	b8 e0 da 14 c0       	mov    $0xc014dae0,%eax
    }

    extern size_t _kbrk;
    // Mark any pages with an E820_AVAILABLE entry in the e820 map as free
    // note: assumes that the e820 map references non-overlapping regions
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e) {
c01011ea:	6b 15 e0 df 14 c0 14 	imul   $0x14,0xc014dfe0,%edx
c01011f1:	81 c2 e0 da 14 c0    	add    $0xc014dae0,%edx
c01011f7:	39 d0                	cmp    %edx,%eax
c01011f9:	0f 84 96 00 00 00    	je     c0101295 <init_pmm+0x155>
        if (e->type == E820_AVAILABLE) {
c01011ff:	83 78 10 01          	cmpl   $0x1,0x10(%eax)
c0101203:	74 05                	je     c010120a <init_pmm+0xca>
    }

    extern size_t _kbrk;
    // Mark any pages with an E820_AVAILABLE entry in the e820 map as free
    // note: assumes that the e820 map references non-overlapping regions
    for (e = e820_map.entries; e != e820_map.entries + e820_map.size; ++e) {
c0101205:	83 c0 14             	add    $0x14,%eax
c0101208:	eb e0                	jmp    c01011ea <init_pmm+0xaa>
        if (e->type == E820_AVAILABLE) {
            size_t min_page = MAX(PA2PM(e->addr), 1U);
c010120a:	8b 18                	mov    (%eax),%ebx
c010120c:	89 de                	mov    %ebx,%esi
c010120e:	c1 ee 0c             	shr    $0xc,%esi
c0101211:	75 05                	jne    c0101218 <init_pmm+0xd8>
c0101213:	be 01 00 00 00       	mov    $0x1,%esi
            if (min_page >= npages)
c0101218:	8b 15 ac d2 14 c0    	mov    0xc014d2ac,%edx
c010121e:	39 d6                	cmp    %edx,%esi
c0101220:	73 e3                	jae    c0101205 <init_pmm+0xc5>
                continue;
            size_t max_page = MIN(PA2PM(e->addr + e->len) + 1, npages);
c0101222:	03 58 08             	add    0x8(%eax),%ebx
c0101225:	c1 eb 0c             	shr    $0xc,%ebx
c0101228:	43                   	inc    %ebx
c0101229:	39 d3                	cmp    %edx,%ebx
c010122b:	76 5f                	jbe    c010128c <init_pmm+0x14c>
c010122d:	89 d3                	mov    %edx,%ebx
            for (size_t i = min_page; i < max_page; ++i) {
c010122f:	eb 5b                	jmp    c010128c <init_pmm+0x14c>
                if (i >= PA2PM(PADDR(KADDR)) && i < PA2PM(PADDR(_kbrk)))
c0101231:	8b 3d b0 da 14 c0    	mov    0xc014dab0,%edi

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c0101237:	81 ff ff ff ff bf    	cmp    $0xbfffffff,%edi
c010123d:	77 28                	ja     c0101267 <init_pmm+0x127>
c010123f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        panic(file, line, "PADDR called with invalid va %08x", va);
c0101242:	52                   	push   %edx
c0101243:	57                   	push   %edi
c0101244:	68 61 05 11 c0       	push   $0xc0110561
c0101249:	6a 25                	push   $0x25
c010124b:	68 3d 05 11 c0       	push   $0xc011053d
c0101250:	68 c0 06 11 c0       	push   $0xc01106c0
c0101255:	6a 65                	push   $0x65
c0101257:	68 83 05 11 c0       	push   $0xc0110583
c010125c:	e8 14 2a 00 00       	call   c0103c75 <_panic>
c0101261:	83 c4 20             	add    $0x20,%esp
c0101264:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101267:	81 c7 00 00 00 40    	add    $0x40000000,%edi
c010126d:	c1 ef 0c             	shr    $0xc,%edi
c0101270:	39 fe                	cmp    %edi,%esi
c0101272:	72 17                	jb     c010128b <init_pmm+0x14b>
c0101274:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    continue;
                bitmap_unmark(physmap, i);
c0101277:	50                   	push   %eax
c0101278:	50                   	push   %eax
c0101279:	56                   	push   %esi
c010127a:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c0101280:	e8 c4 55 00 00       	call   c0106849 <bitmap_unmark>
c0101285:	83 c4 10             	add    $0x10,%esp
c0101288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
        if (e->type == E820_AVAILABLE) {
            size_t min_page = MAX(PA2PM(e->addr), 1U);
            if (min_page >= npages)
                continue;
            size_t max_page = MIN(PA2PM(e->addr + e->len) + 1, npages);
            for (size_t i = min_page; i < max_page; ++i) {
c010128b:	46                   	inc    %esi
c010128c:	39 de                	cmp    %ebx,%esi
c010128e:	72 a1                	jb     c0101231 <init_pmm+0xf1>
c0101290:	e9 70 ff ff ff       	jmp    c0101205 <init_pmm+0xc5>
                    continue;
                bitmap_unmark(physmap, i);
            }
        }
    }
}
c0101295:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0101298:	5b                   	pop    %ebx
c0101299:	5e                   	pop    %esi
c010129a:	5f                   	pop    %edi
c010129b:	5d                   	pop    %ebp
c010129c:	c3                   	ret    

c010129d <pp_alloc>:

size_t
pp_alloc(void) {
c010129d:	55                   	push   %ebp
c010129e:	89 e5                	mov    %esp,%ebp
c01012a0:	83 ec 20             	sub    $0x20,%esp
    size_t idx = 0;
c01012a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bitmap_alloc(physmap, &idx) == ENOSPC)
c01012aa:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01012ad:	50                   	push   %eax
c01012ae:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c01012b4:	e8 55 54 00 00       	call   c010670e <bitmap_alloc>
c01012b9:	83 c4 10             	add    $0x10,%esp
c01012bc:	83 f8 05             	cmp    $0x5,%eax
c01012bf:	75 19                	jne    c01012da <pp_alloc+0x3d>
        panic("out of physical memory npages");
c01012c1:	68 8f 05 11 c0       	push   $0xc011058f
c01012c6:	68 b4 06 11 c0       	push   $0xc01106b4
c01012cb:	6a 31                	push   $0x31
c01012cd:	68 3d 05 11 c0       	push   $0xc011053d
c01012d2:	e8 9e 29 00 00       	call   c0103c75 <_panic>
c01012d7:	83 c4 10             	add    $0x10,%esp

    memset(PM2VA(idx), 0, PG_SIZE);
c01012da:	50                   	push   %eax
c01012db:	68 00 10 00 00       	push   $0x1000
c01012e0:	6a 00                	push   $0x0
c01012e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012e5:	c1 e0 0c             	shl    $0xc,%eax
c01012e8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01012ed:	50                   	push   %eax
c01012ee:	e8 37 36 00 00       	call   c010492a <memset>

    return idx;
}
c01012f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012f6:	c9                   	leave  
c01012f7:	c3                   	ret    

c01012f8 <pp_free>:

void
pp_free(void* pa) {
c01012f8:	55                   	push   %ebp
c01012f9:	89 e5                	mov    %esp,%ebp
c01012fb:	53                   	push   %ebx
c01012fc:	51                   	push   %ecx
    size_t idx = (size_t) pa >> PG_NBITS;
c01012fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0101300:	c1 eb 0c             	shr    $0xc,%ebx

    assert(idx < npages);
c0101303:	3b 1d ac d2 14 c0    	cmp    0xc014d2ac,%ebx
c0101309:	72 28                	jb     c0101333 <pp_free+0x3b>
c010130b:	83 ec 0c             	sub    $0xc,%esp
c010130e:	68 ac 06 11 c0       	push   $0xc01106ac
c0101313:	6a 3c                	push   $0x3c
c0101315:	68 3d 05 11 c0       	push   $0xc011053d
c010131a:	68 ad 05 11 c0       	push   $0xc01105ad
c010131f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0101324:	e8 3f 2f 00 00       	call   c0104268 <print>
c0101329:	83 c4 20             	add    $0x20,%esp
c010132c:	e8 52 fc ff ff       	call   c0100f83 <backtrace>
c0101331:	fa                   	cli    
c0101332:	f4                   	hlt    
    assert(bitmap_isset(physmap, idx));
c0101333:	52                   	push   %edx
c0101334:	52                   	push   %edx
c0101335:	53                   	push   %ebx
c0101336:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c010133c:	e8 93 55 00 00       	call   c01068d4 <bitmap_isset>
c0101341:	83 c4 10             	add    $0x10,%esp
c0101344:	84 c0                	test   %al,%al
c0101346:	75 28                	jne    c0101370 <pp_free+0x78>
c0101348:	83 ec 0c             	sub    $0xc,%esp
c010134b:	68 ac 06 11 c0       	push   $0xc01106ac
c0101350:	6a 3d                	push   $0x3d
c0101352:	68 3d 05 11 c0       	push   $0xc011053d
c0101357:	68 da 05 11 c0       	push   $0xc01105da
c010135c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0101361:	e8 02 2f 00 00       	call   c0104268 <print>
c0101366:	83 c4 20             	add    $0x20,%esp
c0101369:	e8 15 fc ff ff       	call   c0100f83 <backtrace>
c010136e:	fa                   	cli    
c010136f:	f4                   	hlt    

    bitmap_unmark(physmap, idx);
c0101370:	50                   	push   %eax
c0101371:	50                   	push   %eax
c0101372:	53                   	push   %ebx
c0101373:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c0101379:	e8 cb 54 00 00       	call   c0106849 <bitmap_unmark>
}
c010137e:	83 c4 10             	add    $0x10,%esp
c0101381:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101384:	c9                   	leave  
c0101385:	c3                   	ret    

c0101386 <pa_alloc>:

void
pa_alloc(size_t pa) {
c0101386:	55                   	push   %ebp
c0101387:	89 e5                	mov    %esp,%ebp
c0101389:	53                   	push   %ebx
c010138a:	50                   	push   %eax
    size_t idx = pa >> PG_NBITS;
c010138b:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010138e:	c1 eb 0c             	shr    $0xc,%ebx

    assert(idx < npages);
c0101391:	3b 1d ac d2 14 c0    	cmp    0xc014d2ac,%ebx
c0101397:	72 28                	jb     c01013c1 <pa_alloc+0x3b>
c0101399:	83 ec 0c             	sub    $0xc,%esp
c010139c:	68 a0 06 11 c0       	push   $0xc01106a0
c01013a1:	6a 46                	push   $0x46
c01013a3:	68 3d 05 11 c0       	push   $0xc011053d
c01013a8:	68 ad 05 11 c0       	push   $0xc01105ad
c01013ad:	68 2b ff 10 c0       	push   $0xc010ff2b
c01013b2:	e8 b1 2e 00 00       	call   c0104268 <print>
c01013b7:	83 c4 20             	add    $0x20,%esp
c01013ba:	e8 c4 fb ff ff       	call   c0100f83 <backtrace>
c01013bf:	fa                   	cli    
c01013c0:	f4                   	hlt    
    assert(bitmap_isset(physmap, idx - 1));
c01013c1:	50                   	push   %eax
c01013c2:	50                   	push   %eax
c01013c3:	8d 43 ff             	lea    -0x1(%ebx),%eax
c01013c6:	50                   	push   %eax
c01013c7:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c01013cd:	e8 02 55 00 00       	call   c01068d4 <bitmap_isset>
c01013d2:	83 c4 10             	add    $0x10,%esp
c01013d5:	84 c0                	test   %al,%al
c01013d7:	75 28                	jne    c0101401 <pa_alloc+0x7b>
c01013d9:	83 ec 0c             	sub    $0xc,%esp
c01013dc:	68 a0 06 11 c0       	push   $0xc01106a0
c01013e1:	6a 47                	push   $0x47
c01013e3:	68 3d 05 11 c0       	push   $0xc011053d
c01013e8:	68 ba 05 11 c0       	push   $0xc01105ba
c01013ed:	68 2b ff 10 c0       	push   $0xc010ff2b
c01013f2:	e8 71 2e 00 00       	call   c0104268 <print>
c01013f7:	83 c4 20             	add    $0x20,%esp
c01013fa:	e8 84 fb ff ff       	call   c0100f83 <backtrace>
c01013ff:	fa                   	cli    
c0101400:	f4                   	hlt    
    assert(!bitmap_isset(physmap, idx));
c0101401:	50                   	push   %eax
c0101402:	50                   	push   %eax
c0101403:	53                   	push   %ebx
c0101404:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c010140a:	e8 c5 54 00 00       	call   c01068d4 <bitmap_isset>
c010140f:	83 c4 10             	add    $0x10,%esp
c0101412:	84 c0                	test   %al,%al
c0101414:	74 28                	je     c010143e <pa_alloc+0xb8>
c0101416:	83 ec 0c             	sub    $0xc,%esp
c0101419:	68 a0 06 11 c0       	push   $0xc01106a0
c010141e:	6a 48                	push   $0x48
c0101420:	68 3d 05 11 c0       	push   $0xc011053d
c0101425:	68 d9 05 11 c0       	push   $0xc01105d9
c010142a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010142f:	e8 34 2e 00 00       	call   c0104268 <print>
c0101434:	83 c4 20             	add    $0x20,%esp
c0101437:	e8 47 fb ff ff       	call   c0100f83 <backtrace>
c010143c:	fa                   	cli    
c010143d:	f4                   	hlt    

    memset(PM2VA(idx), 0, PG_SIZE);
c010143e:	50                   	push   %eax
c010143f:	68 00 10 00 00       	push   $0x1000
c0101444:	6a 00                	push   $0x0
c0101446:	89 d8                	mov    %ebx,%eax
c0101448:	c1 e0 0c             	shl    $0xc,%eax
c010144b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0101450:	50                   	push   %eax
c0101451:	e8 d4 34 00 00       	call   c010492a <memset>

    bitmap_mark(physmap, idx);
c0101456:	5a                   	pop    %edx
c0101457:	59                   	pop    %ecx
c0101458:	53                   	push   %ebx
c0101459:	ff 35 a0 da 14 c0    	pushl  0xc014daa0
c010145f:	e8 56 53 00 00       	call   c01067ba <bitmap_mark>
}
c0101464:	83 c4 10             	add    $0x10,%esp
c0101467:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010146a:	c9                   	leave  
c010146b:	c3                   	ret    

c010146c <page_get>:
    lock_release(kpagereg->lk);

    return res;
}

void* page_get(void) {
c010146c:	55                   	push   %ebp
c010146d:	89 e5                	mov    %esp,%ebp
c010146f:	53                   	push   %ebx
c0101470:	52                   	push   %edx
    if (kpagereg == NULL)
c0101471:	83 3d a4 da 14 c0 00 	cmpl   $0x0,0xc014daa4
c0101478:	0f 85 a8 00 00 00    	jne    c0101526 <page_get+0xba>
/*
 * Create a page_registrar structure for the system
 */
static void
pagereg_create(void) {
    struct page_registrar* pagereg = kmalloc(sizeof(struct page_registrar));
c010147e:	83 ec 0c             	sub    $0xc,%esp
c0101481:	6a 0c                	push   $0xc
c0101483:	e8 e4 08 00 00       	call   c0101d6c <kmalloc>
c0101488:	89 c3                	mov    %eax,%ebx
    if (pagereg == NULL)
c010148a:	83 c4 10             	add    $0x10,%esp
c010148d:	85 c0                	test   %eax,%eax
c010148f:	75 19                	jne    c01014aa <page_get+0x3e>
        panic("kmalloc failed");
c0101491:	68 f5 05 11 c0       	push   $0xc01105f5
c0101496:	68 84 06 11 c0       	push   $0xc0110684
c010149b:	6a 60                	push   $0x60
c010149d:	68 3d 05 11 c0       	push   $0xc011053d
c01014a2:	e8 ce 27 00 00       	call   c0103c75 <_panic>
c01014a7:	83 c4 10             	add    $0x10,%esp


    pagereg->lk = lock_create("pagereg_lock");
c01014aa:	83 ec 0c             	sub    $0xc,%esp
c01014ad:	68 04 06 11 c0       	push   $0xc0110604
c01014b2:	e8 bc 1a 00 00       	call   c0102f73 <lock_create>
c01014b7:	89 03                	mov    %eax,(%ebx)
    if (pagereg->lk == NULL) {
c01014b9:	83 c4 10             	add    $0x10,%esp
c01014bc:	85 c0                	test   %eax,%eax
c01014be:	75 22                	jne    c01014e2 <page_get+0x76>
        kfree(pagereg);
c01014c0:	83 ec 0c             	sub    $0xc,%esp
c01014c3:	53                   	push   %ebx
c01014c4:	e8 a3 09 00 00       	call   c0101e6c <kfree>
        panic("lock_create failed");
c01014c9:	68 11 06 11 c0       	push   $0xc0110611
c01014ce:	68 84 06 11 c0       	push   $0xc0110684
c01014d3:	6a 66                	push   $0x66
c01014d5:	68 3d 05 11 c0       	push   $0xc011053d
c01014da:	e8 96 27 00 00       	call   c0103c75 <_panic>
c01014df:	83 c4 20             	add    $0x20,%esp
    }

    // queue for reusing stack_addrs
    pagereg->page_reuse = queue_create();
c01014e2:	e8 cc 4d 00 00       	call   c01062b3 <queue_create>
c01014e7:	89 43 04             	mov    %eax,0x4(%ebx)
    if (pagereg->page_reuse == NULL) {
c01014ea:	85 c0                	test   %eax,%eax
c01014ec:	75 2b                	jne    c0101519 <page_get+0xad>
        lock_destroy(pagereg->lk);
c01014ee:	83 ec 0c             	sub    $0xc,%esp
c01014f1:	ff 33                	pushl  (%ebx)
c01014f3:	e8 fe 1a 00 00       	call   c0102ff6 <lock_destroy>
        kfree(pagereg);
c01014f8:	89 1c 24             	mov    %ebx,(%esp)
c01014fb:	e8 6c 09 00 00       	call   c0101e6c <kfree>
        panic("queue_create failed");
c0101500:	68 24 06 11 c0       	push   $0xc0110624
c0101505:	68 84 06 11 c0       	push   $0xc0110684
c010150a:	6a 6e                	push   $0x6e
c010150c:	68 3d 05 11 c0       	push   $0xc011053d
c0101511:	e8 5f 27 00 00       	call   c0103c75 <_panic>
c0101516:	83 c4 20             	add    $0x20,%esp
    }

    pagereg->page_count = 0;
c0101519:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)

    kpagereg = pagereg;
c0101520:	89 1d a4 da 14 c0    	mov    %ebx,0xc014daa4

void* page_get(void) {
    if (kpagereg == NULL)
        pagereg_create();

    lock_acquire(kpagereg->lk);
c0101526:	83 ec 0c             	sub    $0xc,%esp
c0101529:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c010152e:	ff 30                	pushl  (%eax)
c0101530:	e8 be 1b 00 00       	call   c01030f3 <lock_acquire>
//     kfree(kpagereg);
// }

static bool
page_available(void) {
    assert(kpagereg != NULL);
c0101535:	83 c4 10             	add    $0x10,%esp
c0101538:	83 3d a4 da 14 c0 00 	cmpl   $0x0,0xc014daa4
c010153f:	75 2b                	jne    c010156c <page_get+0x100>
c0101541:	83 ec 0c             	sub    $0xc,%esp
c0101544:	68 74 06 11 c0       	push   $0xc0110674
c0101549:	68 85 00 00 00       	push   $0x85
c010154e:	68 3d 05 11 c0       	push   $0xc011053d
c0101553:	68 38 06 11 c0       	push   $0xc0110638
c0101558:	68 2b ff 10 c0       	push   $0xc010ff2b
c010155d:	e8 06 2d 00 00       	call   c0104268 <print>
c0101562:	83 c4 20             	add    $0x20,%esp
c0101565:	e8 19 fa ff ff       	call   c0100f83 <backtrace>
c010156a:	fa                   	cli    
c010156b:	f4                   	hlt    

    lock_acquire(kpagereg->lk);
c010156c:	83 ec 0c             	sub    $0xc,%esp
c010156f:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c0101574:	ff 30                	pushl  (%eax)
c0101576:	e8 78 1b 00 00       	call   c01030f3 <lock_acquire>
    bool res = kpagereg->page_count < NPAGES || !queue_isempty(kpagereg->page_reuse);
c010157b:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c0101580:	83 c4 10             	add    $0x10,%esp
c0101583:	bb 01 00 00 00       	mov    $0x1,%ebx
c0101588:	81 78 08 ff 07 00 00 	cmpl   $0x7ff,0x8(%eax)
c010158f:	7e 15                	jle    c01015a6 <page_get+0x13a>
c0101591:	83 ec 0c             	sub    $0xc,%esp
c0101594:	ff 70 04             	pushl  0x4(%eax)
c0101597:	e8 ba 4e 00 00       	call   c0106456 <queue_isempty>
c010159c:	83 c4 10             	add    $0x10,%esp
c010159f:	31 db                	xor    %ebx,%ebx
c01015a1:	85 c0                	test   %eax,%eax
c01015a3:	0f 94 c3             	sete   %bl
    lock_release(kpagereg->lk);
c01015a6:	83 ec 0c             	sub    $0xc,%esp
c01015a9:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c01015ae:	ff 30                	pushl  (%eax)
c01015b0:	e8 af 1c 00 00       	call   c0103264 <lock_release>
    if (kpagereg == NULL)
        pagereg_create();

    lock_acquire(kpagereg->lk);

    if (!page_available())
c01015b5:	83 c4 10             	add    $0x10,%esp
c01015b8:	85 db                	test   %ebx,%ebx
c01015ba:	75 1c                	jne    c01015d8 <page_get+0x16c>
        panic("OOM: no more pages available");
c01015bc:	68 49 06 11 c0       	push   $0xc0110649
c01015c1:	68 94 06 11 c0       	push   $0xc0110694
c01015c6:	68 95 00 00 00       	push   $0x95
c01015cb:	68 3d 05 11 c0       	push   $0xc011053d
c01015d0:	e8 a0 26 00 00       	call   c0103c75 <_panic>
c01015d5:	83 c4 10             	add    $0x10,%esp

    void* page_addr = NULL;
    if (!queue_isempty(kpagereg->page_reuse)) {
c01015d8:	83 ec 0c             	sub    $0xc,%esp
c01015db:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c01015e0:	ff 70 04             	pushl  0x4(%eax)
c01015e3:	e8 6e 4e 00 00       	call   c0106456 <queue_isempty>
c01015e8:	83 c4 10             	add    $0x10,%esp
c01015eb:	85 c0                	test   %eax,%eax
c01015ed:	75 35                	jne    c0101624 <page_get+0x1b8>
        page_addr = (void*) queue_front(kpagereg->page_reuse);
c01015ef:	83 ec 0c             	sub    $0xc,%esp
c01015f2:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c01015f7:	ff 70 04             	pushl  0x4(%eax)
c01015fa:	e8 e4 4d 00 00       	call   c01063e3 <queue_front>
c01015ff:	89 c3                	mov    %eax,%ebx
        queue_pop(kpagereg->page_reuse);
c0101601:	58                   	pop    %eax
c0101602:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c0101607:	ff 70 04             	pushl  0x4(%eax)
c010160a:	e8 61 4d 00 00       	call   c0106370 <queue_pop>
        memset(page_addr, 0, STACK_SIZE);
c010160f:	83 c4 0c             	add    $0xc,%esp
c0101612:	68 00 10 00 00       	push   $0x1000
c0101617:	6a 00                	push   $0x0
c0101619:	53                   	push   %ebx
c010161a:	e8 0b 33 00 00       	call   c010492a <memset>
c010161f:	83 c4 10             	add    $0x10,%esp
c0101622:	eb 0f                	jmp    c0101633 <page_get+0x1c7>
    } else {
        page_addr = kpalloc();
c0101624:	e8 c2 00 00 00       	call   c01016eb <kpalloc>
c0101629:	89 c3                	mov    %eax,%ebx
        kpagereg->page_count++;
c010162b:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c0101630:	ff 40 08             	incl   0x8(%eax)
    }

    lock_release(kpagereg->lk);
c0101633:	83 ec 0c             	sub    $0xc,%esp
c0101636:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c010163b:	ff 30                	pushl  (%eax)
c010163d:	e8 22 1c 00 00       	call   c0103264 <lock_release>

    return page_addr;
}
c0101642:	89 d8                	mov    %ebx,%eax
c0101644:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101647:	c9                   	leave  
c0101648:	c3                   	ret    

c0101649 <page_return>:

void
page_return(void* page_addr) {
c0101649:	55                   	push   %ebp
c010164a:	89 e5                	mov    %esp,%ebp
c010164c:	53                   	push   %ebx
c010164d:	51                   	push   %ecx
c010164e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(kpagereg != NULL);
c0101651:	83 3d a4 da 14 c0 00 	cmpl   $0x0,0xc014daa4
c0101658:	75 2b                	jne    c0101685 <page_return+0x3c>
c010165a:	83 ec 0c             	sub    $0xc,%esp
c010165d:	68 68 06 11 c0       	push   $0xc0110668
c0101662:	68 a8 00 00 00       	push   $0xa8
c0101667:	68 3d 05 11 c0       	push   $0xc011053d
c010166c:	68 38 06 11 c0       	push   $0xc0110638
c0101671:	68 2b ff 10 c0       	push   $0xc010ff2b
c0101676:	e8 ed 2b 00 00       	call   c0104268 <print>
c010167b:	83 c4 20             	add    $0x20,%esp
c010167e:	e8 00 f9 ff ff       	call   c0100f83 <backtrace>
c0101683:	fa                   	cli    
c0101684:	f4                   	hlt    

    lock_acquire(kpagereg->lk);
c0101685:	83 ec 0c             	sub    $0xc,%esp
c0101688:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c010168d:	ff 30                	pushl  (%eax)
c010168f:	e8 5f 1a 00 00       	call   c01030f3 <lock_acquire>

    queue_push(kpagereg->page_reuse, (void*) page_addr);
c0101694:	58                   	pop    %eax
c0101695:	5a                   	pop    %edx
c0101696:	53                   	push   %ebx
c0101697:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c010169c:	ff 70 04             	pushl  0x4(%eax)
c010169f:	e8 51 4c 00 00       	call   c01062f5 <queue_push>

    lock_release(kpagereg->lk);
c01016a4:	83 c4 10             	add    $0x10,%esp
c01016a7:	a1 a4 da 14 c0       	mov    0xc014daa4,%eax
c01016ac:	8b 00                	mov    (%eax),%eax
c01016ae:	89 45 08             	mov    %eax,0x8(%ebp)
}
c01016b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01016b4:	c9                   	leave  

    lock_acquire(kpagereg->lk);

    queue_push(kpagereg->page_reuse, (void*) page_addr);

    lock_release(kpagereg->lk);
c01016b5:	e9 aa 1b 00 00       	jmp    c0103264 <lock_release>

c01016ba <init_kmm>:

extern size_t kbrk_max;
size_t _kbrk;

void
init_kmm(void) {
c01016ba:	55                   	push   %ebp
c01016bb:	89 e5                	mov    %esp,%ebp
c01016bd:	83 ec 08             	sub    $0x8,%esp
    init_mm();
c01016c0:	e8 52 06 00 00       	call   c0101d17 <init_mm>
    _kbrk = kbrk_max;
c01016c5:	a1 b4 da 14 c0       	mov    0xc014dab4,%eax
c01016ca:	a3 b0 da 14 c0       	mov    %eax,0xc014dab0
    kbrk_max = ROUNDDOWN(kbrk_max, PG_SIZE);
c01016cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01016d4:	a3 b4 da 14 c0       	mov    %eax,0xc014dab4

    spinlock_init(&mem_lock);
c01016d9:	83 ec 0c             	sub    $0xc,%esp
c01016dc:	68 a8 da 14 c0       	push   $0xc014daa8
c01016e1:	e8 07 1f 00 00       	call   c01035ed <spinlock_init>
}
c01016e6:	83 c4 10             	add    $0x10,%esp
c01016e9:	c9                   	leave  
c01016ea:	c3                   	ret    

c01016eb <kpalloc>:

void*
kpalloc(void) {
c01016eb:	55                   	push   %ebp
c01016ec:	89 e5                	mov    %esp,%ebp
c01016ee:	53                   	push   %ebx
c01016ef:	83 ec 10             	sub    $0x10,%esp
    spinlock_acquire(&mem_lock);
c01016f2:	68 a8 da 14 c0       	push   $0xc014daa8
c01016f7:	e8 37 1f 00 00       	call   c0103633 <spinlock_acquire>

    size_t kptr = ROUNDDOWN(kbrk_max - PG_SIZE, PG_SIZE);
c01016fc:	a1 b4 da 14 c0       	mov    0xc014dab4,%eax
c0101701:	8d 98 00 f0 ff ff    	lea    -0x1000(%eax),%ebx
c0101707:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
    kbrk_max = kptr;
c010170d:	89 1d b4 da 14 c0    	mov    %ebx,0xc014dab4
    memset((void*) kptr, 0, PG_SIZE);
c0101713:	83 c4 0c             	add    $0xc,%esp
c0101716:	68 00 10 00 00       	push   $0x1000
c010171b:	6a 00                	push   $0x0
c010171d:	53                   	push   %ebx
c010171e:	e8 07 32 00 00       	call   c010492a <memset>

    spinlock_release(&mem_lock);
c0101723:	c7 04 24 a8 da 14 c0 	movl   $0xc014daa8,(%esp)
c010172a:	e8 ba 1f 00 00       	call   c01036e9 <spinlock_release>

    return (void*) (kptr);
}
c010172f:	89 d8                	mov    %ebx,%eax
c0101731:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101734:	c9                   	leave  
c0101735:	c3                   	ret    

c0101736 <isr_pgfault>:

    return (void*) (base - size);
}

void
isr_pgfault(struct trapframe* tf) {
c0101736:	55                   	push   %ebp
c0101737:	89 e5                	mov    %esp,%ebp
c0101739:	83 ec 10             	sub    $0x10,%esp
}

static inline uint32_t
rcr2(void) {
    uint32_t val;
    asm volatile("movl %%cr2,%0" : "=r" (val));
c010173c:	0f 20 d0             	mov    %cr2,%eax
    (void) tf;

    uint32_t fault_addr = rcr2();
    print("fa: %x\n", fault_addr);
c010173f:	50                   	push   %eax
c0101740:	68 d1 06 11 c0       	push   $0xc01106d1
c0101745:	e8 1e 2b 00 00       	call   c0104268 <print>
}
c010174a:	83 c4 10             	add    $0x10,%esp
c010174d:	c9                   	leave  
c010174e:	c3                   	ret    

c010174f <pgdir_walk>:

    return 0;
}

struct pte*
pgdir_walk(struct pde* pd, void* va, bool write, bool user, bool alloc) {
c010174f:	55                   	push   %ebp
c0101750:	89 e5                	mov    %esp,%ebp
c0101752:	57                   	push   %edi
c0101753:	56                   	push   %esi
c0101754:	53                   	push   %ebx
c0101755:	83 ec 1c             	sub    $0x1c,%esp
c0101758:	8b 55 0c             	mov    0xc(%ebp),%edx
c010175b:	8b 75 10             	mov    0x10(%ebp),%esi
c010175e:	8b 5d 14             	mov    0x14(%ebp),%ebx
c0101761:	8b 45 18             	mov    0x18(%ebp),%eax
    size_t pdx = PDX(va);
    size_t ptx = PTX(va);
c0101764:	89 d7                	mov    %edx,%edi
c0101766:	c1 ef 0c             	shr    $0xc,%edi
c0101769:	81 e7 ff 03 00 00    	and    $0x3ff,%edi
c010176f:	89 7d e4             	mov    %edi,-0x1c(%ebp)

    if (!pd[pdx].present && alloc) {
c0101772:	c1 ea 16             	shr    $0x16,%edx
c0101775:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0101778:	8d 14 91             	lea    (%ecx,%edx,4),%edx
c010177b:	89 d7                	mov    %edx,%edi
c010177d:	f6 02 01             	testb  $0x1,(%edx)
c0101780:	75 31                	jne    c01017b3 <pgdir_walk+0x64>
c0101782:	84 c0                	test   %al,%al
c0101784:	74 2d                	je     c01017b3 <pgdir_walk+0x64>
        size_t pno = pp_alloc();
c0101786:	e8 12 fb ff ff       	call   c010129d <pp_alloc>

        pd[pdx].present = true;
c010178b:	8a 0f                	mov    (%edi),%cl
c010178d:	83 c9 01             	or     $0x1,%ecx
        pd[pdx].write = write;
c0101790:	83 e6 01             	and    $0x1,%esi
c0101793:	d1 e6                	shl    %esi
c0101795:	83 e1 f9             	and    $0xfffffff9,%ecx
        pd[pdx].user = user;
c0101798:	83 e3 01             	and    $0x1,%ebx
c010179b:	c1 e3 02             	shl    $0x2,%ebx
c010179e:	09 f1                	or     %esi,%ecx
c01017a0:	09 cb                	or     %ecx,%ebx
c01017a2:	88 1f                	mov    %bl,(%edi)
        pd[pdx].addr = pno;
c01017a4:	c1 e0 0c             	shl    $0xc,%eax
c01017a7:	8b 0f                	mov    (%edi),%ecx
c01017a9:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
c01017af:	09 c8                	or     %ecx,%eax
c01017b1:	89 07                	mov    %eax,(%edi)
    }

    struct pde* pt = PM2VA(pd[pdx].addr);
c01017b3:	8b 07                	mov    (%edi),%eax

    return (struct pte*) (pt + ptx);
c01017b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01017ba:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01017bd:	8d 84 b0 00 00 00 c0 	lea    -0x40000000(%eax,%esi,4),%eax

}
c01017c4:	83 c4 1c             	add    $0x1c,%esp
c01017c7:	5b                   	pop    %ebx
c01017c8:	5e                   	pop    %esi
c01017c9:	5f                   	pop    %edi
c01017ca:	5d                   	pop    %ebp
c01017cb:	c3                   	ret    

c01017cc <page_insert>:
#include <isr.h>
#include <mboot.h>
#include <errno.h>

int
page_insert(struct pde* pgdir, size_t pno, void* va, bool write, bool user) {
c01017cc:	55                   	push   %ebp
c01017cd:	89 e5                	mov    %esp,%ebp
c01017cf:	57                   	push   %edi
c01017d0:	56                   	push   %esi
c01017d1:	53                   	push   %ebx
c01017d2:	83 ec 0c             	sub    $0xc,%esp
c01017d5:	8b 7d 08             	mov    0x8(%ebp),%edi
c01017d8:	8b 75 14             	mov    0x14(%ebp),%esi
c01017db:	8b 5d 18             	mov    0x18(%ebp),%ebx
    assert(pgdir != NULL);
c01017de:	85 ff                	test   %edi,%edi
c01017e0:	75 28                	jne    c010180a <page_insert+0x3e>
c01017e2:	83 ec 0c             	sub    $0xc,%esp
c01017e5:	68 74 07 11 c0       	push   $0xc0110774
c01017ea:	6a 0e                	push   $0xe
c01017ec:	68 d9 06 11 c0       	push   $0xc01106d9
c01017f1:	68 e3 06 11 c0       	push   $0xc01106e3
c01017f6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01017fb:	e8 68 2a 00 00       	call   c0104268 <print>
c0101800:	83 c4 20             	add    $0x20,%esp
c0101803:	e8 7b f7 ff ff       	call   c0100f83 <backtrace>
c0101808:	fa                   	cli    
c0101809:	f4                   	hlt    

    struct pte* pg = pgdir_walk(pgdir, va, write, user, true);
c010180a:	83 ec 0c             	sub    $0xc,%esp
c010180d:	6a 01                	push   $0x1
c010180f:	0f b6 c3             	movzbl %bl,%eax
c0101812:	50                   	push   %eax
c0101813:	89 f0                	mov    %esi,%eax
c0101815:	0f b6 c0             	movzbl %al,%eax
c0101818:	50                   	push   %eax
c0101819:	ff 75 10             	pushl  0x10(%ebp)
c010181c:	57                   	push   %edi
c010181d:	e8 2d ff ff ff       	call   c010174f <pgdir_walk>
c0101822:	89 c7                	mov    %eax,%edi
    if (pg == NULL)
c0101824:	83 c4 20             	add    $0x20,%esp
        return ENOMEM;
c0101827:	b8 02 00 00 00       	mov    $0x2,%eax
int
page_insert(struct pde* pgdir, size_t pno, void* va, bool write, bool user) {
    assert(pgdir != NULL);

    struct pte* pg = pgdir_walk(pgdir, va, write, user, true);
    if (pg == NULL)
c010182c:	85 ff                	test   %edi,%edi
c010182e:	74 60                	je     c0101890 <page_insert+0xc4>
        return ENOMEM;

    assert(!pg->present);
c0101830:	f6 07 01             	testb  $0x1,(%edi)
c0101833:	74 28                	je     c010185d <page_insert+0x91>
c0101835:	83 ec 0c             	sub    $0xc,%esp
c0101838:	68 74 07 11 c0       	push   $0xc0110774
c010183d:	6a 14                	push   $0x14
c010183f:	68 d9 06 11 c0       	push   $0xc01106d9
c0101844:	68 f1 06 11 c0       	push   $0xc01106f1
c0101849:	68 2b ff 10 c0       	push   $0xc010ff2b
c010184e:	e8 15 2a 00 00       	call   c0104268 <print>
c0101853:	83 c4 20             	add    $0x20,%esp
c0101856:	e8 28 f7 ff ff       	call   c0100f83 <backtrace>
c010185b:	fa                   	cli    
c010185c:	f4                   	hlt    

    pg->present = true;
c010185d:	8a 07                	mov    (%edi),%al
c010185f:	83 c8 01             	or     $0x1,%eax
    pg->write = write;
c0101862:	83 e6 01             	and    $0x1,%esi
c0101865:	d1 e6                	shl    %esi
c0101867:	83 e0 f9             	and    $0xfffffff9,%eax
    pg->user = user;
c010186a:	83 e3 01             	and    $0x1,%ebx
c010186d:	8d 14 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edx
c0101874:	89 f3                	mov    %esi,%ebx
c0101876:	09 c3                	or     %eax,%ebx
c0101878:	09 d3                	or     %edx,%ebx
c010187a:	88 1f                	mov    %bl,(%edi)
    pg->addr = pno;
c010187c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010187f:	c1 e0 0c             	shl    $0xc,%eax
c0101882:	8b 17                	mov    (%edi),%edx
c0101884:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010188a:	09 d0                	or     %edx,%eax
c010188c:	89 07                	mov    %eax,(%edi)

    return 0;
c010188e:	31 c0                	xor    %eax,%eax
}
c0101890:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0101893:	5b                   	pop    %ebx
c0101894:	5e                   	pop    %esi
c0101895:	5f                   	pop    %edi
c0101896:	5d                   	pop    %ebp
c0101897:	c3                   	ret    

c0101898 <boot_map>:

}

void
boot_map(struct pde* pd, void* va, size_t pa, size_t bytes,
         bool write, bool user) {
c0101898:	55                   	push   %ebp
c0101899:	89 e5                	mov    %esp,%ebp
c010189b:	57                   	push   %edi
c010189c:	56                   	push   %esi
c010189d:	53                   	push   %ebx
c010189e:	83 ec 1c             	sub    $0x1c,%esp
c01018a1:	8a 4d 18             	mov    0x18(%ebp),%cl
c01018a4:	8a 45 1c             	mov    0x1c(%ebp),%al
c01018a7:	88 45 e7             	mov    %al,-0x19(%ebp)

    for (size_t i = 0; i < bytes; i += PG_SIZE) {
c01018aa:	31 db                	xor    %ebx,%ebx
        struct pte* pg = pgdir_walk(pd, va + i, write, user, true);

        pg->present = true;
        pg->write = write;
        pg->user = user;
c01018ac:	89 c7                	mov    %eax,%edi
c01018ae:	83 e7 01             	and    $0x1,%edi
c01018b1:	c1 e7 02             	shl    $0x2,%edi

void
boot_map(struct pde* pd, void* va, size_t pa, size_t bytes,
         bool write, bool user) {

    for (size_t i = 0; i < bytes; i += PG_SIZE) {
c01018b4:	3b 5d 14             	cmp    0x14(%ebp),%ebx
c01018b7:	73 59                	jae    c0101912 <boot_map+0x7a>
        struct pte* pg = pgdir_walk(pd, va + i, write, user, true);
c01018b9:	83 ec 0c             	sub    $0xc,%esp
c01018bc:	6a 01                	push   $0x1
c01018be:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01018c2:	50                   	push   %eax
c01018c3:	0f b6 c1             	movzbl %cl,%eax
c01018c6:	88 4d e6             	mov    %cl,-0x1a(%ebp)
c01018c9:	50                   	push   %eax
c01018ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01018cd:	01 d8                	add    %ebx,%eax
c01018cf:	50                   	push   %eax
c01018d0:	ff 75 08             	pushl  0x8(%ebp)
c01018d3:	e8 77 fe ff ff       	call   c010174f <pgdir_walk>

        pg->present = true;
c01018d8:	8b 30                	mov    (%eax),%esi
c01018da:	83 ce 01             	or     $0x1,%esi
        pg->write = write;
c01018dd:	8a 4d e6             	mov    -0x1a(%ebp),%cl
c01018e0:	88 ca                	mov    %cl,%dl
c01018e2:	83 e2 01             	and    $0x1,%edx
c01018e5:	d1 e2                	shl    %edx
c01018e7:	83 e6 f9             	and    $0xfffffff9,%esi
        pg->user = user;
c01018ea:	09 f2                	or     %esi,%edx
c01018ec:	09 fa                	or     %edi,%edx
c01018ee:	88 10                	mov    %dl,(%eax)
        pg->addr = PA2PM(pa + i);
c01018f0:	8b 55 10             	mov    0x10(%ebp),%edx
c01018f3:	01 da                	add    %ebx,%edx
c01018f5:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01018fb:	8b 30                	mov    (%eax),%esi
c01018fd:	81 e6 ff 0f 00 00    	and    $0xfff,%esi
c0101903:	09 f2                	or     %esi,%edx
c0101905:	89 10                	mov    %edx,(%eax)

void
boot_map(struct pde* pd, void* va, size_t pa, size_t bytes,
         bool write, bool user) {

    for (size_t i = 0; i < bytes; i += PG_SIZE) {
c0101907:	81 c3 00 10 00 00    	add    $0x1000,%ebx
c010190d:	83 c4 20             	add    $0x20,%esp
c0101910:	eb a2                	jmp    c01018b4 <boot_map+0x1c>
        pg->present = true;
        pg->write = write;
        pg->user = user;
        pg->addr = PA2PM(pa + i);
    }
}
c0101912:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0101915:	5b                   	pop    %ebx
c0101916:	5e                   	pop    %esi
c0101917:	5f                   	pop    %edi
c0101918:	5d                   	pop    %ebp
c0101919:	c3                   	ret    

c010191a <mmio_map>:
// page_map(void) {

// }

void*
mmio_map(size_t pa, size_t size) {
c010191a:	55                   	push   %ebp
c010191b:	89 e5                	mov    %esp,%ebp
c010191d:	53                   	push   %ebx
c010191e:	52                   	push   %edx
    static size_t base = MMIOBASE;

    size = ROUNDUP(size, PG_SIZE);
c010191f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101922:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
c0101928:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx

    if (base + size > MMIOLIM)
c010192e:	a1 00 50 14 c0       	mov    0xc0145000,%eax
c0101933:	01 d8                	add    %ebx,%eax
c0101935:	3d 00 00 c0 bf       	cmp    $0xbfc00000,%eax
c010193a:	76 19                	jbe    c0101955 <mmio_map+0x3b>
        panic("ERROR: this reservation would overflow the mmio region");
c010193c:	68 fe 06 11 c0       	push   $0xc01106fe
c0101941:	68 68 07 11 c0       	push   $0xc0110768
c0101946:	6a 4c                	push   $0x4c
c0101948:	68 d9 06 11 c0       	push   $0xc01106d9
c010194d:	e8 23 23 00 00       	call   c0103c75 <_panic>
c0101952:	83 c4 10             	add    $0x10,%esp

    boot_map(kpd, (void*) base, pa, size, true, false);
c0101955:	50                   	push   %eax
c0101956:	50                   	push   %eax
c0101957:	6a 00                	push   $0x0
c0101959:	6a 01                	push   $0x1
c010195b:	53                   	push   %ebx
c010195c:	ff 75 08             	pushl  0x8(%ebp)
c010195f:	ff 35 00 50 14 c0    	pushl  0xc0145000
c0101965:	ff 35 a8 d2 14 c0    	pushl  0xc014d2a8
c010196b:	e8 28 ff ff ff       	call   c0101898 <boot_map>
    base += size;
c0101970:	a1 00 50 14 c0       	mov    0xc0145000,%eax
c0101975:	01 c3                	add    %eax,%ebx
c0101977:	89 1d 00 50 14 c0    	mov    %ebx,0xc0145000

    return (void*) (base - size);
}
c010197d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101980:	c9                   	leave  
c0101981:	c3                   	ret    

c0101982 <init_vmm>:
    uint32_t fault_addr = rcr2();
    print("fa: %x\n", fault_addr);
}

void
init_vmm(void) {
c0101982:	55                   	push   %ebp
c0101983:	89 e5                	mov    %esp,%ebp
c0101985:	53                   	push   %ebx
c0101986:	51                   	push   %ecx
    extern char bstack[];

    // allocate a page directory for the kernel
    kpd = kpalloc();
c0101987:	e8 5f fd ff ff       	call   c01016eb <kpalloc>
c010198c:	a3 a8 d2 14 c0       	mov    %eax,0xc014d2a8

    boot_map(kpd, (void*) KADDR, 0, npages * PG_SIZE, true, false);
c0101991:	53                   	push   %ebx
c0101992:	53                   	push   %ebx
c0101993:	6a 00                	push   $0x0
c0101995:	6a 01                	push   $0x1
c0101997:	8b 15 ac d2 14 c0    	mov    0xc014d2ac,%edx
c010199d:	c1 e2 0c             	shl    $0xc,%edx
c01019a0:	52                   	push   %edx
c01019a1:	6a 00                	push   $0x0
c01019a3:	68 00 00 00 c0       	push   $0xc0000000
c01019a8:	50                   	push   %eax
c01019a9:	e8 ea fe ff ff       	call   c0101898 <boot_map>

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c01019ae:	83 c4 20             	add    $0x20,%esp
c01019b1:	b8 00 c0 13 c0       	mov    $0xc013c000,%eax
c01019b6:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c01019bb:	77 22                	ja     c01019df <init_vmm+0x5d>
        panic(file, line, "PADDR called with invalid va %08x", va);
c01019bd:	52                   	push   %edx
c01019be:	50                   	push   %eax
c01019bf:	68 61 05 11 c0       	push   $0xc0110561
c01019c4:	6a 64                	push   $0x64
c01019c6:	68 d9 06 11 c0       	push   $0xc01106d9
c01019cb:	68 60 07 11 c0       	push   $0xc0110760
c01019d0:	6a 65                	push   $0x65
c01019d2:	68 83 05 11 c0       	push   $0xc0110583
c01019d7:	e8 99 22 00 00       	call   c0103c75 <_panic>
c01019dc:	83 c4 20             	add    $0x20,%esp
    boot_map(kpd, (void*) (KADDR - BIT(15)), PADDR(bstack), BIT(15), true, false);
c01019df:	53                   	push   %ebx
c01019e0:	53                   	push   %ebx
c01019e1:	6a 00                	push   $0x0
c01019e3:	6a 01                	push   $0x1
c01019e5:	68 00 80 00 00       	push   $0x8000
c01019ea:	68 00 c0 13 00       	push   $0x13c000
c01019ef:	68 00 80 ff bf       	push   $0xbfff8000
c01019f4:	ff 35 a8 d2 14 c0    	pushl  0xc014d2a8
c01019fa:	e8 99 fe ff ff       	call   c0101898 <boot_map>

    lcr3(PADDR(kpd));
c01019ff:	8b 1d a8 d2 14 c0    	mov    0xc014d2a8,%ebx

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c0101a05:	83 c4 20             	add    $0x20,%esp
c0101a08:	81 fb ff ff ff bf    	cmp    $0xbfffffff,%ebx
c0101a0e:	77 22                	ja     c0101a32 <init_vmm+0xb0>
        panic(file, line, "PADDR called with invalid va %08x", va);
c0101a10:	51                   	push   %ecx
c0101a11:	53                   	push   %ebx
c0101a12:	68 61 05 11 c0       	push   $0xc0110561
c0101a17:	6a 66                	push   $0x66
c0101a19:	68 d9 06 11 c0       	push   $0xc01106d9
c0101a1e:	68 60 07 11 c0       	push   $0xc0110760
c0101a23:	6a 65                	push   $0x65
c0101a25:	68 83 05 11 c0       	push   $0xc0110583
c0101a2a:	e8 46 22 00 00       	call   c0103c75 <_panic>
c0101a2f:	83 c4 20             	add    $0x20,%esp
    return val;
}

static inline void
lcr3(uint32_t val) {
    asm volatile("movl %0,%%cr3" : : "r" (val));
c0101a32:	81 c3 00 00 00 40    	add    $0x40000000,%ebx
c0101a38:	0f 22 db             	mov    %ebx,%cr3
}

static inline uint32_t
rcr0(void) {
    uint32_t val;
    asm volatile("movl %%cr0,%0" : "=r" (val));
c0101a3b:	0f 20 c0             	mov    %cr0,%eax
c0101a3e:	83 e0 f3             	and    $0xfffffff3,%eax
    asm volatile("ltr %0" : : "r" (sel));
}

static inline void
lcr0(uint32_t val) {
    asm volatile("movl %0,%%cr0" : : "r" (val));
c0101a41:	0d 23 00 05 80       	or     $0x80050023,%eax
c0101a46:	0f 22 c0             	mov    %eax,%cr0
    uint32_t cr0 = rcr0();
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_MP;
    cr0 &= ~(CR0_TS | CR0_EM);
    lcr0(cr0);

    mbi = VADDR(mbi);
c0101a49:	8b 1d c0 da 14 c0    	mov    0xc014dac0,%ebx

#define VADDR(pa) _vaddr(__FILE__, __LINE__, (size_t) pa)

static inline void*
_vaddr(const char* file, int line, size_t pa) {
    if (PA2PM(pa) >= npages)
c0101a4f:	89 d8                	mov    %ebx,%eax
c0101a51:	c1 e8 0c             	shr    $0xc,%eax
c0101a54:	3b 05 ac d2 14 c0    	cmp    0xc014d2ac,%eax
c0101a5a:	72 22                	jb     c0101a7e <init_vmm+0xfc>
        panic(file, line, "VADDR called with invalid pa %08x", pa);
c0101a5c:	52                   	push   %edx
c0101a5d:	53                   	push   %ebx
c0101a5e:	68 35 07 11 c0       	push   $0xc0110735
c0101a63:	6a 6d                	push   $0x6d
c0101a65:	68 d9 06 11 c0       	push   $0xc01106d9
c0101a6a:	68 58 07 11 c0       	push   $0xc0110758
c0101a6f:	6a 70                	push   $0x70
c0101a71:	68 83 05 11 c0       	push   $0xc0110583
c0101a76:	e8 fa 21 00 00       	call   c0103c75 <_panic>
c0101a7b:	83 c4 20             	add    $0x20,%esp
c0101a7e:	81 eb 00 00 00 40    	sub    $0x40000000,%ebx
c0101a84:	89 1d c0 da 14 c0    	mov    %ebx,0xc014dac0

    isr_install_handler(ISR_PGFLT, isr_pgfault);
c0101a8a:	50                   	push   %eax
c0101a8b:	50                   	push   %eax
c0101a8c:	68 36 17 10 c0       	push   $0xc0101736
c0101a91:	6a 0e                	push   $0xe
c0101a93:	e8 39 ec ff ff       	call   c01006d1 <isr_install_handler>
}
c0101a98:	83 c4 10             	add    $0x10,%esp
c0101a9b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101a9e:	c9                   	leave  
c0101a9f:	c3                   	ret    

c0101aa0 <pgdir_create>:

struct pde*
pgdir_create(void) {
c0101aa0:	55                   	push   %ebp
c0101aa1:	89 e5                	mov    %esp,%ebp
c0101aa3:	53                   	push   %ebx
c0101aa4:	50                   	push   %eax
    struct pde* pgdir = page_get();
c0101aa5:	e8 c2 f9 ff ff       	call   c010146c <page_get>
c0101aaa:	89 c3                	mov    %eax,%ebx

    memset(pgdir, 0, PG_SIZE);
c0101aac:	52                   	push   %edx
c0101aad:	68 00 10 00 00       	push   $0x1000
c0101ab2:	6a 00                	push   $0x0
c0101ab4:	50                   	push   %eax
c0101ab5:	e8 70 2e 00 00       	call   c010492a <memset>
c0101aba:	83 c4 10             	add    $0x10,%esp
c0101abd:	b8 ec 0b 00 00       	mov    $0xbec,%eax

    for (size_t i = PDX(UTOP); i < TBL_SIZE; ++i)
        pgdir[i] = kpd[i];
c0101ac2:	8b 15 a8 d2 14 c0    	mov    0xc014d2a8,%edx
c0101ac8:	8b 14 02             	mov    (%edx,%eax,1),%edx
c0101acb:	89 14 03             	mov    %edx,(%ebx,%eax,1)
c0101ace:	83 c0 04             	add    $0x4,%eax
pgdir_create(void) {
    struct pde* pgdir = page_get();

    memset(pgdir, 0, PG_SIZE);

    for (size_t i = PDX(UTOP); i < TBL_SIZE; ++i)
c0101ad1:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0101ad6:	75 ea                	jne    c0101ac2 <pgdir_create+0x22>
        pgdir[i] = kpd[i];

    return pgdir;
}
c0101ad8:	89 d8                	mov    %ebx,%eax
c0101ada:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101add:	c9                   	leave  
c0101ade:	c3                   	ret    

c0101adf <pgdir_delete>:

void
pgdir_delete(struct pde* pgdir) {
c0101adf:	55                   	push   %ebp
c0101ae0:	89 e5                	mov    %esp,%ebp
    page_return(pgdir);
}
c0101ae2:	5d                   	pop    %ebp
    return pgdir;
}

void
pgdir_delete(struct pde* pgdir) {
    page_return(pgdir);
c0101ae3:	e9 61 fb ff ff       	jmp    c0101649 <page_return>

c0101ae8 <init_mem>:
size_t kbrk_min;
size_t kbrk;
size_t kbrk_max;

void
init_mem(void) {
c0101ae8:	55                   	push   %ebp
c0101ae9:	89 e5                	mov    %esp,%ebp
    kbrk_min = ROUNDUP(KHEAP, PG_SIZE);
c0101aeb:	b8 ff 0f 19 c0       	mov    $0xc0190fff,%eax
c0101af0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0101af5:	a3 bc da 14 c0       	mov    %eax,0xc014dabc
    kbrk_max = kbrk_min + ROUNDDOWN(MAX_HEAP, PG_SIZE);
c0101afa:	8d 90 00 00 80 00    	lea    0x800000(%eax),%edx
c0101b00:	89 15 b4 da 14 c0    	mov    %edx,0xc014dab4
    kbrk = kbrk_min;
c0101b06:	a3 b8 da 14 c0       	mov    %eax,0xc014dab8
}
c0101b0b:	5d                   	pop    %ebp
c0101b0c:	c3                   	ret    

c0101b0d <term_mem>:

void
term_mem(void) {
c0101b0d:	55                   	push   %ebp
c0101b0e:	89 e5                	mov    %esp,%ebp
c0101b10:	83 ec 14             	sub    $0x14,%esp
    print("term_mem()");
c0101b13:	68 80 07 11 c0       	push   $0xc0110780
c0101b18:	e8 4b 27 00 00       	call   c0104268 <print>
}
c0101b1d:	83 c4 10             	add    $0x10,%esp
c0101b20:	c9                   	leave  
c0101b21:	c3                   	ret    

c0101b22 <mem_reset_brk>:

void
mem_reset_brk() {
c0101b22:	55                   	push   %ebp
c0101b23:	89 e5                	mov    %esp,%ebp
    kbrk = kbrk_min;
c0101b25:	a1 bc da 14 c0       	mov    0xc014dabc,%eax
c0101b2a:	a3 b8 da 14 c0       	mov    %eax,0xc014dab8
}
c0101b2f:	5d                   	pop    %ebp
c0101b30:	c3                   	ret    

c0101b31 <mem_sbrk>:

void*
mem_sbrk(size_t incr) {
c0101b31:	55                   	push   %ebp
c0101b32:	89 e5                	mov    %esp,%ebp
c0101b34:	56                   	push   %esi
c0101b35:	53                   	push   %ebx
    size_t old_brk = kbrk;
c0101b36:	8b 35 b8 da 14 c0    	mov    0xc014dab8,%esi

    incr = ROUNDUP(incr, PG_SIZE);
c0101b3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b3f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
c0101b45:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
    if (kbrk + incr > kbrk_max)
c0101b4b:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
c0101b4e:	3b 05 b4 da 14 c0    	cmp    0xc014dab4,%eax
c0101b54:	76 19                	jbe    c0101b6f <mem_sbrk+0x3e>
        panic("ERROR: mem_sbrk failed. Ran out of memory...\n");
c0101b56:	68 8b 07 11 c0       	push   $0xc011078b
c0101b5b:	68 c4 07 11 c0       	push   $0xc01107c4
c0101b60:	6a 23                	push   $0x23
c0101b62:	68 b9 07 11 c0       	push   $0xc01107b9
c0101b67:	e8 09 21 00 00       	call   c0103c75 <_panic>
c0101b6c:	83 c4 10             	add    $0x10,%esp
    kbrk += incr;
c0101b6f:	01 1d b8 da 14 c0    	add    %ebx,0xc014dab8

    return (void*) old_brk;
}
c0101b75:	89 f0                	mov    %esi,%eax
c0101b77:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0101b7a:	5b                   	pop    %ebx
c0101b7b:	5e                   	pop    %esi
c0101b7c:	5d                   	pop    %ebp
c0101b7d:	c3                   	ret    

c0101b7e <mem_heap_lo>:

void*
mem_heap_lo() {
c0101b7e:	55                   	push   %ebp
c0101b7f:	89 e5                	mov    %esp,%ebp
    return (void*) kbrk_min;
}
c0101b81:	a1 bc da 14 c0       	mov    0xc014dabc,%eax
c0101b86:	5d                   	pop    %ebp
c0101b87:	c3                   	ret    

c0101b88 <mem_heap_hi>:

void*
mem_heap_hi() {
c0101b88:	55                   	push   %ebp
c0101b89:	89 e5                	mov    %esp,%ebp
    return (void*) (kbrk - 1);
c0101b8b:	a1 b8 da 14 c0       	mov    0xc014dab8,%eax
c0101b90:	48                   	dec    %eax
}
c0101b91:	5d                   	pop    %ebp
c0101b92:	c3                   	ret    

c0101b93 <mem_heapsize>:

size_t
mem_heapsize() {
c0101b93:	55                   	push   %ebp
c0101b94:	89 e5                	mov    %esp,%ebp
    return (size_t) (kbrk - kbrk_min);
c0101b96:	a1 b8 da 14 c0       	mov    0xc014dab8,%eax
c0101b9b:	2b 05 bc da 14 c0    	sub    0xc014dabc,%eax
}
c0101ba1:	5d                   	pop    %ebp
c0101ba2:	c3                   	ret    

c0101ba3 <mem_pagesize>:

size_t
mem_pagesize() {
c0101ba3:	55                   	push   %ebp
c0101ba4:	89 e5                	mov    %esp,%ebp
    return (size_t) PG_SIZE;
}
c0101ba6:	b8 00 10 00 00       	mov    $0x1000,%eax
c0101bab:	5d                   	pop    %ebp
c0101bac:	c3                   	ret    

c0101bad <copy_payload>:
    insert_free_block(block_surplus);
    coalesce_free_block(block_surplus);
}

// Copies the payload over from src to dst
static void copy_payload(struct block* src, struct block* dst) {
c0101bad:	55                   	push   %ebp
c0101bae:	89 e5                	mov    %esp,%ebp
c0101bb0:	56                   	push   %esi
c0101bb1:	53                   	push   %ebx
    // WORD_SIZE increments
    src_payload = (uint32_t*) ADD(src, WORD_SIZE);
    dst_payload = (uint32_t*) ADD(dst, WORD_SIZE);

    // sizes are all aligned so can just divide by WORD_SIZE
    for (size_t i = 0; i < payload_size / WORD_SIZE; i++)
c0101bb2:	8b 08                	mov    (%eax),%ecx
c0101bb4:	83 e1 fc             	and    $0xfffffffc,%ecx
c0101bb7:	83 e9 04             	sub    $0x4,%ecx
c0101bba:	c1 e9 02             	shr    $0x2,%ecx
c0101bbd:	31 db                	xor    %ebx,%ebx
c0101bbf:	39 cb                	cmp    %ecx,%ebx
c0101bc1:	74 0b                	je     c0101bce <copy_payload+0x21>
        dst_payload[i] = src_payload[i];
c0101bc3:	8b 74 98 04          	mov    0x4(%eax,%ebx,4),%esi
c0101bc7:	89 74 9a 04          	mov    %esi,0x4(%edx,%ebx,4)
    // WORD_SIZE increments
    src_payload = (uint32_t*) ADD(src, WORD_SIZE);
    dst_payload = (uint32_t*) ADD(dst, WORD_SIZE);

    // sizes are all aligned so can just divide by WORD_SIZE
    for (size_t i = 0; i < payload_size / WORD_SIZE; i++)
c0101bcb:	43                   	inc    %ebx
c0101bcc:	eb f1                	jmp    c0101bbf <copy_payload+0x12>
        dst_payload[i] = src_payload[i];
}
c0101bce:	5b                   	pop    %ebx
c0101bcf:	5e                   	pop    %esi
c0101bd0:	5d                   	pop    %ebp
c0101bd1:	c3                   	ret    

c0101bd2 <insert_free_block>:
    }
    return NULL;
}

/* Insert free_block at the head of the list.  (LIFO) */
static void insert_free_block(struct block* free_block) {
c0101bd2:	55                   	push   %ebp
c0101bd3:	89 e5                	mov    %esp,%ebp
c0101bd5:	53                   	push   %ebx
c0101bd6:	52                   	push   %edx
c0101bd7:	89 c3                	mov    %eax,%ebx
    struct block* oldHead = FREE_LIST_HEAD;
c0101bd9:	e8 a0 ff ff ff       	call   c0101b7e <mem_heap_lo>
c0101bde:	8b 00                	mov    (%eax),%eax

    free_block->next = oldHead;
c0101be0:	89 43 04             	mov    %eax,0x4(%ebx)
    if (oldHead != NULL)
c0101be3:	85 c0                	test   %eax,%eax
c0101be5:	74 03                	je     c0101bea <insert_free_block+0x18>
        oldHead->prev = free_block;
c0101be7:	89 58 08             	mov    %ebx,0x8(%eax)
    FREE_LIST_HEAD = free_block;
c0101bea:	e8 8f ff ff ff       	call   c0101b7e <mem_heap_lo>
c0101bef:	89 18                	mov    %ebx,(%eax)
}
c0101bf1:	58                   	pop    %eax
c0101bf2:	5b                   	pop    %ebx
c0101bf3:	5d                   	pop    %ebp
c0101bf4:	c3                   	ret    

c0101bf5 <find_free_block>:
    FREE_LIST_HEAD = first_free_block;
}

/* Find a free block of the requested size in the free list.  Returns
   NULL if no free block is large enough. */
static void* find_free_block(size_t size) {
c0101bf5:	55                   	push   %ebp
c0101bf6:	89 e5                	mov    %esp,%ebp
c0101bf8:	53                   	push   %ebx
c0101bf9:	51                   	push   %ecx
c0101bfa:	89 c3                	mov    %eax,%ebx
    struct block* free_block;

    free_block = FREE_LIST_HEAD;
c0101bfc:	e8 7d ff ff ff       	call   c0101b7e <mem_heap_lo>
c0101c01:	8b 00                	mov    (%eax),%eax
    while (free_block != NULL) {
c0101c03:	85 c0                	test   %eax,%eax
c0101c05:	74 0e                	je     c0101c15 <find_free_block+0x20>
        if (SIZE(free_block->sizeAndTags) >= size)
c0101c07:	8b 10                	mov    (%eax),%edx
c0101c09:	83 e2 fc             	and    $0xfffffffc,%edx
c0101c0c:	39 da                	cmp    %ebx,%edx
c0101c0e:	73 05                	jae    c0101c15 <find_free_block+0x20>
            return free_block;
        else
            free_block = free_block->next;
c0101c10:	8b 40 04             	mov    0x4(%eax),%eax
c0101c13:	eb ee                	jmp    c0101c03 <find_free_block+0xe>
    }
    return NULL;
}
c0101c15:	5a                   	pop    %edx
c0101c16:	5b                   	pop    %ebx
c0101c17:	5d                   	pop    %ebp
c0101c18:	c3                   	ret    

c0101c19 <remove_free_block>:
        oldHead->prev = free_block;
    FREE_LIST_HEAD = free_block;
}

/* Remove a free block from the free list. */
static void remove_free_block(struct block* free_block) {
c0101c19:	55                   	push   %ebp
c0101c1a:	89 e5                	mov    %esp,%ebp
c0101c1c:	57                   	push   %edi
c0101c1d:	56                   	push   %esi
c0101c1e:	53                   	push   %ebx
c0101c1f:	83 ec 0c             	sub    $0xc,%esp
c0101c22:	89 c6                	mov    %eax,%esi
    struct block* next_free_block = free_block->next;
c0101c24:	8b 58 04             	mov    0x4(%eax),%ebx
    struct block* prev_free_block = free_block->prev;
c0101c27:	8b 78 08             	mov    0x8(%eax),%edi

    if (next_free_block != NULL)
c0101c2a:	85 db                	test   %ebx,%ebx
c0101c2c:	74 03                	je     c0101c31 <remove_free_block+0x18>
        next_free_block->prev = prev_free_block;
c0101c2e:	89 7b 08             	mov    %edi,0x8(%ebx)

    if (free_block == FREE_LIST_HEAD)
c0101c31:	e8 48 ff ff ff       	call   c0101b7e <mem_heap_lo>
c0101c36:	3b 30                	cmp    (%eax),%esi
c0101c38:	75 09                	jne    c0101c43 <remove_free_block+0x2a>
        FREE_LIST_HEAD = next_free_block;
c0101c3a:	e8 3f ff ff ff       	call   c0101b7e <mem_heap_lo>
c0101c3f:	89 18                	mov    %ebx,(%eax)
c0101c41:	eb 03                	jmp    c0101c46 <remove_free_block+0x2d>
    else
        prev_free_block->next = next_free_block;
c0101c43:	89 5f 04             	mov    %ebx,0x4(%edi)
}
c0101c46:	83 c4 0c             	add    $0xc,%esp
c0101c49:	5b                   	pop    %ebx
c0101c4a:	5e                   	pop    %esi
c0101c4b:	5f                   	pop    %edi
c0101c4c:	5d                   	pop    %ebp
c0101c4d:	c3                   	ret    

c0101c4e <coalesce_free_block>:

/* Coalesce 'block' with any preceeding or following free blocks. */
static void coalesce_free_block(struct block* block) {
c0101c4e:	55                   	push   %ebp
c0101c4f:	89 e5                	mov    %esp,%ebp
c0101c51:	57                   	push   %edi
c0101c52:	56                   	push   %esi
c0101c53:	53                   	push   %ebx
c0101c54:	83 ec 1c             	sub    $0x1c,%esp
c0101c57:	89 c1                	mov    %eax,%ecx
    size_t old_size = SIZE(block->sizeAndTags);
c0101c59:	8b 00                	mov    (%eax),%eax
c0101c5b:	83 e0 fc             	and    $0xfffffffc,%eax
c0101c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct block* block_cursor;
    struct block* new_block;
    struct block* free_block;

    block_cursor = block;
    while (!PREV_BLOCK_IS_USED(block_cursor)) {
c0101c61:	89 ce                	mov    %ecx,%esi
}

/* Coalesce 'block' with any preceeding or following free blocks. */
static void coalesce_free_block(struct block* block) {
    size_t old_size = SIZE(block->sizeAndTags);
    size_t new_size = old_size;
c0101c63:	89 c3                	mov    %eax,%ebx
    struct block* block_cursor;
    struct block* new_block;
    struct block* free_block;

    block_cursor = block;
    while (!PREV_BLOCK_IS_USED(block_cursor)) {
c0101c65:	f6 06 02             	testb  $0x2,(%esi)
c0101c68:	75 19                	jne    c0101c83 <coalesce_free_block+0x35>
c0101c6a:	89 4d e0             	mov    %ecx,-0x20(%ebp)
        size_t size = SIZE(*((size_t*) SUB(block_cursor, WORD_SIZE)));
c0101c6d:	8b 7e fc             	mov    -0x4(%esi),%edi
c0101c70:	83 e7 fc             	and    $0xfffffffc,%edi
        free_block = (struct block*) SUB(block_cursor, size);
c0101c73:	29 fe                	sub    %edi,%esi
        remove_free_block(free_block);
c0101c75:	89 f0                	mov    %esi,%eax
c0101c77:	e8 9d ff ff ff       	call   c0101c19 <remove_free_block>
        new_size += size;
c0101c7c:	01 fb                	add    %edi,%ebx
c0101c7e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0101c81:	eb e2                	jmp    c0101c65 <coalesce_free_block+0x17>
        block_cursor = free_block;
    }

    new_block = block_cursor;

    block_cursor = (struct block*) ADD(block, old_size);
c0101c83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101c86:	8d 3c 01             	lea    (%ecx,%eax,1),%edi
    while (!BLOCK_IS_USED(block_cursor)) {
c0101c89:	8b 07                	mov    (%edi),%eax
c0101c8b:	a8 01                	test   $0x1,%al
c0101c8d:	75 1b                	jne    c0101caa <coalesce_free_block+0x5c>
c0101c8f:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        size_t size = SIZE(block_cursor->sizeAndTags);
c0101c92:	83 e0 fc             	and    $0xfffffffc,%eax
c0101c95:	89 45 e0             	mov    %eax,-0x20(%ebp)
        remove_free_block(block_cursor);
c0101c98:	89 f8                	mov    %edi,%eax
c0101c9a:	e8 7a ff ff ff       	call   c0101c19 <remove_free_block>
        new_size += size;
c0101c9f:	03 5d e0             	add    -0x20(%ebp),%ebx
        block_cursor = (struct block*) ADD(block_cursor, size);
c0101ca2:	03 7d e0             	add    -0x20(%ebp),%edi
c0101ca5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0101ca8:	eb df                	jmp    c0101c89 <coalesce_free_block+0x3b>
    }

    if (new_size != old_size) {
c0101caa:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
c0101cad:	74 1d                	je     c0101ccc <coalesce_free_block+0x7e>
        remove_free_block(block);
c0101caf:	89 c8                	mov    %ecx,%eax
c0101cb1:	e8 63 ff ff ff       	call   c0101c19 <remove_free_block>
        new_block->sizeAndTags = new_size | PREV_BLOCK_USED;
c0101cb6:	83 cb 02             	or     $0x2,%ebx
c0101cb9:	89 1e                	mov    %ebx,(%esi)
        *(size_t*) SUB(block_cursor, WORD_SIZE) = new_size | PREV_BLOCK_USED;
c0101cbb:	89 5f fc             	mov    %ebx,-0x4(%edi)
        insert_free_block(new_block);
c0101cbe:	89 f0                	mov    %esi,%eax
    }
}
c0101cc0:	83 c4 1c             	add    $0x1c,%esp
c0101cc3:	5b                   	pop    %ebx
c0101cc4:	5e                   	pop    %esi
c0101cc5:	5f                   	pop    %edi
c0101cc6:	5d                   	pop    %ebp

    if (new_size != old_size) {
        remove_free_block(block);
        new_block->sizeAndTags = new_size | PREV_BLOCK_USED;
        *(size_t*) SUB(block_cursor, WORD_SIZE) = new_size | PREV_BLOCK_USED;
        insert_free_block(new_block);
c0101cc7:	e9 06 ff ff ff       	jmp    c0101bd2 <insert_free_block>
    }
}
c0101ccc:	83 c4 1c             	add    $0x1c,%esp
c0101ccf:	5b                   	pop    %ebx
c0101cd0:	5e                   	pop    %esi
c0101cd1:	5f                   	pop    %edi
c0101cd2:	5d                   	pop    %ebp
c0101cd3:	c3                   	ret    

c0101cd4 <free_block>:
    return valid;
}

// Takes a struct block with size block_size and frees memory from the end in
// excess of keepSize.
static void free_block(struct block* block, size_t block_size, size_t keepSize) {
c0101cd4:	55                   	push   %ebp
c0101cd5:	89 e5                	mov    %esp,%ebp
c0101cd7:	56                   	push   %esi
c0101cd8:	53                   	push   %ebx
    struct block* block_surplus = (struct block*) ADD(block, keepSize);
c0101cd9:	8d 1c 08             	lea    (%eax,%ecx,1),%ebx

    // When called by kfree, block_surplus won't automatically be preceded by a BLOCK_IS_used block
    if (keepSize > 0)
c0101cdc:	85 c9                	test   %ecx,%ecx
c0101cde:	74 0b                	je     c0101ceb <free_block+0x17>
        // block will always precede and be in a BLOCK_IS_used state;
        block_surplus->sizeAndTags = (block_size - keepSize) | PREV_BLOCK_USED;
c0101ce0:	89 d6                	mov    %edx,%esi
c0101ce2:	29 ce                	sub    %ecx,%esi
c0101ce4:	89 f1                	mov    %esi,%ecx
c0101ce6:	83 c9 02             	or     $0x2,%ecx
c0101ce9:	eb 07                	jmp    c0101cf2 <free_block+0x1e>
    else
        // called by kfree and keepSize = 0
        // block is gone so must check the if preceding block is BLOCK_IS_used
        block_surplus->sizeAndTags = block_size | PREV_BLOCK_IS_USED(block);
c0101ceb:	8b 08                	mov    (%eax),%ecx
c0101ced:	83 e1 02             	and    $0x2,%ecx
c0101cf0:	09 d1                	or     %edx,%ecx
c0101cf2:	89 0b                	mov    %ecx,(%ebx)

    // Set boundary footer
    *(size_t*) ADD(block, block_size - WORD_SIZE) = block_surplus->sizeAndTags;
c0101cf4:	8b 0b                	mov    (%ebx),%ecx
c0101cf6:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)

    // Unset the succeeding block's PREV_BLOCK_IS_USED tag to reflect the change
    struct block* next_block = (struct block*) ADD(block, block_size);
c0101cfa:	01 c2                	add    %eax,%edx
    next_block->sizeAndTags |= PREV_BLOCK_USED;
    next_block->sizeAndTags ^= PREV_BLOCK_USED;
c0101cfc:	8b 02                	mov    (%edx),%eax
c0101cfe:	83 c8 02             	or     $0x2,%eax
c0101d01:	83 f0 02             	xor    $0x2,%eax
c0101d04:	89 02                	mov    %eax,(%edx)

    insert_free_block(block_surplus);
c0101d06:	89 d8                	mov    %ebx,%eax
c0101d08:	e8 c5 fe ff ff       	call   c0101bd2 <insert_free_block>
    coalesce_free_block(block_surplus);
c0101d0d:	89 d8                	mov    %ebx,%eax
}
c0101d0f:	5b                   	pop    %ebx
c0101d10:	5e                   	pop    %esi
c0101d11:	5d                   	pop    %ebp
    struct block* next_block = (struct block*) ADD(block, block_size);
    next_block->sizeAndTags |= PREV_BLOCK_USED;
    next_block->sizeAndTags ^= PREV_BLOCK_USED;

    insert_free_block(block_surplus);
    coalesce_free_block(block_surplus);
c0101d12:	e9 37 ff ff ff       	jmp    c0101c4e <coalesce_free_block>

c0101d17 <init_mm>:
// DIAGNOSTICS FUNCTIONS
// static void mm_printFreeList(void);
// static void mm_printHeap(void);

/* Initialize the allocator. */
void init_mm() {
c0101d17:	55                   	push   %ebp
c0101d18:	89 e5                	mov    %esp,%ebp
c0101d1a:	53                   	push   %ebx
c0101d1b:	83 ec 10             	sub    $0x10,%esp
    size_t init_size = 32 * PG_SIZE;
    size_t total_size;
    struct block* first_free_block;

    mem_sbrk(init_size);
c0101d1e:	68 00 00 02 00       	push   $0x20000
c0101d23:	e8 09 fe ff ff       	call   c0101b31 <mem_sbrk>
    first_free_block = (struct block*) ADD(mem_heap_lo(), WORD_SIZE);
c0101d28:	e8 51 fe ff ff       	call   c0101b7e <mem_heap_lo>
c0101d2d:	89 c3                	mov    %eax,%ebx
    total_size = init_size - (2 * WORD_SIZE);

    first_free_block->sizeAndTags = total_size | PREV_BLOCK_USED;
c0101d2f:	c7 40 04 fa ff 01 00 	movl   $0x1fffa,0x4(%eax)
    first_free_block->next = NULL;
c0101d36:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    first_free_block->prev = NULL;
c0101d3d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    *((size_t*) ADD(first_free_block, total_size - WORD_SIZE)) = first_free_block->sizeAndTags;
c0101d44:	c7 80 f8 ff 01 00 fa 	movl   $0x1fffa,0x1fff8(%eax)
c0101d4b:	ff 01 00 
    *((size_t*) SUB(mem_heap_hi(), WORD_SIZE - 1)) = BLOCK_USED;
c0101d4e:	e8 35 fe ff ff       	call   c0101b88 <mem_heap_hi>
c0101d53:	c7 40 fd 01 00 00 00 	movl   $0x1,-0x3(%eax)

    FREE_LIST_HEAD = first_free_block;
c0101d5a:	e8 1f fe ff ff       	call   c0101b7e <mem_heap_lo>
c0101d5f:	83 c3 04             	add    $0x4,%ebx
c0101d62:	89 18                	mov    %ebx,(%eax)
}
c0101d64:	83 c4 10             	add    $0x10,%esp
c0101d67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101d6a:	c9                   	leave  
c0101d6b:	c3                   	ret    

c0101d6c <kmalloc>:


// TOP-LEVEL ALLOCATOR INTERFACE ------------------------------------


void* kmalloc(size_t size) {
c0101d6c:	55                   	push   %ebp
c0101d6d:	89 e5                	mov    %esp,%ebp
c0101d6f:	57                   	push   %edi
c0101d70:	56                   	push   %esi
c0101d71:	53                   	push   %ebx
c0101d72:	83 ec 1c             	sub    $0x1c,%esp
c0101d75:	8b 75 08             	mov    0x8(%ebp),%esi
c0101d78:	31 c0                	xor    %eax,%eax
    if (size == 0)
c0101d7a:	85 f6                	test   %esi,%esi
c0101d7c:	0f 84 e2 00 00 00    	je     c0101e64 <kmalloc+0xf8>
        return NULL;

    spinlock_acquire(&mem_lock);
c0101d82:	83 ec 0c             	sub    $0xc,%esp
c0101d85:	68 a8 da 14 c0       	push   $0xc014daa8
c0101d8a:	e8 a4 18 00 00       	call   c0103633 <spinlock_acquire>

// Accepts a size and returns the nearest aligned size, rounded up, that is at
// least MIN_BLOCK_SIZE
static size_t valid_size(size_t size) {
    size += WORD_SIZE;
    size_t valid = size <= MIN_BLOCK_SIZE
c0101d8f:	8d 46 04             	lea    0x4(%esi),%eax
c0101d92:	83 c4 10             	add    $0x10,%esp
c0101d95:	bf 10 00 00 00       	mov    $0x10,%edi
c0101d9a:	83 f8 10             	cmp    $0x10,%eax
c0101d9d:	76 06                	jbe    c0101da5 <kmalloc+0x39>
c0101d9f:	8d 7e 07             	lea    0x7(%esi),%edi
c0101da2:	83 e7 fc             	and    $0xfffffffc,%edi

    // Ensure a valid and aligned size
    size_t alloc_size = valid_size(size);

    // Search free list for a suitable block.
    struct block* block = find_free_block(alloc_size);
c0101da5:	89 f8                	mov    %edi,%eax
c0101da7:	e8 49 fe ff ff       	call   c0101bf5 <find_free_block>
c0101dac:	89 c3                	mov    %eax,%ebx
    if (block == NULL) {
c0101dae:	85 c0                	test   %eax,%eax
c0101db0:	75 5c                	jne    c0101e0e <kmalloc+0xa2>
    }
}

/* Get more heap space of size at least size. */
static void increase_heap(size_t size) {
    size_t page_size = mem_pagesize();
c0101db2:	e8 ec fd ff ff       	call   c0101ba3 <mem_pagesize>
c0101db7:	89 c1                	mov    %eax,%ecx
    size_t npages = (size + page_size - 1) / page_size;
    size_t total_size = npages * page_size;
c0101db9:	8d 44 07 ff          	lea    -0x1(%edi,%eax,1),%eax
c0101dbd:	31 d2                	xor    %edx,%edx
c0101dbf:	f7 f1                	div    %ecx
c0101dc1:	0f af c1             	imul   %ecx,%eax
c0101dc4:	89 c3                	mov    %eax,%ebx
    struct block* new_block;

    new_block = (struct block*) SUB(mem_sbrk(total_size), WORD_SIZE);
c0101dc6:	83 ec 0c             	sub    $0xc,%esp
c0101dc9:	50                   	push   %eax
c0101dca:	e8 62 fd ff ff       	call   c0101b31 <mem_sbrk>
c0101dcf:	8d 48 fc             	lea    -0x4(%eax),%ecx

    new_block->sizeAndTags = total_size | PREV_BLOCK_IS_USED(new_block);
c0101dd2:	8b 50 fc             	mov    -0x4(%eax),%edx
c0101dd5:	83 e2 02             	and    $0x2,%edx
c0101dd8:	09 da                	or     %ebx,%edx
c0101dda:	89 50 fc             	mov    %edx,-0x4(%eax)
    ((struct block*) ADD(new_block, total_size - WORD_SIZE))->sizeAndTags = total_size | PREV_BLOCK_IS_USED(new_block);
c0101ddd:	83 e2 02             	and    $0x2,%edx
c0101de0:	09 da                	or     %ebx,%edx
c0101de2:	89 54 18 f8          	mov    %edx,-0x8(%eax,%ebx,1)
    *((size_t*) ADD(new_block, total_size)) = BLOCK_USED;
c0101de6:	c7 44 18 fc 01 00 00 	movl   $0x1,-0x4(%eax,%ebx,1)
c0101ded:	00 

    insert_free_block(new_block);
c0101dee:	89 c8                	mov    %ecx,%eax
c0101df0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c0101df3:	e8 da fd ff ff       	call   c0101bd2 <insert_free_block>
    coalesce_free_block(new_block);
c0101df8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0101dfb:	89 c8                	mov    %ecx,%eax
c0101dfd:	e8 4c fe ff ff       	call   c0101c4e <coalesce_free_block>

    // Search free list for a suitable block.
    struct block* block = find_free_block(alloc_size);
    if (block == NULL) {
        increase_heap(alloc_size);
        block = find_free_block(alloc_size);
c0101e02:	89 f8                	mov    %edi,%eax
c0101e04:	e8 ec fd ff ff       	call   c0101bf5 <find_free_block>
c0101e09:	89 c3                	mov    %eax,%ebx
c0101e0b:	83 c4 10             	add    $0x10,%esp
    }
    remove_free_block(block);
c0101e0e:	89 d8                	mov    %ebx,%eax
c0101e10:	e8 04 fe ff ff       	call   c0101c19 <remove_free_block>

    size_t block_size = SIZE(block->sizeAndTags);
c0101e15:	8b 03                	mov    (%ebx),%eax
c0101e17:	89 c2                	mov    %eax,%edx
c0101e19:	83 e2 fc             	and    $0xfffffffc,%edx

    // Block may be larger than necessary so first check if it is possible to
    // chop off the end of the block and put in back in the free list.
    if (block_size - alloc_size >= MIN_BLOCK_SIZE) {
c0101e1c:	89 d1                	mov    %edx,%ecx
c0101e1e:	29 f9                	sub    %edi,%ecx
c0101e20:	83 f9 0f             	cmp    $0xf,%ecx
c0101e23:	76 15                	jbe    c0101e3a <kmalloc+0xce>
        block->sizeAndTags = alloc_size | BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0101e25:	83 e0 02             	and    $0x2,%eax
c0101e28:	83 c8 01             	or     $0x1,%eax
c0101e2b:	09 f8                	or     %edi,%eax
c0101e2d:	89 03                	mov    %eax,(%ebx)
        free_block(block, block_size, alloc_size);
c0101e2f:	89 f9                	mov    %edi,%ecx
c0101e31:	89 d8                	mov    %ebx,%eax
c0101e33:	e8 9c fe ff ff       	call   c0101cd4 <free_block>
c0101e38:	eb 09                	jmp    c0101e43 <kmalloc+0xd7>
    } else {
        block->sizeAndTags |= BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0101e3a:	83 c8 01             	or     $0x1,%eax
c0101e3d:	89 03                	mov    %eax,(%ebx)
        *(size_t*) ADD(block, block_size) |= PREV_BLOCK_USED;
c0101e3f:	83 0c 13 02          	orl    $0x2,(%ebx,%edx,1)
    }

    spinlock_release(&mem_lock);
c0101e43:	83 ec 0c             	sub    $0xc,%esp
c0101e46:	68 a8 da 14 c0       	push   $0xc014daa8
c0101e4b:	e8 99 18 00 00       	call   c01036e9 <spinlock_release>

    void* ptr = ADD(block, WORD_SIZE);
c0101e50:	83 c3 04             	add    $0x4,%ebx
    memset(ptr, 0, size);
c0101e53:	83 c4 0c             	add    $0xc,%esp
c0101e56:	56                   	push   %esi
c0101e57:	6a 00                	push   $0x0
c0101e59:	53                   	push   %ebx
c0101e5a:	e8 cb 2a 00 00       	call   c010492a <memset>

    // Return a pointer to the start of the payload
    return ptr;
c0101e5f:	83 c4 10             	add    $0x10,%esp
c0101e62:	89 d8                	mov    %ebx,%eax
}
c0101e64:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0101e67:	5b                   	pop    %ebx
c0101e68:	5e                   	pop    %esi
c0101e69:	5f                   	pop    %edi
c0101e6a:	5d                   	pop    %ebp
c0101e6b:	c3                   	ret    

c0101e6c <kfree>:

void kfree(void* ptr) {
c0101e6c:	55                   	push   %ebp
c0101e6d:	89 e5                	mov    %esp,%ebp
c0101e6f:	53                   	push   %ebx
c0101e70:	50                   	push   %eax
c0101e71:	8b 5d 08             	mov    0x8(%ebp),%ebx
    if (ptr == NULL)
c0101e74:	85 db                	test   %ebx,%ebx
c0101e76:	74 35                	je     c0101ead <kfree+0x41>
        return;

    spinlock_acquire(&mem_lock);
c0101e78:	83 ec 0c             	sub    $0xc,%esp
c0101e7b:	68 a8 da 14 c0       	push   $0xc014daa8
c0101e80:	e8 ae 17 00 00       	call   c0103633 <spinlock_acquire>

    // If the block is in a BLOCK_IS_USED state, treat it all as surplus and free
    struct block* block = (struct block*) SUB(ptr, WORD_SIZE);
    if (BLOCK_IS_USED(block))
c0101e85:	8b 53 fc             	mov    -0x4(%ebx),%edx
c0101e88:	83 c4 10             	add    $0x10,%esp
c0101e8b:	f6 c2 01             	test   $0x1,%dl
c0101e8e:	74 0d                	je     c0101e9d <kfree+0x31>
        free_block(block, SIZE(block->sizeAndTags), 0);
c0101e90:	83 e2 fc             	and    $0xfffffffc,%edx
c0101e93:	8d 43 fc             	lea    -0x4(%ebx),%eax
c0101e96:	31 c9                	xor    %ecx,%ecx
c0101e98:	e8 37 fe ff ff       	call   c0101cd4 <free_block>

    spinlock_release(&mem_lock);
c0101e9d:	c7 45 08 a8 da 14 c0 	movl   $0xc014daa8,0x8(%ebp)
}
c0101ea4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101ea7:	c9                   	leave  
    // If the block is in a BLOCK_IS_USED state, treat it all as surplus and free
    struct block* block = (struct block*) SUB(ptr, WORD_SIZE);
    if (BLOCK_IS_USED(block))
        free_block(block, SIZE(block->sizeAndTags), 0);

    spinlock_release(&mem_lock);
c0101ea8:	e9 3c 18 00 00       	jmp    c01036e9 <spinlock_release>
}
c0101ead:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101eb0:	c9                   	leave  
c0101eb1:	c3                   	ret    

c0101eb2 <krealloc>:

void* krealloc(void* ptr, size_t size) {
c0101eb2:	55                   	push   %ebp
c0101eb3:	89 e5                	mov    %esp,%ebp
c0101eb5:	57                   	push   %edi
c0101eb6:	56                   	push   %esi
c0101eb7:	53                   	push   %ebx
c0101eb8:	83 ec 1c             	sub    $0x1c,%esp
c0101ebb:	8b 75 08             	mov    0x8(%ebp),%esi
c0101ebe:	8b 7d 0c             	mov    0xc(%ebp),%edi
    // Take care of cases that don't necessarily require this function
    if (ptr == NULL)
c0101ec1:	85 f6                	test   %esi,%esi
c0101ec3:	75 0f                	jne    c0101ed4 <krealloc+0x22>
        return kmalloc(size);
c0101ec5:	89 7d 08             	mov    %edi,0x8(%ebp)

    spinlock_release(&mem_lock);

    return ADD(new_block, WORD_SIZE);

}
c0101ec8:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0101ecb:	5b                   	pop    %ebx
c0101ecc:	5e                   	pop    %esi
c0101ecd:	5f                   	pop    %edi
c0101ece:	5d                   	pop    %ebp
}

void* krealloc(void* ptr, size_t size) {
    // Take care of cases that don't necessarily require this function
    if (ptr == NULL)
        return kmalloc(size);
c0101ecf:	e9 98 fe ff ff       	jmp    c0101d6c <kmalloc>

    if (size == 0) {
c0101ed4:	85 ff                	test   %edi,%edi
c0101ed6:	75 13                	jne    c0101eeb <krealloc+0x39>
        kfree(ptr);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	56                   	push   %esi
c0101edc:	e8 8b ff ff ff       	call   c0101e6c <kfree>
        return NULL;
c0101ee1:	83 c4 10             	add    $0x10,%esp
c0101ee4:	31 db                	xor    %ebx,%ebx
c0101ee6:	e9 1c 02 00 00       	jmp    c0102107 <krealloc+0x255>
    }

    spinlock_acquire(&mem_lock);
c0101eeb:	83 ec 0c             	sub    $0xc,%esp
c0101eee:	68 a8 da 14 c0       	push   $0xc014daa8
c0101ef3:	e8 3b 17 00 00       	call   c0103633 <spinlock_acquire>

    // Get header and size of the block.
    struct block* block = (struct block*) SUB(ptr, WORD_SIZE);
c0101ef8:	8d 46 fc             	lea    -0x4(%esi),%eax
c0101efb:	89 45 dc             	mov    %eax,-0x24(%ebp)
    block->sizeAndTags |= BLOCK_USED;
c0101efe:	8b 46 fc             	mov    -0x4(%esi),%eax
c0101f01:	89 c2                	mov    %eax,%edx
c0101f03:	83 ca 01             	or     $0x1,%edx
c0101f06:	89 56 fc             	mov    %edx,-0x4(%esi)
c0101f09:	89 c2                	mov    %eax,%edx
c0101f0b:	83 e2 fc             	and    $0xfffffffc,%edx
c0101f0e:	89 55 e4             	mov    %edx,-0x1c(%ebp)

    struct block* next_block = (struct block*) ADD(block, block_size);
    // Get the preceding block by reading its boundary footer to get the size
    // and then subtracting the size from block
    struct block* prev_block = NULL;
    if (!PREV_BLOCK_IS_USED(block))
c0101f11:	83 c4 10             	add    $0x10,%esp
    size_t block_size = SIZE(block->sizeAndTags);

    struct block* next_block = (struct block*) ADD(block, block_size);
    // Get the preceding block by reading its boundary footer to get the size
    // and then subtracting the size from block
    struct block* prev_block = NULL;
c0101f14:	31 db                	xor    %ebx,%ebx
    if (!PREV_BLOCK_IS_USED(block))
c0101f16:	83 e0 02             	and    $0x2,%eax
c0101f19:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101f1c:	75 0b                	jne    c0101f29 <krealloc+0x77>
        prev_block = (struct block*) SUB(block, SIZE(*(size_t*) SUB(block, WORD_SIZE)));
c0101f1e:	8b 46 f8             	mov    -0x8(%esi),%eax
c0101f21:	83 e0 fc             	and    $0xfffffffc,%eax
c0101f24:	8d 5e fc             	lea    -0x4(%esi),%ebx
c0101f27:	29 c3                	sub    %eax,%ebx

// Accepts a size and returns the nearest aligned size, rounded up, that is at
// least MIN_BLOCK_SIZE
static size_t valid_size(size_t size) {
    size += WORD_SIZE;
    size_t valid = size <= MIN_BLOCK_SIZE
c0101f29:	8d 47 04             	lea    0x4(%edi),%eax
c0101f2c:	b9 10 00 00 00       	mov    $0x10,%ecx
c0101f31:	83 f8 10             	cmp    $0x10,%eax
c0101f34:	76 06                	jbe    c0101f3c <krealloc+0x8a>
c0101f36:	8d 4f 07             	lea    0x7(%edi),%ecx
c0101f39:	83 e1 fc             	and    $0xfffffffc,%ecx

    // For a reqeusted size smaller than the current size, attempt to free
    // space at the end of the block. If the requested size is larger and the
    // current block is at the end of the heap, extend the heap to the
    // necessary size.
    if (alloc_size <= block_size) {
c0101f3c:	3b 4d e4             	cmp    -0x1c(%ebp),%ecx
c0101f3f:	77 2d                	ja     c0101f6e <krealloc+0xbc>
        // Free excess space if possible
        if (block_size - alloc_size >= MIN_BLOCK_SIZE) {
c0101f41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101f44:	29 c8                	sub    %ecx,%eax
c0101f46:	83 f8 0f             	cmp    $0xf,%eax
c0101f49:	76 16                	jbe    c0101f61 <krealloc+0xaf>
            block->sizeAndTags = alloc_size | BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0101f4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101f4e:	83 c8 01             	or     $0x1,%eax
c0101f51:	09 c8                	or     %ecx,%eax
c0101f53:	89 46 fc             	mov    %eax,-0x4(%esi)
            free_block(block, block_size, alloc_size);
c0101f56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101f59:	8d 46 fc             	lea    -0x4(%esi),%eax
c0101f5c:	e8 73 fd ff ff       	call   c0101cd4 <free_block>
        }

        spinlock_release(&mem_lock);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	68 a8 da 14 c0       	push   $0xc014daa8
c0101f69:	e9 cf 00 00 00       	jmp    c010203d <krealloc+0x18b>
    // Get header and size of the block.
    struct block* block = (struct block*) SUB(ptr, WORD_SIZE);
    block->sizeAndTags |= BLOCK_USED;
    size_t block_size = SIZE(block->sizeAndTags);

    struct block* next_block = (struct block*) ADD(block, block_size);
c0101f6e:	8d 46 fc             	lea    -0x4(%esi),%eax
c0101f71:	03 45 e4             	add    -0x1c(%ebp),%eax
c0101f74:	89 c2                	mov    %eax,%edx
        spinlock_release(&mem_lock);

        return ADD(block, WORD_SIZE);
    }
    // If the size of the next block is 0, block is the last block on the heap
    else if (NEXT_BLOCK_SIZE(block) == 0) {
c0101f76:	8b 38                	mov    (%eax),%edi
c0101f78:	89 f8                	mov    %edi,%eax
c0101f7a:	83 e0 fc             	and    $0xfffffffc,%eax
c0101f7d:	75 22                	jne    c0101fa1 <krealloc+0xef>
        // extend the heap
        mem_sbrk((size_t)(alloc_size - block_size));
c0101f7f:	83 ec 0c             	sub    $0xc,%esp
c0101f82:	89 c8                	mov    %ecx,%eax
c0101f84:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0101f87:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0101f8a:	50                   	push   %eax
c0101f8b:	e8 a1 fb ff ff       	call   c0101b31 <mem_sbrk>
        block->sizeAndTags = alloc_size | BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0101f90:	8b 46 fc             	mov    -0x4(%esi),%eax
c0101f93:	83 e0 02             	and    $0x2,%eax
c0101f96:	83 c8 01             	or     $0x1,%eax
c0101f99:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0101f9c:	e9 84 00 00 00       	jmp    c0102025 <krealloc+0x173>
    }
    // If the block following the current block is free, attempt to combine it
    // with the current block and, if possible, free any excess space. If the
    // combination is not enough memory but the following block is at the end
    // of the heap, extend the heap.
    if (!BLOCK_IS_USED(next_block)) {
c0101fa1:	83 e7 01             	and    $0x1,%edi
c0101fa4:	0f 85 a2 00 00 00    	jne    c010204c <krealloc+0x19a>
        size = block_size + SIZE(next_block->sizeAndTags);
c0101faa:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c0101fad:	01 c7                	add    %eax,%edi
        if (size >= alloc_size) {
c0101faf:	39 cf                	cmp    %ecx,%edi
c0101fb1:	72 3f                	jb     c0101ff2 <krealloc+0x140>
c0101fb3:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
            remove_free_block(next_block);
c0101fb6:	89 d0                	mov    %edx,%eax
c0101fb8:	e8 5c fc ff ff       	call   c0101c19 <remove_free_block>
            block->sizeAndTags = BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0101fbd:	8b 46 fc             	mov    -0x4(%esi),%eax
c0101fc0:	83 e0 02             	and    $0x2,%eax
c0101fc3:	83 c8 01             	or     $0x1,%eax
c0101fc6:	89 46 fc             	mov    %eax,-0x4(%esi)
            // Free excess space if possible
            if (size - alloc_size >= MIN_BLOCK_SIZE) {
c0101fc9:	89 fa                	mov    %edi,%edx
c0101fcb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0101fce:	29 ca                	sub    %ecx,%edx
c0101fd0:	83 fa 0f             	cmp    $0xf,%edx
c0101fd3:	76 0c                	jbe    c0101fe1 <krealloc+0x12f>
                block->sizeAndTags |= alloc_size;
c0101fd5:	09 c8                	or     %ecx,%eax
c0101fd7:	89 46 fc             	mov    %eax,-0x4(%esi)
                free_block(block, size, alloc_size);
c0101fda:	89 fa                	mov    %edi,%edx
c0101fdc:	e9 78 ff ff ff       	jmp    c0101f59 <krealloc+0xa7>
            } else {
                block->sizeAndTags |= size;
c0101fe1:	09 f8                	or     %edi,%eax
c0101fe3:	89 46 fc             	mov    %eax,-0x4(%esi)
                *(size_t*) ADD(block, size) |= PREV_BLOCK_USED;
c0101fe6:	8d 46 fc             	lea    -0x4(%esi),%eax
c0101fe9:	83 0c 38 02          	orl    $0x2,(%eax,%edi,1)
c0101fed:	e9 6f ff ff ff       	jmp    c0101f61 <krealloc+0xaf>
            spinlock_release(&mem_lock);

            return ADD(block, WORD_SIZE);
        }
        // If the size of the next block is 0, next_block is the last block on the heap
        else if (NEXT_BLOCK_SIZE(next_block) == 0) {
c0101ff2:	f7 04 02 fc ff ff ff 	testl  $0xfffffffc,(%edx,%eax,1)
c0101ff9:	0f 85 b2 00 00 00    	jne    c01020b1 <krealloc+0x1ff>
c0101fff:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
            remove_free_block(next_block);
c0102002:	89 d0                	mov    %edx,%eax
c0102004:	e8 10 fc ff ff       	call   c0101c19 <remove_free_block>
            // extend the heap
            mem_sbrk((size_t)(alloc_size - size));
c0102009:	83 ec 0c             	sub    $0xc,%esp
c010200c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010200f:	89 c8                	mov    %ecx,%eax
c0102011:	29 f8                	sub    %edi,%eax
c0102013:	50                   	push   %eax
c0102014:	e8 18 fb ff ff       	call   c0101b31 <mem_sbrk>
            block->sizeAndTags = alloc_size | BLOCK_USED | PREV_BLOCK_IS_USED(block);
c0102019:	8b 46 fc             	mov    -0x4(%esi),%eax
c010201c:	83 e0 02             	and    $0x2,%eax
c010201f:	83 c8 01             	or     $0x1,%eax
c0102022:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0102025:	09 c1                	or     %eax,%ecx
c0102027:	89 4e fc             	mov    %ecx,-0x4(%esi)
            // Need to create a new heap footer
            *((size_t*) SUB(mem_heap_hi(), WORD_SIZE - 1)) = PREV_BLOCK_USED | BLOCK_USED;
c010202a:	e8 59 fb ff ff       	call   c0101b88 <mem_heap_hi>
c010202f:	c7 40 fd 03 00 00 00 	movl   $0x3,-0x3(%eax)

            spinlock_release(&mem_lock);
c0102036:	c7 04 24 a8 da 14 c0 	movl   $0xc014daa8,(%esp)
c010203d:	e8 a7 16 00 00       	call   c01036e9 <spinlock_release>

            return ADD(block, WORD_SIZE);
c0102042:	83 c4 10             	add    $0x10,%esp
c0102045:	89 f3                	mov    %esi,%ebx
c0102047:	e9 bb 00 00 00       	jmp    c0102107 <krealloc+0x255>
        }
    }
    // If the blocks preceding and following the current block are free,
    // attempt to use all three to satisfy the new size requirement, and, if
    // possible, free any excess space.
    if (!PREV_BLOCK_IS_USED(block) && !BLOCK_IS_USED(next_block)) {
c010204c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0102050:	75 65                	jne    c01020b7 <krealloc+0x205>
        }
    }
    // If the block preceding the current block is free, attempt to use both to
    // satisfy the new size requirement.
    if (!PREV_BLOCK_IS_USED(block)) {
        size = block_size + SIZE(prev_block->sizeAndTags);
c0102052:	8b 3b                	mov    (%ebx),%edi
c0102054:	83 e7 fc             	and    $0xfffffffc,%edi
c0102057:	03 7d e4             	add    -0x1c(%ebp),%edi
        if (size >= alloc_size) {
c010205a:	39 cf                	cmp    %ecx,%edi
c010205c:	72 59                	jb     c01020b7 <krealloc+0x205>
c010205e:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
            remove_free_block(prev_block);
c0102061:	89 d8                	mov    %ebx,%eax
c0102063:	e8 b1 fb ff ff       	call   c0101c19 <remove_free_block>
            copy_payload(block, prev_block);
c0102068:	89 da                	mov    %ebx,%edx
c010206a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010206d:	e8 3b fb ff ff       	call   c0101bad <copy_payload>
            prev_block->sizeAndTags = BLOCK_USED | PREV_BLOCK_IS_USED(prev_block);
c0102072:	8b 03                	mov    (%ebx),%eax
c0102074:	83 e0 02             	and    $0x2,%eax
c0102077:	83 c8 01             	or     $0x1,%eax
c010207a:	89 03                	mov    %eax,(%ebx)
            // Free excess space if possible
            if (size - alloc_size >= MIN_BLOCK_SIZE) {
c010207c:	89 fa                	mov    %edi,%edx
c010207e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0102081:	29 ca                	sub    %ecx,%edx
c0102083:	83 fa 0f             	cmp    $0xf,%edx
c0102086:	76 0f                	jbe    c0102097 <krealloc+0x1e5>
                prev_block->sizeAndTags |= alloc_size;
c0102088:	09 c8                	or     %ecx,%eax
c010208a:	89 03                	mov    %eax,(%ebx)
                free_block(prev_block, size, alloc_size);
c010208c:	89 fa                	mov    %edi,%edx
c010208e:	89 d8                	mov    %ebx,%eax
c0102090:	e8 3f fc ff ff       	call   c0101cd4 <free_block>
c0102095:	eb 08                	jmp    c010209f <krealloc+0x1ed>
            } else {
                prev_block->sizeAndTags |= size;
c0102097:	09 f8                	or     %edi,%eax
c0102099:	89 03                	mov    %eax,(%ebx)
                *(size_t*) ADD(prev_block, size) |= PREV_BLOCK_USED;
c010209b:	83 0c 3b 02          	orl    $0x2,(%ebx,%edi,1)
            }

            spinlock_release(&mem_lock);
c010209f:	83 ec 0c             	sub    $0xc,%esp
c01020a2:	68 a8 da 14 c0       	push   $0xc014daa8
c01020a7:	e8 3d 16 00 00       	call   c01036e9 <spinlock_release>

            return ADD(prev_block, WORD_SIZE);
c01020ac:	83 c3 04             	add    $0x4,%ebx
c01020af:	eb 33                	jmp    c01020e4 <krealloc+0x232>
        }
    }
    // If the blocks preceding and following the current block are free,
    // attempt to use all three to satisfy the new size requirement, and, if
    // possible, free any excess space.
    if (!PREV_BLOCK_IS_USED(block) && !BLOCK_IS_USED(next_block)) {
c01020b1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01020b5:	74 32                	je     c01020e9 <krealloc+0x237>
    }
    // If no previous method can satisfy the reallocation request, allocate a
    // new block and copy the block's data to the new payload and free the old
    // block.
    struct block* new_block = (struct block*)
                              SUB(kmalloc(alloc_size - WORD_SIZE), WORD_SIZE);
c01020b7:	83 ec 0c             	sub    $0xc,%esp
c01020ba:	83 e9 04             	sub    $0x4,%ecx
c01020bd:	51                   	push   %ecx
c01020be:	e8 a9 fc ff ff       	call   c0101d6c <kmalloc>
c01020c3:	89 c3                	mov    %eax,%ebx
    copy_payload(block, new_block);
c01020c5:	8d 50 fc             	lea    -0x4(%eax),%edx
c01020c8:	8d 46 fc             	lea    -0x4(%esi),%eax
c01020cb:	e8 dd fa ff ff       	call   c0101bad <copy_payload>
    kfree(ADD(block, WORD_SIZE));
c01020d0:	89 34 24             	mov    %esi,(%esp)
c01020d3:	e8 94 fd ff ff       	call   c0101e6c <kfree>

    spinlock_release(&mem_lock);
c01020d8:	c7 04 24 a8 da 14 c0 	movl   $0xc014daa8,(%esp)
c01020df:	e8 05 16 00 00       	call   c01036e9 <spinlock_release>

    return ADD(new_block, WORD_SIZE);
c01020e4:	83 c4 10             	add    $0x10,%esp
c01020e7:	eb 1e                	jmp    c0102107 <krealloc+0x255>
    }
    // If the blocks preceding and following the current block are free,
    // attempt to use all three to satisfy the new size requirement, and, if
    // possible, free any excess space.
    if (!PREV_BLOCK_IS_USED(block) && !BLOCK_IS_USED(next_block)) {
        size = block_size + SIZE(next_block->sizeAndTags) + SIZE(prev_block->sizeAndTags);
c01020e9:	8b 03                	mov    (%ebx),%eax
c01020eb:	83 e0 fc             	and    $0xfffffffc,%eax
c01020ee:	01 c7                	add    %eax,%edi
        if (size >= alloc_size) {
c01020f0:	39 cf                	cmp    %ecx,%edi
c01020f2:	0f 82 5a ff ff ff    	jb     c0102052 <krealloc+0x1a0>
c01020f8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
            remove_free_block(next_block);
c01020fb:	89 d0                	mov    %edx,%eax
c01020fd:	e8 17 fb ff ff       	call   c0101c19 <remove_free_block>
c0102102:	e9 5a ff ff ff       	jmp    c0102061 <krealloc+0x1af>

    spinlock_release(&mem_lock);

    return ADD(new_block, WORD_SIZE);

}
c0102107:	89 d8                	mov    %ebx,%eax
c0102109:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010210c:	5b                   	pop    %ebx
c010210d:	5e                   	pop    %esi
c010210e:	5f                   	pop    %edi
c010210f:	5d                   	pop    %ebp
c0102110:	c3                   	ret    

c0102111 <_vaddr.constprop.0>:
// #define VADDR(a)    (((size_t) a) + KADDR)

#define VADDR(pa) _vaddr(__FILE__, __LINE__, (size_t) pa)

static inline void*
_vaddr(const char* file, int line, size_t pa) {
c0102111:	55                   	push   %ebp
c0102112:	89 e5                	mov    %esp,%ebp
c0102114:	53                   	push   %ebx
c0102115:	51                   	push   %ecx
c0102116:	89 d3                	mov    %edx,%ebx
    if (PA2PM(pa) >= npages)
c0102118:	c1 ea 0c             	shr    $0xc,%edx
c010211b:	3b 15 ac d2 14 c0    	cmp    0xc014d2ac,%edx
c0102121:	72 21                	jb     c0102144 <_vaddr.constprop.0+0x33>
        panic(file, line, "VADDR called with invalid pa %08x", pa);
c0102123:	52                   	push   %edx
c0102124:	53                   	push   %ebx
c0102125:	68 35 07 11 c0       	push   $0xc0110735
c010212a:	50                   	push   %eax
c010212b:	68 cd 07 11 c0       	push   $0xc01107cd
c0102130:	68 44 08 11 c0       	push   $0xc0110844
c0102135:	6a 70                	push   $0x70
c0102137:	68 83 05 11 c0       	push   $0xc0110583
c010213c:	e8 34 1b 00 00       	call   c0103c75 <_panic>
c0102141:	83 c4 20             	add    $0x20,%esp
    return (void*)(pa + KADDR);
c0102144:	8d 83 00 00 00 c0    	lea    -0x40000000(%ebx),%eax
}
c010214a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010214d:	c9                   	leave  
c010214e:	c3                   	ret    

c010214f <rsdp_search1>:
    return sum;
}

// Look for the RSDP in the len bytes at physical address addr.
static struct acpi_table_rsdp*
rsdp_search1(size_t a, int len) {
c010214f:	55                   	push   %ebp
c0102150:	89 e5                	mov    %esp,%ebp
c0102152:	57                   	push   %edi
c0102153:	56                   	push   %esi
c0102154:	53                   	push   %ebx
c0102155:	83 ec 0c             	sub    $0xc,%esp
c0102158:	89 c6                	mov    %eax,%esi
c010215a:	89 d7                	mov    %edx,%edi
    void* p = VADDR(a), *e = VADDR(a + len);
c010215c:	89 c2                	mov    %eax,%edx
c010215e:	b8 2a 00 00 00       	mov    $0x2a,%eax
c0102163:	e8 a9 ff ff ff       	call   c0102111 <_vaddr.constprop.0>
c0102168:	89 c3                	mov    %eax,%ebx
c010216a:	8d 14 37             	lea    (%edi,%esi,1),%edx
c010216d:	b8 2a 00 00 00       	mov    $0x2a,%eax
c0102172:	e8 9a ff ff ff       	call   c0102111 <_vaddr.constprop.0>
c0102177:	89 c6                	mov    %eax,%esi

    // The signature is on a 16-byte boundary.
    for (; p < e; p += 16) {
c0102179:	39 f3                	cmp    %esi,%ebx
c010217b:	73 4a                	jae    c01021c7 <rsdp_search1+0x78>
        struct acpi_table_rsdp* rsdp = p;

        if (memcmp(rsdp->signature, ACPI_SIG_RSDP, 8) ||
c010217d:	50                   	push   %eax
c010217e:	6a 08                	push   $0x8
c0102180:	68 d7 07 11 c0       	push   $0xc01107d7
c0102185:	53                   	push   %ebx
c0102186:	e8 d0 27 00 00       	call   c010495b <memcmp>
c010218b:	83 c4 10             	add    $0x10,%esp
c010218e:	85 c0                	test   %eax,%eax
c0102190:	75 30                	jne    c01021c2 <rsdp_search1+0x73>
c0102192:	31 d2                	xor    %edx,%edx
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
    for (i = 0; i < len; i++)
        sum += ((uint8_t*) addr)[i];
c0102194:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
c0102198:	01 ca                	add    %ecx,%edx
static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
    for (i = 0; i < len; i++)
c010219a:	40                   	inc    %eax
c010219b:	83 f8 14             	cmp    $0x14,%eax
c010219e:	75 f4                	jne    c0102194 <rsdp_search1+0x45>

    // The signature is on a 16-byte boundary.
    for (; p < e; p += 16) {
        struct acpi_table_rsdp* rsdp = p;

        if (memcmp(rsdp->signature, ACPI_SIG_RSDP, 8) ||
c01021a0:	84 d2                	test   %dl,%dl
c01021a2:	75 1e                	jne    c01021c2 <rsdp_search1+0x73>
                sum(rsdp, 20))
            continue;
        // ACPI 2.0+
        if (rsdp->revision && sum(rsdp, rsdp->length))
c01021a4:	80 7b 0f 00          	cmpb   $0x0,0xf(%ebx)
c01021a8:	74 21                	je     c01021cb <rsdp_search1+0x7c>
c01021aa:	8b 4b 14             	mov    0x14(%ebx),%ecx

static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
c01021ad:	31 d2                	xor    %edx,%edx
    for (i = 0; i < len; i++)
c01021af:	31 c0                	xor    %eax,%eax
c01021b1:	39 c1                	cmp    %eax,%ecx
c01021b3:	7e 09                	jle    c01021be <rsdp_search1+0x6f>
        sum += ((uint8_t*) addr)[i];
c01021b5:	0f b6 3c 03          	movzbl (%ebx,%eax,1),%edi
c01021b9:	01 fa                	add    %edi,%edx
static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
    for (i = 0; i < len; i++)
c01021bb:	40                   	inc    %eax
c01021bc:	eb f3                	jmp    c01021b1 <rsdp_search1+0x62>

        if (memcmp(rsdp->signature, ACPI_SIG_RSDP, 8) ||
                sum(rsdp, 20))
            continue;
        // ACPI 2.0+
        if (rsdp->revision && sum(rsdp, rsdp->length))
c01021be:	84 d2                	test   %dl,%dl
c01021c0:	74 09                	je     c01021cb <rsdp_search1+0x7c>
static struct acpi_table_rsdp*
rsdp_search1(size_t a, int len) {
    void* p = VADDR(a), *e = VADDR(a + len);

    // The signature is on a 16-byte boundary.
    for (; p < e; p += 16) {
c01021c2:	83 c3 10             	add    $0x10,%ebx
c01021c5:	eb b2                	jmp    c0102179 <rsdp_search1+0x2a>
        // ACPI 2.0+
        if (rsdp->revision && sum(rsdp, rsdp->length))
            continue;
        return rsdp;
    }
    return NULL;
c01021c7:	31 c0                	xor    %eax,%eax
c01021c9:	eb 02                	jmp    c01021cd <rsdp_search1+0x7e>
c01021cb:	89 d8                	mov    %ebx,%eax
}
c01021cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01021d0:	5b                   	pop    %ebx
c01021d1:	5e                   	pop    %esi
c01021d2:	5f                   	pop    %edi
c01021d3:	5d                   	pop    %ebp
c01021d4:	c3                   	ret    

c01021d5 <init_acpi>:
        return rsdp;
    return rsdp_search1(0xE0000, 0x20000);
}

void
init_acpi(void) {
c01021d5:	55                   	push   %ebp
c01021d6:	89 e5                	mov    %esp,%ebp
c01021d8:	57                   	push   %edi
c01021d9:	56                   	push   %esi
c01021da:	53                   	push   %ebx
c01021db:	83 ec 1c             	sub    $0x1c,%esp
rsdp_search(void) {
    size_t ebda;
    struct acpi_table_rsdp* rsdp;

    // The 16-bit segment of the EBDA is in the two byte at 0x40:0x0E.
    ebda = *(uint16_t*) VADDR(0x40E);
c01021de:	ba 0e 04 00 00       	mov    $0x40e,%edx
c01021e3:	b8 44 00 00 00       	mov    $0x44,%eax
c01021e8:	e8 24 ff ff ff       	call   c0102111 <_vaddr.constprop.0>
c01021ed:	0f b7 00             	movzwl (%eax),%eax
    ebda <<= 4;
    if ((rsdp = rsdp_search1(ebda, 1024)))
c01021f0:	c1 e0 04             	shl    $0x4,%eax
c01021f3:	ba 00 04 00 00       	mov    $0x400,%edx
c01021f8:	e8 52 ff ff ff       	call   c010214f <rsdp_search1>
c01021fd:	85 c0                	test   %eax,%eax
c01021ff:	75 30                	jne    c0102231 <init_acpi+0x5c>
        return rsdp;
    return rsdp_search1(0xE0000, 0x20000);
c0102201:	ba 00 00 02 00       	mov    $0x20000,%edx
c0102206:	b8 00 00 0e 00       	mov    $0xe0000,%eax
c010220b:	e8 3f ff ff ff       	call   c010214f <rsdp_search1>
    size_t entry_size;
    void* p, *e;
    uint32_t i;

    rsdp = rsdp_search();
    if (!rsdp)
c0102210:	85 c0                	test   %eax,%eax
c0102212:	75 1d                	jne    c0102231 <init_acpi+0x5c>
        panic("ACPI: No RSDP found");
c0102214:	68 ea 07 11 c0       	push   $0xc01107ea
c0102219:	68 4c 08 11 c0       	push   $0xc011084c
c010221e:	6a 56                	push   $0x56
c0102220:	68 cd 07 11 c0       	push   $0xc01107cd
c0102225:	e8 4b 1a 00 00       	call   c0103c75 <_panic>
    // print_table_rsdp(rsdp);

    if (rsdp->revision) {
c010222a:	a0 0f 00 00 00       	mov    0xf,%al
c010222f:	0f 0b                	ud2    
c0102231:	80 78 0f 00          	cmpb   $0x0,0xf(%eax)
c0102235:	74 1d                	je     c0102254 <init_acpi+0x7f>
        hdr = VADDR(rsdp->xsdt_physical_address);
c0102237:	8b 50 18             	mov    0x18(%eax),%edx
c010223a:	b8 5a 00 00 00       	mov    $0x5a,%eax
c010223f:	e8 cd fe ff ff       	call   c0102111 <_vaddr.constprop.0>
c0102244:	89 c3                	mov    %eax,%ebx
        sig = ACPI_SIG_XSDT;
        entry_size = 8;
c0102246:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%ebp)
        panic("ACPI: No RSDP found");
    // print_table_rsdp(rsdp);

    if (rsdp->revision) {
        hdr = VADDR(rsdp->xsdt_physical_address);
        sig = ACPI_SIG_XSDT;
c010224d:	be e0 07 11 c0       	mov    $0xc01107e0,%esi
c0102252:	eb 1b                	jmp    c010226f <init_acpi+0x9a>
        entry_size = 8;
    } else {
        hdr = VADDR(rsdp->rsdt_physical_address);
c0102254:	8b 50 10             	mov    0x10(%eax),%edx
c0102257:	b8 5e 00 00 00       	mov    $0x5e,%eax
c010225c:	e8 b0 fe ff ff       	call   c0102111 <_vaddr.constprop.0>
c0102261:	89 c3                	mov    %eax,%ebx
        sig = ACPI_SIG_RSDT;
        entry_size = 4;
c0102263:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        hdr = VADDR(rsdp->xsdt_physical_address);
        sig = ACPI_SIG_XSDT;
        entry_size = 8;
    } else {
        hdr = VADDR(rsdp->rsdt_physical_address);
        sig = ACPI_SIG_RSDT;
c010226a:	be e5 07 11 c0       	mov    $0xc01107e5,%esi
        entry_size = 4;
    }

    if (memcmp(hdr->signature, sig, 4))
c010226f:	50                   	push   %eax
c0102270:	6a 04                	push   $0x4
c0102272:	56                   	push   %esi
c0102273:	53                   	push   %ebx
c0102274:	e8 e2 26 00 00       	call   c010495b <memcmp>
c0102279:	83 c4 10             	add    $0x10,%esp
c010227c:	85 c0                	test   %eax,%eax
c010227e:	74 1d                	je     c010229d <init_acpi+0xc8>
        panic("ACPI: Incorrect %s signature", sig);
c0102280:	83 ec 0c             	sub    $0xc,%esp
c0102283:	56                   	push   %esi
c0102284:	68 fe 07 11 c0       	push   $0xc01107fe
c0102289:	68 4c 08 11 c0       	push   $0xc011084c
c010228e:	6a 64                	push   $0x64
c0102290:	68 cd 07 11 c0       	push   $0xc01107cd
c0102295:	e8 db 19 00 00       	call   c0103c75 <_panic>
c010229a:	83 c4 20             	add    $0x20,%esp
    if (sum(hdr, hdr->length))
c010229d:	8b 4b 04             	mov    0x4(%ebx),%ecx

static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
c01022a0:	31 d2                	xor    %edx,%edx
    for (i = 0; i < len; i++)
c01022a2:	31 c0                	xor    %eax,%eax
c01022a4:	39 c8                	cmp    %ecx,%eax
c01022a6:	7d 09                	jge    c01022b1 <init_acpi+0xdc>
        sum += ((uint8_t*) addr)[i];
c01022a8:	0f b6 3c 03          	movzbl (%ebx,%eax,1),%edi
c01022ac:	01 fa                	add    %edi,%edx
static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
    for (i = 0; i < len; i++)
c01022ae:	40                   	inc    %eax
c01022af:	eb f3                	jmp    c01022a4 <init_acpi+0xcf>
        entry_size = 4;
    }

    if (memcmp(hdr->signature, sig, 4))
        panic("ACPI: Incorrect %s signature", sig);
    if (sum(hdr, hdr->length))
c01022b1:	84 d2                	test   %dl,%dl
c01022b3:	74 1d                	je     c01022d2 <init_acpi+0xfd>
        panic("ACPI: Bad %s checksum", sig);
c01022b5:	83 ec 0c             	sub    $0xc,%esp
c01022b8:	56                   	push   %esi
c01022b9:	68 1b 08 11 c0       	push   $0xc011081b
c01022be:	68 4c 08 11 c0       	push   $0xc011084c
c01022c3:	6a 66                	push   $0x66
c01022c5:	68 cd 07 11 c0       	push   $0xc01107cd
c01022ca:	e8 a6 19 00 00       	call   c0103c75 <_panic>
c01022cf:	83 c4 20             	add    $0x20,%esp
    // print_table_header(hdr);

    p = hdr + 1;
c01022d2:	8d 73 24             	lea    0x24(%ebx),%esi
    e = (void*)hdr + hdr->length;
c01022d5:	8b 43 04             	mov    0x4(%ebx),%eax
c01022d8:	01 d8                	add    %ebx,%eax
c01022da:	89 45 e0             	mov    %eax,-0x20(%ebp)
    for (i = 0; p < e; p += entry_size) {
c01022dd:	31 db                	xor    %ebx,%ebx
c01022df:	3b 75 e0             	cmp    -0x20(%ebp),%esi
c01022e2:	73 64                	jae    c0102348 <init_acpi+0x173>
        hdr = VADDR(*(uint32_t*)p);
c01022e4:	8b 16                	mov    (%esi),%edx
c01022e6:	b8 6c 00 00 00       	mov    $0x6c,%eax
c01022eb:	e8 21 fe ff ff       	call   c0102111 <_vaddr.constprop.0>
c01022f0:	89 c7                	mov    %eax,%edi
        if (sum(hdr, hdr->length))
c01022f2:	8b 40 04             	mov    0x4(%eax),%eax
c01022f5:	89 45 dc             	mov    %eax,-0x24(%ebp)

static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
c01022f8:	31 c0                	xor    %eax,%eax
    for (i = 0; i < len; i++)
c01022fa:	31 d2                	xor    %edx,%edx
c01022fc:	39 55 dc             	cmp    %edx,-0x24(%ebp)
c01022ff:	7e 09                	jle    c010230a <init_acpi+0x135>
        sum += ((uint8_t*) addr)[i];
c0102301:	0f b6 0c 17          	movzbl (%edi,%edx,1),%ecx
c0102305:	01 c8                	add    %ecx,%eax
static uint8_t
sum(void* addr, int len) {
    int i, sum;

    sum = 0;
    for (i = 0; i < len; i++)
c0102307:	42                   	inc    %edx
c0102308:	eb f2                	jmp    c01022fc <init_acpi+0x127>

    p = hdr + 1;
    e = (void*)hdr + hdr->length;
    for (i = 0; p < e; p += entry_size) {
        hdr = VADDR(*(uint32_t*)p);
        if (sum(hdr, hdr->length))
c010230a:	84 c0                	test   %al,%al
c010230c:	75 35                	jne    c0102343 <init_acpi+0x16e>
            continue;
        // print_table_header(hdr);
        assert(i < ACPI_NR_MAX);
c010230e:	83 fb 1f             	cmp    $0x1f,%ebx
c0102311:	76 28                	jbe    c010233b <init_acpi+0x166>
c0102313:	83 ec 0c             	sub    $0xc,%esp
c0102316:	68 4c 08 11 c0       	push   $0xc011084c
c010231b:	6a 70                	push   $0x70
c010231d:	68 cd 07 11 c0       	push   $0xc01107cd
c0102322:	68 31 08 11 c0       	push   $0xc0110831
c0102327:	68 2b ff 10 c0       	push   $0xc010ff2b
c010232c:	e8 37 1f 00 00       	call   c0104268 <print>
c0102331:	83 c4 20             	add    $0x20,%esp
c0102334:	e8 4a ec ff ff       	call   c0100f83 <backtrace>
c0102339:	fa                   	cli    
c010233a:	f4                   	hlt    
        acpi_tables.entries[i++] = hdr;
c010233b:	89 3c 9d e4 c8 14 c0 	mov    %edi,-0x3feb371c(,%ebx,4)
c0102342:	43                   	inc    %ebx
        panic("ACPI: Bad %s checksum", sig);
    // print_table_header(hdr);

    p = hdr + 1;
    e = (void*)hdr + hdr->length;
    for (i = 0; p < e; p += entry_size) {
c0102343:	03 75 e4             	add    -0x1c(%ebp),%esi
c0102346:	eb 97                	jmp    c01022df <init_acpi+0x10a>
            continue;
        // print_table_header(hdr);
        assert(i < ACPI_NR_MAX);
        acpi_tables.entries[i++] = hdr;
    }
    acpi_tables.nr = i;
c0102348:	89 1d e0 c8 14 c0    	mov    %ebx,0xc014c8e0
}
c010234e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102351:	5b                   	pop    %ebx
c0102352:	5e                   	pop    %esi
c0102353:	5f                   	pop    %edi
c0102354:	5d                   	pop    %ebp
c0102355:	c3                   	ret    

c0102356 <acpi_get_table>:

void*
acpi_get_table(const char* signature) {
c0102356:	55                   	push   %ebp
c0102357:	89 e5                	mov    %esp,%ebp
c0102359:	56                   	push   %esi
c010235a:	53                   	push   %ebx
    uint32_t i;
    struct acpi_table_header** phdr = acpi_tables.entries;
c010235b:	bb e4 c8 14 c0       	mov    $0xc014c8e4,%ebx

    for (i = 0; i < acpi_tables.nr; ++i, ++phdr) {
c0102360:	31 f6                	xor    %esi,%esi
c0102362:	3b 35 e0 c8 14 c0    	cmp    0xc014c8e0,%esi
c0102368:	73 1e                	jae    c0102388 <acpi_get_table+0x32>
        if (!memcmp((*phdr)->signature, signature, 4))
c010236a:	50                   	push   %eax
c010236b:	6a 04                	push   $0x4
c010236d:	ff 75 08             	pushl  0x8(%ebp)
c0102370:	ff 33                	pushl  (%ebx)
c0102372:	e8 e4 25 00 00       	call   c010495b <memcmp>
c0102377:	83 c4 10             	add    $0x10,%esp
c010237a:	85 c0                	test   %eax,%eax
c010237c:	75 04                	jne    c0102382 <acpi_get_table+0x2c>
            return *phdr;
c010237e:	8b 03                	mov    (%ebx),%eax
c0102380:	eb 08                	jmp    c010238a <acpi_get_table+0x34>
void*
acpi_get_table(const char* signature) {
    uint32_t i;
    struct acpi_table_header** phdr = acpi_tables.entries;

    for (i = 0; i < acpi_tables.nr; ++i, ++phdr) {
c0102382:	46                   	inc    %esi
c0102383:	83 c3 04             	add    $0x4,%ebx
c0102386:	eb da                	jmp    c0102362 <acpi_get_table+0xc>
        if (!memcmp((*phdr)->signature, signature, 4))
            return *phdr;
    }
    return NULL;
c0102388:	31 c0                	xor    %eax,%eax
}
c010238a:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010238d:	5b                   	pop    %ebx
c010238e:	5e                   	pop    %esi
c010238f:	5d                   	pop    %ebp
c0102390:	c3                   	ret    

c0102391 <scroll>:

static size_t addr_6845;


/* Scrolls the screen */
void scroll(void) {
c0102391:	55                   	push   %ebp
c0102392:	89 e5                	mov    %esp,%ebp
c0102394:	83 ec 0c             	sub    $0xc,%esp
    memcpy(crt.buf, crt.buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0102397:	a1 98 da 14 c0       	mov    0xc014da98,%eax
c010239c:	68 00 0f 00 00       	push   $0xf00
c01023a1:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01023a7:	52                   	push   %edx
c01023a8:	50                   	push   %eax
c01023a9:	e8 56 25 00 00       	call   c0104904 <memcpy>

    for (int i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; ++i)
        crt.buf[i] = attrib | ' ';
c01023ae:	8b 0d 98 da 14 c0    	mov    0xc014da98,%ecx
c01023b4:	83 c4 10             	add    $0x10,%esp

/* Scrolls the screen */
void scroll(void) {
    memcpy(crt.buf, crt.buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));

    for (int i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; ++i)
c01023b7:	b8 80 07 00 00       	mov    $0x780,%eax
        crt.buf[i] = attrib | ' ';
c01023bc:	66 8b 15 04 50 14 c0 	mov    0xc0145004,%dx
c01023c3:	83 ca 20             	or     $0x20,%edx
c01023c6:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)

/* Scrolls the screen */
void scroll(void) {
    memcpy(crt.buf, crt.buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));

    for (int i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; ++i)
c01023ca:	40                   	inc    %eax
c01023cb:	3d d0 07 00 00       	cmp    $0x7d0,%eax
c01023d0:	75 ea                	jne    c01023bc <scroll+0x2b>
        crt.buf[i] = attrib | ' ';

    crt.pos -= CRT_COLS;
c01023d2:	66 83 2d 9c da 14 c0 	subw   $0x50,0xc014da9c
c01023d9:	50 
}
c01023da:	c9                   	leave  
c01023db:	c3                   	ret    

c01023dc <update_cursor>:

// Updates the positoin of the blinking cursor
void update_cursor(void) {
c01023dc:	55                   	push   %ebp
c01023dd:	89 e5                	mov    %esp,%ebp
c01023df:	53                   	push   %ebx
    outb(addr_6845, 14);
c01023e0:	8b 0d 64 c9 14 c0    	mov    0xc014c964,%ecx
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c01023e6:	b0 0e                	mov    $0xe,%al
c01023e8:	89 ca                	mov    %ecx,%edx
c01023ea:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt.pos >> 8);
c01023eb:	8d 59 01             	lea    0x1(%ecx),%ebx
c01023ee:	a1 9c da 14 c0       	mov    0xc014da9c,%eax
c01023f3:	66 c1 e8 08          	shr    $0x8,%ax
c01023f7:	89 da                	mov    %ebx,%edx
c01023f9:	ee                   	out    %al,(%dx)
c01023fa:	b0 0f                	mov    $0xf,%al
c01023fc:	89 ca                	mov    %ecx,%edx
c01023fe:	ee                   	out    %al,(%dx)
c01023ff:	a0 9c da 14 c0       	mov    0xc014da9c,%al
c0102404:	89 da                	mov    %ebx,%edx
c0102406:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
    outb(addr_6845 + 1, crt.pos);
}
c0102407:	5b                   	pop    %ebx
c0102408:	5d                   	pop    %ebp
c0102409:	c3                   	ret    

c010240a <cls>:

// Clears the console
void cls() {
c010240a:	55                   	push   %ebp
c010240b:	89 e5                	mov    %esp,%ebp
c010240d:	56                   	push   %esi
c010240e:	53                   	push   %ebx
    unsigned blank = attrib | ' ';
c010240f:	66 8b 1d 04 50 14 c0 	mov    0xc0145004,%bx
c0102416:	83 cb 20             	or     $0x20,%ebx
c0102419:	be d0 07 00 00       	mov    $0x7d0,%esi

    for(int i = 0; i < CRT_SIZE; ++i)
        memsetw(crt.buf, blank, CRT_SIZE);
c010241e:	0f b7 db             	movzwl %bx,%ebx
c0102421:	50                   	push   %eax
c0102422:	68 d0 07 00 00       	push   $0x7d0
c0102427:	53                   	push   %ebx
c0102428:	ff 35 98 da 14 c0    	pushl  0xc014da98
c010242e:	e8 0f 25 00 00       	call   c0104942 <memsetw>

// Clears the console
void cls() {
    unsigned blank = attrib | ' ';

    for(int i = 0; i < CRT_SIZE; ++i)
c0102433:	83 c4 10             	add    $0x10,%esp
c0102436:	4e                   	dec    %esi
c0102437:	75 e8                	jne    c0102421 <cls+0x17>
        memsetw(crt.buf, blank, CRT_SIZE);

    crt.pos = 0;
c0102439:	66 c7 05 9c da 14 c0 	movw   $0x0,0xc014da9c
c0102440:	00 00 
    update_cursor();
}
c0102442:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102445:	5b                   	pop    %ebx
c0102446:	5e                   	pop    %esi
c0102447:	5d                   	pop    %ebp

    for(int i = 0; i < CRT_SIZE; ++i)
        memsetw(crt.buf, blank, CRT_SIZE);

    crt.pos = 0;
    update_cursor();
c0102448:	e9 8f ff ff ff       	jmp    c01023dc <update_cursor>

c010244d <putc_cga>:
}

/* Puts a single character on the screen */
void putc_cga(const char c) {
c010244d:	55                   	push   %ebp
c010244e:	89 e5                	mov    %esp,%ebp
c0102450:	83 ec 08             	sub    $0x8,%esp
c0102453:	8b 45 08             	mov    0x8(%ebp),%eax
    switch (c) {
c0102456:	3c 09                	cmp    $0x9,%al
c0102458:	74 72                	je     c01024cc <putc_cga+0x7f>
c010245a:	7f 09                	jg     c0102465 <putc_cga+0x18>
c010245c:	3c 08                	cmp    $0x8,%al
c010245e:	74 12                	je     c0102472 <putc_cga+0x25>
c0102460:	e9 ea 00 00 00       	jmp    c010254f <putc_cga+0x102>
c0102465:	3c 0a                	cmp    $0xa,%al
c0102467:	74 3a                	je     c01024a3 <putc_cga+0x56>
c0102469:	3c 0d                	cmp    $0xd,%al
c010246b:	74 3e                	je     c01024ab <putc_cga+0x5e>
c010246d:	e9 dd 00 00 00       	jmp    c010254f <putc_cga+0x102>
        case '\b':
            if (crt.pos > 0) {
c0102472:	a1 9c da 14 c0       	mov    0xc014da9c,%eax
c0102477:	66 85 c0             	test   %ax,%ax
c010247a:	0f 84 fb 00 00 00    	je     c010257b <putc_cga+0x12e>
                crt.pos--;
c0102480:	48                   	dec    %eax
c0102481:	66 a3 9c da 14 c0    	mov    %ax,0xc014da9c
                crt.buf[crt.pos] = attrib | ' ';
c0102487:	0f b7 c0             	movzwl %ax,%eax
c010248a:	66 8b 15 04 50 14 c0 	mov    0xc0145004,%dx
c0102491:	83 ca 20             	or     $0x20,%edx
c0102494:	8b 0d 98 da 14 c0    	mov    0xc014da98,%ecx
c010249a:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
c010249e:	e9 d8 00 00 00       	jmp    c010257b <putc_cga+0x12e>
            }
            break;
        case '\n':
            crt.pos += CRT_COLS;
c01024a3:	66 83 05 9c da 14 c0 	addw   $0x50,0xc014da9c
c01024aa:	50 
        // fallthru
        case '\r':
            crt.pos -= (crt.pos % CRT_COLS);
c01024ab:	b9 50 00 00 00       	mov    $0x50,%ecx
c01024b0:	a1 9c da 14 c0       	mov    0xc014da9c,%eax
c01024b5:	31 d2                	xor    %edx,%edx
c01024b7:	66 f7 f1             	div    %cx
c01024ba:	a1 9c da 14 c0       	mov    0xc014da9c,%eax
c01024bf:	29 d0                	sub    %edx,%eax
c01024c1:	66 a3 9c da 14 c0    	mov    %ax,0xc014da9c
            break;
c01024c7:	e9 af 00 00 00       	jmp    c010257b <putc_cga+0x12e>
        case '\t':
            crt.buf[crt.pos++] = attrib | ' ';
c01024cc:	a1 98 da 14 c0       	mov    0xc014da98,%eax
c01024d1:	0f b7 15 9c da 14 c0 	movzwl 0xc014da9c,%edx
c01024d8:	8d 4a 01             	lea    0x1(%edx),%ecx
c01024db:	66 89 0d 9c da 14 c0 	mov    %cx,0xc014da9c
c01024e2:	66 8b 0d 04 50 14 c0 	mov    0xc0145004,%cx
c01024e9:	83 c9 20             	or     $0x20,%ecx
c01024ec:	66 89 0c 50          	mov    %cx,(%eax,%edx,2)
            crt.buf[crt.pos++] = attrib | ' ';
c01024f0:	0f b7 15 9c da 14 c0 	movzwl 0xc014da9c,%edx
c01024f7:	8d 4a 01             	lea    0x1(%edx),%ecx
c01024fa:	66 89 0d 9c da 14 c0 	mov    %cx,0xc014da9c
c0102501:	66 8b 0d 04 50 14 c0 	mov    0xc0145004,%cx
c0102508:	83 c9 20             	or     $0x20,%ecx
c010250b:	66 89 0c 50          	mov    %cx,(%eax,%edx,2)
            crt.buf[crt.pos++] = attrib | ' ';
c010250f:	0f b7 15 9c da 14 c0 	movzwl 0xc014da9c,%edx
c0102516:	8d 4a 01             	lea    0x1(%edx),%ecx
c0102519:	66 89 0d 9c da 14 c0 	mov    %cx,0xc014da9c
c0102520:	66 8b 0d 04 50 14 c0 	mov    0xc0145004,%cx
c0102527:	83 c9 20             	or     $0x20,%ecx
c010252a:	66 89 0c 50          	mov    %cx,(%eax,%edx,2)
            crt.buf[crt.pos++] = attrib | ' ';
c010252e:	0f b7 15 9c da 14 c0 	movzwl 0xc014da9c,%edx
c0102535:	8d 4a 01             	lea    0x1(%edx),%ecx
c0102538:	66 89 0d 9c da 14 c0 	mov    %cx,0xc014da9c
c010253f:	66 8b 0d 04 50 14 c0 	mov    0xc0145004,%cx
c0102546:	83 c9 20             	or     $0x20,%ecx
c0102549:	66 89 0c 50          	mov    %cx,(%eax,%edx,2)
            break;
c010254d:	eb 2c                	jmp    c010257b <putc_cga+0x12e>
        default:
            if (c >= 0x20 && c <= 0x7E)
c010254f:	8d 50 e0             	lea    -0x20(%eax),%edx
c0102552:	80 fa 5e             	cmp    $0x5e,%dl
c0102555:	77 24                	ja     c010257b <putc_cga+0x12e>
                crt.buf[crt.pos++] = attrib | c;
c0102557:	0f b7 15 9c da 14 c0 	movzwl 0xc014da9c,%edx
c010255e:	8d 4a 01             	lea    0x1(%edx),%ecx
c0102561:	66 89 0d 9c da 14 c0 	mov    %cx,0xc014da9c
c0102568:	66 98                	cbtw   
c010256a:	66 0b 05 04 50 14 c0 	or     0xc0145004,%ax
c0102571:	8b 0d 98 da 14 c0    	mov    0xc014da98,%ecx
c0102577:	66 89 04 51          	mov    %ax,(%ecx,%edx,2)
            break;
    }

    if (crt.pos >= CRT_SIZE)
c010257b:	66 81 3d 9c da 14 c0 	cmpw   $0x7cf,0xc014da9c
c0102582:	cf 07 
c0102584:	76 05                	jbe    c010258b <putc_cga+0x13e>
        scroll();
c0102586:	e8 06 fe ff ff       	call   c0102391 <scroll>

    update_cursor();
}
c010258b:	c9                   	leave  
    }

    if (crt.pos >= CRT_SIZE)
        scroll();

    update_cursor();
c010258c:	e9 4b fe ff ff       	jmp    c01023dc <update_cursor>

c0102591 <settextcolor>:
}

/* Sets the forecolor and backcolor that we will use */
void settextcolor(uint16_t color) {
c0102591:	55                   	push   %ebp
c0102592:	89 e5                	mov    %esp,%ebp
    attrib = color;
c0102594:	8b 45 08             	mov    0x8(%ebp),%eax
c0102597:	66 a3 04 50 14 c0    	mov    %ax,0xc0145004
}
c010259d:	5d                   	pop    %ebp
c010259e:	c3                   	ret    

c010259f <init_cga>:

/* Sets our text-mode VGA pointer, then clears the screen for us */
void init_cga(void) {
c010259f:	55                   	push   %ebp
c01025a0:	89 e5                	mov    %esp,%ebp
c01025a2:	53                   	push   %ebx
    crt.buf = (uint16_t*) (KADDR + CGA_BUF);
c01025a3:	c7 05 98 da 14 c0 00 	movl   $0xc00b8000,0xc014da98
c01025aa:	80 0b c0 
    addr_6845 = CGA_BASE;
c01025ad:	c7 05 64 c9 14 c0 d4 	movl   $0x3d4,0xc014c964
c01025b4:	03 00 00 
c01025b7:	ba d4 03 00 00       	mov    $0x3d4,%edx
c01025bc:	b0 0e                	mov    $0xe,%al
c01025be:	ee                   	out    %al,(%dx)
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c01025bf:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
c01025c4:	89 ca                	mov    %ecx,%edx
c01025c6:	ec                   	in     (%dx),%al
c01025c7:	88 c3                	mov    %al,%bl
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c01025c9:	ba d4 03 00 00       	mov    $0x3d4,%edx
c01025ce:	b0 0f                	mov    $0xf,%al
c01025d0:	ee                   	out    %al,(%dx)
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c01025d1:	89 ca                	mov    %ecx,%edx
c01025d3:	ec                   	in     (%dx),%al

    // get current cursor location
    outb(addr_6845, 14);
    crt.pos = inb(addr_6845 + 1) << 8;
    outb(addr_6845, 15);
    crt.pos |= inb(addr_6845 + 1);
c01025d4:	c1 e3 08             	shl    $0x8,%ebx
c01025d7:	0f b6 c8             	movzbl %al,%ecx
c01025da:	89 d8                	mov    %ebx,%eax
c01025dc:	09 c8                	or     %ecx,%eax
c01025de:	66 a3 9c da 14 c0    	mov    %ax,0xc014da9c

    cls();
}
c01025e4:	5b                   	pop    %ebx
c01025e5:	5d                   	pop    %ebp
    outb(addr_6845, 14);
    crt.pos = inb(addr_6845 + 1) << 8;
    outb(addr_6845, 15);
    crt.pos |= inb(addr_6845 + 1);

    cls();
c01025e6:	e9 1f fe ff ff       	jmp    c010240a <cls>

c01025eb <init_e820>:

struct multiboot_info* mbi;
struct e820_map e820_map;

void
init_e820(size_t mbi_addr) {
c01025eb:	55                   	push   %ebp
c01025ec:	89 e5                	mov    %esp,%ebp
c01025ee:	57                   	push   %edi
c01025ef:	56                   	push   %esi
c01025f0:	53                   	push   %ebx
c01025f1:	83 ec 1c             	sub    $0x1c,%esp
c01025f4:	8b 45 08             	mov    0x8(%ebp),%eax
    mbi = (struct multiboot_info*) mbi_addr;
c01025f7:	a3 c0 da 14 c0       	mov    %eax,0xc014dac0
    assert(mbi->flags & MB_MEM_MAP);
c01025fc:	f6 00 40             	testb  $0x40,(%eax)
c01025ff:	75 28                	jne    c0102629 <init_e820+0x3e>
c0102601:	83 ec 0c             	sub    $0xc,%esp
c0102604:	68 c8 08 11 c0       	push   $0xc01108c8
c0102609:	6a 0c                	push   $0xc
c010260b:	68 56 08 11 c0       	push   $0xc0110856
c0102610:	68 60 08 11 c0       	push   $0xc0110860
c0102615:	68 2b ff 10 c0       	push   $0xc010ff2b
c010261a:	e8 49 1c 00 00       	call   c0104268 <print>
c010261f:	83 c4 20             	add    $0x20,%esp
c0102622:	e8 5c e9 ff ff       	call   c0100f83 <backtrace>
c0102627:	fa                   	cli    
c0102628:	f4                   	hlt    

    size_t mmap_addr = mbi->mmap_addr;
c0102629:	a1 c0 da 14 c0       	mov    0xc014dac0,%eax
c010262e:	8b 58 30             	mov    0x30(%eax),%ebx
    size_t mmap_end = mbi->mmap_addr + mbi->mmap_length;
c0102631:	8b 40 2c             	mov    0x2c(%eax),%eax
c0102634:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c0102637:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    assert(mmap_end - mmap_addr >= sizeof(struct multiboot_mmap_entry));
c010263a:	83 f8 17             	cmp    $0x17,%eax
c010263d:	77 28                	ja     c0102667 <init_e820+0x7c>
c010263f:	83 ec 0c             	sub    $0xc,%esp
c0102642:	68 c8 08 11 c0       	push   $0xc01108c8
c0102647:	6a 10                	push   $0x10
c0102649:	68 56 08 11 c0       	push   $0xc0110856
c010264e:	68 78 08 11 c0       	push   $0xc0110878
c0102653:	68 2b ff 10 c0       	push   $0xc010ff2b
c0102658:	e8 0b 1c 00 00       	call   c0104268 <print>
c010265d:	83 c4 20             	add    $0x20,%esp
c0102660:	e8 1e e9 ff ff       	call   c0100f83 <backtrace>
c0102665:	fa                   	cli    
c0102666:	f4                   	hlt    

struct multiboot_info* mbi;
struct e820_map e820_map;

void
init_e820(size_t mbi_addr) {
c0102667:	31 c0                	xor    %eax,%eax
    size_t mmap_addr = mbi->mmap_addr;
    size_t mmap_end = mbi->mmap_addr + mbi->mmap_length;
    assert(mmap_end - mmap_addr >= sizeof(struct multiboot_mmap_entry));

    size_t i;
    for (i = 0; mmap_addr < mmap_end; ++i) {
c0102669:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
c010266c:	73 1c                	jae    c010268a <init_e820+0x9f>
        struct multiboot_mmap_entry* e = (struct multiboot_mmap_entry*) mmap_addr;
        e820_map.entries[i] = e->e820;
c010266e:	6b f8 14             	imul   $0x14,%eax,%edi
c0102671:	81 c7 e0 da 14 c0    	add    $0xc014dae0,%edi
c0102677:	8d 73 04             	lea    0x4(%ebx),%esi
c010267a:	b9 05 00 00 00       	mov    $0x5,%ecx
c010267f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        mmap_addr += e->size + 4;
c0102681:	8b 13                	mov    (%ebx),%edx
c0102683:	8d 5c 13 04          	lea    0x4(%ebx,%edx,1),%ebx
    size_t mmap_addr = mbi->mmap_addr;
    size_t mmap_end = mbi->mmap_addr + mbi->mmap_length;
    assert(mmap_end - mmap_addr >= sizeof(struct multiboot_mmap_entry));

    size_t i;
    for (i = 0; mmap_addr < mmap_end; ++i) {
c0102687:	40                   	inc    %eax
c0102688:	eb df                	jmp    c0102669 <init_e820+0x7e>
        struct multiboot_mmap_entry* e = (struct multiboot_mmap_entry*) mmap_addr;
        e820_map.entries[i] = e->e820;
        mmap_addr += e->size + 4;
    }
    assert(i < E820_MAX_SIZE);
c010268a:	83 f8 40             	cmp    $0x40,%eax
c010268d:	75 2e                	jne    c01026bd <init_e820+0xd2>
c010268f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102692:	83 ec 0c             	sub    $0xc,%esp
c0102695:	68 c8 08 11 c0       	push   $0xc01108c8
c010269a:	6a 18                	push   $0x18
c010269c:	68 56 08 11 c0       	push   $0xc0110856
c01026a1:	68 b4 08 11 c0       	push   $0xc01108b4
c01026a6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01026ab:	e8 b8 1b 00 00       	call   c0104268 <print>
c01026b0:	83 c4 20             	add    $0x20,%esp
c01026b3:	e8 cb e8 ff ff       	call   c0100f83 <backtrace>
c01026b8:	fa                   	cli    
c01026b9:	f4                   	hlt    
c01026ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    e820_map.size = i;
c01026bd:	a3 e0 df 14 c0       	mov    %eax,0xc014dfe0
}
c01026c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01026c5:	5b                   	pop    %ebx
c01026c6:	5e                   	pop    %esi
c01026c7:	5f                   	pop    %edi
c01026c8:	5d                   	pop    %ebp
c01026c9:	c3                   	ret    

c01026ca <ioapic_init>:
    *(ioapic + IOREGSEL) = reg;
    *(ioapic + IOWIN) = data;
}

void
ioapic_init(void) {
c01026ca:	55                   	push   %ebp
c01026cb:	89 e5                	mov    %esp,%ebp
c01026cd:	56                   	push   %esi
c01026ce:	53                   	push   %ebx
    // Default physical address.
    assert(ioapic_addr == 0xfec00000);
c01026cf:	81 3d e4 df 14 c0 00 	cmpl   $0xfec00000,0xc014dfe4
c01026d6:	00 c0 fe 
c01026d9:	74 28                	je     c0102703 <ioapic_init+0x39>
c01026db:	83 ec 0c             	sub    $0xc,%esp
c01026de:	68 28 09 11 c0       	push   $0xc0110928
c01026e3:	6a 28                	push   $0x28
c01026e5:	68 d2 08 11 c0       	push   $0xc01108d2
c01026ea:	68 de 08 11 c0       	push   $0xc01108de
c01026ef:	68 2b ff 10 c0       	push   $0xc010ff2b
c01026f4:	e8 6f 1b 00 00       	call   c0104268 <print>
c01026f9:	83 c4 20             	add    $0x20,%esp
c01026fc:	e8 82 e8 ff ff       	call   c0100f83 <backtrace>
c0102701:	fa                   	cli    
c0102702:	f4                   	hlt    

    // IOAPIC is the default physical address.  Map it in to
    // virtual memory so we can access it.
    ioapic = mmio_map(ioapic_addr, 4096);
c0102703:	50                   	push   %eax
c0102704:	50                   	push   %eax
c0102705:	68 00 10 00 00       	push   $0x1000
c010270a:	ff 35 e4 df 14 c0    	pushl  0xc014dfe4
c0102710:	e8 05 f2 ff ff       	call   c010191a <mmio_map>
c0102715:	a3 68 c9 14 c0       	mov    %eax,0xc014c968
size_t ioapic_addr;         // Initialized in mpconfig.c
static volatile uint32_t* ioapic;

static uint32_t
ioapic_read(int reg) {
    *(ioapic + IOREGSEL) = reg;
c010271a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    return *(ioapic + IOWIN);
c0102720:	8b 40 10             	mov    0x10(%eax),%eax
    // virtual memory so we can access it.
    ioapic = mmio_map(ioapic_addr, 4096);

    int reg_ver = ioapic_read(IOAPICVER);
    int ver = reg_ver & 0xff;
    int pins = ((reg_ver >> 16) & 0xff) + 1;
c0102723:	89 c3                	mov    %eax,%ebx
c0102725:	c1 fb 10             	sar    $0x10,%ebx
c0102728:	0f b6 db             	movzbl %bl,%ebx
    print("SMP: IOAPIC %08p v%02x [global_irq %02d-%02d]\n",
c010272b:	89 1c 24             	mov    %ebx,(%esp)
c010272e:	6a 00                	push   $0x0
c0102730:	0f b6 c0             	movzbl %al,%eax
c0102733:	50                   	push   %eax
c0102734:	ff 35 e4 df 14 c0    	pushl  0xc014dfe4
c010273a:	68 f8 08 11 c0       	push   $0xc01108f8
c010273f:	e8 24 1b 00 00       	call   c0104268 <print>
    return *(ioapic + IOWIN);
}

static void
ioapic_write(int reg, uint32_t data) {
    *(ioapic + IOREGSEL) = reg;
c0102744:	8b 0d 68 c9 14 c0    	mov    0xc014c968,%ecx
c010274a:	83 c4 20             	add    $0x20,%esp
c010274d:	ba 10 00 00 00       	mov    $0x10,%edx
    print("SMP: IOAPIC %08p v%02x [global_irq %02d-%02d]\n",
          ioapic_addr, ver, 0, pins - 1);

    // Mark all interrupts edge-triggered, active high, disabled,
    // and not routed to any CPUs.
    for (int i = 0; i < pins; ++i) {
c0102752:	31 c0                	xor    %eax,%eax
        ioapic_write(IOREDTBL + 2 * i, INT_DISABLED | (IRQ_OFFSET + i));
c0102754:	8d 70 20             	lea    0x20(%eax),%esi
c0102757:	81 ce 00 00 01 00    	or     $0x10000,%esi
    return *(ioapic + IOWIN);
}

static void
ioapic_write(int reg, uint32_t data) {
    *(ioapic + IOREGSEL) = reg;
c010275d:	89 11                	mov    %edx,(%ecx)
    *(ioapic + IOWIN) = data;
c010275f:	89 71 10             	mov    %esi,0x10(%ecx)
c0102762:	8d 72 01             	lea    0x1(%edx),%esi
    return *(ioapic + IOWIN);
}

static void
ioapic_write(int reg, uint32_t data) {
    *(ioapic + IOREGSEL) = reg;
c0102765:	89 31                	mov    %esi,(%ecx)
    *(ioapic + IOWIN) = data;
c0102767:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
    print("SMP: IOAPIC %08p v%02x [global_irq %02d-%02d]\n",
          ioapic_addr, ver, 0, pins - 1);

    // Mark all interrupts edge-triggered, active high, disabled,
    // and not routed to any CPUs.
    for (int i = 0; i < pins; ++i) {
c010276e:	40                   	inc    %eax
c010276f:	83 c2 02             	add    $0x2,%edx
c0102772:	39 c3                	cmp    %eax,%ebx
c0102774:	7d de                	jge    c0102754 <ioapic_init+0x8a>
        ioapic_write(IOREDTBL + 2 * i, INT_DISABLED | (IRQ_OFFSET + i));
        ioapic_write(IOREDTBL + 2 * i + 1, 0);
    }
}
c0102776:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102779:	5b                   	pop    %ebx
c010277a:	5e                   	pop    %esi
c010277b:	5d                   	pop    %ebp
c010277c:	c3                   	ret    

c010277d <ioapic_enable>:

void
ioapic_enable(int irq, int apicid) {
c010277d:	55                   	push   %ebp
c010277e:	89 e5                	mov    %esp,%ebp
c0102780:	8b 45 08             	mov    0x8(%ebp),%eax
    // Mark interrupt edge-triggered, active high, enabled,
    // and routed to the given cpu's APIC ID.
    ioapic_write(IOREDTBL + 2 * irq, IRQ_OFFSET + irq);
c0102783:	8d 48 20             	lea    0x20(%eax),%ecx
c0102786:	8d 54 00 10          	lea    0x10(%eax,%eax,1),%edx
    return *(ioapic + IOWIN);
}

static void
ioapic_write(int reg, uint32_t data) {
    *(ioapic + IOREGSEL) = reg;
c010278a:	a1 68 c9 14 c0       	mov    0xc014c968,%eax
c010278f:	89 10                	mov    %edx,(%eax)
    *(ioapic + IOWIN) = data;
c0102791:	89 48 10             	mov    %ecx,0x10(%eax)
void
ioapic_enable(int irq, int apicid) {
    // Mark interrupt edge-triggered, active high, enabled,
    // and routed to the given cpu's APIC ID.
    ioapic_write(IOREDTBL + 2 * irq, IRQ_OFFSET + irq);
    ioapic_write(IOREDTBL + 2 * irq + 1, apicid << 24);
c0102794:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102797:	c1 e1 18             	shl    $0x18,%ecx
    return *(ioapic + IOWIN);
}

static void
ioapic_write(int reg, uint32_t data) {
    *(ioapic + IOREGSEL) = reg;
c010279a:	42                   	inc    %edx
c010279b:	89 10                	mov    %edx,(%eax)
    *(ioapic + IOWIN) = data;
c010279d:	89 48 10             	mov    %ecx,0x10(%eax)
ioapic_enable(int irq, int apicid) {
    // Mark interrupt edge-triggered, active high, enabled,
    // and routed to the given cpu's APIC ID.
    ioapic_write(IOREDTBL + 2 * irq, IRQ_OFFSET + irq);
    ioapic_write(IOREDTBL + 2 * irq + 1, apicid << 24);
}
c01027a0:	5d                   	pop    %ebp
c01027a1:	c3                   	ret    

c01027a2 <irq_handler_kdb>:
    ctlmap
};

/* Handles the keyboard interrupt */
void
irq_handler_kdb(struct trapframe* r) {
c01027a2:	55                   	push   %ebp
c01027a3:	89 e5                	mov    %esp,%ebp
c01027a5:	56                   	push   %esi
c01027a6:	53                   	push   %ebx
c01027a7:	ba 60 00 00 00       	mov    $0x60,%edx
c01027ac:	ec                   	in     (%dx),%al
c01027ad:	89 c6                	mov    %eax,%esi
c01027af:	88 c3                	mov    %al,%bl

    static uint32_t shift;

    uint8_t data = inb(KBDIO);

    if (data == 0xE0) {
c01027b1:	3c e0                	cmp    $0xe0,%al
c01027b3:	75 0c                	jne    c01027c1 <irq_handler_kdb+0x1f>
        shift |= ESC;
c01027b5:	83 0d 6c c9 14 c0 40 	orl    $0x40,0xc014c96c
        return;
c01027bc:	e9 c7 00 00 00       	jmp    c0102888 <irq_handler_kdb+0xe6>
    } else if (data & 0x80) {                           // Key-up
c01027c1:	84 c0                	test   %al,%al
c01027c3:	8b 0d 6c c9 14 c0    	mov    0xc014c96c,%ecx
c01027c9:	79 38                	jns    c0102803 <irq_handler_kdb+0x61>
        // Reboot = Shift + Ctrl + Fn + Del
        if (shift == 0x46 && data == 0xD3)
c01027cb:	83 f9 46             	cmp    $0x46,%ecx
c01027ce:	75 0c                	jne    c01027dc <irq_handler_kdb+0x3a>
c01027d0:	3c d3                	cmp    $0xd3,%al
c01027d2:	75 08                	jne    c01027dc <irq_handler_kdb+0x3a>
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c01027d4:	ba 64 00 00 00       	mov    $0x64,%edx
c01027d9:	b0 fe                	mov    $0xfe,%al
c01027db:	ee                   	out    %al,(%dx)
            outb(0x64, 0xFE);
        data = (shift & ESC ? data : data & 0x7F);
c01027dc:	f6 c1 40             	test   $0x40,%cl
c01027df:	75 05                	jne    c01027e6 <irq_handler_kdb+0x44>
c01027e1:	89 f3                	mov    %esi,%ebx
c01027e3:	83 e3 7f             	and    $0x7f,%ebx
        shift &= ~(shiftcode[data] | ESC);
c01027e6:	0f b6 db             	movzbl %bl,%ebx
c01027e9:	8a 83 60 0a 11 c0    	mov    -0x3feef5a0(%ebx),%al
c01027ef:	83 c8 40             	or     $0x40,%eax
c01027f2:	0f b6 c0             	movzbl %al,%eax
c01027f5:	f7 d0                	not    %eax
c01027f7:	21 c8                	and    %ecx,%eax
c01027f9:	a3 6c c9 14 c0       	mov    %eax,0xc014c96c
        return;
c01027fe:	e9 85 00 00 00       	jmp    c0102888 <irq_handler_kdb+0xe6>
    } else if (shift & ESC) {
c0102803:	f6 c1 40             	test   $0x40,%cl
c0102806:	74 0d                	je     c0102815 <irq_handler_kdb+0x73>
        data |= 0x80;
c0102808:	83 cb 80             	or     $0xffffff80,%ebx
        shift &= ~ESC;
c010280b:	89 c8                	mov    %ecx,%eax
c010280d:	83 e0 bf             	and    $0xffffffbf,%eax
c0102810:	a3 6c c9 14 c0       	mov    %eax,0xc014c96c
    }


    shift |= shiftcode[data];
c0102815:	0f b6 db             	movzbl %bl,%ebx
    shift ^= togglecode[data];
c0102818:	0f b6 93 60 0a 11 c0 	movzbl -0x3feef5a0(%ebx),%edx
c010281f:	0b 15 6c c9 14 c0    	or     0xc014c96c,%edx
c0102825:	0f b6 83 60 09 11 c0 	movzbl -0x3feef6a0(%ebx),%eax
c010282c:	31 c2                	xor    %eax,%edx
c010282e:	89 15 6c c9 14 c0    	mov    %edx,0xc014c96c

    int c = charcode[shift & (CTL | SHIFT)][data];
c0102834:	89 d0                	mov    %edx,%eax
c0102836:	83 e0 03             	and    $0x3,%eax
c0102839:	8b 04 85 40 09 11 c0 	mov    -0x3feef6c0(,%eax,4),%eax
c0102840:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
    if (shift & CAPSLOCK) {
c0102844:	80 e2 08             	and    $0x8,%dl
c0102847:	74 18                	je     c0102861 <irq_handler_kdb+0xbf>
        if ('a' <= c && c <= 'z')
c0102849:	8d 50 9f             	lea    -0x61(%eax),%edx
c010284c:	83 fa 19             	cmp    $0x19,%edx
c010284f:	77 05                	ja     c0102856 <irq_handler_kdb+0xb4>
            c += 'A' - 'a';
c0102851:	83 e8 20             	sub    $0x20,%eax
c0102854:	eb 0b                	jmp    c0102861 <irq_handler_kdb+0xbf>
        else if ('A' <= c && c <= 'Z')
c0102856:	8d 50 bf             	lea    -0x41(%eax),%edx
c0102859:	83 fa 19             	cmp    $0x19,%edx
c010285c:	77 03                	ja     c0102861 <irq_handler_kdb+0xbf>
            c += 'a' - 'A';
c010285e:	83 c0 20             	add    $0x20,%eax
    }

    extern struct console console;
    console.buf[console.wpos++] = c;
c0102861:	8b 0d 94 da 14 c0    	mov    0xc014da94,%ecx
c0102867:	8d 51 01             	lea    0x1(%ecx),%edx
c010286a:	89 15 94 da 14 c0    	mov    %edx,0xc014da94
c0102870:	88 81 c0 d2 14 c0    	mov    %al,-0x3feb2d40(%ecx)
    if (console.wpos == CONSBUFSIZE)
c0102876:	81 fa d0 07 00 00    	cmp    $0x7d0,%edx
c010287c:	75 0a                	jne    c0102888 <irq_handler_kdb+0xe6>
        console.wpos = 0;
c010287e:	c7 05 94 da 14 c0 00 	movl   $0x0,0xc014da94
c0102885:	00 00 00 
}
c0102888:	5b                   	pop    %ebx
c0102889:	5e                   	pop    %esi
c010288a:	5d                   	pop    %ebp
c010288b:	c3                   	ret    

c010288c <init_kbd>:

void
init_kbd(void) {
c010288c:	55                   	push   %ebp
c010288d:	89 e5                	mov    %esp,%ebp
c010288f:	83 ec 10             	sub    $0x10,%esp
    irq_install_handler(IRQ_KBD, irq_handler_kdb);
c0102892:	68 a2 27 10 c0       	push   $0xc01027a2
c0102897:	6a 01                	push   $0x1
c0102899:	e8 c2 de ff ff       	call   c0100760 <irq_install_handler>
}
c010289e:	83 c4 10             	add    $0x10,%esp
c01028a1:	c9                   	leave  
c01028a2:	c3                   	ret    

c01028a3 <lapic_write>:
lapic_read(uint32_t index) {
    return lapic[index];
}

static void
lapic_write(uint32_t index, uint32_t value) {
c01028a3:	55                   	push   %ebp
c01028a4:	89 e5                	mov    %esp,%ebp
    lapic[index] = value;
c01028a6:	8b 0d 70 c9 14 c0    	mov    0xc014c970,%ecx
c01028ac:	8d 04 81             	lea    (%ecx,%eax,4),%eax
c01028af:	89 10                	mov    %edx,(%eax)
    lapic[ID];  // wait for write to finish, by reading
c01028b1:	8b 41 20             	mov    0x20(%ecx),%eax
}
c01028b4:	5d                   	pop    %ebp
c01028b5:	c3                   	ret    

c01028b6 <cpunum>:

int
cpunum(void) {
    int apicid, i;

    if (!lapic)
c01028b6:	8b 15 70 c9 14 c0    	mov    0xc014c970,%edx
        return 0;
c01028bc:	31 c0                	xor    %eax,%eax

int
cpunum(void) {
    int apicid, i;

    if (!lapic)
c01028be:	85 d2                	test   %edx,%edx
c01028c0:	74 59                	je     c010291b <cpunum+0x65>
    // Enable interrupts on the APIC (but not on the processor).
    lapic_write(TPR, 0);
}

int
cpunum(void) {
c01028c2:	55                   	push   %ebp
c01028c3:	89 e5                	mov    %esp,%ebp
c01028c5:	53                   	push   %ebx
c01028c6:	51                   	push   %ecx
size_t lapic_addr;       // Initialized in mpconfig.c
static volatile uint32_t* lapic;

static uint32_t
lapic_read(uint32_t index) {
    return lapic[index];
c01028c7:	8b 5a 20             	mov    0x20(%edx),%ebx
cpunum(void) {
    int apicid, i;

    if (!lapic)
        return 0;
    apicid = lapic_read(ID) >> 24;
c01028ca:	c1 eb 18             	shr    $0x18,%ebx
    for (i = 0; i < ncpu; ++i) {
c01028cd:	0f b6 15 a6 d2 14 c0 	movzbl 0xc014d2a6,%edx
c01028d4:	39 d0                	cmp    %edx,%eax
c01028d6:	7d 12                	jge    c01028ea <cpunum+0x34>
        if (cpus[i]->apicid == apicid)
c01028d8:	8b 0c 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%ecx
c01028df:	0f b6 49 04          	movzbl 0x4(%ecx),%ecx
c01028e3:	39 cb                	cmp    %ecx,%ebx
c01028e5:	74 30                	je     c0102917 <cpunum+0x61>
    int apicid, i;

    if (!lapic)
        return 0;
    apicid = lapic_read(ID) >> 24;
    for (i = 0; i < ncpu; ++i) {
c01028e7:	40                   	inc    %eax
c01028e8:	eb ea                	jmp    c01028d4 <cpunum+0x1e>
        if (cpus[i]->apicid == apicid)
            return i;
    }
    panic("could not find cpu apicid: %d  thiscpu: %d\n", apicid, thiscpu);
c01028ea:	e8 c7 ff ff ff       	call   c01028b6 <cpunum>
c01028ef:	52                   	push   %edx
c01028f0:	52                   	push   %edx
c01028f1:	ff 34 85 80 d2 14 c0 	pushl  -0x3feb2d80(,%eax,4)
c01028f8:	53                   	push   %ebx
c01028f9:	68 60 0b 11 c0       	push   $0xc0110b60
c01028fe:	68 ac 0b 11 c0       	push   $0xc0110bac
c0102903:	68 80 00 00 00       	push   $0x80
c0102908:	68 8c 0b 11 c0       	push   $0xc0110b8c
c010290d:	e8 63 13 00 00       	call   c0103c75 <_panic>

    return 0;
c0102912:	83 c4 20             	add    $0x20,%esp
c0102915:	31 c0                	xor    %eax,%eax
}
c0102917:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010291a:	c9                   	leave  
c010291b:	c3                   	ret    

c010291c <init_lapic>:
    lapic[index] = value;
    lapic[ID];  // wait for write to finish, by reading
}

void
init_lapic(void) {
c010291c:	55                   	push   %ebp
c010291d:	89 e5                	mov    %esp,%ebp
c010291f:	53                   	push   %ebx
c0102920:	52                   	push   %edx
    assert(lapic_addr);
c0102921:	83 3d e8 df 14 c0 00 	cmpl   $0x0,0xc014dfe8
c0102928:	75 28                	jne    c0102952 <init_lapic+0x36>
c010292a:	83 ec 0c             	sub    $0xc,%esp
c010292d:	68 b4 0b 11 c0       	push   $0xc0110bb4
c0102932:	6a 3b                	push   $0x3b
c0102934:	68 8c 0b 11 c0       	push   $0xc0110b8c
c0102939:	68 97 0b 11 c0       	push   $0xc0110b97
c010293e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0102943:	e8 20 19 00 00       	call   c0104268 <print>
c0102948:	83 c4 20             	add    $0x20,%esp
c010294b:	e8 33 e6 ff ff       	call   c0100f83 <backtrace>
c0102950:	fa                   	cli    
c0102951:	f4                   	hlt    

    // lapic_addr is the physical address of the LAPIC's 4K MMIO
    // region.  Map it in to virtual memory so we can access it.
    lapic = mmio_map(lapic_addr, 4096);
c0102952:	50                   	push   %eax
c0102953:	50                   	push   %eax
c0102954:	68 00 10 00 00       	push   $0x1000
c0102959:	ff 35 e8 df 14 c0    	pushl  0xc014dfe8
c010295f:	e8 b6 ef ff ff       	call   c010191a <mmio_map>
c0102964:	a3 70 c9 14 c0       	mov    %eax,0xc014c970

    // if (thiscpu == bootcpu)
    //     print("SMP: LAPIC %08p v%02x\n", lapic_addr, lapic_read(VER) & 0xFF);

    // Enable local APIC; set spurious interrupt vector.
    lapic_write(SVR, ENABLE | (IRQ_OFFSET + IRQ_SPUR));
c0102969:	ba 27 01 00 00       	mov    $0x127,%edx
c010296e:	b8 3c 00 00 00       	mov    $0x3c,%eax
c0102973:	e8 2b ff ff ff       	call   c01028a3 <lapic_write>

    // The timer repeatedly counts down at bus frequency
    // from lapic[TICR] and then issues an interrupt.
    // If we cared more about precise timekeeping,
    // TICR would be calibrated using an external time source.
    lapic_write(TDCR, X1);
c0102978:	ba 0b 00 00 00       	mov    $0xb,%edx
c010297d:	b8 f8 00 00 00       	mov    $0xf8,%eax
c0102982:	e8 1c ff ff ff       	call   c01028a3 <lapic_write>
    lapic_write(TIMER, PERIODIC | (IRQ_OFFSET + IRQ_TIMER));
c0102987:	ba 20 00 02 00       	mov    $0x20020,%edx
c010298c:	b8 c8 00 00 00       	mov    $0xc8,%eax
c0102991:	e8 0d ff ff ff       	call   c01028a3 <lapic_write>
    lapic_write(TICR, 10000000);
c0102996:	ba 80 96 98 00       	mov    $0x989680,%edx
c010299b:	b8 e0 00 00 00       	mov    $0xe0,%eax
c01029a0:	e8 fe fe ff ff       	call   c01028a3 <lapic_write>
    //
    // According to Intel MP Specification, the BIOS should initialize
    // BSP's local APIC in Virtual Wire Mode, in which 8259A's
    // INTR is virtually connected to BSP's LINTIN0. In this mode,
    // we do not need to program the IOAPIC.
    if (thiscpu != bootcpu)
c01029a5:	e8 0c ff ff ff       	call   c01028b6 <cpunum>
c01029aa:	83 c4 10             	add    $0x10,%esp
c01029ad:	8b 0d 80 d2 14 c0    	mov    0xc014d280,%ecx
c01029b3:	39 0c 85 80 d2 14 c0 	cmp    %ecx,-0x3feb2d80(,%eax,4)
c01029ba:	74 0f                	je     c01029cb <init_lapic+0xaf>
        lapic_write(LINT0, MASKED);
c01029bc:	ba 00 00 01 00       	mov    $0x10000,%edx
c01029c1:	b8 d4 00 00 00       	mov    $0xd4,%eax
c01029c6:	e8 d8 fe ff ff       	call   c01028a3 <lapic_write>

    // Disable NMI (LINT1) on all CPUs
    lapic_write(LINT1, MASKED);
c01029cb:	ba 00 00 01 00       	mov    $0x10000,%edx
c01029d0:	b8 d8 00 00 00       	mov    $0xd8,%eax
c01029d5:	e8 c9 fe ff ff       	call   c01028a3 <lapic_write>
size_t lapic_addr;       // Initialized in mpconfig.c
static volatile uint32_t* lapic;

static uint32_t
lapic_read(uint32_t index) {
    return lapic[index];
c01029da:	8b 1d 70 c9 14 c0    	mov    0xc014c970,%ebx
c01029e0:	8b 43 30             	mov    0x30(%ebx),%eax
    // Disable NMI (LINT1) on all CPUs
    lapic_write(LINT1, MASKED);

    // Disable performance counter overflow interrupts
    // on machines that provide that interrupt entry.
    if (((lapic_read(VER) >> 16) & 0xFF) >= 4)
c01029e3:	c1 e8 10             	shr    $0x10,%eax
c01029e6:	3c 03                	cmp    $0x3,%al
c01029e8:	76 0f                	jbe    c01029f9 <init_lapic+0xdd>
        lapic_write(PCINT, MASKED);
c01029ea:	ba 00 00 01 00       	mov    $0x10000,%edx
c01029ef:	b8 d0 00 00 00       	mov    $0xd0,%eax
c01029f4:	e8 aa fe ff ff       	call   c01028a3 <lapic_write>

    // Map error interrupt to IRQ_ERROR.
    lapic_write(ERROR, IRQ_OFFSET + IRQ_ERROR);
c01029f9:	ba 51 00 00 00       	mov    $0x51,%edx
c01029fe:	b8 dc 00 00 00       	mov    $0xdc,%eax
c0102a03:	e8 9b fe ff ff       	call   c01028a3 <lapic_write>

    // Clear error status register (requires back-to-back writes).
    lapic_write(ESR, 0);
c0102a08:	31 d2                	xor    %edx,%edx
c0102a0a:	b8 a0 00 00 00       	mov    $0xa0,%eax
c0102a0f:	e8 8f fe ff ff       	call   c01028a3 <lapic_write>
    lapic_write(ESR, 0);
c0102a14:	31 d2                	xor    %edx,%edx
c0102a16:	b8 a0 00 00 00       	mov    $0xa0,%eax
c0102a1b:	e8 83 fe ff ff       	call   c01028a3 <lapic_write>

    // Ack any outstanding interrupts.
    lapic_write(EOI, 0);
c0102a20:	31 d2                	xor    %edx,%edx
c0102a22:	b8 2c 00 00 00       	mov    $0x2c,%eax
c0102a27:	e8 77 fe ff ff       	call   c01028a3 <lapic_write>

    // Send an Init Level De-Assert to synchronize arbitration ID's.
    lapic_write(ICRHI, 0);
c0102a2c:	31 d2                	xor    %edx,%edx
c0102a2e:	b8 c4 00 00 00       	mov    $0xc4,%eax
c0102a33:	e8 6b fe ff ff       	call   c01028a3 <lapic_write>
    lapic_write(ICRLO, BCAST | INIT | LEVEL);
c0102a38:	ba 00 85 08 00       	mov    $0x88500,%edx
c0102a3d:	b8 c0 00 00 00       	mov    $0xc0,%eax
c0102a42:	e8 5c fe ff ff       	call   c01028a3 <lapic_write>
size_t lapic_addr;       // Initialized in mpconfig.c
static volatile uint32_t* lapic;

static uint32_t
lapic_read(uint32_t index) {
    return lapic[index];
c0102a47:	8b 83 00 03 00 00    	mov    0x300(%ebx),%eax
    lapic_write(EOI, 0);

    // Send an Init Level De-Assert to synchronize arbitration ID's.
    lapic_write(ICRHI, 0);
    lapic_write(ICRLO, BCAST | INIT | LEVEL);
    while(lapic_read(ICRLO) & DELIVS)
c0102a4d:	f6 c4 10             	test   $0x10,%ah
c0102a50:	75 f5                	jne    c0102a47 <init_lapic+0x12b>
        ;

    // Enable interrupts on the APIC (but not on the processor).
    lapic_write(TPR, 0);
c0102a52:	31 d2                	xor    %edx,%edx
c0102a54:	b8 20 00 00 00       	mov    $0x20,%eax
}
c0102a59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102a5c:	c9                   	leave  
    lapic_write(ICRLO, BCAST | INIT | LEVEL);
    while(lapic_read(ICRLO) & DELIVS)
        ;

    // Enable interrupts on the APIC (but not on the processor).
    lapic_write(TPR, 0);
c0102a5d:	e9 41 fe ff ff       	jmp    c01028a3 <lapic_write>

c0102a62 <lapic_eoi>:
    return 0;
}

// Acknowledge interrupt.
void
lapic_eoi(void) {
c0102a62:	55                   	push   %ebp
c0102a63:	89 e5                	mov    %esp,%ebp
    if (lapic)
c0102a65:	83 3d 70 c9 14 c0 00 	cmpl   $0x0,0xc014c970
c0102a6c:	74 0d                	je     c0102a7b <lapic_eoi+0x19>
        lapic_write(EOI, 0);
c0102a6e:	31 d2                	xor    %edx,%edx
c0102a70:	b8 2c 00 00 00       	mov    $0x2c,%eax
}
c0102a75:	5d                   	pop    %ebp

// Acknowledge interrupt.
void
lapic_eoi(void) {
    if (lapic)
        lapic_write(EOI, 0);
c0102a76:	e9 28 fe ff ff       	jmp    c01028a3 <lapic_write>
}
c0102a7b:	5d                   	pop    %ebp
c0102a7c:	c3                   	ret    

c0102a7d <lapic_startap>:
#define IO_RTC  0x70

// Start additional processor running entry code at addr.
// See Appendix B of MultiProcessor Specification.
void
lapic_startap(uint8_t apicid, uint32_t addr) {
c0102a7d:	55                   	push   %ebp
c0102a7e:	89 e5                	mov    %esp,%ebp
c0102a80:	56                   	push   %esi
c0102a81:	53                   	push   %ebx
c0102a82:	8b 75 08             	mov    0x8(%ebp),%esi
c0102a85:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0102a88:	ba 70 00 00 00       	mov    $0x70,%edx
c0102a8d:	b0 0f                	mov    $0xf,%al
c0102a8f:	ee                   	out    %al,(%dx)
c0102a90:	ba 71 00 00 00       	mov    $0x71,%edx
c0102a95:	b0 0a                	mov    $0xa,%al
c0102a97:	ee                   	out    %al,(%dx)

#define VADDR(pa) _vaddr(__FILE__, __LINE__, (size_t) pa)

static inline void*
_vaddr(const char* file, int line, size_t pa) {
    if (PA2PM(pa) >= npages)
c0102a98:	83 3d ac d2 14 c0 00 	cmpl   $0x0,0xc014d2ac
c0102a9f:	75 29                	jne    c0102aca <lapic_startap+0x4d>
        panic(file, line, "VADDR called with invalid pa %08x", pa);
c0102aa1:	50                   	push   %eax
c0102aa2:	68 67 04 00 00       	push   $0x467
c0102aa7:	68 35 07 11 c0       	push   $0xc0110735
c0102aac:	68 a1 00 00 00       	push   $0xa1
c0102ab1:	68 8c 0b 11 c0       	push   $0xc0110b8c
c0102ab6:	68 a4 0b 11 c0       	push   $0xc0110ba4
c0102abb:	6a 70                	push   $0x70
c0102abd:	68 83 05 11 c0       	push   $0xc0110583
c0102ac2:	e8 ae 11 00 00       	call   c0103c75 <_panic>
c0102ac7:	83 c4 20             	add    $0x20,%esp
    // and the warm reset vector (DWORD based at 40:67) to point at
    // the AP startup code prior to the [universal startup algorithm]."
    outb(IO_RTC, 0xF);  // offset 0xF is shutdown code
    outb(IO_RTC + 1, 0x0A);
    wrv = (uint16_t*) VADDR((0x40 << 4 | 0x67));   // Warm reset vector
    wrv[0] = 0;
c0102aca:	66 c7 05 67 04 00 c0 	movw   $0x0,0xc0000467
c0102ad1:	00 00 
    wrv[1] = addr >> 4;
c0102ad3:	89 d8                	mov    %ebx,%eax
c0102ad5:	c1 e8 04             	shr    $0x4,%eax
c0102ad8:	66 a3 69 04 00 c0    	mov    %ax,0xc0000469

    // "Universal startup algorithm."
    // Send INIT (level-triggered) interrupt to reset other CPU.
    lapic_write(ICRHI, apicid << 24);
c0102ade:	c1 e6 18             	shl    $0x18,%esi
c0102ae1:	89 f2                	mov    %esi,%edx
c0102ae3:	b8 c4 00 00 00       	mov    $0xc4,%eax
c0102ae8:	e8 b6 fd ff ff       	call   c01028a3 <lapic_write>
    lapic_write(ICRLO, INIT | LEVEL | ASSERT);
c0102aed:	ba 00 c5 00 00       	mov    $0xc500,%edx
c0102af2:	b8 c0 00 00 00       	mov    $0xc0,%eax
c0102af7:	e8 a7 fd ff ff       	call   c01028a3 <lapic_write>
    microdelay(200);
    lapic_write(ICRLO, INIT | LEVEL);
c0102afc:	ba 00 85 00 00       	mov    $0x8500,%edx
c0102b01:	b8 c0 00 00 00       	mov    $0xc0,%eax
c0102b06:	e8 98 fd ff ff       	call   c01028a3 <lapic_write>
    // when it is in the halted state due to an INIT.  So the second
    // should be ignored, but it is part of the official Intel algorithm.
    // Bochs complains about the second one.  Too bad for Bochs.
    for (i = 0; i < 2; i++) {
        lapic_write(ICRHI, apicid << 24);
        lapic_write(ICRLO, STARTUP | (addr >> 12));
c0102b0b:	c1 eb 0c             	shr    $0xc,%ebx
c0102b0e:	80 cf 06             	or     $0x6,%bh
    // Regular hardware is supposed to only accept a STARTUP
    // when it is in the halted state due to an INIT.  So the second
    // should be ignored, but it is part of the official Intel algorithm.
    // Bochs complains about the second one.  Too bad for Bochs.
    for (i = 0; i < 2; i++) {
        lapic_write(ICRHI, apicid << 24);
c0102b11:	89 f2                	mov    %esi,%edx
c0102b13:	b8 c4 00 00 00       	mov    $0xc4,%eax
c0102b18:	e8 86 fd ff ff       	call   c01028a3 <lapic_write>
        lapic_write(ICRLO, STARTUP | (addr >> 12));
c0102b1d:	89 da                	mov    %ebx,%edx
c0102b1f:	b8 c0 00 00 00       	mov    $0xc0,%eax
c0102b24:	e8 7a fd ff ff       	call   c01028a3 <lapic_write>
    // Regular hardware is supposed to only accept a STARTUP
    // when it is in the halted state due to an INIT.  So the second
    // should be ignored, but it is part of the official Intel algorithm.
    // Bochs complains about the second one.  Too bad for Bochs.
    for (i = 0; i < 2; i++) {
        lapic_write(ICRHI, apicid << 24);
c0102b29:	89 f2                	mov    %esi,%edx
c0102b2b:	b8 c4 00 00 00       	mov    $0xc4,%eax
c0102b30:	e8 6e fd ff ff       	call   c01028a3 <lapic_write>
        lapic_write(ICRLO, STARTUP | (addr >> 12));
c0102b35:	89 da                	mov    %ebx,%edx
c0102b37:	b8 c0 00 00 00       	mov    $0xc0,%eax
        microdelay(200);
    }
}
c0102b3c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102b3f:	5b                   	pop    %ebx
c0102b40:	5e                   	pop    %esi
c0102b41:	5d                   	pop    %ebp
    // when it is in the halted state due to an INIT.  So the second
    // should be ignored, but it is part of the official Intel algorithm.
    // Bochs complains about the second one.  Too bad for Bochs.
    for (i = 0; i < 2; i++) {
        lapic_write(ICRHI, apicid << 24);
        lapic_write(ICRLO, STARTUP | (addr >> 12));
c0102b42:	e9 5c fd ff ff       	jmp    c01028a3 <lapic_write>

c0102b47 <lapic_ipi>:
        microdelay(200);
    }
}

void
lapic_ipi(int vector) {
c0102b47:	55                   	push   %ebp
c0102b48:	89 e5                	mov    %esp,%ebp
    lapic_write(ICRLO, OTHERS | FIXED | vector);
c0102b4a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b4d:	81 ca 00 00 0c 00    	or     $0xc0000,%edx
c0102b53:	b8 c0 00 00 00       	mov    $0xc0,%eax
c0102b58:	e8 46 fd ff ff       	call   c01028a3 <lapic_write>
size_t lapic_addr;       // Initialized in mpconfig.c
static volatile uint32_t* lapic;

static uint32_t
lapic_read(uint32_t index) {
    return lapic[index];
c0102b5d:	8b 15 70 c9 14 c0    	mov    0xc014c970,%edx
c0102b63:	8b 82 00 03 00 00    	mov    0x300(%edx),%eax
}

void
lapic_ipi(int vector) {
    lapic_write(ICRLO, OTHERS | FIXED | vector);
    while (lapic_read(ICRLO) & DELIVS)
c0102b69:	f6 c4 10             	test   $0x10,%ah
c0102b6c:	75 f5                	jne    c0102b63 <lapic_ipi+0x1c>
        ;
}
c0102b6e:	5d                   	pop    %ebp
c0102b6f:	c3                   	ret    

c0102b70 <irq_handler_pit>:
    outb(0x40, (interval & 0xFF00) >> 8);

    pit_reset();
}

void irq_handler_pit(struct trapframe* r) {
c0102b70:	55                   	push   %ebp
c0102b71:	89 e5                	mov    %esp,%ebp
c0102b73:	53                   	push   %ebx
c0102b74:	50                   	push   %eax
c0102b75:	8b 5d 08             	mov    0x8(%ebp),%ebx
    (void) r;

    lapic_eoi();
c0102b78:	e8 e5 fe ff ff       	call   c0102a62 <lapic_eoi>

    if (++nticks % YIELD_MOD == 0) {
c0102b7d:	a1 74 c9 14 c0       	mov    0xc014c974,%eax
c0102b82:	40                   	inc    %eax
c0102b83:	a3 74 c9 14 c0       	mov    %eax,0xc014c974
        thisthread->context = r;
c0102b88:	e8 29 fd ff ff       	call   c01028b6 <cpunum>
c0102b8d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0102b94:	8b 40 08             	mov    0x8(%eax),%eax
c0102b97:	89 18                	mov    %ebx,(%eax)
        thread_schedule();
    }
}
c0102b99:	5a                   	pop    %edx
c0102b9a:	5b                   	pop    %ebx
c0102b9b:	5d                   	pop    %ebp

    lapic_eoi();

    if (++nticks % YIELD_MOD == 0) {
        thisthread->context = r;
        thread_schedule();
c0102b9c:	e9 94 5d 00 00       	jmp    c0108935 <thread_schedule>

c0102ba1 <pit_ticks>:
#define PIT_DEFAULT 1000
#define YIELD_MOD   1

static volatile uint32_t nticks;

uint32_t pit_ticks(void) {
c0102ba1:	55                   	push   %ebp
c0102ba2:	89 e5                	mov    %esp,%ebp
    return nticks;
c0102ba4:	a1 74 c9 14 c0       	mov    0xc014c974,%eax
}
c0102ba9:	5d                   	pop    %ebp
c0102baa:	c3                   	ret    

c0102bab <pit_wait>:

void pit_wait(uint32_t ticks) {
c0102bab:	55                   	push   %ebp
c0102bac:	89 e5                	mov    %esp,%ebp
    uint32_t eticks = nticks + ticks;
c0102bae:	a1 74 c9 14 c0       	mov    0xc014c974,%eax
c0102bb3:	03 45 08             	add    0x8(%ebp),%eax
    while(nticks != eticks);
c0102bb6:	8b 15 74 c9 14 c0    	mov    0xc014c974,%edx
c0102bbc:	39 d0                	cmp    %edx,%eax
c0102bbe:	75 f6                	jne    c0102bb6 <pit_wait+0xb>
}
c0102bc0:	5d                   	pop    %ebp
c0102bc1:	c3                   	ret    

c0102bc2 <pit_reset>:

void pit_reset(void) {
c0102bc2:	55                   	push   %ebp
c0102bc3:	89 e5                	mov    %esp,%ebp
    nticks = 0;
c0102bc5:	c7 05 74 c9 14 c0 00 	movl   $0x0,0xc014c974
c0102bcc:	00 00 00 
}
c0102bcf:	5d                   	pop    %ebp
c0102bd0:	c3                   	ret    

c0102bd1 <pit_freq>:

void pit_freq(double hz) {
c0102bd1:	55                   	push   %ebp
c0102bd2:	89 e5                	mov    %esp,%ebp
c0102bd4:	83 ec 08             	sub    $0x8,%esp
    uint16_t interval = (uint16_t) (1193180.0 / hz);
c0102bd7:	d9 05 c0 0b 11 c0    	flds   0xc0110bc0
c0102bdd:	dc 75 08             	fdivl  0x8(%ebp)
c0102be0:	d9 7d fe             	fnstcw -0x2(%ebp)
c0102be3:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
c0102be7:	80 cc 0c             	or     $0xc,%ah
c0102bea:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
c0102bee:	d9 6d fc             	fldcw  -0x4(%ebp)
c0102bf1:	db 5d f8             	fistpl -0x8(%ebp)
c0102bf4:	d9 6d fe             	fldcw  -0x2(%ebp)
c0102bf7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0102bfa:	ba 43 00 00 00       	mov    $0x43,%edx
c0102bff:	b0 36                	mov    $0x36,%al
c0102c01:	ee                   	out    %al,(%dx)
c0102c02:	ba 40 00 00 00       	mov    $0x40,%edx
c0102c07:	88 c8                	mov    %cl,%al
c0102c09:	ee                   	out    %al,(%dx)
c0102c0a:	89 c8                	mov    %ecx,%eax
c0102c0c:	66 c1 e8 08          	shr    $0x8,%ax
c0102c10:	ee                   	out    %al,(%dx)
    uint32_t eticks = nticks + ticks;
    while(nticks != eticks);
}

void pit_reset(void) {
    nticks = 0;
c0102c11:	c7 05 74 c9 14 c0 00 	movl   $0x0,0xc014c974
c0102c18:	00 00 00 
    outb(0x43, 0x36);
    outb(0x40, interval & 0xFF);
    outb(0x40, (interval & 0xFF00) >> 8);

    pit_reset();
}
c0102c1b:	c9                   	leave  
c0102c1c:	c3                   	ret    

c0102c1d <init_pit>:
        thisthread->context = r;
        thread_schedule();
    }
}

void init_pit(void) {
c0102c1d:	55                   	push   %ebp
c0102c1e:	89 e5                	mov    %esp,%ebp
c0102c20:	83 ec 08             	sub    $0x8,%esp
    pit_freq(PIT_DEFAULT);
c0102c23:	68 00 40 8f 40       	push   $0x408f4000
c0102c28:	6a 00                	push   $0x0
c0102c2a:	e8 a2 ff ff ff       	call   c0102bd1 <pit_freq>
    irq_install_handler(IRQ_TIMER, irq_handler_pit);
c0102c2f:	68 70 2b 10 c0       	push   $0xc0102b70
c0102c34:	6a 00                	push   $0x0
c0102c36:	e8 25 db ff ff       	call   c0100760 <irq_install_handler>
}
c0102c3b:	83 c4 10             	add    $0x10,%esp
c0102c3e:	c9                   	leave  
c0102c3f:	c3                   	ret    

c0102c40 <irq_handler_serial>:
    inb(0x84);
    inb(0x84);
}

void
irq_handler_serial(struct trapframe* r) {
c0102c40:	55                   	push   %ebp
c0102c41:	89 e5                	mov    %esp,%ebp
    (void) r;

    if (serial) {
c0102c43:	80 3d 78 c9 14 c0 00 	cmpb   $0x0,0xc014c978
c0102c4a:	74 37                	je     c0102c83 <irq_handler_serial+0x43>
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c0102c4c:	ba fd 03 00 00       	mov    $0x3fd,%edx
c0102c51:	ec                   	in     (%dx),%al
        if (!(inb(SERIAL_IO + COM_LSR) & COM_LSR_DATA))
c0102c52:	a8 01                	test   $0x1,%al
c0102c54:	74 2d                	je     c0102c83 <irq_handler_serial+0x43>
c0102c56:	ba f8 03 00 00       	mov    $0x3f8,%edx
c0102c5b:	ec                   	in     (%dx),%al
            return;

        char c = (char) inb(SERIAL_IO + COM_RX);

        extern struct console console;
        console.buf[console.wpos++] = c;
c0102c5c:	8b 0d 94 da 14 c0    	mov    0xc014da94,%ecx
c0102c62:	8d 51 01             	lea    0x1(%ecx),%edx
c0102c65:	89 15 94 da 14 c0    	mov    %edx,0xc014da94
c0102c6b:	88 81 c0 d2 14 c0    	mov    %al,-0x3feb2d40(%ecx)
        if (console.wpos == CONSBUFSIZE)
c0102c71:	81 fa d0 07 00 00    	cmp    $0x7d0,%edx
c0102c77:	75 0a                	jne    c0102c83 <irq_handler_serial+0x43>
            console.wpos = 0;
c0102c79:	c7 05 94 da 14 c0 00 	movl   $0x0,0xc014da94
c0102c80:	00 00 00 
    }
}
c0102c83:	5d                   	pop    %ebp
c0102c84:	c3                   	ret    

c0102c85 <putc_serial>:

void
putc_serial(int c) {
    if (serial) {
c0102c85:	80 3d 78 c9 14 c0 00 	cmpb   $0x0,0xc014c978
c0102c8c:	74 30                	je     c0102cbe <putc_serial+0x39>
            console.wpos = 0;
    }
}

void
putc_serial(int c) {
c0102c8e:	55                   	push   %ebp
c0102c8f:	89 e5                	mov    %esp,%ebp
c0102c91:	56                   	push   %esi
c0102c92:	53                   	push   %ebx
c0102c93:	bb 00 32 00 00       	mov    $0x3200,%ebx
c0102c98:	be fd 03 00 00       	mov    $0x3fd,%esi
c0102c9d:	b9 84 00 00 00       	mov    $0x84,%ecx
c0102ca2:	89 f2                	mov    %esi,%edx
c0102ca4:	ec                   	in     (%dx),%al
    if (serial) {
        for (int i = 0; i < 12800; ++i) {
            if (inb(SERIAL_IO + COM_LSR) & COM_LSR_TXRDY)
c0102ca5:	a8 20                	test   $0x20,%al
c0102ca7:	75 09                	jne    c0102cb2 <putc_serial+0x2d>
c0102ca9:	89 ca                	mov    %ecx,%edx
c0102cab:	ec                   	in     (%dx),%al
c0102cac:	ec                   	in     (%dx),%al
c0102cad:	ec                   	in     (%dx),%al
c0102cae:	ec                   	in     (%dx),%al
}

void
putc_serial(int c) {
    if (serial) {
        for (int i = 0; i < 12800; ++i) {
c0102caf:	4b                   	dec    %ebx
c0102cb0:	75 f0                	jne    c0102ca2 <putc_serial+0x1d>
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c0102cb2:	ba f8 03 00 00       	mov    $0x3f8,%edx
c0102cb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cba:	ee                   	out    %al,(%dx)
                break;
            delay();
        }
        outb(SERIAL_IO + COM_TX, c);
    }
}
c0102cbb:	5b                   	pop    %ebx
c0102cbc:	5e                   	pop    %esi
c0102cbd:	5d                   	pop    %ebp
c0102cbe:	c3                   	ret    

c0102cbf <init_serial>:
//     outb(0x378 + 2, 0x08 | 0x04 | 0x01);
//     outb(0x378 + 2, 0x08);
// }

void
init_serial(void) {
c0102cbf:	55                   	push   %ebp
c0102cc0:	89 e5                	mov    %esp,%ebp
c0102cc2:	53                   	push   %ebx
c0102cc3:	83 ec 0c             	sub    $0xc,%esp
c0102cc6:	bb fa 03 00 00       	mov    $0x3fa,%ebx
c0102ccb:	31 c0                	xor    %eax,%eax
c0102ccd:	89 da                	mov    %ebx,%edx
c0102ccf:	ee                   	out    %al,(%dx)
c0102cd0:	ba fb 03 00 00       	mov    $0x3fb,%edx
c0102cd5:	b0 80                	mov    $0x80,%al
c0102cd7:	ee                   	out    %al,(%dx)
c0102cd8:	b9 f8 03 00 00       	mov    $0x3f8,%ecx
c0102cdd:	b0 0c                	mov    $0xc,%al
c0102cdf:	89 ca                	mov    %ecx,%edx
c0102ce1:	ee                   	out    %al,(%dx)
c0102ce2:	ba f9 03 00 00       	mov    $0x3f9,%edx
c0102ce7:	31 c0                	xor    %eax,%eax
c0102ce9:	ee                   	out    %al,(%dx)
c0102cea:	ba fb 03 00 00       	mov    $0x3fb,%edx
c0102cef:	b0 03                	mov    $0x3,%al
c0102cf1:	ee                   	out    %al,(%dx)
c0102cf2:	ba fc 03 00 00       	mov    $0x3fc,%edx
c0102cf7:	31 c0                	xor    %eax,%eax
c0102cf9:	ee                   	out    %al,(%dx)
c0102cfa:	ba f9 03 00 00       	mov    $0x3f9,%edx
c0102cff:	b0 01                	mov    $0x1,%al
c0102d01:	ee                   	out    %al,(%dx)
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c0102d02:	ba fd 03 00 00       	mov    $0x3fd,%edx
c0102d07:	ec                   	in     (%dx),%al
    // Enable rcv interrupts
    outb(SERIAL_IO + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial = (inb(SERIAL_IO + COM_LSR) != 0xFF);
c0102d08:	fe c0                	inc    %al
c0102d0a:	0f 95 05 78 c9 14 c0 	setne  0xc014c978
c0102d11:	89 da                	mov    %ebx,%edx
c0102d13:	ec                   	in     (%dx),%al
c0102d14:	89 ca                	mov    %ecx,%edx
c0102d16:	ec                   	in     (%dx),%al
    (void) inb(SERIAL_IO + COM_IIR);
    (void) inb(SERIAL_IO + COM_RX);

    irq_install_handler(IRQ_SER1, irq_handler_serial);
c0102d17:	68 40 2c 10 c0       	push   $0xc0102c40
c0102d1c:	6a 04                	push   $0x4
c0102d1e:	e8 3d da ff ff       	call   c0100760 <irq_install_handler>
}
c0102d23:	83 c4 10             	add    $0x10,%esp
c0102d26:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102d29:	c9                   	leave  
c0102d2a:	c3                   	ret    

c0102d2b <speaker_beep>:
nosound() {
    outb(0x61, inb(0x61) & 0xFC);
}

static void
speaker_beep(uint32_t freq, uint32_t ticks) {
c0102d2b:	55                   	push   %ebp
c0102d2c:	89 e5                	mov    %esp,%ebp
c0102d2e:	56                   	push   %esi
c0102d2f:	53                   	push   %ebx
c0102d30:	89 c1                	mov    %eax,%ecx
c0102d32:	89 d6                	mov    %edx,%esi
#include <speaker.h>
#include <pit.h>

static void
sound(uint32_t freq) {
    uint32_t div = 1193180 / freq;
c0102d34:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
c0102d39:	31 d2                	xor    %edx,%edx
c0102d3b:	f7 f1                	div    %ecx
c0102d3d:	89 c1                	mov    %eax,%ecx
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c0102d3f:	ba 43 00 00 00       	mov    $0x43,%edx
c0102d44:	b0 b6                	mov    $0xb6,%al
c0102d46:	ee                   	out    %al,(%dx)
c0102d47:	ba 42 00 00 00       	mov    $0x42,%edx
c0102d4c:	88 c8                	mov    %cl,%al
c0102d4e:	ee                   	out    %al,(%dx)
c0102d4f:	89 c8                	mov    %ecx,%eax
c0102d51:	c1 e8 08             	shr    $0x8,%eax
c0102d54:	ee                   	out    %al,(%dx)
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c0102d55:	bb 61 00 00 00       	mov    $0x61,%ebx
c0102d5a:	89 da                	mov    %ebx,%edx
c0102d5c:	ec                   	in     (%dx),%al
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c0102d5d:	83 c8 03             	or     $0x3,%eax
c0102d60:	ee                   	out    %al,(%dx)
}

static void
speaker_beep(uint32_t freq, uint32_t ticks) {
    sound(freq);
    pit_wait(ticks);
c0102d61:	83 ec 0c             	sub    $0xc,%esp
c0102d64:	56                   	push   %esi
c0102d65:	e8 41 fe ff ff       	call   c0102bab <pit_wait>
}

static inline uint8_t
inb(int port) {
    uint8_t data;
    asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
c0102d6a:	89 da                	mov    %ebx,%edx
c0102d6c:	ec                   	in     (%dx),%al
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c0102d6d:	83 e0 fc             	and    $0xfffffffc,%eax
c0102d70:	ee                   	out    %al,(%dx)
    nosound();
}
c0102d71:	83 c4 10             	add    $0x10,%esp
c0102d74:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102d77:	5b                   	pop    %ebx
c0102d78:	5e                   	pop    %esi
c0102d79:	5d                   	pop    %ebp
c0102d7a:	c3                   	ret    

c0102d7b <speaker_warning>:

void
speaker_warning(void) {
c0102d7b:	55                   	push   %ebp
c0102d7c:	89 e5                	mov    %esp,%ebp

}
c0102d7e:	5d                   	pop    %ebp
c0102d7f:	c3                   	ret    

c0102d80 <speaker_error>:

void
speaker_error(void) {
c0102d80:	55                   	push   %ebp
c0102d81:	89 e5                	mov    %esp,%ebp
c0102d83:	83 ec 08             	sub    $0x8,%esp
    speaker_beep(300, 4);
c0102d86:	ba 04 00 00 00       	mov    $0x4,%edx
c0102d8b:	b8 2c 01 00 00       	mov    $0x12c,%eax
c0102d90:	e8 96 ff ff ff       	call   c0102d2b <speaker_beep>
    pit_wait(1);
c0102d95:	83 ec 0c             	sub    $0xc,%esp
c0102d98:	6a 01                	push   $0x1
c0102d9a:	e8 0c fe ff ff       	call   c0102bab <pit_wait>
    speaker_beep(300, 7);
c0102d9f:	83 c4 10             	add    $0x10,%esp
c0102da2:	ba 07 00 00 00       	mov    $0x7,%edx
c0102da7:	b8 2c 01 00 00       	mov    $0x12c,%eax
}
c0102dac:	c9                   	leave  

void
speaker_error(void) {
    speaker_beep(300, 4);
    pit_wait(1);
    speaker_beep(300, 7);
c0102dad:	e9 79 ff ff ff       	jmp    c0102d2b <speaker_beep>

c0102db2 <init_speaker>:
}

void
init_speaker(void) {
c0102db2:	55                   	push   %ebp
c0102db3:	89 e5                	mov    %esp,%ebp
c0102db5:	83 ec 08             	sub    $0x8,%esp
    speaker_beep(800, 3);
c0102db8:	ba 03 00 00 00       	mov    $0x3,%edx
c0102dbd:	b8 20 03 00 00       	mov    $0x320,%eax
c0102dc2:	e8 64 ff ff ff       	call   c0102d2b <speaker_beep>
    speaker_beep(1000, 3);
c0102dc7:	ba 03 00 00 00       	mov    $0x3,%edx
c0102dcc:	b8 e8 03 00 00       	mov    $0x3e8,%eax
c0102dd1:	e8 55 ff ff ff       	call   c0102d2b <speaker_beep>
    speaker_beep(900, 8);
c0102dd6:	ba 08 00 00 00       	mov    $0x8,%edx
c0102ddb:	b8 84 03 00 00       	mov    $0x384,%eax
}
c0102de0:	c9                   	leave  

void
init_speaker(void) {
    speaker_beep(800, 3);
    speaker_beep(1000, 3);
    speaker_beep(900, 8);
c0102de1:	e9 45 ff ff ff       	jmp    c0102d2b <speaker_beep>

c0102de6 <cv_create>:
#include <cv.h>
#include <spinlock.h>
#include <wchan.h>

struct cv*
cv_create(const char* name) {
c0102de6:	55                   	push   %ebp
c0102de7:	89 e5                	mov    %esp,%ebp
c0102de9:	53                   	push   %ebx
c0102dea:	83 ec 10             	sub    $0x10,%esp
    struct cv* cv;

    cv = kmalloc(sizeof(struct cv));
c0102ded:	6a 10                	push   $0x10
c0102def:	e8 78 ef ff ff       	call   c0101d6c <kmalloc>
c0102df4:	89 c3                	mov    %eax,%ebx
    if (cv == NULL)
c0102df6:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0102df9:	31 c0                	xor    %eax,%eax
struct cv*
cv_create(const char* name) {
    struct cv* cv;

    cv = kmalloc(sizeof(struct cv));
    if (cv == NULL)
c0102dfb:	85 db                	test   %ebx,%ebx
c0102dfd:	74 40                	je     c0102e3f <cv_create+0x59>
        return NULL;

    cv->cv_name = strdup(name);
c0102dff:	83 ec 0c             	sub    $0xc,%esp
c0102e02:	ff 75 08             	pushl  0x8(%ebp)
c0102e05:	e8 80 1b 00 00       	call   c010498a <strdup>
c0102e0a:	89 03                	mov    %eax,(%ebx)
    if (cv->cv_name == NULL) {
c0102e0c:	83 c4 10             	add    $0x10,%esp
c0102e0f:	85 c0                	test   %eax,%eax
c0102e11:	75 10                	jne    c0102e23 <cv_create+0x3d>
        kfree(cv);
c0102e13:	83 ec 0c             	sub    $0xc,%esp
c0102e16:	53                   	push   %ebx
c0102e17:	e8 50 f0 ff ff       	call   c0101e6c <kfree>
        return NULL;
c0102e1c:	83 c4 10             	add    $0x10,%esp
c0102e1f:	31 c0                	xor    %eax,%eax
c0102e21:	eb 1c                	jmp    c0102e3f <cv_create+0x59>
    }

    // Initialize cv fields
    cv->cv_wchan = wchan_create(cv->cv_name);
c0102e23:	83 ec 0c             	sub    $0xc,%esp
c0102e26:	50                   	push   %eax
c0102e27:	e8 87 0a 00 00       	call   c01038b3 <wchan_create>
c0102e2c:	89 43 04             	mov    %eax,0x4(%ebx)
    spinlock_init(&cv->cv_splock);
c0102e2f:	8d 43 08             	lea    0x8(%ebx),%eax
c0102e32:	89 04 24             	mov    %eax,(%esp)
c0102e35:	e8 b3 07 00 00       	call   c01035ed <spinlock_init>

    return cv;
c0102e3a:	83 c4 10             	add    $0x10,%esp
c0102e3d:	89 d8                	mov    %ebx,%eax
}
c0102e3f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102e42:	c9                   	leave  
c0102e43:	c3                   	ret    

c0102e44 <cv_destroy>:

void
cv_destroy(struct cv* cv) {
c0102e44:	55                   	push   %ebp
c0102e45:	89 e5                	mov    %esp,%ebp
c0102e47:	53                   	push   %ebx
c0102e48:	51                   	push   %ecx
c0102e49:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(cv != NULL);
c0102e4c:	85 db                	test   %ebx,%ebx
c0102e4e:	75 28                	jne    c0102e78 <cv_destroy+0x34>
c0102e50:	83 ec 0c             	sub    $0xc,%esp
c0102e53:	68 dc 0b 11 c0       	push   $0xc0110bdc
c0102e58:	6a 1e                	push   $0x1e
c0102e5a:	68 c4 0b 11 c0       	push   $0xc0110bc4
c0102e5f:	68 cf 0b 11 c0       	push   $0xc0110bcf
c0102e64:	68 2b ff 10 c0       	push   $0xc010ff2b
c0102e69:	e8 fa 13 00 00       	call   c0104268 <print>
c0102e6e:	83 c4 20             	add    $0x20,%esp
c0102e71:	e8 0d e1 ff ff       	call   c0100f83 <backtrace>
c0102e76:	fa                   	cli    
c0102e77:	f4                   	hlt    

    // wchan_cleanup will assert if anyone's waiting on it
    spinlock_cleanup(&cv->cv_splock);
c0102e78:	83 ec 0c             	sub    $0xc,%esp
c0102e7b:	8d 43 08             	lea    0x8(%ebx),%eax
c0102e7e:	50                   	push   %eax
c0102e7f:	e8 01 09 00 00       	call   c0103785 <spinlock_cleanup>
    wchan_destroy(cv->cv_wchan);
c0102e84:	58                   	pop    %eax
c0102e85:	ff 73 04             	pushl  0x4(%ebx)
c0102e88:	e8 d6 0a 00 00       	call   c0103963 <wchan_destroy>

    // provided code
    kfree(cv->cv_name);
c0102e8d:	5a                   	pop    %edx
c0102e8e:	ff 33                	pushl  (%ebx)
c0102e90:	e8 d7 ef ff ff       	call   c0101e6c <kfree>
    kfree(cv);
c0102e95:	83 c4 10             	add    $0x10,%esp
c0102e98:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0102e9b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102e9e:	c9                   	leave  
    spinlock_cleanup(&cv->cv_splock);
    wchan_destroy(cv->cv_wchan);

    // provided code
    kfree(cv->cv_name);
    kfree(cv);
c0102e9f:	e9 c8 ef ff ff       	jmp    c0101e6c <kfree>

c0102ea4 <cv_wait>:
}

void
cv_wait(struct cv* cv, struct lock* lock) {
c0102ea4:	55                   	push   %ebp
c0102ea5:	89 e5                	mov    %esp,%ebp
c0102ea7:	57                   	push   %edi
c0102ea8:	56                   	push   %esi
c0102ea9:	53                   	push   %ebx
c0102eaa:	83 ec 18             	sub    $0x18,%esp
c0102ead:	8b 7d 08             	mov    0x8(%ebp),%edi
c0102eb0:	8b 75 0c             	mov    0xc(%ebp),%esi
    // Acquire spinlock
    spinlock_acquire(&cv->cv_splock);
c0102eb3:	8d 5f 08             	lea    0x8(%edi),%ebx
c0102eb6:	53                   	push   %ebx
c0102eb7:	e8 77 07 00 00       	call   c0103633 <spinlock_acquire>

    // release the passed in lock so it can be acquired by other
    // threads while this thread is down for the count.
    //
    // this is ok since we still hold the spinlock.
    lock_release(lock);
c0102ebc:	89 34 24             	mov    %esi,(%esp)
c0102ebf:	e8 a0 03 00 00       	call   c0103264 <lock_release>
    // let other threads have their turns while this is put on the
    // waiting queue.
    //
    // spinlock will be released, so other threads can acquire it,
    // and reacquired before this returns.
    wchan_sleep(cv->cv_wchan, &cv->cv_splock);
c0102ec4:	58                   	pop    %eax
c0102ec5:	5a                   	pop    %edx
c0102ec6:	53                   	push   %ebx
c0102ec7:	ff 77 04             	pushl  0x4(%edi)
c0102eca:	e8 5b 0b 00 00       	call   c0103a2a <wchan_sleep>

    // release the spinlock.
    spinlock_release(&cv->cv_splock);
c0102ecf:	89 1c 24             	mov    %ebx,(%esp)
c0102ed2:	e8 12 08 00 00       	call   c01036e9 <spinlock_release>

    // acquire the lock again
    lock_acquire(lock);
c0102ed7:	83 c4 10             	add    $0x10,%esp
c0102eda:	89 75 08             	mov    %esi,0x8(%ebp)
}
c0102edd:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102ee0:	5b                   	pop    %ebx
c0102ee1:	5e                   	pop    %esi
c0102ee2:	5f                   	pop    %edi
c0102ee3:	5d                   	pop    %ebp

    // release the spinlock.
    spinlock_release(&cv->cv_splock);

    // acquire the lock again
    lock_acquire(lock);
c0102ee4:	e9 0a 02 00 00       	jmp    c01030f3 <lock_acquire>

c0102ee9 <cv_signal>:
}

void
cv_signal(struct cv* cv, struct lock* lock) {
c0102ee9:	55                   	push   %ebp
c0102eea:	89 e5                	mov    %esp,%ebp
c0102eec:	57                   	push   %edi
c0102eed:	56                   	push   %esi
c0102eee:	53                   	push   %ebx
c0102eef:	83 ec 18             	sub    $0x18,%esp
c0102ef2:	8b 7d 08             	mov    0x8(%ebp),%edi
c0102ef5:	8b 75 0c             	mov    0xc(%ebp),%esi
    // acquire spinlock for atomicity
    spinlock_acquire(&cv->cv_splock);
c0102ef8:	8d 5f 08             	lea    0x8(%edi),%ebx
c0102efb:	53                   	push   %ebx
c0102efc:	e8 32 07 00 00       	call   c0103633 <spinlock_acquire>

    // release lock so other thread can use it
    lock_release(lock);
c0102f01:	89 34 24             	mov    %esi,(%esp)
c0102f04:	e8 5b 03 00 00       	call   c0103264 <lock_release>

    // move one TCB in the waiting queue from waiting to ready
    wchan_wakeone(cv->cv_wchan, &cv->cv_splock);
c0102f09:	58                   	pop    %eax
c0102f0a:	5a                   	pop    %edx
c0102f0b:	53                   	push   %ebx
c0102f0c:	ff 77 04             	pushl  0x4(%edi)
c0102f0f:	e8 ed 0b 00 00       	call   c0103b01 <wchan_wakeone>

    // release spinlock
    spinlock_release(&cv->cv_splock);
c0102f14:	89 1c 24             	mov    %ebx,(%esp)
c0102f17:	e8 cd 07 00 00       	call   c01036e9 <spinlock_release>

    // reacquire lock while we have control again
    lock_acquire(lock);
c0102f1c:	83 c4 10             	add    $0x10,%esp
c0102f1f:	89 75 08             	mov    %esi,0x8(%ebp)
}
c0102f22:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102f25:	5b                   	pop    %ebx
c0102f26:	5e                   	pop    %esi
c0102f27:	5f                   	pop    %edi
c0102f28:	5d                   	pop    %ebp

    // release spinlock
    spinlock_release(&cv->cv_splock);

    // reacquire lock while we have control again
    lock_acquire(lock);
c0102f29:	e9 c5 01 00 00       	jmp    c01030f3 <lock_acquire>

c0102f2e <cv_broadcast>:
}

void
cv_broadcast(struct cv* cv, struct lock* lock) {
c0102f2e:	55                   	push   %ebp
c0102f2f:	89 e5                	mov    %esp,%ebp
c0102f31:	57                   	push   %edi
c0102f32:	56                   	push   %esi
c0102f33:	53                   	push   %ebx
c0102f34:	83 ec 18             	sub    $0x18,%esp
c0102f37:	8b 7d 08             	mov    0x8(%ebp),%edi
c0102f3a:	8b 75 0c             	mov    0xc(%ebp),%esi
    // acquire spinlock
    spinlock_acquire(&cv->cv_splock);
c0102f3d:	8d 5f 08             	lea    0x8(%edi),%ebx
c0102f40:	53                   	push   %ebx
c0102f41:	e8 ed 06 00 00       	call   c0103633 <spinlock_acquire>

    // release lock so other thread can use it
    lock_release(lock);
c0102f46:	89 34 24             	mov    %esi,(%esp)
c0102f49:	e8 16 03 00 00       	call   c0103264 <lock_release>

    // move all TCBs in cv's waiting queue from waiting to ready
    wchan_wakeall(cv->cv_wchan, &cv->cv_splock);
c0102f4e:	58                   	pop    %eax
c0102f4f:	5a                   	pop    %edx
c0102f50:	53                   	push   %ebx
c0102f51:	ff 77 04             	pushl  0x4(%edi)
c0102f54:	e8 14 0c 00 00       	call   c0103b6d <wchan_wakeall>

    // release spinlock
    spinlock_release(&cv->cv_splock);
c0102f59:	89 1c 24             	mov    %ebx,(%esp)
c0102f5c:	e8 88 07 00 00       	call   c01036e9 <spinlock_release>

    // reacquire lock while we have control again
    lock_acquire(lock);
c0102f61:	83 c4 10             	add    $0x10,%esp
c0102f64:	89 75 08             	mov    %esi,0x8(%ebp)
}
c0102f67:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102f6a:	5b                   	pop    %ebx
c0102f6b:	5e                   	pop    %esi
c0102f6c:	5f                   	pop    %edi
c0102f6d:	5d                   	pop    %ebp

    // release spinlock
    spinlock_release(&cv->cv_splock);

    // reacquire lock while we have control again
    lock_acquire(lock);
c0102f6e:	e9 80 01 00 00       	jmp    c01030f3 <lock_acquire>

c0102f73 <lock_create>:
#include <lock.h>
#include <thread.h>
#include <x86.h>

struct lock*
lock_create(const char* name) {
c0102f73:	55                   	push   %ebp
c0102f74:	89 e5                	mov    %esp,%ebp
c0102f76:	53                   	push   %ebx
c0102f77:	83 ec 10             	sub    $0x10,%esp
    struct lock* lock;

    lock = kmalloc(sizeof(struct lock));
c0102f7a:	6a 18                	push   $0x18
c0102f7c:	e8 eb ed ff ff       	call   c0101d6c <kmalloc>
c0102f81:	89 c3                	mov    %eax,%ebx
    if (lock == NULL)
c0102f83:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0102f86:	31 c0                	xor    %eax,%eax
struct lock*
lock_create(const char* name) {
    struct lock* lock;

    lock = kmalloc(sizeof(struct lock));
    if (lock == NULL)
c0102f88:	85 db                	test   %ebx,%ebx
c0102f8a:	74 65                	je     c0102ff1 <lock_create+0x7e>
        return NULL;

    lock->lk_name = strdup(name);
c0102f8c:	83 ec 0c             	sub    $0xc,%esp
c0102f8f:	ff 75 08             	pushl  0x8(%ebp)
c0102f92:	e8 f3 19 00 00       	call   c010498a <strdup>
c0102f97:	89 03                	mov    %eax,(%ebx)
    if (lock->lk_name == NULL) {
c0102f99:	83 c4 10             	add    $0x10,%esp
c0102f9c:	85 c0                	test   %eax,%eax
c0102f9e:	75 06                	jne    c0102fa6 <lock_create+0x33>
        kfree(lock);
c0102fa0:	83 ec 0c             	sub    $0xc,%esp
c0102fa3:	53                   	push   %ebx
c0102fa4:	eb 2e                	jmp    c0102fd4 <lock_create+0x61>
        return NULL;
    }

    lock->lk_owner = NULL;
c0102fa6:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    lock->lk_count = 0;
c0102fad:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)

    lock->lk_wchan = wchan_create(lock->lk_name);
c0102fb4:	83 ec 0c             	sub    $0xc,%esp
c0102fb7:	50                   	push   %eax
c0102fb8:	e8 f6 08 00 00       	call   c01038b3 <wchan_create>
c0102fbd:	89 43 0c             	mov    %eax,0xc(%ebx)
    if (lock->lk_wchan == NULL) {
c0102fc0:	83 c4 10             	add    $0x10,%esp
c0102fc3:	85 c0                	test   %eax,%eax
c0102fc5:	75 19                	jne    c0102fe0 <lock_create+0x6d>
        kfree(lock->lk_name);
c0102fc7:	83 ec 0c             	sub    $0xc,%esp
c0102fca:	ff 33                	pushl  (%ebx)
c0102fcc:	e8 9b ee ff ff       	call   c0101e6c <kfree>
        kfree(lock);
c0102fd1:	89 1c 24             	mov    %ebx,(%esp)
c0102fd4:	e8 93 ee ff ff       	call   c0101e6c <kfree>
        return NULL;
c0102fd9:	83 c4 10             	add    $0x10,%esp
c0102fdc:	31 c0                	xor    %eax,%eax
c0102fde:	eb 11                	jmp    c0102ff1 <lock_create+0x7e>
    }

    spinlock_init(&lock->lk_lock);
c0102fe0:	83 ec 0c             	sub    $0xc,%esp
c0102fe3:	8d 43 10             	lea    0x10(%ebx),%eax
c0102fe6:	50                   	push   %eax
c0102fe7:	e8 01 06 00 00       	call   c01035ed <spinlock_init>

    return lock;
c0102fec:	83 c4 10             	add    $0x10,%esp
c0102fef:	89 d8                	mov    %ebx,%eax
}
c0102ff1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102ff4:	c9                   	leave  
c0102ff5:	c3                   	ret    

c0102ff6 <lock_destroy>:

void
lock_destroy(struct lock* lock) {
c0102ff6:	55                   	push   %ebp
c0102ff7:	89 e5                	mov    %esp,%ebp
c0102ff9:	53                   	push   %ebx
c0102ffa:	53                   	push   %ebx
c0102ffb:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lock != NULL);
c0102ffe:	85 db                	test   %ebx,%ebx
c0103000:	75 28                	jne    c010302a <lock_destroy+0x34>
c0103002:	83 ec 0c             	sub    $0xc,%esp
c0103005:	68 b8 0c 11 c0       	push   $0xc0110cb8
c010300a:	6a 26                	push   $0x26
c010300c:	68 e7 0b 11 c0       	push   $0xc0110be7
c0103011:	68 f4 0b 11 c0       	push   $0xc0110bf4
c0103016:	68 2b ff 10 c0       	push   $0xc010ff2b
c010301b:	e8 48 12 00 00       	call   c0104268 <print>
c0103020:	83 c4 20             	add    $0x20,%esp
c0103023:	e8 5b df ff ff       	call   c0100f83 <backtrace>
c0103028:	fa                   	cli    
c0103029:	f4                   	hlt    

    spinlock_cleanup(&lock->lk_lock);
c010302a:	83 ec 0c             	sub    $0xc,%esp
c010302d:	8d 43 10             	lea    0x10(%ebx),%eax
c0103030:	50                   	push   %eax
c0103031:	e8 4f 07 00 00       	call   c0103785 <spinlock_cleanup>
    wchan_destroy(lock->lk_wchan);
c0103036:	58                   	pop    %eax
c0103037:	ff 73 0c             	pushl  0xc(%ebx)
c010303a:	e8 24 09 00 00       	call   c0103963 <wchan_destroy>
    kfree(lock->lk_owner);
c010303f:	5a                   	pop    %edx
c0103040:	ff 73 04             	pushl  0x4(%ebx)
c0103043:	e8 24 ee ff ff       	call   c0101e6c <kfree>
    kfree(lock->lk_name);
c0103048:	59                   	pop    %ecx
c0103049:	ff 33                	pushl  (%ebx)
c010304b:	e8 1c ee ff ff       	call   c0101e6c <kfree>
    kfree(lock);
c0103050:	83 c4 10             	add    $0x10,%esp
c0103053:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0103056:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103059:	c9                   	leave  

    spinlock_cleanup(&lock->lk_lock);
    wchan_destroy(lock->lk_wchan);
    kfree(lock->lk_owner);
    kfree(lock->lk_name);
    kfree(lock);
c010305a:	e9 0d ee ff ff       	jmp    c0101e6c <kfree>

c010305f <lock_holding>:

    ifx(iflag);
}

bool
lock_holding(struct lock* lock) {
c010305f:	55                   	push   %ebp
c0103060:	89 e5                	mov    %esp,%ebp
c0103062:	53                   	push   %ebx
c0103063:	50                   	push   %eax
c0103064:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lock != NULL);
c0103067:	85 db                	test   %ebx,%ebx
c0103069:	75 28                	jne    c0103093 <lock_holding+0x34>
c010306b:	83 ec 0c             	sub    $0xc,%esp
c010306e:	68 88 0c 11 c0       	push   $0xc0110c88
c0103073:	6a 61                	push   $0x61
c0103075:	68 e7 0b 11 c0       	push   $0xc0110be7
c010307a:	68 f4 0b 11 c0       	push   $0xc0110bf4
c010307f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103084:	e8 df 11 00 00       	call   c0104268 <print>
c0103089:	83 c4 20             	add    $0x20,%esp
c010308c:	e8 f2 de ff ff       	call   c0100f83 <backtrace>
c0103091:	fa                   	cli    
c0103092:	f4                   	hlt    
    assert(thisthread != NULL);
c0103093:	e8 1e f8 ff ff       	call   c01028b6 <cpunum>
c0103098:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010309f:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
c01030a3:	75 28                	jne    c01030cd <lock_holding+0x6e>
c01030a5:	83 ec 0c             	sub    $0xc,%esp
c01030a8:	68 88 0c 11 c0       	push   $0xc0110c88
c01030ad:	6a 62                	push   $0x62
c01030af:	68 e7 0b 11 c0       	push   $0xc0110be7
c01030b4:	68 01 0c 11 c0       	push   $0xc0110c01
c01030b9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01030be:	e8 a5 11 00 00       	call   c0104268 <print>
c01030c3:	83 c4 20             	add    $0x20,%esp
c01030c6:	e8 b8 de ff ff       	call   c0100f83 <backtrace>
c01030cb:	fa                   	cli    
c01030cc:	f4                   	hlt    

    return lock->lk_owner != NULL ? lock->lk_owner == thisthread : false;
c01030cd:	8b 5b 04             	mov    0x4(%ebx),%ebx
c01030d0:	31 c0                	xor    %eax,%eax
c01030d2:	85 db                	test   %ebx,%ebx
c01030d4:	74 15                	je     c01030eb <lock_holding+0x8c>
c01030d6:	e8 db f7 ff ff       	call   c01028b6 <cpunum>
c01030db:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01030e2:	39 58 08             	cmp    %ebx,0x8(%eax)
c01030e5:	0f 94 c0             	sete   %al
c01030e8:	0f b6 c0             	movzbl %al,%eax
c01030eb:	83 e0 01             	and    $0x1,%eax
}
c01030ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01030f1:	c9                   	leave  
c01030f2:	c3                   	ret    

c01030f3 <lock_acquire>:
    kfree(lock->lk_name);
    kfree(lock);
}

void
lock_acquire(struct lock* lock) {
c01030f3:	55                   	push   %ebp
c01030f4:	89 e5                	mov    %esp,%ebp
c01030f6:	57                   	push   %edi
c01030f7:	56                   	push   %esi
c01030f8:	53                   	push   %ebx
c01030f9:	83 ec 0c             	sub    $0xc,%esp
c01030fc:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lock != NULL);
c01030ff:	85 db                	test   %ebx,%ebx
c0103101:	75 28                	jne    c010312b <lock_acquire+0x38>
c0103103:	83 ec 0c             	sub    $0xc,%esp
c0103106:	68 a8 0c 11 c0       	push   $0xc0110ca8
c010310b:	6a 31                	push   $0x31
c010310d:	68 e7 0b 11 c0       	push   $0xc0110be7
c0103112:	68 f4 0b 11 c0       	push   $0xc0110bf4
c0103117:	68 2b ff 10 c0       	push   $0xc010ff2b
c010311c:	e8 47 11 00 00       	call   c0104268 <print>
c0103121:	83 c4 20             	add    $0x20,%esp
c0103124:	e8 5a de ff ff       	call   c0100f83 <backtrace>
c0103129:	fa                   	cli    
c010312a:	f4                   	hlt    
    assert(thisthread->in_interrupt == false);
c010312b:	e8 86 f7 ff ff       	call   c01028b6 <cpunum>
c0103130:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0103137:	8b 40 08             	mov    0x8(%eax),%eax
c010313a:	80 78 28 00          	cmpb   $0x0,0x28(%eax)
c010313e:	74 28                	je     c0103168 <lock_acquire+0x75>
c0103140:	83 ec 0c             	sub    $0xc,%esp
c0103143:	68 a8 0c 11 c0       	push   $0xc0110ca8
c0103148:	6a 32                	push   $0x32
c010314a:	68 e7 0b 11 c0       	push   $0xc0110be7
c010314f:	68 14 0c 11 c0       	push   $0xc0110c14
c0103154:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103159:	e8 0a 11 00 00       	call   c0104268 <print>
c010315e:	83 c4 20             	add    $0x20,%esp
c0103161:	e8 1d de ff ff       	call   c0100f83 <backtrace>
c0103166:	fa                   	cli    
c0103167:	f4                   	hlt    
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c0103168:	9c                   	pushf  
c0103169:	5e                   	pop    %esi

static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
c010316a:	c1 ee 09             	shr    $0x9,%esi
c010316d:	83 e6 01             	and    $0x1,%esi
    asm volatile ("cli" : : : "memory");
c0103170:	fa                   	cli    

    bool iflag = cli();

    spinlock_acquire(&lock->lk_lock);
c0103171:	8d 7b 10             	lea    0x10(%ebx),%edi
c0103174:	83 ec 0c             	sub    $0xc,%esp
c0103177:	57                   	push   %edi
c0103178:	e8 b6 04 00 00       	call   c0103633 <spinlock_acquire>
    if (!lock_holding(lock)) {
c010317d:	89 1c 24             	mov    %ebx,(%esp)
c0103180:	e8 da fe ff ff       	call   c010305f <lock_holding>
c0103185:	83 c4 10             	add    $0x10,%esp
c0103188:	84 c0                	test   %al,%al
c010318a:	0f 85 80 00 00 00    	jne    c0103210 <lock_acquire+0x11d>

        while (lock->lk_count > 0)
c0103190:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c0103194:	7e 10                	jle    c01031a6 <lock_acquire+0xb3>
            wchan_sleep(lock->lk_wchan, &lock->lk_lock);
c0103196:	50                   	push   %eax
c0103197:	50                   	push   %eax
c0103198:	57                   	push   %edi
c0103199:	ff 73 0c             	pushl  0xc(%ebx)
c010319c:	e8 89 08 00 00       	call   c0103a2a <wchan_sleep>
c01031a1:	83 c4 10             	add    $0x10,%esp
c01031a4:	eb ea                	jmp    c0103190 <lock_acquire+0x9d>

        assert(lock->lk_count == 0);
c01031a6:	74 28                	je     c01031d0 <lock_acquire+0xdd>
c01031a8:	83 ec 0c             	sub    $0xc,%esp
c01031ab:	68 a8 0c 11 c0       	push   $0xc0110ca8
c01031b0:	6a 3c                	push   $0x3c
c01031b2:	68 e7 0b 11 c0       	push   $0xc0110be7
c01031b7:	68 36 0c 11 c0       	push   $0xc0110c36
c01031bc:	68 2b ff 10 c0       	push   $0xc010ff2b
c01031c1:	e8 a2 10 00 00       	call   c0104268 <print>
c01031c6:	83 c4 20             	add    $0x20,%esp
c01031c9:	e8 b5 dd ff ff       	call   c0100f83 <backtrace>
c01031ce:	fa                   	cli    
c01031cf:	f4                   	hlt    
        assert(lock->lk_owner == NULL);
c01031d0:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c01031d4:	74 28                	je     c01031fe <lock_acquire+0x10b>
c01031d6:	83 ec 0c             	sub    $0xc,%esp
c01031d9:	68 a8 0c 11 c0       	push   $0xc0110ca8
c01031de:	6a 3d                	push   $0x3d
c01031e0:	68 e7 0b 11 c0       	push   $0xc0110be7
c01031e5:	68 4a 0c 11 c0       	push   $0xc0110c4a
c01031ea:	68 2b ff 10 c0       	push   $0xc010ff2b
c01031ef:	e8 74 10 00 00       	call   c0104268 <print>
c01031f4:	83 c4 20             	add    $0x20,%esp
c01031f7:	e8 87 dd ff ff       	call   c0100f83 <backtrace>
c01031fc:	fa                   	cli    
c01031fd:	f4                   	hlt    
        lock->lk_owner = thisthread;
c01031fe:	e8 b3 f6 ff ff       	call   c01028b6 <cpunum>
c0103203:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010320a:	8b 40 08             	mov    0x8(%eax),%eax
c010320d:	89 43 04             	mov    %eax,0x4(%ebx)
    }

    lock->lk_count++;
c0103210:	ff 43 08             	incl   0x8(%ebx)
    assert(lock_holding(lock));
c0103213:	83 ec 0c             	sub    $0xc,%esp
c0103216:	53                   	push   %ebx
c0103217:	e8 43 fe ff ff       	call   c010305f <lock_holding>
c010321c:	83 c4 10             	add    $0x10,%esp
c010321f:	84 c0                	test   %al,%al
c0103221:	75 28                	jne    c010324b <lock_acquire+0x158>
c0103223:	83 ec 0c             	sub    $0xc,%esp
c0103226:	68 a8 0c 11 c0       	push   $0xc0110ca8
c010322b:	6a 42                	push   $0x42
c010322d:	68 e7 0b 11 c0       	push   $0xc0110be7
c0103232:	68 61 0c 11 c0       	push   $0xc0110c61
c0103237:	68 2b ff 10 c0       	push   $0xc010ff2b
c010323c:	e8 27 10 00 00       	call   c0104268 <print>
c0103241:	83 c4 20             	add    $0x20,%esp
c0103244:	e8 3a dd ff ff       	call   c0100f83 <backtrace>
c0103249:	fa                   	cli    
c010324a:	f4                   	hlt    

    spinlock_release(&lock->lk_lock);
c010324b:	83 ec 0c             	sub    $0xc,%esp
c010324e:	57                   	push   %edi
c010324f:	e8 95 04 00 00       	call   c01036e9 <spinlock_release>
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c0103254:	83 c4 10             	add    $0x10,%esp
c0103257:	85 f6                	test   %esi,%esi
c0103259:	74 01                	je     c010325c <lock_acquire+0x169>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010325b:	fb                   	sti    

    ifx(iflag);
}
c010325c:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010325f:	5b                   	pop    %ebx
c0103260:	5e                   	pop    %esi
c0103261:	5f                   	pop    %edi
c0103262:	5d                   	pop    %ebp
c0103263:	c3                   	ret    

c0103264 <lock_release>:

void
lock_release(struct lock* lock) {
c0103264:	55                   	push   %ebp
c0103265:	89 e5                	mov    %esp,%ebp
c0103267:	57                   	push   %edi
c0103268:	56                   	push   %esi
c0103269:	53                   	push   %ebx
c010326a:	83 ec 0c             	sub    $0xc,%esp
c010326d:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lock != NULL);
c0103270:	85 db                	test   %ebx,%ebx
c0103272:	75 28                	jne    c010329c <lock_release+0x38>
c0103274:	83 ec 0c             	sub    $0xc,%esp
c0103277:	68 98 0c 11 c0       	push   $0xc0110c98
c010327c:	6a 4b                	push   $0x4b
c010327e:	68 e7 0b 11 c0       	push   $0xc0110be7
c0103283:	68 f4 0b 11 c0       	push   $0xc0110bf4
c0103288:	68 2b ff 10 c0       	push   $0xc010ff2b
c010328d:	e8 d6 0f 00 00       	call   c0104268 <print>
c0103292:	83 c4 20             	add    $0x20,%esp
c0103295:	e8 e9 dc ff ff       	call   c0100f83 <backtrace>
c010329a:	fa                   	cli    
c010329b:	f4                   	hlt    
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c010329c:	9c                   	pushf  
c010329d:	5e                   	pop    %esi

static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
c010329e:	c1 ee 09             	shr    $0x9,%esi
c01032a1:	83 e6 01             	and    $0x1,%esi
    asm volatile ("cli" : : : "memory");
c01032a4:	fa                   	cli    

    bool iflag = cli();

    spinlock_acquire(&lock->lk_lock);
c01032a5:	8d 7b 10             	lea    0x10(%ebx),%edi
c01032a8:	83 ec 0c             	sub    $0xc,%esp
c01032ab:	57                   	push   %edi
c01032ac:	e8 82 03 00 00       	call   c0103633 <spinlock_acquire>

    assert(lock_holding(lock));
c01032b1:	89 1c 24             	mov    %ebx,(%esp)
c01032b4:	e8 a6 fd ff ff       	call   c010305f <lock_holding>
c01032b9:	83 c4 10             	add    $0x10,%esp
c01032bc:	84 c0                	test   %al,%al
c01032be:	75 28                	jne    c01032e8 <lock_release+0x84>
c01032c0:	83 ec 0c             	sub    $0xc,%esp
c01032c3:	68 98 0c 11 c0       	push   $0xc0110c98
c01032c8:	6a 51                	push   $0x51
c01032ca:	68 e7 0b 11 c0       	push   $0xc0110be7
c01032cf:	68 61 0c 11 c0       	push   $0xc0110c61
c01032d4:	68 2b ff 10 c0       	push   $0xc010ff2b
c01032d9:	e8 8a 0f 00 00       	call   c0104268 <print>
c01032de:	83 c4 20             	add    $0x20,%esp
c01032e1:	e8 9d dc ff ff       	call   c0100f83 <backtrace>
c01032e6:	fa                   	cli    
c01032e7:	f4                   	hlt    
    assert(lock->lk_count > 0);
c01032e8:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c01032ec:	7f 28                	jg     c0103316 <lock_release+0xb2>
c01032ee:	83 ec 0c             	sub    $0xc,%esp
c01032f1:	68 98 0c 11 c0       	push   $0xc0110c98
c01032f6:	6a 52                	push   $0x52
c01032f8:	68 e7 0b 11 c0       	push   $0xc0110be7
c01032fd:	68 74 0c 11 c0       	push   $0xc0110c74
c0103302:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103307:	e8 5c 0f 00 00       	call   c0104268 <print>
c010330c:	83 c4 20             	add    $0x20,%esp
c010330f:	e8 6f dc ff ff       	call   c0100f83 <backtrace>
c0103314:	fa                   	cli    
c0103315:	f4                   	hlt    

    lock->lk_count--;
    if (lock->lk_count == 0) {
c0103316:	ff 4b 08             	decl   0x8(%ebx)
c0103319:	75 15                	jne    c0103330 <lock_release+0xcc>
        lock->lk_owner = NULL;
c010331b:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
        wchan_wakeone(lock->lk_wchan, &lock->lk_lock);
c0103322:	50                   	push   %eax
c0103323:	50                   	push   %eax
c0103324:	57                   	push   %edi
c0103325:	ff 73 0c             	pushl  0xc(%ebx)
c0103328:	e8 d4 07 00 00       	call   c0103b01 <wchan_wakeone>
c010332d:	83 c4 10             	add    $0x10,%esp
    }

    spinlock_release(&lock->lk_lock);
c0103330:	83 ec 0c             	sub    $0xc,%esp
c0103333:	57                   	push   %edi
c0103334:	e8 b0 03 00 00       	call   c01036e9 <spinlock_release>
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c0103339:	83 c4 10             	add    $0x10,%esp
c010333c:	85 f6                	test   %esi,%esi
c010333e:	74 01                	je     c0103341 <lock_release+0xdd>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c0103340:	fb                   	sti    

    ifx(iflag);
}
c0103341:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0103344:	5b                   	pop    %ebx
c0103345:	5e                   	pop    %esi
c0103346:	5f                   	pop    %edi
c0103347:	5d                   	pop    %ebp
c0103348:	c3                   	ret    

c0103349 <semaphore_create>:
#include <spinlock.h>
#include <wchan.h>
#include <thread.h>

struct semaphore*
semaphore_create(const char* name, unsigned initial_count) {
c0103349:	55                   	push   %ebp
c010334a:	89 e5                	mov    %esp,%ebp
c010334c:	53                   	push   %ebx
c010334d:	83 ec 10             	sub    $0x10,%esp
    struct semaphore* sem;

    sem = kmalloc(sizeof(struct semaphore));
c0103350:	6a 14                	push   $0x14
c0103352:	e8 15 ea ff ff       	call   c0101d6c <kmalloc>
c0103357:	89 c3                	mov    %eax,%ebx
    if (sem == NULL)
c0103359:	83 c4 10             	add    $0x10,%esp
        return NULL;
c010335c:	31 c0                	xor    %eax,%eax
struct semaphore*
semaphore_create(const char* name, unsigned initial_count) {
    struct semaphore* sem;

    sem = kmalloc(sizeof(struct semaphore));
    if (sem == NULL)
c010335e:	85 db                	test   %ebx,%ebx
c0103360:	74 5d                	je     c01033bf <semaphore_create+0x76>
        return NULL;

    sem->sem_name = strdup(name);
c0103362:	83 ec 0c             	sub    $0xc,%esp
c0103365:	ff 75 08             	pushl  0x8(%ebp)
c0103368:	e8 1d 16 00 00       	call   c010498a <strdup>
c010336d:	89 03                	mov    %eax,(%ebx)
    if (sem->sem_name == NULL) {
c010336f:	83 c4 10             	add    $0x10,%esp
c0103372:	85 c0                	test   %eax,%eax
c0103374:	75 06                	jne    c010337c <semaphore_create+0x33>
        kfree(sem);
c0103376:	83 ec 0c             	sub    $0xc,%esp
c0103379:	53                   	push   %ebx
c010337a:	eb 20                	jmp    c010339c <semaphore_create+0x53>
        return NULL;
    }

    sem->sem_wchan = wchan_create(sem->sem_name);
c010337c:	83 ec 0c             	sub    $0xc,%esp
c010337f:	50                   	push   %eax
c0103380:	e8 2e 05 00 00       	call   c01038b3 <wchan_create>
c0103385:	89 43 04             	mov    %eax,0x4(%ebx)
    if (sem->sem_wchan == NULL) {
c0103388:	83 c4 10             	add    $0x10,%esp
c010338b:	85 c0                	test   %eax,%eax
c010338d:	75 19                	jne    c01033a8 <semaphore_create+0x5f>
        kfree(sem->sem_name);
c010338f:	83 ec 0c             	sub    $0xc,%esp
c0103392:	ff 33                	pushl  (%ebx)
c0103394:	e8 d3 ea ff ff       	call   c0101e6c <kfree>
        kfree(sem);
c0103399:	89 1c 24             	mov    %ebx,(%esp)
c010339c:	e8 cb ea ff ff       	call   c0101e6c <kfree>
        return NULL;
c01033a1:	83 c4 10             	add    $0x10,%esp
c01033a4:	31 c0                	xor    %eax,%eax
c01033a6:	eb 17                	jmp    c01033bf <semaphore_create+0x76>
    }

    spinlock_init(&sem->sem_lock);
c01033a8:	83 ec 0c             	sub    $0xc,%esp
c01033ab:	8d 43 08             	lea    0x8(%ebx),%eax
c01033ae:	50                   	push   %eax
c01033af:	e8 39 02 00 00       	call   c01035ed <spinlock_init>
    sem->sem_count = initial_count;
c01033b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033b7:	89 43 10             	mov    %eax,0x10(%ebx)

    return sem;
c01033ba:	83 c4 10             	add    $0x10,%esp
c01033bd:	89 d8                	mov    %ebx,%eax
}
c01033bf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01033c2:	c9                   	leave  
c01033c3:	c3                   	ret    

c01033c4 <semaphore_destroy>:

void
semaphore_destroy(struct semaphore* sem) {
c01033c4:	55                   	push   %ebp
c01033c5:	89 e5                	mov    %esp,%ebp
c01033c7:	53                   	push   %ebx
c01033c8:	51                   	push   %ecx
c01033c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(sem != NULL);
c01033cc:	85 db                	test   %ebx,%ebx
c01033ce:	75 28                	jne    c01033f8 <semaphore_destroy+0x34>
c01033d0:	83 ec 0c             	sub    $0xc,%esp
c01033d3:	68 f0 0c 11 c0       	push   $0xc0110cf0
c01033d8:	6a 25                	push   $0x25
c01033da:	68 c5 0c 11 c0       	push   $0xc0110cc5
c01033df:	68 21 31 11 c0       	push   $0xc0113121
c01033e4:	68 2b ff 10 c0       	push   $0xc010ff2b
c01033e9:	e8 7a 0e 00 00       	call   c0104268 <print>
c01033ee:	83 c4 20             	add    $0x20,%esp
c01033f1:	e8 8d db ff ff       	call   c0100f83 <backtrace>
c01033f6:	fa                   	cli    
c01033f7:	f4                   	hlt    

    /* wchan_cleanup will assert if anyone's waiting on it */
    spinlock_cleanup(&sem->sem_lock);
c01033f8:	83 ec 0c             	sub    $0xc,%esp
c01033fb:	8d 43 08             	lea    0x8(%ebx),%eax
c01033fe:	50                   	push   %eax
c01033ff:	e8 81 03 00 00       	call   c0103785 <spinlock_cleanup>
    wchan_destroy(sem->sem_wchan);
c0103404:	58                   	pop    %eax
c0103405:	ff 73 04             	pushl  0x4(%ebx)
c0103408:	e8 56 05 00 00       	call   c0103963 <wchan_destroy>
    kfree(sem->sem_name);
c010340d:	5a                   	pop    %edx
c010340e:	ff 33                	pushl  (%ebx)
c0103410:	e8 57 ea ff ff       	call   c0101e6c <kfree>
    kfree(sem);
c0103415:	83 c4 10             	add    $0x10,%esp
c0103418:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c010341b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010341e:	c9                   	leave  

    /* wchan_cleanup will assert if anyone's waiting on it */
    spinlock_cleanup(&sem->sem_lock);
    wchan_destroy(sem->sem_wchan);
    kfree(sem->sem_name);
    kfree(sem);
c010341f:	e9 48 ea ff ff       	jmp    c0101e6c <kfree>

c0103424 <P>:
}

void
P(struct semaphore* sem) {
c0103424:	55                   	push   %ebp
c0103425:	89 e5                	mov    %esp,%ebp
c0103427:	56                   	push   %esi
c0103428:	53                   	push   %ebx
c0103429:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(sem != NULL);
c010342c:	85 db                	test   %ebx,%ebx
c010342e:	75 28                	jne    c0103458 <P+0x34>
c0103430:	83 ec 0c             	sub    $0xc,%esp
c0103433:	68 ee 0c 11 c0       	push   $0xc0110cee
c0103438:	6a 30                	push   $0x30
c010343a:	68 c5 0c 11 c0       	push   $0xc0110cc5
c010343f:	68 21 31 11 c0       	push   $0xc0113121
c0103444:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103449:	e8 1a 0e 00 00       	call   c0104268 <print>
c010344e:	83 c4 20             	add    $0x20,%esp
c0103451:	e8 2d db ff ff       	call   c0100f83 <backtrace>
c0103456:	fa                   	cli    
c0103457:	f4                   	hlt    
     * May not block in an interrupt handler.
     *
     * For robustness, always check, even if we can actually
     * complete the P without blocking.
     */
    assert(thisthread->in_interrupt == false);
c0103458:	e8 59 f4 ff ff       	call   c01028b6 <cpunum>
c010345d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0103464:	8b 40 08             	mov    0x8(%eax),%eax
c0103467:	80 78 28 00          	cmpb   $0x0,0x28(%eax)
c010346b:	74 28                	je     c0103495 <P+0x71>
c010346d:	83 ec 0c             	sub    $0xc,%esp
c0103470:	68 ee 0c 11 c0       	push   $0xc0110cee
c0103475:	6a 38                	push   $0x38
c0103477:	68 c5 0c 11 c0       	push   $0xc0110cc5
c010347c:	68 14 0c 11 c0       	push   $0xc0110c14
c0103481:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103486:	e8 dd 0d 00 00       	call   c0104268 <print>
c010348b:	83 c4 20             	add    $0x20,%esp
c010348e:	e8 f0 da ff ff       	call   c0100f83 <backtrace>
c0103493:	fa                   	cli    
c0103494:	f4                   	hlt    

    /* Use the semaphore spinlock to protect the wchan as well. */
    spinlock_acquire(&sem->sem_lock);
c0103495:	8d 73 08             	lea    0x8(%ebx),%esi
c0103498:	83 ec 0c             	sub    $0xc,%esp
c010349b:	56                   	push   %esi
c010349c:	e8 92 01 00 00       	call   c0103633 <spinlock_acquire>
         * strict ordering. Too bad. :-)
         *
         * Exercise: how would you implement strict FIFO
         * ordering?
         */
        wchan_sleep(sem->sem_wchan, &sem->sem_lock);
c01034a1:	83 c4 10             	add    $0x10,%esp
     */
    assert(thisthread->in_interrupt == false);

    /* Use the semaphore spinlock to protect the wchan as well. */
    spinlock_acquire(&sem->sem_lock);
    while (sem->sem_count == 0) {
c01034a4:	8b 43 10             	mov    0x10(%ebx),%eax
c01034a7:	85 c0                	test   %eax,%eax
c01034a9:	75 0d                	jne    c01034b8 <P+0x94>
         * strict ordering. Too bad. :-)
         *
         * Exercise: how would you implement strict FIFO
         * ordering?
         */
        wchan_sleep(sem->sem_wchan, &sem->sem_lock);
c01034ab:	50                   	push   %eax
c01034ac:	50                   	push   %eax
c01034ad:	56                   	push   %esi
c01034ae:	ff 73 04             	pushl  0x4(%ebx)
c01034b1:	e8 74 05 00 00       	call   c0103a2a <wchan_sleep>
c01034b6:	eb e9                	jmp    c01034a1 <P+0x7d>
    }
    assert(sem->sem_count > 0);
c01034b8:	8b 43 10             	mov    0x10(%ebx),%eax
c01034bb:	85 c0                	test   %eax,%eax
c01034bd:	75 28                	jne    c01034e7 <P+0xc3>
c01034bf:	83 ec 0c             	sub    $0xc,%esp
c01034c2:	68 ee 0c 11 c0       	push   $0xc0110cee
c01034c7:	6a 4b                	push   $0x4b
c01034c9:	68 c5 0c 11 c0       	push   $0xc0110cc5
c01034ce:	68 d7 0c 11 c0       	push   $0xc0110cd7
c01034d3:	68 2b ff 10 c0       	push   $0xc010ff2b
c01034d8:	e8 8b 0d 00 00       	call   c0104268 <print>
c01034dd:	83 c4 20             	add    $0x20,%esp
c01034e0:	e8 9e da ff ff       	call   c0100f83 <backtrace>
c01034e5:	fa                   	cli    
c01034e6:	f4                   	hlt    
    sem->sem_count--;
c01034e7:	8b 43 10             	mov    0x10(%ebx),%eax
c01034ea:	48                   	dec    %eax
c01034eb:	89 43 10             	mov    %eax,0x10(%ebx)
    spinlock_release(&sem->sem_lock);
c01034ee:	89 75 08             	mov    %esi,0x8(%ebp)
}
c01034f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01034f4:	5b                   	pop    %ebx
c01034f5:	5e                   	pop    %esi
c01034f6:	5d                   	pop    %ebp
         */
        wchan_sleep(sem->sem_wchan, &sem->sem_lock);
    }
    assert(sem->sem_count > 0);
    sem->sem_count--;
    spinlock_release(&sem->sem_lock);
c01034f7:	e9 ed 01 00 00       	jmp    c01036e9 <spinlock_release>

c01034fc <V>:
}

void
V(struct semaphore* sem) {
c01034fc:	55                   	push   %ebp
c01034fd:	89 e5                	mov    %esp,%ebp
c01034ff:	56                   	push   %esi
c0103500:	53                   	push   %ebx
c0103501:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(sem != NULL);
c0103504:	85 db                	test   %ebx,%ebx
c0103506:	75 28                	jne    c0103530 <V+0x34>
c0103508:	83 ec 0c             	sub    $0xc,%esp
c010350b:	68 ec 0c 11 c0       	push   $0xc0110cec
c0103510:	6a 52                	push   $0x52
c0103512:	68 c5 0c 11 c0       	push   $0xc0110cc5
c0103517:	68 21 31 11 c0       	push   $0xc0113121
c010351c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103521:	e8 42 0d 00 00       	call   c0104268 <print>
c0103526:	83 c4 20             	add    $0x20,%esp
c0103529:	e8 55 da ff ff       	call   c0100f83 <backtrace>
c010352e:	fa                   	cli    
c010352f:	f4                   	hlt    

    spinlock_acquire(&sem->sem_lock);
c0103530:	8d 73 08             	lea    0x8(%ebx),%esi
c0103533:	83 ec 0c             	sub    $0xc,%esp
c0103536:	56                   	push   %esi
c0103537:	e8 f7 00 00 00       	call   c0103633 <spinlock_acquire>

    sem->sem_count++;
c010353c:	8b 43 10             	mov    0x10(%ebx),%eax
c010353f:	40                   	inc    %eax
c0103540:	89 43 10             	mov    %eax,0x10(%ebx)
    assert(sem->sem_count > 0);
c0103543:	8b 43 10             	mov    0x10(%ebx),%eax
c0103546:	83 c4 10             	add    $0x10,%esp
c0103549:	85 c0                	test   %eax,%eax
c010354b:	75 28                	jne    c0103575 <V+0x79>
c010354d:	83 ec 0c             	sub    $0xc,%esp
c0103550:	68 ec 0c 11 c0       	push   $0xc0110cec
c0103555:	6a 57                	push   $0x57
c0103557:	68 c5 0c 11 c0       	push   $0xc0110cc5
c010355c:	68 d7 0c 11 c0       	push   $0xc0110cd7
c0103561:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103566:	e8 fd 0c 00 00       	call   c0104268 <print>
c010356b:	83 c4 20             	add    $0x20,%esp
c010356e:	e8 10 da ff ff       	call   c0100f83 <backtrace>
c0103573:	fa                   	cli    
c0103574:	f4                   	hlt    
    wchan_wakeone(sem->sem_wchan, &sem->sem_lock);
c0103575:	50                   	push   %eax
c0103576:	50                   	push   %eax
c0103577:	56                   	push   %esi
c0103578:	ff 73 04             	pushl  0x4(%ebx)
c010357b:	e8 81 05 00 00       	call   c0103b01 <wchan_wakeone>

    spinlock_release(&sem->sem_lock);
c0103580:	83 c4 10             	add    $0x10,%esp
c0103583:	89 75 08             	mov    %esi,0x8(%ebp)
}
c0103586:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0103589:	5b                   	pop    %ebx
c010358a:	5e                   	pop    %esi
c010358b:	5d                   	pop    %ebp

    sem->sem_count++;
    assert(sem->sem_count > 0);
    wchan_wakeone(sem->sem_wchan, &sem->sem_lock);

    spinlock_release(&sem->sem_lock);
c010358c:	e9 58 01 00 00       	jmp    c01036e9 <spinlock_release>

c0103591 <spinlock_held>:
#include <thread.h>

struct spinlock kernel_spinlock = {0};

bool
spinlock_held(struct spinlock* lk) {
c0103591:	55                   	push   %ebp
c0103592:	89 e5                	mov    %esp,%ebp
c0103594:	53                   	push   %ebx
c0103595:	50                   	push   %eax
c0103596:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lk != NULL);
c0103599:	85 db                	test   %ebx,%ebx
c010359b:	75 28                	jne    c01035c5 <spinlock_held+0x34>
c010359d:	83 ec 0c             	sub    $0xc,%esp
c01035a0:	68 80 0d 11 c0       	push   $0xc0110d80
c01035a5:	6a 0b                	push   $0xb
c01035a7:	68 02 0d 11 c0       	push   $0xc0110d02
c01035ac:	68 13 0d 11 c0       	push   $0xc0110d13
c01035b1:	68 2b ff 10 c0       	push   $0xc010ff2b
c01035b6:	e8 ad 0c 00 00       	call   c0104268 <print>
c01035bb:	83 c4 20             	add    $0x20,%esp
c01035be:	e8 c0 d9 ff ff       	call   c0100f83 <backtrace>
c01035c3:	fa                   	cli    
c01035c4:	f4                   	hlt    
    asm volatile ("mfence" ::: "memory");
c01035c5:	0f ae f0             	mfence 
    return lk->locked && lk->cpu == thiscpu;
c01035c8:	8b 13                	mov    (%ebx),%edx
c01035ca:	31 c0                	xor    %eax,%eax
c01035cc:	85 d2                	test   %edx,%edx
c01035ce:	74 15                	je     c01035e5 <spinlock_held+0x54>
c01035d0:	8b 5b 04             	mov    0x4(%ebx),%ebx
c01035d3:	e8 de f2 ff ff       	call   c01028b6 <cpunum>
c01035d8:	39 1c 85 80 d2 14 c0 	cmp    %ebx,-0x3feb2d80(,%eax,4)
c01035df:	0f 94 c0             	sete   %al
c01035e2:	0f b6 c0             	movzbl %al,%eax
c01035e5:	83 e0 01             	and    $0x1,%eax
}
c01035e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01035eb:	c9                   	leave  
c01035ec:	c3                   	ret    

c01035ed <spinlock_init>:

void
spinlock_init(struct spinlock* lk) {
c01035ed:	55                   	push   %ebp
c01035ee:	89 e5                	mov    %esp,%ebp
c01035f0:	53                   	push   %ebx
c01035f1:	50                   	push   %eax
c01035f2:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lk != NULL);
c01035f5:	85 db                	test   %ebx,%ebx
c01035f7:	75 28                	jne    c0103621 <spinlock_init+0x34>
c01035f9:	83 ec 0c             	sub    $0xc,%esp
c01035fc:	68 70 0d 11 c0       	push   $0xc0110d70
c0103601:	6a 12                	push   $0x12
c0103603:	68 02 0d 11 c0       	push   $0xc0110d02
c0103608:	68 13 0d 11 c0       	push   $0xc0110d13
c010360d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103612:	e8 51 0c 00 00       	call   c0104268 <print>
c0103617:	83 c4 20             	add    $0x20,%esp
c010361a:	e8 64 d9 ff ff       	call   c0100f83 <backtrace>
c010361f:	fa                   	cli    
c0103620:	f4                   	hlt    

    lk->locked = 0;
c0103621:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    lk->cpu = NULL;
c0103627:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
}
c010362e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103631:	c9                   	leave  
c0103632:	c3                   	ret    

c0103633 <spinlock_acquire>:

static bool iflag;

void
spinlock_acquire(struct spinlock* lk) {
c0103633:	55                   	push   %ebp
c0103634:	89 e5                	mov    %esp,%ebp
c0103636:	53                   	push   %ebx
c0103637:	50                   	push   %eax
c0103638:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lk != NULL);
c010363b:	85 db                	test   %ebx,%ebx
c010363d:	75 28                	jne    c0103667 <spinlock_acquire+0x34>
c010363f:	83 ec 0c             	sub    $0xc,%esp
c0103642:	68 5c 0d 11 c0       	push   $0xc0110d5c
c0103647:	6a 1c                	push   $0x1c
c0103649:	68 02 0d 11 c0       	push   $0xc0110d02
c010364e:	68 13 0d 11 c0       	push   $0xc0110d13
c0103653:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103658:	e8 0b 0c 00 00       	call   c0104268 <print>
c010365d:	83 c4 20             	add    $0x20,%esp
c0103660:	e8 1e d9 ff ff       	call   c0100f83 <backtrace>
c0103665:	fa                   	cli    
c0103666:	f4                   	hlt    
    assert(!spinlock_held(lk));
c0103667:	83 ec 0c             	sub    $0xc,%esp
c010366a:	53                   	push   %ebx
c010366b:	e8 21 ff ff ff       	call   c0103591 <spinlock_held>
c0103670:	83 c4 10             	add    $0x10,%esp
c0103673:	84 c0                	test   %al,%al
c0103675:	74 28                	je     c010369f <spinlock_acquire+0x6c>
c0103677:	83 ec 0c             	sub    $0xc,%esp
c010367a:	68 5c 0d 11 c0       	push   $0xc0110d5c
c010367f:	6a 1d                	push   $0x1d
c0103681:	68 02 0d 11 c0       	push   $0xc0110d02
c0103686:	68 1e 0d 11 c0       	push   $0xc0110d1e
c010368b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103690:	e8 d3 0b 00 00       	call   c0104268 <print>
c0103695:	83 c4 20             	add    $0x20,%esp
c0103698:	e8 e6 d8 ff ff       	call   c0100f83 <backtrace>
c010369d:	fa                   	cli    
c010369e:	f4                   	hlt    
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c010369f:	9c                   	pushf  
c01036a0:	58                   	pop    %eax
static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
    asm volatile ("cli" : : : "memory");
c01036a1:	fa                   	cli    

    iflag = cli();
c01036a2:	c1 e8 09             	shr    $0x9,%eax
c01036a5:	a2 84 c9 14 c0       	mov    %al,0xc014c984
c01036aa:	80 25 84 c9 14 c0 01 	andb   $0x1,0xc014c984
static inline uint32_t
xchg(volatile uint32_t* addr, uint32_t newval) {
    uint32_t result;

    // The + in "+m" denotes a read-modify-write operand.
    asm volatile("lock; xchgl %0, %1"
c01036b1:	ba 01 00 00 00       	mov    $0x1,%edx
c01036b6:	89 d0                	mov    %edx,%eax
c01036b8:	f0 87 03             	lock xchg %eax,(%ebx)

    while (xchg(&lk->locked, 1) != 0)
c01036bb:	85 c0                	test   %eax,%eax
c01036bd:	74 04                	je     c01036c3 <spinlock_acquire+0x90>
        asm volatile ("pause");
c01036bf:	f3 90                	pause  
c01036c1:	eb f3                	jmp    c01036b6 <spinlock_acquire+0x83>

    if (thiscpu != NULL) {
c01036c3:	e8 ee f1 ff ff       	call   c01028b6 <cpunum>
c01036c8:	83 3c 85 80 d2 14 c0 	cmpl   $0x0,-0x3feb2d80(,%eax,4)
c01036cf:	00 
c01036d0:	74 12                	je     c01036e4 <spinlock_acquire+0xb1>
        lk->cpu = thiscpu;
c01036d2:	e8 df f1 ff ff       	call   c01028b6 <cpunum>
c01036d7:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01036de:	89 43 04             	mov    %eax,0x4(%ebx)
        lk->cpu->spinlocks++;
c01036e1:	ff 40 0c             	incl   0xc(%eax)
    }

    // memory_barrier();       // No re-orderings around xchg
}
c01036e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01036e7:	c9                   	leave  
c01036e8:	c3                   	ret    

c01036e9 <spinlock_release>:

void
spinlock_release(struct spinlock* lk) {
c01036e9:	55                   	push   %ebp
c01036ea:	89 e5                	mov    %esp,%ebp
c01036ec:	53                   	push   %ebx
c01036ed:	50                   	push   %eax
c01036ee:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lk != NULL);
c01036f1:	85 db                	test   %ebx,%ebx
c01036f3:	75 28                	jne    c010371d <spinlock_release+0x34>
c01036f5:	83 ec 0c             	sub    $0xc,%esp
c01036f8:	68 48 0d 11 c0       	push   $0xc0110d48
c01036fd:	6a 2e                	push   $0x2e
c01036ff:	68 02 0d 11 c0       	push   $0xc0110d02
c0103704:	68 13 0d 11 c0       	push   $0xc0110d13
c0103709:	68 2b ff 10 c0       	push   $0xc010ff2b
c010370e:	e8 55 0b 00 00       	call   c0104268 <print>
c0103713:	83 c4 20             	add    $0x20,%esp
c0103716:	e8 68 d8 ff ff       	call   c0100f83 <backtrace>
c010371b:	fa                   	cli    
c010371c:	f4                   	hlt    
    assert(spinlock_held(lk));
c010371d:	83 ec 0c             	sub    $0xc,%esp
c0103720:	53                   	push   %ebx
c0103721:	e8 6b fe ff ff       	call   c0103591 <spinlock_held>
c0103726:	83 c4 10             	add    $0x10,%esp
c0103729:	84 c0                	test   %al,%al
c010372b:	75 28                	jne    c0103755 <spinlock_release+0x6c>
c010372d:	83 ec 0c             	sub    $0xc,%esp
c0103730:	68 48 0d 11 c0       	push   $0xc0110d48
c0103735:	6a 2f                	push   $0x2f
c0103737:	68 02 0d 11 c0       	push   $0xc0110d02
c010373c:	68 1f 0d 11 c0       	push   $0xc0110d1f
c0103741:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103746:	e8 1d 0b 00 00       	call   c0104268 <print>
c010374b:	83 c4 20             	add    $0x20,%esp
c010374e:	e8 30 d8 ff ff       	call   c0100f83 <backtrace>
c0103753:	fa                   	cli    
c0103754:	f4                   	hlt    

    if (thiscpu != NULL) {
c0103755:	e8 5c f1 ff ff       	call   c01028b6 <cpunum>
c010375a:	83 3c 85 80 d2 14 c0 	cmpl   $0x0,-0x3feb2d80(,%eax,4)
c0103761:	00 
c0103762:	74 0d                	je     c0103771 <spinlock_release+0x88>
        lk->cpu->spinlocks--;
c0103764:	8b 43 04             	mov    0x4(%ebx),%eax
c0103767:	ff 48 0c             	decl   0xc(%eax)
        lk->cpu = NULL;
c010376a:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
c0103771:	31 c0                	xor    %eax,%eax
c0103773:	f0 87 03             	lock xchg %eax,(%ebx)
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c0103776:	80 3d 84 c9 14 c0 00 	cmpb   $0x0,0xc014c984
c010377d:	74 01                	je     c0103780 <spinlock_release+0x97>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010377f:	fb                   	sti    

    // memory_barrier();       // No re-orderings around xchg

    ifx(iflag);

}
c0103780:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103783:	c9                   	leave  
c0103784:	c3                   	ret    

c0103785 <spinlock_cleanup>:


void
spinlock_cleanup(struct spinlock* lk) {
c0103785:	55                   	push   %ebp
c0103786:	89 e5                	mov    %esp,%ebp
c0103788:	53                   	push   %ebx
c0103789:	50                   	push   %eax
c010378a:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(lk != NULL);
c010378d:	85 db                	test   %ebx,%ebx
c010378f:	75 28                	jne    c01037b9 <spinlock_cleanup+0x34>
c0103791:	83 ec 0c             	sub    $0xc,%esp
c0103794:	68 34 0d 11 c0       	push   $0xc0110d34
c0103799:	6a 41                	push   $0x41
c010379b:	68 02 0d 11 c0       	push   $0xc0110d02
c01037a0:	68 13 0d 11 c0       	push   $0xc0110d13
c01037a5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01037aa:	e8 b9 0a 00 00       	call   c0104268 <print>
c01037af:	83 c4 20             	add    $0x20,%esp
c01037b2:	e8 cc d7 ff ff       	call   c0100f83 <backtrace>
c01037b7:	fa                   	cli    
c01037b8:	f4                   	hlt    
    assert(!spinlock_held(lk));
c01037b9:	83 ec 0c             	sub    $0xc,%esp
c01037bc:	53                   	push   %ebx
c01037bd:	e8 cf fd ff ff       	call   c0103591 <spinlock_held>
c01037c2:	83 c4 10             	add    $0x10,%esp
c01037c5:	84 c0                	test   %al,%al
c01037c7:	74 28                	je     c01037f1 <spinlock_cleanup+0x6c>
c01037c9:	83 ec 0c             	sub    $0xc,%esp
c01037cc:	68 34 0d 11 c0       	push   $0xc0110d34
c01037d1:	6a 42                	push   $0x42
c01037d3:	68 02 0d 11 c0       	push   $0xc0110d02
c01037d8:	68 1e 0d 11 c0       	push   $0xc0110d1e
c01037dd:	68 2b ff 10 c0       	push   $0xc010ff2b
c01037e2:	e8 81 0a 00 00       	call   c0104268 <print>
c01037e7:	83 c4 20             	add    $0x20,%esp
c01037ea:	e8 94 d7 ff ff       	call   c0100f83 <backtrace>
c01037ef:	fa                   	cli    
c01037f0:	f4                   	hlt    

    lk->locked = 0;
c01037f1:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    lk->cpu = NULL;
c01037f7:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
}
c01037fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103801:	c9                   	leave  
c0103802:	c3                   	ret    

c0103803 <wchanarray_create>:
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c0103803:	55                   	push   %ebp
c0103804:	89 e5                	mov    %esp,%ebp
c0103806:	83 ec 24             	sub    $0x24,%esp
c0103809:	6a 0c                	push   $0xc
c010380b:	e8 5c e5 ff ff       	call   c0101d6c <kmalloc>
c0103810:	83 c4 10             	add    $0x10,%esp
c0103813:	85 c0                	test   %eax,%eax
c0103815:	74 12                	je     c0103829 <wchanarray_create+0x26>
c0103817:	83 ec 0c             	sub    $0xc,%esp
c010381a:	50                   	push   %eax
c010381b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010381e:	e8 53 19 00 00       	call   c0105176 <array_init>
c0103823:	83 c4 10             	add    $0x10,%esp
c0103826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103829:	c9                   	leave  
c010382a:	c3                   	ret    

c010382b <wchanarray_destroy>:
c010382b:	55                   	push   %ebp
c010382c:	89 e5                	mov    %esp,%ebp
c010382e:	53                   	push   %ebx
c010382f:	83 ec 10             	sub    $0x10,%esp
c0103832:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0103835:	53                   	push   %ebx
c0103836:	e8 57 19 00 00       	call   c0105192 <array_cleanup>
c010383b:	83 c4 10             	add    $0x10,%esp
c010383e:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0103841:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103844:	c9                   	leave  
c0103845:	e9 22 e6 ff ff       	jmp    c0101e6c <kfree>

c010384a <wchanarray_init>:
c010384a:	55                   	push   %ebp
c010384b:	89 e5                	mov    %esp,%ebp
c010384d:	5d                   	pop    %ebp
c010384e:	e9 23 19 00 00       	jmp    c0105176 <array_init>

c0103853 <wchanarray_cleanup>:
c0103853:	55                   	push   %ebp
c0103854:	89 e5                	mov    %esp,%ebp
c0103856:	5d                   	pop    %ebp
c0103857:	e9 36 19 00 00       	jmp    c0105192 <array_cleanup>

c010385c <wchanarray_num>:
c010385c:	55                   	push   %ebp
c010385d:	89 e5                	mov    %esp,%ebp
c010385f:	5d                   	pop    %ebp
c0103860:	e9 51 18 00 00       	jmp    c01050b6 <array_num>

c0103865 <wchanarray_get>:
c0103865:	55                   	push   %ebp
c0103866:	89 e5                	mov    %esp,%ebp
c0103868:	5d                   	pop    %ebp
c0103869:	e9 53 18 00 00       	jmp    c01050c1 <array_get>

c010386e <wchanarray_set>:
c010386e:	55                   	push   %ebp
c010386f:	89 e5                	mov    %esp,%ebp
c0103871:	5d                   	pop    %ebp
c0103872:	e9 8e 18 00 00       	jmp    c0105105 <array_set>

c0103877 <wchanarray_setsize>:
c0103877:	55                   	push   %ebp
c0103878:	89 e5                	mov    %esp,%ebp
c010387a:	5d                   	pop    %ebp
c010387b:	e9 7f 19 00 00       	jmp    c01051ff <array_setsize>

c0103880 <wchanarray_add>:
c0103880:	55                   	push   %ebp
c0103881:	89 e5                	mov    %esp,%ebp
c0103883:	5d                   	pop    %ebp
c0103884:	e9 ec 19 00 00       	jmp    c0105275 <array_add>

c0103889 <wchanarray_remove>:
c0103889:	55                   	push   %ebp
c010388a:	89 e5                	mov    %esp,%ebp
c010388c:	5d                   	pop    %ebp
c010388d:	e9 1c 1a 00 00       	jmp    c01052ae <array_remove>

c0103892 <init_wchan>:
/*
 * Wait channel functions
 */

void
init_wchan(void) {
c0103892:	55                   	push   %ebp
c0103893:	89 e5                	mov    %esp,%ebp
c0103895:	83 ec 14             	sub    $0x14,%esp
    spinlock_init(&allwchans_lock);
c0103898:	68 94 c9 14 c0       	push   $0xc014c994
c010389d:	e8 4b fd ff ff       	call   c01035ed <spinlock_init>
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c01038a2:	c7 04 24 88 c9 14 c0 	movl   $0xc014c988,(%esp)
c01038a9:	e8 c8 18 00 00       	call   c0105176 <array_init>

void
init_wchan(void) {
    spinlock_init(&allwchans_lock);
    wchanarray_init(&allwchans);
}
c01038ae:	83 c4 10             	add    $0x10,%esp
c01038b1:	c9                   	leave  
c01038b2:	c3                   	ret    

c01038b3 <wchan_create>:
 * NAME should generally be a string constant. If it isn't, alternate
 * arrangements should be made to free it after the wait channel is
 * destroyed.
 */
struct wchan*
wchan_create(const char* name) {
c01038b3:	55                   	push   %ebp
c01038b4:	89 e5                	mov    %esp,%ebp
c01038b6:	57                   	push   %edi
c01038b7:	56                   	push   %esi
c01038b8:	53                   	push   %ebx
c01038b9:	83 ec 18             	sub    $0x18,%esp
    int result;

    struct wchan* wc = kmalloc(sizeof(struct wchan));
c01038bc:	6a 24                	push   $0x24
c01038be:	e8 a9 e4 ff ff       	call   c0101d6c <kmalloc>
c01038c3:	89 c3                	mov    %eax,%ebx
    if (wc == NULL)
c01038c5:	83 c4 10             	add    $0x10,%esp
        return NULL;
c01038c8:	31 c0                	xor    %eax,%eax
struct wchan*
wchan_create(const char* name) {
    int result;

    struct wchan* wc = kmalloc(sizeof(struct wchan));
    if (wc == NULL)
c01038ca:	85 db                	test   %ebx,%ebx
c01038cc:	0f 84 89 00 00 00    	je     c010395b <wchan_create+0xa8>
        return NULL;
    threadlist_init(&wc->wc_threads);
c01038d2:	8d 73 04             	lea    0x4(%ebx),%esi
c01038d5:	83 ec 0c             	sub    $0xc,%esp
c01038d8:	56                   	push   %esi
c01038d9:	e8 60 56 00 00       	call   c0108f3e <threadlist_init>
    wc->wc_name = name;
c01038de:	8b 45 08             	mov    0x8(%ebp),%eax
c01038e1:	89 03                	mov    %eax,(%ebx)

    /* add to allwchans[] */
    spinlock_acquire(&allwchans_lock);
c01038e3:	c7 04 24 94 c9 14 c0 	movl   $0xc014c994,(%esp)
c01038ea:	e8 44 fd ff ff       	call   c0103633 <spinlock_acquire>
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c01038ef:	83 c4 0c             	add    $0xc,%esp
    threadlist_init(&wc->wc_threads);
    wc->wc_name = name;

    /* add to allwchans[] */
    spinlock_acquire(&allwchans_lock);
    result = wchanarray_add(&allwchans, wc, &wc->wc_index);
c01038f2:	8d 43 20             	lea    0x20(%ebx),%eax
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c01038f5:	50                   	push   %eax
c01038f6:	53                   	push   %ebx
c01038f7:	68 88 c9 14 c0       	push   $0xc014c988
c01038fc:	e8 74 19 00 00       	call   c0105275 <array_add>
c0103901:	89 c7                	mov    %eax,%edi
    wc->wc_name = name;

    /* add to allwchans[] */
    spinlock_acquire(&allwchans_lock);
    result = wchanarray_add(&allwchans, wc, &wc->wc_index);
    spinlock_release(&allwchans_lock);
c0103903:	c7 04 24 94 c9 14 c0 	movl   $0xc014c994,(%esp)
c010390a:	e8 da fd ff ff       	call   c01036e9 <spinlock_release>
    if (result) {
c010390f:	83 c4 10             	add    $0x10,%esp
c0103912:	89 d8                	mov    %ebx,%eax
c0103914:	85 ff                	test   %edi,%edi
c0103916:	74 43                	je     c010395b <wchan_create+0xa8>
        assert(result == ENOMEM);
c0103918:	83 ff 02             	cmp    $0x2,%edi
c010391b:	74 28                	je     c0103945 <wchan_create+0x92>
c010391d:	83 ec 0c             	sub    $0xc,%esp
c0103920:	68 5c 0e 11 c0       	push   $0xc0110e5c
c0103925:	6a 35                	push   $0x35
c0103927:	68 8e 0d 11 c0       	push   $0xc0110d8e
c010392c:	68 9c 0d 11 c0       	push   $0xc0110d9c
c0103931:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103936:	e8 2d 09 00 00       	call   c0104268 <print>
c010393b:	83 c4 20             	add    $0x20,%esp
c010393e:	e8 40 d6 ff ff       	call   c0100f83 <backtrace>
c0103943:	fa                   	cli    
c0103944:	f4                   	hlt    
        threadlist_cleanup(&wc->wc_threads);
c0103945:	83 ec 0c             	sub    $0xc,%esp
c0103948:	56                   	push   %esi
c0103949:	e8 94 56 00 00       	call   c0108fe2 <threadlist_cleanup>
        kfree(wc);
c010394e:	89 1c 24             	mov    %ebx,(%esp)
c0103951:	e8 16 e5 ff ff       	call   c0101e6c <kfree>
        return NULL;
c0103956:	83 c4 10             	add    $0x10,%esp
c0103959:	31 c0                	xor    %eax,%eax
    }

    return wc;
}
c010395b:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010395e:	5b                   	pop    %ebx
c010395f:	5e                   	pop    %esi
c0103960:	5f                   	pop    %edi
c0103961:	5d                   	pop    %ebp
c0103962:	c3                   	ret    

c0103963 <wchan_destroy>:
/*
 * Destroy a wait channel. Must be empty and unlocked.
 * (The corresponding cleanup functions require this.)
 */
void
wchan_destroy(struct wchan* wc) {
c0103963:	55                   	push   %ebp
c0103964:	89 e5                	mov    %esp,%ebp
c0103966:	57                   	push   %edi
c0103967:	56                   	push   %esi
c0103968:	53                   	push   %ebx
c0103969:	83 ec 18             	sub    $0x18,%esp
c010396c:	8b 5d 08             	mov    0x8(%ebp),%ebx
    unsigned num;
    struct wchan* wc2;

    /* remove from allwchans[] */
    spinlock_acquire(&allwchans_lock);
c010396f:	68 94 c9 14 c0       	push   $0xc014c994
c0103974:	e8 ba fc ff ff       	call   c0103633 <spinlock_acquire>
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c0103979:	c7 04 24 88 c9 14 c0 	movl   $0xc014c988,(%esp)
c0103980:	e8 31 17 00 00       	call   c01050b6 <array_num>
c0103985:	89 c6                	mov    %eax,%esi
c0103987:	59                   	pop    %ecx
c0103988:	5f                   	pop    %edi
c0103989:	ff 73 20             	pushl  0x20(%ebx)
c010398c:	68 88 c9 14 c0       	push   $0xc014c988
c0103991:	e8 2b 17 00 00       	call   c01050c1 <array_get>
    struct wchan* wc2;

    /* remove from allwchans[] */
    spinlock_acquire(&allwchans_lock);
    num = wchanarray_num(&allwchans);
    assert(wchanarray_get(&allwchans, wc->wc_index) == wc);
c0103996:	83 c4 10             	add    $0x10,%esp
c0103999:	39 c3                	cmp    %eax,%ebx
c010399b:	74 28                	je     c01039c5 <wchan_destroy+0x62>
c010399d:	83 ec 0c             	sub    $0xc,%esp
c01039a0:	68 4c 0e 11 c0       	push   $0xc0110e4c
c01039a5:	6a 4a                	push   $0x4a
c01039a7:	68 8e 0d 11 c0       	push   $0xc0110d8e
c01039ac:	68 ad 0d 11 c0       	push   $0xc0110dad
c01039b1:	68 2b ff 10 c0       	push   $0xc010ff2b
c01039b6:	e8 ad 08 00 00       	call   c0104268 <print>
c01039bb:	83 c4 20             	add    $0x20,%esp
c01039be:	e8 c0 d5 ff ff       	call   c0100f83 <backtrace>
c01039c3:	fa                   	cli    
c01039c4:	f4                   	hlt    
    if (wc->wc_index < num - 1) {
c01039c5:	4e                   	dec    %esi
c01039c6:	39 73 20             	cmp    %esi,0x20(%ebx)
c01039c9:	73 29                	jae    c01039f4 <wchan_destroy+0x91>
#include <errno.h>
#include <array.h>
#include <syscall.h>

DECLARRAY(wchan);
DEFARRAY(wchan, /* no inline */ );
c01039cb:	52                   	push   %edx
c01039cc:	52                   	push   %edx
c01039cd:	56                   	push   %esi
c01039ce:	68 88 c9 14 c0       	push   $0xc014c988
c01039d3:	e8 e9 16 00 00       	call   c01050c1 <array_get>
c01039d8:	89 c7                	mov    %eax,%edi
c01039da:	83 c4 0c             	add    $0xc,%esp
c01039dd:	50                   	push   %eax
c01039de:	ff 73 20             	pushl  0x20(%ebx)
c01039e1:	68 88 c9 14 c0       	push   $0xc014c988
c01039e6:	e8 1a 17 00 00       	call   c0105105 <array_set>
    assert(wchanarray_get(&allwchans, wc->wc_index) == wc);
    if (wc->wc_index < num - 1) {
        /* move the last entry into our slot */
        wc2 = wchanarray_get(&allwchans, num - 1);
        wchanarray_set(&allwchans, wc->wc_index, wc2);
        wc2->wc_index = wc->wc_index;
c01039eb:	8b 43 20             	mov    0x20(%ebx),%eax
c01039ee:	89 47 20             	mov    %eax,0x20(%edi)
c01039f1:	83 c4 10             	add    $0x10,%esp
    }
    wchanarray_setsize(&allwchans, num - 1);
c01039f4:	50                   	push   %eax
c01039f5:	50                   	push   %eax
c01039f6:	56                   	push   %esi
c01039f7:	68 88 c9 14 c0       	push   $0xc014c988
c01039fc:	e8 76 fe ff ff       	call   c0103877 <wchanarray_setsize>
    spinlock_release(&allwchans_lock);
c0103a01:	c7 04 24 94 c9 14 c0 	movl   $0xc014c994,(%esp)
c0103a08:	e8 dc fc ff ff       	call   c01036e9 <spinlock_release>

    threadlist_cleanup(&wc->wc_threads);
c0103a0d:	8d 43 04             	lea    0x4(%ebx),%eax
c0103a10:	89 04 24             	mov    %eax,(%esp)
c0103a13:	e8 ca 55 00 00       	call   c0108fe2 <threadlist_cleanup>
    kfree(wc);
c0103a18:	83 c4 10             	add    $0x10,%esp
c0103a1b:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0103a1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0103a21:	5b                   	pop    %ebx
c0103a22:	5e                   	pop    %esi
c0103a23:	5f                   	pop    %edi
c0103a24:	5d                   	pop    %ebp
    }
    wchanarray_setsize(&allwchans, num - 1);
    spinlock_release(&allwchans_lock);

    threadlist_cleanup(&wc->wc_threads);
    kfree(wc);
c0103a25:	e9 42 e4 ff ff       	jmp    c0101e6c <kfree>

c0103a2a <wchan_sleep>:
 * the channel will make the thread runnable again. The spinlock must
 * be locked. The call to thread_switch unlocks it; we relock it
 * before returning.
 */
void
wchan_sleep(struct wchan* wc, struct spinlock* lk) {
c0103a2a:	55                   	push   %ebp
c0103a2b:	89 e5                	mov    %esp,%ebp
c0103a2d:	56                   	push   %esi
c0103a2e:	53                   	push   %ebx
c0103a2f:	8b 75 08             	mov    0x8(%ebp),%esi
c0103a32:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    asm volatile ("mfence" ::: "memory");
c0103a35:	0f ae f0             	mfence 
    /* may not sleep in an interrupt handler */
    assert(!thisthread->in_interrupt);
c0103a38:	e8 79 ee ff ff       	call   c01028b6 <cpunum>
c0103a3d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0103a44:	8b 40 08             	mov    0x8(%eax),%eax
c0103a47:	80 78 28 00          	cmpb   $0x0,0x28(%eax)
c0103a4b:	74 28                	je     c0103a75 <wchan_sleep+0x4b>
c0103a4d:	83 ec 0c             	sub    $0xc,%esp
c0103a50:	68 40 0e 11 c0       	push   $0xc0110e40
c0103a55:	6a 63                	push   $0x63
c0103a57:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103a5c:	68 dc 0d 11 c0       	push   $0xc0110ddc
c0103a61:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103a66:	e8 fd 07 00 00       	call   c0104268 <print>
c0103a6b:	83 c4 20             	add    $0x20,%esp
c0103a6e:	e8 10 d5 ff ff       	call   c0100f83 <backtrace>
c0103a73:	fa                   	cli    
c0103a74:	f4                   	hlt    

    /* must hold the spinlock */
    assert(spinlock_held(lk));
c0103a75:	83 ec 0c             	sub    $0xc,%esp
c0103a78:	53                   	push   %ebx
c0103a79:	e8 13 fb ff ff       	call   c0103591 <spinlock_held>
c0103a7e:	83 c4 10             	add    $0x10,%esp
c0103a81:	84 c0                	test   %al,%al
c0103a83:	75 28                	jne    c0103aad <wchan_sleep+0x83>
c0103a85:	83 ec 0c             	sub    $0xc,%esp
c0103a88:	68 40 0e 11 c0       	push   $0xc0110e40
c0103a8d:	6a 66                	push   $0x66
c0103a8f:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103a94:	68 1f 0d 11 c0       	push   $0xc0110d1f
c0103a99:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103a9e:	e8 c5 07 00 00       	call   c0104268 <print>
c0103aa3:	83 c4 20             	add    $0x20,%esp
c0103aa6:	e8 d8 d4 ff ff       	call   c0100f83 <backtrace>
c0103aab:	fa                   	cli    
c0103aac:	f4                   	hlt    

    /* must not hold other spinlocks */
    assert(thiscpu->spinlocks == 1);
c0103aad:	e8 04 ee ff ff       	call   c01028b6 <cpunum>
c0103ab2:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0103ab9:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
c0103abd:	74 28                	je     c0103ae7 <wchan_sleep+0xbd>
c0103abf:	83 ec 0c             	sub    $0xc,%esp
c0103ac2:	68 40 0e 11 c0       	push   $0xc0110e40
c0103ac7:	6a 69                	push   $0x69
c0103ac9:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103ace:	68 f6 0d 11 c0       	push   $0xc0110df6
c0103ad3:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103ad8:	e8 8b 07 00 00       	call   c0104268 <print>
c0103add:	83 c4 20             	add    $0x20,%esp
c0103ae0:	e8 9e d4 ff ff       	call   c0100f83 <backtrace>
c0103ae5:	fa                   	cli    
c0103ae6:	f4                   	hlt    

    thread_wait(wc, lk);
c0103ae7:	50                   	push   %eax
c0103ae8:	50                   	push   %eax
c0103ae9:	53                   	push   %ebx
c0103aea:	56                   	push   %esi
c0103aeb:	e8 b1 cf ff ff       	call   c0100aa1 <thread_wait>

    spinlock_acquire(lk);
c0103af0:	83 c4 10             	add    $0x10,%esp
c0103af3:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0103af6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0103af9:	5b                   	pop    %ebx
c0103afa:	5e                   	pop    %esi
c0103afb:	5d                   	pop    %ebp
    /* must not hold other spinlocks */
    assert(thiscpu->spinlocks == 1);

    thread_wait(wc, lk);

    spinlock_acquire(lk);
c0103afc:	e9 32 fb ff ff       	jmp    c0103633 <spinlock_acquire>

c0103b01 <wchan_wakeone>:

/*
 * Wake up one thread sleeping on a wait channel.
 */
void
wchan_wakeone(struct wchan* wc, struct spinlock* lk) {
c0103b01:	55                   	push   %ebp
c0103b02:	89 e5                	mov    %esp,%ebp
c0103b04:	53                   	push   %ebx
c0103b05:	83 ec 10             	sub    $0x10,%esp
c0103b08:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct thread* target;

    assert(spinlock_held(lk));
c0103b0b:	ff 75 0c             	pushl  0xc(%ebp)
c0103b0e:	e8 7e fa ff ff       	call   c0103591 <spinlock_held>
c0103b13:	83 c4 10             	add    $0x10,%esp
c0103b16:	84 c0                	test   %al,%al
c0103b18:	75 28                	jne    c0103b42 <wchan_wakeone+0x41>
c0103b1a:	83 ec 0c             	sub    $0xc,%esp
c0103b1d:	68 30 0e 11 c0       	push   $0xc0110e30
c0103b22:	6a 77                	push   $0x77
c0103b24:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103b29:	68 1f 0d 11 c0       	push   $0xc0110d1f
c0103b2e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103b33:	e8 30 07 00 00       	call   c0104268 <print>
c0103b38:	83 c4 20             	add    $0x20,%esp
c0103b3b:	e8 43 d4 ff ff       	call   c0100f83 <backtrace>
c0103b40:	fa                   	cli    
c0103b41:	f4                   	hlt    

    /* Grab a thread from the channel */
    target = threadlist_remhead(&wc->wc_threads);
c0103b42:	83 ec 0c             	sub    $0xc,%esp
c0103b45:	83 c3 04             	add    $0x4,%ebx
c0103b48:	53                   	push   %ebx
c0103b49:	e8 3a 57 00 00       	call   c0109288 <threadlist_remhead>

    if (target == NULL) {
c0103b4e:	83 c4 10             	add    $0x10,%esp
c0103b51:	85 c0                	test   %eax,%eax
c0103b53:	74 13                	je     c0103b68 <wchan_wakeone+0x67>
     * associated with wchans must come before the runqueue locks,
     * as we also bridge from the wchan lock to the runqueue lock
     * in thread_wait.
     */

    thread_make_runnable(target, false);
c0103b55:	c7 45 0c 00 00 00 00 	movl   $0x0,0xc(%ebp)
c0103b5c:	89 45 08             	mov    %eax,0x8(%ebp)
}
c0103b5f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103b62:	c9                   	leave  
     * associated with wchans must come before the runqueue locks,
     * as we also bridge from the wchan lock to the runqueue lock
     * in thread_wait.
     */

    thread_make_runnable(target, false);
c0103b63:	e9 45 48 00 00       	jmp    c01083ad <thread_make_runnable>
}
c0103b68:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103b6b:	c9                   	leave  
c0103b6c:	c3                   	ret    

c0103b6d <wchan_wakeall>:

/*
 * Wake up all threads sleeping on a wait channel.
 */
void
wchan_wakeall(struct wchan* wc, struct spinlock* lk) {
c0103b6d:	55                   	push   %ebp
c0103b6e:	89 e5                	mov    %esp,%ebp
c0103b70:	57                   	push   %edi
c0103b71:	56                   	push   %esi
c0103b72:	53                   	push   %ebx
c0103b73:	83 ec 38             	sub    $0x38,%esp
    assert(spinlock_held(lk));
c0103b76:	ff 75 0c             	pushl  0xc(%ebp)
c0103b79:	e8 13 fa ff ff       	call   c0103591 <spinlock_held>
c0103b7e:	83 c4 10             	add    $0x10,%esp
c0103b81:	84 c0                	test   %al,%al
c0103b83:	75 2b                	jne    c0103bb0 <wchan_wakeall+0x43>
c0103b85:	83 ec 0c             	sub    $0xc,%esp
c0103b88:	68 20 0e 11 c0       	push   $0xc0110e20
c0103b8d:	68 91 00 00 00       	push   $0x91
c0103b92:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103b97:	68 1f 0d 11 c0       	push   $0xc0110d1f
c0103b9c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103ba1:	e8 c2 06 00 00       	call   c0104268 <print>
c0103ba6:	83 c4 20             	add    $0x20,%esp
c0103ba9:	e8 d5 d3 ff ff       	call   c0100f83 <backtrace>
c0103bae:	fa                   	cli    
c0103baf:	f4                   	hlt    

    struct threadlist list = {0};
c0103bb0:	8d 7d cc             	lea    -0x34(%ebp),%edi
c0103bb3:	b9 07 00 00 00       	mov    $0x7,%ecx
c0103bb8:	31 c0                	xor    %eax,%eax
c0103bba:	f3 ab                	rep stos %eax,%es:(%edi)
    threadlist_init(&list);
c0103bbc:	83 ec 0c             	sub    $0xc,%esp
c0103bbf:	8d 5d cc             	lea    -0x34(%ebp),%ebx
c0103bc2:	53                   	push   %ebx
c0103bc3:	e8 76 53 00 00       	call   c0108f3e <threadlist_init>
    /*
     * Grab all the threads from the channel, moving them to a
     * private list.
     */
    struct thread* target = NULL;
    while ((target = threadlist_remhead(&wc->wc_threads)) != NULL)
c0103bc8:	83 c4 10             	add    $0x10,%esp
c0103bcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bce:	8d 70 04             	lea    0x4(%eax),%esi
c0103bd1:	83 ec 0c             	sub    $0xc,%esp
c0103bd4:	56                   	push   %esi
c0103bd5:	e8 ae 56 00 00       	call   c0109288 <threadlist_remhead>
c0103bda:	83 c4 10             	add    $0x10,%esp
c0103bdd:	85 c0                	test   %eax,%eax
c0103bdf:	74 0e                	je     c0103bef <wchan_wakeall+0x82>
        threadlist_addtail(&list, target);
c0103be1:	51                   	push   %ecx
c0103be2:	51                   	push   %ecx
c0103be3:	50                   	push   %eax
c0103be4:	53                   	push   %ebx
c0103be5:	e8 21 56 00 00       	call   c010920b <threadlist_addtail>
c0103bea:	83 c4 10             	add    $0x10,%esp
c0103bed:	eb e2                	jmp    c0103bd1 <wchan_wakeall+0x64>
    /*
     * We could conceivably sort by cpu first to cause fewer lock
     * ops and fewer IPIs, but for now at least don't bother. Just
     * make each thread runnable.
     */
    while ((target = threadlist_remhead(&list)) != NULL)
c0103bef:	83 ec 0c             	sub    $0xc,%esp
c0103bf2:	53                   	push   %ebx
c0103bf3:	e8 90 56 00 00       	call   c0109288 <threadlist_remhead>
c0103bf8:	83 c4 10             	add    $0x10,%esp
c0103bfb:	85 c0                	test   %eax,%eax
c0103bfd:	74 0f                	je     c0103c0e <wchan_wakeall+0xa1>
        thread_make_runnable(target, false);
c0103bff:	52                   	push   %edx
c0103c00:	52                   	push   %edx
c0103c01:	6a 00                	push   $0x0
c0103c03:	50                   	push   %eax
c0103c04:	e8 a4 47 00 00       	call   c01083ad <thread_make_runnable>
c0103c09:	83 c4 10             	add    $0x10,%esp
c0103c0c:	eb e1                	jmp    c0103bef <wchan_wakeall+0x82>

    threadlist_cleanup(&list);
c0103c0e:	83 ec 0c             	sub    $0xc,%esp
c0103c11:	53                   	push   %ebx
c0103c12:	e8 cb 53 00 00       	call   c0108fe2 <threadlist_cleanup>
}
c0103c17:	83 c4 10             	add    $0x10,%esp
c0103c1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0103c1d:	5b                   	pop    %ebx
c0103c1e:	5e                   	pop    %esi
c0103c1f:	5f                   	pop    %edi
c0103c20:	5d                   	pop    %ebp
c0103c21:	c3                   	ret    

c0103c22 <wchan_isempty>:
/*
 * Return nonzero if there are no threads sleeping on the channel.
 * This is meant to be used only for diagnostic purposes.
 */
bool
wchan_isempty(struct wchan* wc, struct spinlock* lk) {
c0103c22:	55                   	push   %ebp
c0103c23:	89 e5                	mov    %esp,%ebp
c0103c25:	53                   	push   %ebx
c0103c26:	83 ec 10             	sub    $0x10,%esp
c0103c29:	8b 5d 08             	mov    0x8(%ebp),%ebx
    bool ret;

    assert(spinlock_held(lk));
c0103c2c:	ff 75 0c             	pushl  0xc(%ebp)
c0103c2f:	e8 5d f9 ff ff       	call   c0103591 <spinlock_held>
c0103c34:	83 c4 10             	add    $0x10,%esp
c0103c37:	84 c0                	test   %al,%al
c0103c39:	75 2b                	jne    c0103c66 <wchan_isempty+0x44>
c0103c3b:	83 ec 0c             	sub    $0xc,%esp
c0103c3e:	68 10 0e 11 c0       	push   $0xc0110e10
c0103c43:	68 b1 00 00 00       	push   $0xb1
c0103c48:	68 8e 0d 11 c0       	push   $0xc0110d8e
c0103c4d:	68 1f 0d 11 c0       	push   $0xc0110d1f
c0103c52:	68 2b ff 10 c0       	push   $0xc010ff2b
c0103c57:	e8 0c 06 00 00       	call   c0104268 <print>
c0103c5c:	83 c4 20             	add    $0x20,%esp
c0103c5f:	e8 1f d3 ff ff       	call   c0100f83 <backtrace>
c0103c64:	fa                   	cli    
c0103c65:	f4                   	hlt    
    ret = threadlist_isempty(&wc->wc_threads);
c0103c66:	83 c3 04             	add    $0x4,%ebx
c0103c69:	89 5d 08             	mov    %ebx,0x8(%ebp)

    return ret;
}
c0103c6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103c6f:	c9                   	leave  
bool
wchan_isempty(struct wchan* wc, struct spinlock* lk) {
    bool ret;

    assert(spinlock_held(lk));
    ret = threadlist_isempty(&wc->wc_threads);
c0103c70:	e9 2d 53 00 00       	jmp    c0108fa2 <threadlist_isempty>

c0103c75 <_panic>:
c0103c75:	55                   	push   %ebp
c0103c76:	89 e5                	mov    %esp,%ebp
c0103c78:	56                   	push   %esi
c0103c79:	53                   	push   %ebx
c0103c7a:	8b 5d 14             	mov    0x14(%ebp),%ebx
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c0103c7d:	9c                   	pushf  
c0103c7e:	58                   	pop    %eax
static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
    asm volatile ("cli" : : : "memory");
c0103c7f:	fa                   	cli    
c0103c80:	83 3d 9c c9 14 c0 00 	cmpl   $0x0,0xc014c99c
c0103c87:	75 45                	jne    c0103cce <_panic+0x59>
c0103c89:	89 1d 9c c9 14 c0    	mov    %ebx,0xc014c99c
c0103c8f:	8d 75 18             	lea    0x18(%ebp),%esi
c0103c92:	ff 75 10             	pushl  0x10(%ebp)
c0103c95:	ff 75 0c             	pushl  0xc(%ebp)
c0103c98:	ff 75 08             	pushl  0x8(%ebp)
c0103c9b:	68 69 0e 11 c0       	push   $0xc0110e69
c0103ca0:	e8 c3 05 00 00       	call   c0104268 <print>
c0103ca5:	58                   	pop    %eax
c0103ca6:	5a                   	pop    %edx
c0103ca7:	56                   	push   %esi
c0103ca8:	53                   	push   %ebx
c0103ca9:	e8 9f 05 00 00       	call   c010424d <vcprintf>
c0103cae:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c0103cb5:	e8 ae 05 00 00       	call   c0104268 <print>
c0103cba:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c0103cc1:	e8 a2 05 00 00       	call   c0104268 <print>
c0103cc6:	e8 b8 d2 ff ff       	call   c0100f83 <backtrace>
c0103ccb:	83 c4 10             	add    $0x10,%esp
    asm volatile ("mfence" : : : "memory");
}

static inline void
hlt(void) {
    asm volatile ("hlt" : : : "memory");
c0103cce:	f4                   	hlt    
c0103ccf:	eb fd                	jmp    c0103cce <_panic+0x59>

c0103cd1 <printnum>:
c0103cd1:	55                   	push   %ebp
c0103cd2:	89 e5                	mov    %esp,%ebp
c0103cd4:	57                   	push   %edi
c0103cd5:	56                   	push   %esi
c0103cd6:	53                   	push   %ebx
c0103cd7:	83 ec 2c             	sub    $0x2c,%esp
c0103cda:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103cdd:	89 d6                	mov    %edx,%esi
c0103cdf:	89 cf                	mov    %ecx,%edi
c0103ce1:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0103ce4:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0103ce7:	8b 45 10             	mov    0x10(%ebp),%eax
c0103cea:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103ced:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0103cf0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0103cf7:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
c0103cfa:	72 06                	jb     c0103d02 <printnum+0x31>
c0103cfc:	77 31                	ja     c0103d2f <printnum+0x5e>
c0103cfe:	39 d1                	cmp    %edx,%ecx
c0103d00:	77 2d                	ja     c0103d2f <printnum+0x5e>
c0103d02:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c0103d05:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103d08:	ff 75 e0             	pushl  -0x20(%ebp)
c0103d0b:	57                   	push   %edi
c0103d0c:	56                   	push   %esi
c0103d0d:	e8 66 bf 00 00       	call   c010fc78 <__udivdi3>
c0103d12:	83 c4 0c             	add    $0xc,%esp
c0103d15:	ff 75 d8             	pushl  -0x28(%ebp)
c0103d18:	4b                   	dec    %ebx
c0103d19:	53                   	push   %ebx
c0103d1a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0103d1d:	51                   	push   %ecx
c0103d1e:	89 d1                	mov    %edx,%ecx
c0103d20:	89 c2                	mov    %eax,%edx
c0103d22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d25:	e8 a7 ff ff ff       	call   c0103cd1 <printnum>
c0103d2a:	83 c4 10             	add    $0x10,%esp
c0103d2d:	eb 15                	jmp    c0103d44 <printnum+0x73>
c0103d2f:	4b                   	dec    %ebx
c0103d30:	85 db                	test   %ebx,%ebx
c0103d32:	7e 10                	jle    c0103d44 <printnum+0x73>
c0103d34:	83 ec 0c             	sub    $0xc,%esp
c0103d37:	ff 75 d8             	pushl  -0x28(%ebp)
c0103d3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d3d:	ff d0                	call   *%eax
c0103d3f:	83 c4 10             	add    $0x10,%esp
c0103d42:	eb eb                	jmp    c0103d2f <printnum+0x5e>
c0103d44:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103d47:	ff 75 e0             	pushl  -0x20(%ebp)
c0103d4a:	57                   	push   %edi
c0103d4b:	56                   	push   %esi
c0103d4c:	e8 37 c0 00 00       	call   c010fd88 <__umoddi3>
c0103d51:	83 c4 10             	add    $0x10,%esp
c0103d54:	0f be 80 86 0e 11 c0 	movsbl -0x3feef17a(%eax),%eax
c0103d5b:	89 45 08             	mov    %eax,0x8(%ebp)
c0103d5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d61:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0103d64:	5b                   	pop    %ebx
c0103d65:	5e                   	pop    %esi
c0103d66:	5f                   	pop    %edi
c0103d67:	5d                   	pop    %ebp
c0103d68:	ff e0                	jmp    *%eax

c0103d6a <getuint>:
c0103d6a:	55                   	push   %ebp
c0103d6b:	89 e5                	mov    %esp,%ebp
c0103d6d:	83 fa 01             	cmp    $0x1,%edx
c0103d70:	8b 08                	mov    (%eax),%ecx
c0103d72:	7e 0c                	jle    c0103d80 <getuint+0x16>
c0103d74:	8d 51 08             	lea    0x8(%ecx),%edx
c0103d77:	89 10                	mov    %edx,(%eax)
c0103d79:	8b 01                	mov    (%ecx),%eax
c0103d7b:	8b 51 04             	mov    0x4(%ecx),%edx
c0103d7e:	eb 09                	jmp    c0103d89 <getuint+0x1f>
c0103d80:	8d 51 04             	lea    0x4(%ecx),%edx
c0103d83:	89 10                	mov    %edx,(%eax)
c0103d85:	8b 01                	mov    (%ecx),%eax
c0103d87:	31 d2                	xor    %edx,%edx
c0103d89:	5d                   	pop    %ebp
c0103d8a:	c3                   	ret    

c0103d8b <vprintfmt>:
c0103d8b:	55                   	push   %ebp
c0103d8c:	89 e5                	mov    %esp,%ebp
c0103d8e:	57                   	push   %edi
c0103d8f:	56                   	push   %esi
c0103d90:	53                   	push   %ebx
c0103d91:	83 ec 5c             	sub    $0x5c,%esp
c0103d94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d97:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0103d9a:	ff 45 a8             	incl   -0x58(%ebp)
c0103d9d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103da0:	0f b6 40 ff          	movzbl -0x1(%eax),%eax
c0103da4:	83 f8 25             	cmp    $0x25,%eax
c0103da7:	74 14                	je     c0103dbd <vprintfmt+0x32>
c0103da9:	85 c0                	test   %eax,%eax
c0103dab:	0f 84 94 04 00 00    	je     c0104245 <vprintfmt+0x4ba>
c0103db1:	83 ec 0c             	sub    $0xc,%esp
c0103db4:	50                   	push   %eax
c0103db5:	ff 55 08             	call   *0x8(%ebp)
c0103db8:	83 c4 10             	add    $0x10,%esp
c0103dbb:	eb dd                	jmp    c0103d9a <vprintfmt+0xf>
c0103dbd:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0103dc0:	31 db                	xor    %ebx,%ebx
c0103dc2:	c6 45 b8 20          	movb   $0x20,-0x48(%ebp)
c0103dc6:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
c0103dcd:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
c0103dd4:	83 cf ff             	or     $0xffffffff,%edi
c0103dd7:	31 d2                	xor    %edx,%edx
c0103dd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103ddc:	40                   	inc    %eax
c0103ddd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103de0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103de3:	0f b6 30             	movzbl (%eax),%esi
c0103de6:	89 f0                	mov    %esi,%eax
c0103de8:	3c 63                	cmp    $0x63,%al
c0103dea:	0f 84 11 01 00 00    	je     c0103f01 <vprintfmt+0x176>
c0103df0:	77 5b                	ja     c0103e4d <vprintfmt+0xc2>
c0103df2:	3c 2d                	cmp    $0x2d,%al
c0103df4:	0f 84 a6 00 00 00    	je     c0103ea0 <vprintfmt+0x115>
c0103dfa:	77 27                	ja     c0103e23 <vprintfmt+0x98>
c0103dfc:	3c 25                	cmp    $0x25,%al
c0103dfe:	0f 84 01 04 00 00    	je     c0104205 <vprintfmt+0x47a>
c0103e04:	3c 2a                	cmp    $0x2a,%al
c0103e06:	0f 84 bd 00 00 00    	je     c0103ec9 <vprintfmt+0x13e>
c0103e0c:	3c 23                	cmp    $0x23,%al
c0103e0e:	0f 85 07 04 00 00    	jne    c010421b <vprintfmt+0x490>
c0103e14:	c7 45 a4 01 00 00 00 	movl   $0x1,-0x5c(%ebp)
c0103e1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e1e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0103e21:	eb b6                	jmp    c0103dd9 <vprintfmt+0x4e>
c0103e23:	3c 30                	cmp    $0x30,%al
c0103e25:	75 06                	jne    c0103e2d <vprintfmt+0xa2>
c0103e27:	c6 45 b8 30          	movb   $0x30,-0x48(%ebp)
c0103e2b:	eb ee                	jmp    c0103e1b <vprintfmt+0x90>
c0103e2d:	77 0d                	ja     c0103e3c <vprintfmt+0xb1>
c0103e2f:	3c 2e                	cmp    $0x2e,%al
c0103e31:	0f 84 9e 00 00 00    	je     c0103ed5 <vprintfmt+0x14a>
c0103e37:	e9 df 03 00 00       	jmp    c010421b <vprintfmt+0x490>
c0103e3c:	3c 39                	cmp    $0x39,%al
c0103e3e:	0f 87 d7 03 00 00    	ja     c010421b <vprintfmt+0x490>
c0103e44:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0103e4b:	eb 5c                	jmp    c0103ea9 <vprintfmt+0x11e>
c0103e4d:	3c 6f                	cmp    $0x6f,%al
c0103e4f:	0f 84 e8 01 00 00    	je     c010403d <vprintfmt+0x2b2>
c0103e55:	77 1d                	ja     c0103e74 <vprintfmt+0xe9>
c0103e57:	3c 66                	cmp    $0x66,%al
c0103e59:	0f 84 48 02 00 00    	je     c01040a7 <vprintfmt+0x31c>
c0103e5f:	3c 6c                	cmp    $0x6c,%al
c0103e61:	0f 84 94 00 00 00    	je     c0103efb <vprintfmt+0x170>
c0103e67:	3c 64                	cmp    $0x64,%al
c0103e69:	0f 85 ac 03 00 00    	jne    c010421b <vprintfmt+0x490>
c0103e6f:	e9 63 01 00 00       	jmp    c0103fd7 <vprintfmt+0x24c>
c0103e74:	3c 73                	cmp    $0x73,%al
c0103e76:	0f 84 9f 00 00 00    	je     c0103f1b <vprintfmt+0x190>
c0103e7c:	77 0d                	ja     c0103e8b <vprintfmt+0x100>
c0103e7e:	3c 70                	cmp    $0x70,%al
c0103e80:	0f 84 d1 01 00 00    	je     c0104057 <vprintfmt+0x2cc>
c0103e86:	e9 90 03 00 00       	jmp    c010421b <vprintfmt+0x490>
c0103e8b:	3c 75                	cmp    $0x75,%al
c0103e8d:	0f 84 94 01 00 00    	je     c0104027 <vprintfmt+0x29c>
c0103e93:	3c 78                	cmp    $0x78,%al
c0103e95:	0f 84 e7 01 00 00    	je     c0104082 <vprintfmt+0x2f7>
c0103e9b:	e9 7b 03 00 00       	jmp    c010421b <vprintfmt+0x490>
c0103ea0:	c6 45 b8 2d          	movb   $0x2d,-0x48(%ebp)
c0103ea4:	e9 72 ff ff ff       	jmp    c0103e1b <vprintfmt+0x90>
c0103ea9:	6b 45 c8 0a          	imul   $0xa,-0x38(%ebp),%eax
c0103ead:	8d 44 06 d0          	lea    -0x30(%esi,%eax,1),%eax
c0103eb1:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103eb4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103eb7:	0f be 00             	movsbl (%eax),%eax
c0103eba:	89 c6                	mov    %eax,%esi
c0103ebc:	83 e8 30             	sub    $0x30,%eax
c0103ebf:	83 f8 09             	cmp    $0x9,%eax
c0103ec2:	77 20                	ja     c0103ee4 <vprintfmt+0x159>
c0103ec4:	ff 45 e0             	incl   -0x20(%ebp)
c0103ec7:	eb e0                	jmp    c0103ea9 <vprintfmt+0x11e>
c0103ec9:	8b 01                	mov    (%ecx),%eax
c0103ecb:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103ece:	83 c1 04             	add    $0x4,%ecx
c0103ed1:	b3 01                	mov    $0x1,%bl
c0103ed3:	eb 0f                	jmp    c0103ee4 <vprintfmt+0x159>
c0103ed5:	85 ff                	test   %edi,%edi
c0103ed7:	0f 89 3e ff ff ff    	jns    c0103e1b <vprintfmt+0x90>
c0103edd:	31 ff                	xor    %edi,%edi
c0103edf:	e9 37 ff ff ff       	jmp    c0103e1b <vprintfmt+0x90>
c0103ee4:	85 ff                	test   %edi,%edi
c0103ee6:	0f 89 2f ff ff ff    	jns    c0103e1b <vprintfmt+0x90>
c0103eec:	8b 7d c8             	mov    -0x38(%ebp),%edi
c0103eef:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
c0103ef6:	e9 20 ff ff ff       	jmp    c0103e1b <vprintfmt+0x90>
c0103efb:	42                   	inc    %edx
c0103efc:	e9 1a ff ff ff       	jmp    c0103e1b <vprintfmt+0x90>
c0103f01:	84 db                	test   %bl,%bl
c0103f03:	74 03                	je     c0103f08 <vprintfmt+0x17d>
c0103f05:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0103f08:	8b 45 10             	mov    0x10(%ebp),%eax
c0103f0b:	8d 50 04             	lea    0x4(%eax),%edx
c0103f0e:	89 55 10             	mov    %edx,0x10(%ebp)
c0103f11:	83 ec 0c             	sub    $0xc,%esp
c0103f14:	ff 30                	pushl  (%eax)
c0103f16:	e9 f5 02 00 00       	jmp    c0104210 <vprintfmt+0x485>
c0103f1b:	84 db                	test   %bl,%bl
c0103f1d:	74 03                	je     c0103f22 <vprintfmt+0x197>
c0103f1f:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0103f22:	8b 45 10             	mov    0x10(%ebp),%eax
c0103f25:	8d 50 04             	lea    0x4(%eax),%edx
c0103f28:	89 55 10             	mov    %edx,0x10(%ebp)
c0103f2b:	8b 30                	mov    (%eax),%esi
c0103f2d:	85 f6                	test   %esi,%esi
c0103f2f:	75 05                	jne    c0103f36 <vprintfmt+0x1ab>
c0103f31:	be 97 0e 11 c0       	mov    $0xc0110e97,%esi
c0103f36:	80 7d b8 2d          	cmpb   $0x2d,-0x48(%ebp)
c0103f3a:	74 39                	je     c0103f75 <vprintfmt+0x1ea>
c0103f3c:	85 ff                	test   %edi,%edi
c0103f3e:	7e 35                	jle    c0103f75 <vprintfmt+0x1ea>
c0103f40:	83 ec 0c             	sub    $0xc,%esp
c0103f43:	56                   	push   %esi
c0103f44:	e8 52 08 00 00       	call   c010479b <strlen>
c0103f49:	29 c7                	sub    %eax,%edi
c0103f4b:	83 c4 10             	add    $0x10,%esp
c0103f4e:	89 fb                	mov    %edi,%ebx
c0103f50:	0f be 45 b8          	movsbl -0x48(%ebp),%eax
c0103f54:	85 db                	test   %ebx,%ebx
c0103f56:	7e 13                	jle    c0103f6b <vprintfmt+0x1e0>
c0103f58:	83 ec 0c             	sub    $0xc,%esp
c0103f5b:	50                   	push   %eax
c0103f5c:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103f5f:	ff 55 08             	call   *0x8(%ebp)
c0103f62:	4b                   	dec    %ebx
c0103f63:	83 c4 10             	add    $0x10,%esp
c0103f66:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103f69:	eb e9                	jmp    c0103f54 <vprintfmt+0x1c9>
c0103f6b:	89 f8                	mov    %edi,%eax
c0103f6d:	85 ff                	test   %edi,%edi
c0103f6f:	79 02                	jns    c0103f73 <vprintfmt+0x1e8>
c0103f71:	31 c0                	xor    %eax,%eax
c0103f73:	29 c7                	sub    %eax,%edi
c0103f75:	89 f3                	mov    %esi,%ebx
c0103f77:	89 f8                	mov    %edi,%eax
c0103f79:	29 d8                	sub    %ebx,%eax
c0103f7b:	8d 14 06             	lea    (%esi,%eax,1),%edx
c0103f7e:	43                   	inc    %ebx
c0103f7f:	0f be 43 ff          	movsbl -0x1(%ebx),%eax
c0103f83:	85 c0                	test   %eax,%eax
c0103f85:	74 44                	je     c0103fcb <vprintfmt+0x240>
c0103f87:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103f8b:	79 21                	jns    c0103fae <vprintfmt+0x223>
c0103f8d:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0103f91:	74 0f                	je     c0103fa2 <vprintfmt+0x217>
c0103f93:	8d 50 e0             	lea    -0x20(%eax),%edx
c0103f96:	83 fa 5e             	cmp    $0x5e,%edx
c0103f99:	76 07                	jbe    c0103fa2 <vprintfmt+0x217>
c0103f9b:	83 ec 0c             	sub    $0xc,%esp
c0103f9e:	6a 3f                	push   $0x3f
c0103fa0:	eb 04                	jmp    c0103fa6 <vprintfmt+0x21b>
c0103fa2:	83 ec 0c             	sub    $0xc,%esp
c0103fa5:	50                   	push   %eax
c0103fa6:	ff 55 08             	call   *0x8(%ebp)
c0103fa9:	83 c4 10             	add    $0x10,%esp
c0103fac:	eb c9                	jmp    c0103f77 <vprintfmt+0x1ec>
c0103fae:	ff 4d c8             	decl   -0x38(%ebp)
c0103fb1:	83 7d c8 ff          	cmpl   $0xffffffff,-0x38(%ebp)
c0103fb5:	75 d6                	jne    c0103f8d <vprintfmt+0x202>
c0103fb7:	eb 12                	jmp    c0103fcb <vprintfmt+0x240>
c0103fb9:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103fbc:	83 ec 0c             	sub    $0xc,%esp
c0103fbf:	6a 20                	push   $0x20
c0103fc1:	ff 55 08             	call   *0x8(%ebp)
c0103fc4:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103fc7:	4a                   	dec    %edx
c0103fc8:	83 c4 10             	add    $0x10,%esp
c0103fcb:	85 d2                	test   %edx,%edx
c0103fcd:	7f ea                	jg     c0103fb9 <vprintfmt+0x22e>
c0103fcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103fd2:	e9 c0 fd ff ff       	jmp    c0103d97 <vprintfmt+0xc>
c0103fd7:	84 db                	test   %bl,%bl
c0103fd9:	74 03                	je     c0103fde <vprintfmt+0x253>
c0103fdb:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0103fde:	4a                   	dec    %edx
c0103fdf:	8b 45 10             	mov    0x10(%ebp),%eax
c0103fe2:	7e 0d                	jle    c0103ff1 <vprintfmt+0x266>
c0103fe4:	8d 50 08             	lea    0x8(%eax),%edx
c0103fe7:	89 55 10             	mov    %edx,0x10(%ebp)
c0103fea:	8b 50 04             	mov    0x4(%eax),%edx
c0103fed:	8b 00                	mov    (%eax),%eax
c0103fef:	eb 09                	jmp    c0103ffa <vprintfmt+0x26f>
c0103ff1:	8d 50 04             	lea    0x4(%eax),%edx
c0103ff4:	89 55 10             	mov    %edx,0x10(%ebp)
c0103ff7:	8b 00                	mov    (%eax),%eax
c0103ff9:	99                   	cltd   
c0103ffa:	be 0a 00 00 00       	mov    $0xa,%esi
c0103fff:	85 d2                	test   %edx,%edx
c0104001:	0f 89 8f 00 00 00    	jns    c0104096 <vprintfmt+0x30b>
c0104007:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010400a:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010400d:	83 ec 0c             	sub    $0xc,%esp
c0104010:	6a 2d                	push   $0x2d
c0104012:	ff 55 08             	call   *0x8(%ebp)
c0104015:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104018:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010401b:	f7 d8                	neg    %eax
c010401d:	83 d2 00             	adc    $0x0,%edx
c0104020:	f7 da                	neg    %edx
c0104022:	83 c4 10             	add    $0x10,%esp
c0104025:	eb 6f                	jmp    c0104096 <vprintfmt+0x30b>
c0104027:	84 db                	test   %bl,%bl
c0104029:	74 03                	je     c010402e <vprintfmt+0x2a3>
c010402b:	89 4d 10             	mov    %ecx,0x10(%ebp)
c010402e:	8d 45 10             	lea    0x10(%ebp),%eax
c0104031:	e8 34 fd ff ff       	call   c0103d6a <getuint>
c0104036:	be 0a 00 00 00       	mov    $0xa,%esi
c010403b:	eb 59                	jmp    c0104096 <vprintfmt+0x30b>
c010403d:	84 db                	test   %bl,%bl
c010403f:	74 03                	je     c0104044 <vprintfmt+0x2b9>
c0104041:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0104044:	8d 45 10             	lea    0x10(%ebp),%eax
c0104047:	e8 1e fd ff ff       	call   c0103d6a <getuint>
c010404c:	53                   	push   %ebx
c010404d:	0f be 5d b8          	movsbl -0x48(%ebp),%ebx
c0104051:	53                   	push   %ebx
c0104052:	57                   	push   %edi
c0104053:	6a 08                	push   $0x8
c0104055:	eb 47                	jmp    c010409e <vprintfmt+0x313>
c0104057:	84 db                	test   %bl,%bl
c0104059:	74 03                	je     c010405e <vprintfmt+0x2d3>
c010405b:	89 4d 10             	mov    %ecx,0x10(%ebp)
c010405e:	83 ec 0c             	sub    $0xc,%esp
c0104061:	6a 30                	push   $0x30
c0104063:	ff 55 08             	call   *0x8(%ebp)
c0104066:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010406d:	ff 55 08             	call   *0x8(%ebp)
c0104070:	8b 45 10             	mov    0x10(%ebp),%eax
c0104073:	8d 50 04             	lea    0x4(%eax),%edx
c0104076:	89 55 10             	mov    %edx,0x10(%ebp)
c0104079:	8b 00                	mov    (%eax),%eax
c010407b:	31 d2                	xor    %edx,%edx
c010407d:	83 c4 10             	add    $0x10,%esp
c0104080:	eb 0f                	jmp    c0104091 <vprintfmt+0x306>
c0104082:	84 db                	test   %bl,%bl
c0104084:	74 03                	je     c0104089 <vprintfmt+0x2fe>
c0104086:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0104089:	8d 45 10             	lea    0x10(%ebp),%eax
c010408c:	e8 d9 fc ff ff       	call   c0103d6a <getuint>
c0104091:	be 10 00 00 00       	mov    $0x10,%esi
c0104096:	51                   	push   %ecx
c0104097:	0f be 5d b8          	movsbl -0x48(%ebp),%ebx
c010409b:	53                   	push   %ebx
c010409c:	57                   	push   %edi
c010409d:	56                   	push   %esi
c010409e:	89 d1                	mov    %edx,%ecx
c01040a0:	89 c2                	mov    %eax,%edx
c01040a2:	e9 54 01 00 00       	jmp    c01041fb <vprintfmt+0x470>
c01040a7:	84 db                	test   %bl,%bl
c01040a9:	74 03                	je     c01040ae <vprintfmt+0x323>
c01040ab:	89 4d 10             	mov    %ecx,0x10(%ebp)
c01040ae:	85 d2                	test   %edx,%edx
c01040b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01040b3:	74 0a                	je     c01040bf <vprintfmt+0x334>
c01040b5:	8d 50 0c             	lea    0xc(%eax),%edx
c01040b8:	89 55 10             	mov    %edx,0x10(%ebp)
c01040bb:	db 28                	fldt   (%eax)
c01040bd:	eb 08                	jmp    c01040c7 <vprintfmt+0x33c>
c01040bf:	8d 50 08             	lea    0x8(%eax),%edx
c01040c2:	89 55 10             	mov    %edx,0x10(%ebp)
c01040c5:	dd 00                	fldl   (%eax)
c01040c7:	0f be 5d b8          	movsbl -0x48(%ebp),%ebx
c01040cb:	d9 ee                	fldz   
c01040cd:	dd e9                	fucomp %st(1)
c01040cf:	df e0                	fnstsw %ax
c01040d1:	9e                   	sahf   
c01040d2:	76 13                	jbe    c01040e7 <vprintfmt+0x35c>
c01040d4:	db 7d c8             	fstpt  -0x38(%ebp)
c01040d7:	83 ec 0c             	sub    $0xc,%esp
c01040da:	6a 2d                	push   $0x2d
c01040dc:	ff 55 08             	call   *0x8(%ebp)
c01040df:	db 6d c8             	fldt   -0x38(%ebp)
c01040e2:	d9 e0                	fchs   
c01040e4:	83 c4 10             	add    $0x10,%esp
c01040e7:	d9 05 a0 0e 11 c0    	flds   0xc0110ea0
c01040ed:	d9 c0                	fld    %st(0)
c01040ef:	d9 ca                	fxch   %st(2)
c01040f1:	dd e2                	fucom  %st(2)
c01040f3:	df e0                	fnstsw %ax
c01040f5:	dd da                	fstp   %st(2)
c01040f7:	9e                   	sahf   
c01040f8:	d9 7d e6             	fnstcw -0x1a(%ebp)
c01040fb:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
c01040ff:	73 1e                	jae    c010411f <vprintfmt+0x394>
c0104101:	d9 c9                	fxch   %st(1)
c0104103:	80 cc 0c             	or     $0xc,%ah
c0104106:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
c010410a:	d9 c0                	fld    %st(0)
c010410c:	d9 6d e4             	fldcw  -0x1c(%ebp)
c010410f:	df 7d d8             	fistpll -0x28(%ebp)
c0104112:	d9 6d e6             	fldcw  -0x1a(%ebp)
c0104115:	d9 c9                	fxch   %st(1)
c0104117:	8b 75 d8             	mov    -0x28(%ebp),%esi
c010411a:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010411d:	eb 22                	jmp    c0104141 <vprintfmt+0x3b6>
c010411f:	80 cc 0c             	or     $0xc,%ah
c0104122:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
c0104126:	d9 c1                	fld    %st(1)
c0104128:	d8 e1                	fsub   %st(1),%st
c010412a:	d9 6d e4             	fldcw  -0x1c(%ebp)
c010412d:	df 7d d8             	fistpll -0x28(%ebp)
c0104130:	d9 6d e6             	fldcw  -0x1a(%ebp)
c0104133:	8b 75 d8             	mov    -0x28(%ebp),%esi
c0104136:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0104139:	8d 87 00 00 00 80    	lea    -0x80000000(%edi),%eax
c010413f:	89 c7                	mov    %eax,%edi
c0104141:	db 7d a8             	fstpt  -0x58(%ebp)
c0104144:	db 7d b8             	fstpt  -0x48(%ebp)
c0104147:	52                   	push   %edx
c0104148:	53                   	push   %ebx
c0104149:	6a 00                	push   $0x0
c010414b:	6a 0a                	push   $0xa
c010414d:	89 f2                	mov    %esi,%edx
c010414f:	89 f9                	mov    %edi,%ecx
c0104151:	8b 45 08             	mov    0x8(%ebp),%eax
c0104154:	e8 78 fb ff ff       	call   c0103cd1 <printnum>
c0104159:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010415c:	89 7d cc             	mov    %edi,-0x34(%ebp)
c010415f:	df 6d c8             	fildll -0x38(%ebp)
c0104162:	83 c4 10             	add    $0x10,%esp
c0104165:	85 ff                	test   %edi,%edi
c0104167:	db 6d b8             	fldt   -0x48(%ebp)
c010416a:	db 6d a8             	fldt   -0x58(%ebp)
c010416d:	79 0a                	jns    c0104179 <vprintfmt+0x3ee>
c010416f:	d9 ca                	fxch   %st(2)
c0104171:	d8 05 a4 0e 11 c0    	fadds  0xc0110ea4
c0104177:	d9 ca                	fxch   %st(2)
c0104179:	db 7d b8             	fstpt  -0x48(%ebp)
c010417c:	de e1                	fsubp  %st,%st(1)
c010417e:	db 7d c8             	fstpt  -0x38(%ebp)
c0104181:	83 ec 0c             	sub    $0xc,%esp
c0104184:	6a 2e                	push   $0x2e
c0104186:	ff 55 08             	call   *0x8(%ebp)
c0104189:	83 c4 10             	add    $0x10,%esp
c010418c:	b8 08 00 00 00       	mov    $0x8,%eax
c0104191:	d9 05 a8 0e 11 c0    	flds   0xc0110ea8
c0104197:	db 6d b8             	fldt   -0x48(%ebp)
c010419a:	db 6d c8             	fldt   -0x38(%ebp)
c010419d:	d8 ca                	fmul   %st(2),%st
c010419f:	48                   	dec    %eax
c01041a0:	75 fb                	jne    c010419d <vprintfmt+0x412>
c01041a2:	dd da                	fstp   %st(2)
c01041a4:	d9 c9                	fxch   %st(1)
c01041a6:	dd e1                	fucom  %st(1)
c01041a8:	df e0                	fnstsw %ax
c01041aa:	9e                   	sahf   
c01041ab:	73 21                	jae    c01041ce <vprintfmt+0x443>
c01041ad:	dd d9                	fstp   %st(1)
c01041af:	d9 7d e6             	fnstcw -0x1a(%ebp)
c01041b2:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
c01041b6:	80 cc 0c             	or     $0xc,%ah
c01041b9:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
c01041bd:	d9 6d e4             	fldcw  -0x1c(%ebp)
c01041c0:	df 7d d8             	fistpll -0x28(%ebp)
c01041c3:	d9 6d e6             	fldcw  -0x1a(%ebp)
c01041c6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01041c9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01041cc:	eb 27                	jmp    c01041f5 <vprintfmt+0x46a>
c01041ce:	de e1                	fsubp  %st,%st(1)
c01041d0:	d9 7d e6             	fnstcw -0x1a(%ebp)
c01041d3:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
c01041d7:	80 cc 0c             	or     $0xc,%ah
c01041da:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
c01041de:	d9 6d e4             	fldcw  -0x1c(%ebp)
c01041e1:	df 7d d8             	fistpll -0x28(%ebp)
c01041e4:	d9 6d e6             	fldcw  -0x1a(%ebp)
c01041e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01041ea:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01041ed:	8d 81 00 00 00 80    	lea    -0x80000000(%ecx),%eax
c01041f3:	89 c1                	mov    %eax,%ecx
c01041f5:	50                   	push   %eax
c01041f6:	53                   	push   %ebx
c01041f7:	6a 00                	push   $0x0
c01041f9:	6a 0a                	push   $0xa
c01041fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01041fe:	e8 ce fa ff ff       	call   c0103cd1 <printnum>
c0104203:	eb 0e                	jmp    c0104213 <vprintfmt+0x488>
c0104205:	84 db                	test   %bl,%bl
c0104207:	74 03                	je     c010420c <vprintfmt+0x481>
c0104209:	89 4d 10             	mov    %ecx,0x10(%ebp)
c010420c:	83 ec 0c             	sub    $0xc,%esp
c010420f:	56                   	push   %esi
c0104210:	ff 55 08             	call   *0x8(%ebp)
c0104213:	83 c4 10             	add    $0x10,%esp
c0104216:	e9 b4 fd ff ff       	jmp    c0103fcf <vprintfmt+0x244>
c010421b:	84 db                	test   %bl,%bl
c010421d:	74 03                	je     c0104222 <vprintfmt+0x497>
c010421f:	89 4d 10             	mov    %ecx,0x10(%ebp)
c0104222:	83 ec 0c             	sub    $0xc,%esp
c0104225:	6a 25                	push   $0x25
c0104227:	ff 55 08             	call   *0x8(%ebp)
c010422a:	83 c4 10             	add    $0x10,%esp
c010422d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104230:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104233:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104236:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)
c010423a:	0f 84 8f fd ff ff    	je     c0103fcf <vprintfmt+0x244>
c0104240:	ff 4d e0             	decl   -0x20(%ebp)
c0104243:	eb ee                	jmp    c0104233 <vprintfmt+0x4a8>
c0104245:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0104248:	5b                   	pop    %ebx
c0104249:	5e                   	pop    %esi
c010424a:	5f                   	pop    %edi
c010424b:	5d                   	pop    %ebp
c010424c:	c3                   	ret    

c010424d <vcprintf>:
c010424d:	55                   	push   %ebp
c010424e:	89 e5                	mov    %esp,%ebp
c0104250:	83 ec 0c             	sub    $0xc,%esp
c0104253:	ff 75 0c             	pushl  0xc(%ebp)
c0104256:	ff 75 08             	pushl  0x8(%ebp)
c0104259:	68 8c a8 10 c0       	push   $0xc010a88c
c010425e:	e8 28 fb ff ff       	call   c0103d8b <vprintfmt>
c0104263:	83 c4 10             	add    $0x10,%esp
c0104266:	c9                   	leave  
c0104267:	c3                   	ret    

c0104268 <print>:
c0104268:	55                   	push   %ebp
c0104269:	89 e5                	mov    %esp,%ebp
c010426b:	83 ec 10             	sub    $0x10,%esp
c010426e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0104271:	50                   	push   %eax
c0104272:	ff 75 08             	pushl  0x8(%ebp)
c0104275:	e8 d3 ff ff ff       	call   c010424d <vcprintf>
c010427a:	83 c4 10             	add    $0x10,%esp
c010427d:	c9                   	leave  
c010427e:	c3                   	ret    

c010427f <printfmt>:
c010427f:	55                   	push   %ebp
c0104280:	89 e5                	mov    %esp,%ebp
c0104282:	83 ec 0c             	sub    $0xc,%esp
c0104285:	8d 45 10             	lea    0x10(%ebp),%eax
c0104288:	50                   	push   %eax
c0104289:	ff 75 0c             	pushl  0xc(%ebp)
c010428c:	ff 75 08             	pushl  0x8(%ebp)
c010428f:	e8 f7 fa ff ff       	call   c0103d8b <vprintfmt>
c0104294:	83 c4 10             	add    $0x10,%esp
c0104297:	c9                   	leave  
c0104298:	c3                   	ret    

c0104299 <sprintputch>:
c0104299:	55                   	push   %ebp
c010429a:	89 e5                	mov    %esp,%ebp
c010429c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010429f:	ff 40 08             	incl   0x8(%eax)
c01042a2:	8b 10                	mov    (%eax),%edx
c01042a4:	3b 50 04             	cmp    0x4(%eax),%edx
c01042a7:	73 0a                	jae    c01042b3 <sprintputch+0x1a>
c01042a9:	8d 4a 01             	lea    0x1(%edx),%ecx
c01042ac:	89 08                	mov    %ecx,(%eax)
c01042ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01042b1:	88 02                	mov    %al,(%edx)
c01042b3:	5d                   	pop    %ebp
c01042b4:	c3                   	ret    

c01042b5 <vsnprintfmt>:
c01042b5:	55                   	push   %ebp
c01042b6:	89 e5                	mov    %esp,%ebp
c01042b8:	57                   	push   %edi
c01042b9:	56                   	push   %esi
c01042ba:	53                   	push   %ebx
c01042bb:	83 ec 7c             	sub    $0x7c,%esp
c01042be:	8b 5d 14             	mov    0x14(%ebp),%ebx
c01042c1:	8b 7d 10             	mov    0x10(%ebp),%edi
c01042c4:	47                   	inc    %edi
c01042c5:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
c01042c9:	83 fa 25             	cmp    $0x25,%edx
c01042cc:	74 16                	je     c01042e4 <vsnprintfmt+0x2f>
c01042ce:	85 d2                	test   %edx,%edx
c01042d0:	0f 84 39 04 00 00    	je     c010470f <vsnprintfmt+0x45a>
c01042d6:	50                   	push   %eax
c01042d7:	50                   	push   %eax
c01042d8:	ff 75 0c             	pushl  0xc(%ebp)
c01042db:	52                   	push   %edx
c01042dc:	ff 55 08             	call   *0x8(%ebp)
c01042df:	83 c4 10             	add    $0x10,%esp
c01042e2:	eb e0                	jmp    c01042c4 <vsnprintfmt+0xf>
c01042e4:	c6 45 90 20          	movb   $0x20,-0x70(%ebp)
c01042e8:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%ebp)
c01042ef:	83 c9 ff             	or     $0xffffffff,%ecx
c01042f2:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%ebp)
c01042f9:	31 f6                	xor    %esi,%esi
c01042fb:	8d 47 01             	lea    0x1(%edi),%eax
c01042fe:	89 45 10             	mov    %eax,0x10(%ebp)
c0104301:	0f b6 3f             	movzbl (%edi),%edi
c0104304:	89 f8                	mov    %edi,%eax
c0104306:	3c 62                	cmp    $0x62,%al
c0104308:	0f 84 f3 01 00 00    	je     c0104501 <vsnprintfmt+0x24c>
c010430e:	77 53                	ja     c0104363 <vsnprintfmt+0xae>
c0104310:	3c 2d                	cmp    $0x2d,%al
c0104312:	0f 84 a9 00 00 00    	je     c01043c1 <vsnprintfmt+0x10c>
c0104318:	77 24                	ja     c010433e <vsnprintfmt+0x89>
c010431a:	3c 25                	cmp    $0x25,%al
c010431c:	0f 84 da 03 00 00    	je     c01046fc <vsnprintfmt+0x447>
c0104322:	3c 2a                	cmp    $0x2a,%al
c0104324:	0f 84 ba 00 00 00    	je     c01043e4 <vsnprintfmt+0x12f>
c010432a:	3c 23                	cmp    $0x23,%al
c010432c:	0f 85 ae 03 00 00    	jne    c01046e0 <vsnprintfmt+0x42b>
c0104332:	c7 45 88 01 00 00 00 	movl   $0x1,-0x78(%ebp)
c0104339:	8b 7d 10             	mov    0x10(%ebp),%edi
c010433c:	eb bd                	jmp    c01042fb <vsnprintfmt+0x46>
c010433e:	3c 30                	cmp    $0x30,%al
c0104340:	75 06                	jne    c0104348 <vsnprintfmt+0x93>
c0104342:	c6 45 90 30          	movb   $0x30,-0x70(%ebp)
c0104346:	eb f1                	jmp    c0104339 <vsnprintfmt+0x84>
c0104348:	77 0d                	ja     c0104357 <vsnprintfmt+0xa2>
c010434a:	3c 2e                	cmp    $0x2e,%al
c010434c:	0f 84 99 00 00 00    	je     c01043eb <vsnprintfmt+0x136>
c0104352:	e9 89 03 00 00       	jmp    c01046e0 <vsnprintfmt+0x42b>
c0104357:	3c 39                	cmp    $0x39,%al
c0104359:	0f 87 81 03 00 00    	ja     c01046e0 <vsnprintfmt+0x42b>
c010435f:	31 c9                	xor    %ecx,%ecx
c0104361:	eb 67                	jmp    c01043ca <vsnprintfmt+0x115>
c0104363:	3c 70                	cmp    $0x70,%al
c0104365:	0f 84 3f 02 00 00    	je     c01045aa <vsnprintfmt+0x2f5>
c010436b:	77 23                	ja     c0104390 <vsnprintfmt+0xdb>
c010436d:	3c 64                	cmp    $0x64,%al
c010436f:	0f 84 af 01 00 00    	je     c0104524 <vsnprintfmt+0x26f>
c0104375:	0f 82 a1 00 00 00    	jb     c010441c <vsnprintfmt+0x167>
c010437b:	3c 6c                	cmp    $0x6c,%al
c010437d:	0f 84 93 00 00 00    	je     c0104416 <vsnprintfmt+0x161>
c0104383:	3c 6f                	cmp    $0x6f,%al
c0104385:	0f 84 00 02 00 00    	je     c010458b <vsnprintfmt+0x2d6>
c010438b:	e9 50 03 00 00       	jmp    c01046e0 <vsnprintfmt+0x42b>
c0104390:	3c 75                	cmp    $0x75,%al
c0104392:	0f 84 d4 01 00 00    	je     c010456c <vsnprintfmt+0x2b7>
c0104398:	77 0d                	ja     c01043a7 <vsnprintfmt+0xf2>
c010439a:	3c 73                	cmp    $0x73,%al
c010439c:	0f 84 91 00 00 00    	je     c0104433 <vsnprintfmt+0x17e>
c01043a2:	e9 39 03 00 00       	jmp    c01046e0 <vsnprintfmt+0x42b>
c01043a7:	3c 78                	cmp    $0x78,%al
c01043a9:	0f 84 1b 02 00 00    	je     c01045ca <vsnprintfmt+0x315>
c01043af:	3c 7a                	cmp    $0x7a,%al
c01043b1:	0f 85 29 03 00 00    	jne    c01046e0 <vsnprintfmt+0x42b>
c01043b7:	be 01 00 00 00       	mov    $0x1,%esi
c01043bc:	e9 78 ff ff ff       	jmp    c0104339 <vsnprintfmt+0x84>
c01043c1:	c6 45 90 2d          	movb   $0x2d,-0x70(%ebp)
c01043c5:	e9 6f ff ff ff       	jmp    c0104339 <vsnprintfmt+0x84>
c01043ca:	6b c1 0a             	imul   $0xa,%ecx,%eax
c01043cd:	8d 4c 07 d0          	lea    -0x30(%edi,%eax,1),%ecx
c01043d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01043d4:	0f be 38             	movsbl (%eax),%edi
c01043d7:	8d 47 d0             	lea    -0x30(%edi),%eax
c01043da:	83 f8 09             	cmp    $0x9,%eax
c01043dd:	77 22                	ja     c0104401 <vsnprintfmt+0x14c>
c01043df:	ff 45 10             	incl   0x10(%ebp)
c01043e2:	eb e6                	jmp    c01043ca <vsnprintfmt+0x115>
c01043e4:	8b 0b                	mov    (%ebx),%ecx
c01043e6:	83 c3 04             	add    $0x4,%ebx
c01043e9:	eb 16                	jmp    c0104401 <vsnprintfmt+0x14c>
c01043eb:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
c01043ef:	0f 89 44 ff ff ff    	jns    c0104339 <vsnprintfmt+0x84>
c01043f5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
c01043fc:	e9 38 ff ff ff       	jmp    c0104339 <vsnprintfmt+0x84>
c0104401:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
c0104405:	0f 89 2e ff ff ff    	jns    c0104339 <vsnprintfmt+0x84>
c010440b:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c010440e:	83 c9 ff             	or     $0xffffffff,%ecx
c0104411:	e9 23 ff ff ff       	jmp    c0104339 <vsnprintfmt+0x84>
c0104416:	46                   	inc    %esi
c0104417:	e9 1d ff ff ff       	jmp    c0104339 <vsnprintfmt+0x84>
c010441c:	8d 7b 04             	lea    0x4(%ebx),%edi
c010441f:	50                   	push   %eax
c0104420:	50                   	push   %eax
c0104421:	ff 75 0c             	pushl  0xc(%ebp)
c0104424:	ff 33                	pushl  (%ebx)
c0104426:	ff 55 08             	call   *0x8(%ebp)
c0104429:	83 c4 10             	add    $0x10,%esp
c010442c:	89 fb                	mov    %edi,%ebx
c010442e:	e9 8e fe ff ff       	jmp    c01042c1 <vsnprintfmt+0xc>
c0104433:	8d 7b 04             	lea    0x4(%ebx),%edi
c0104436:	8b 1b                	mov    (%ebx),%ebx
c0104438:	85 db                	test   %ebx,%ebx
c010443a:	75 05                	jne    c0104441 <vsnprintfmt+0x18c>
c010443c:	bb 97 0e 11 c0       	mov    $0xc0110e97,%ebx
c0104441:	80 7d 90 2d          	cmpb   $0x2d,-0x70(%ebp)
c0104445:	74 55                	je     c010449c <vsnprintfmt+0x1e7>
c0104447:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
c010444b:	7e 4f                	jle    c010449c <vsnprintfmt+0x1e7>
c010444d:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0104450:	83 ec 0c             	sub    $0xc,%esp
c0104453:	53                   	push   %ebx
c0104454:	e8 42 03 00 00       	call   c010479b <strlen>
c0104459:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010445c:	29 c6                	sub    %eax,%esi
c010445e:	83 c4 10             	add    $0x10,%esp
c0104461:	89 f0                	mov    %esi,%eax
c0104463:	0f be 55 90          	movsbl -0x70(%ebp),%edx
c0104467:	8b 4d 80             	mov    -0x80(%ebp),%ecx
c010446a:	85 c0                	test   %eax,%eax
c010446c:	7e 21                	jle    c010448f <vsnprintfmt+0x1da>
c010446e:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0104471:	89 45 90             	mov    %eax,-0x70(%ebp)
c0104474:	50                   	push   %eax
c0104475:	50                   	push   %eax
c0104476:	ff 75 0c             	pushl  0xc(%ebp)
c0104479:	52                   	push   %edx
c010447a:	89 55 94             	mov    %edx,-0x6c(%ebp)
c010447d:	ff 55 08             	call   *0x8(%ebp)
c0104480:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104483:	48                   	dec    %eax
c0104484:	83 c4 10             	add    $0x10,%esp
c0104487:	8b 4d 80             	mov    -0x80(%ebp),%ecx
c010448a:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010448d:	eb db                	jmp    c010446a <vsnprintfmt+0x1b5>
c010448f:	89 f0                	mov    %esi,%eax
c0104491:	85 f6                	test   %esi,%esi
c0104493:	79 02                	jns    c0104497 <vsnprintfmt+0x1e2>
c0104495:	31 c0                	xor    %eax,%eax
c0104497:	29 c6                	sub    %eax,%esi
c0104499:	89 75 94             	mov    %esi,-0x6c(%ebp)
c010449c:	89 de                	mov    %ebx,%esi
c010449e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01044a1:	29 f0                	sub    %esi,%eax
c01044a3:	01 d8                	add    %ebx,%eax
c01044a5:	46                   	inc    %esi
c01044a6:	0f be 56 ff          	movsbl -0x1(%esi),%edx
c01044aa:	85 d2                	test   %edx,%edx
c01044ac:	74 35                	je     c01044e3 <vsnprintfmt+0x22e>
c01044ae:	85 c9                	test   %ecx,%ecx
c01044b0:	79 2b                	jns    c01044dd <vsnprintfmt+0x228>
c01044b2:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c01044b6:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c01044b9:	74 11                	je     c01044cc <vsnprintfmt+0x217>
c01044bb:	8d 42 e0             	lea    -0x20(%edx),%eax
c01044be:	83 f8 5e             	cmp    $0x5e,%eax
c01044c1:	76 09                	jbe    c01044cc <vsnprintfmt+0x217>
c01044c3:	50                   	push   %eax
c01044c4:	50                   	push   %eax
c01044c5:	ff 75 0c             	pushl  0xc(%ebp)
c01044c8:	6a 3f                	push   $0x3f
c01044ca:	eb 06                	jmp    c01044d2 <vsnprintfmt+0x21d>
c01044cc:	50                   	push   %eax
c01044cd:	50                   	push   %eax
c01044ce:	ff 75 0c             	pushl  0xc(%ebp)
c01044d1:	52                   	push   %edx
c01044d2:	ff 55 08             	call   *0x8(%ebp)
c01044d5:	83 c4 10             	add    $0x10,%esp
c01044d8:	8b 4d 90             	mov    -0x70(%ebp),%ecx
c01044db:	eb c1                	jmp    c010449e <vsnprintfmt+0x1e9>
c01044dd:	49                   	dec    %ecx
c01044de:	83 f9 ff             	cmp    $0xffffffff,%ecx
c01044e1:	75 cf                	jne    c01044b2 <vsnprintfmt+0x1fd>
c01044e3:	85 c0                	test   %eax,%eax
c01044e5:	0f 8e 41 ff ff ff    	jle    c010442c <vsnprintfmt+0x177>
c01044eb:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01044ee:	53                   	push   %ebx
c01044ef:	53                   	push   %ebx
c01044f0:	ff 75 0c             	pushl  0xc(%ebp)
c01044f3:	6a 20                	push   $0x20
c01044f5:	ff 55 08             	call   *0x8(%ebp)
c01044f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01044fb:	48                   	dec    %eax
c01044fc:	83 c4 10             	add    $0x10,%esp
c01044ff:	eb e2                	jmp    c01044e3 <vsnprintfmt+0x22e>
c0104501:	4e                   	dec    %esi
c0104502:	7e 0a                	jle    c010450e <vsnprintfmt+0x259>
c0104504:	8d 7b 08             	lea    0x8(%ebx),%edi
c0104507:	8b 0b                	mov    (%ebx),%ecx
c0104509:	8b 5b 04             	mov    0x4(%ebx),%ebx
c010450c:	eb 0c                	jmp    c010451a <vsnprintfmt+0x265>
c010450e:	8d 43 04             	lea    0x4(%ebx),%eax
c0104511:	89 c7                	mov    %eax,%edi
c0104513:	8b 0b                	mov    (%ebx),%ecx
c0104515:	89 cb                	mov    %ecx,%ebx
c0104517:	c1 fb 1f             	sar    $0x1f,%ebx
c010451a:	be 02 00 00 00       	mov    $0x2,%esi
c010451f:	e9 c3 00 00 00       	jmp    c01045e7 <vsnprintfmt+0x332>
c0104524:	4e                   	dec    %esi
c0104525:	7e 0a                	jle    c0104531 <vsnprintfmt+0x27c>
c0104527:	8d 7b 08             	lea    0x8(%ebx),%edi
c010452a:	8b 0b                	mov    (%ebx),%ecx
c010452c:	8b 5b 04             	mov    0x4(%ebx),%ebx
c010452f:	eb 0c                	jmp    c010453d <vsnprintfmt+0x288>
c0104531:	8d 43 04             	lea    0x4(%ebx),%eax
c0104534:	89 c7                	mov    %eax,%edi
c0104536:	8b 0b                	mov    (%ebx),%ecx
c0104538:	89 cb                	mov    %ecx,%ebx
c010453a:	c1 fb 1f             	sar    $0x1f,%ebx
c010453d:	be 0a 00 00 00       	mov    $0xa,%esi
c0104542:	85 db                	test   %ebx,%ebx
c0104544:	0f 89 9d 00 00 00    	jns    c01045e7 <vsnprintfmt+0x332>
c010454a:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c010454d:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
c0104550:	51                   	push   %ecx
c0104551:	51                   	push   %ecx
c0104552:	ff 75 0c             	pushl  0xc(%ebp)
c0104555:	6a 2d                	push   $0x2d
c0104557:	ff 55 08             	call   *0x8(%ebp)
c010455a:	8b 4d 88             	mov    -0x78(%ebp),%ecx
c010455d:	8b 5d 8c             	mov    -0x74(%ebp),%ebx
c0104560:	f7 d9                	neg    %ecx
c0104562:	83 d3 00             	adc    $0x0,%ebx
c0104565:	f7 db                	neg    %ebx
c0104567:	83 c4 10             	add    $0x10,%esp
c010456a:	eb 7b                	jmp    c01045e7 <vsnprintfmt+0x332>
c010456c:	83 fe 01             	cmp    $0x1,%esi
c010456f:	7e 0a                	jle    c010457b <vsnprintfmt+0x2c6>
c0104571:	8d 7b 08             	lea    0x8(%ebx),%edi
c0104574:	8b 0b                	mov    (%ebx),%ecx
c0104576:	8b 5b 04             	mov    0x4(%ebx),%ebx
c0104579:	eb 09                	jmp    c0104584 <vsnprintfmt+0x2cf>
c010457b:	8d 43 04             	lea    0x4(%ebx),%eax
c010457e:	89 c7                	mov    %eax,%edi
c0104580:	8b 0b                	mov    (%ebx),%ecx
c0104582:	31 db                	xor    %ebx,%ebx
c0104584:	be 0a 00 00 00       	mov    $0xa,%esi
c0104589:	eb 5c                	jmp    c01045e7 <vsnprintfmt+0x332>
c010458b:	83 fe 01             	cmp    $0x1,%esi
c010458e:	7e 0a                	jle    c010459a <vsnprintfmt+0x2e5>
c0104590:	8d 7b 08             	lea    0x8(%ebx),%edi
c0104593:	8b 0b                	mov    (%ebx),%ecx
c0104595:	8b 5b 04             	mov    0x4(%ebx),%ebx
c0104598:	eb 09                	jmp    c01045a3 <vsnprintfmt+0x2ee>
c010459a:	8d 43 04             	lea    0x4(%ebx),%eax
c010459d:	89 c7                	mov    %eax,%edi
c010459f:	8b 0b                	mov    (%ebx),%ecx
c01045a1:	31 db                	xor    %ebx,%ebx
c01045a3:	be 08 00 00 00       	mov    $0x8,%esi
c01045a8:	eb 3d                	jmp    c01045e7 <vsnprintfmt+0x332>
c01045aa:	50                   	push   %eax
c01045ab:	50                   	push   %eax
c01045ac:	ff 75 0c             	pushl  0xc(%ebp)
c01045af:	6a 30                	push   $0x30
c01045b1:	ff 55 08             	call   *0x8(%ebp)
c01045b4:	58                   	pop    %eax
c01045b5:	5a                   	pop    %edx
c01045b6:	ff 75 0c             	pushl  0xc(%ebp)
c01045b9:	6a 78                	push   $0x78
c01045bb:	ff 55 08             	call   *0x8(%ebp)
c01045be:	8d 7b 04             	lea    0x4(%ebx),%edi
c01045c1:	8b 0b                	mov    (%ebx),%ecx
c01045c3:	31 db                	xor    %ebx,%ebx
c01045c5:	83 c4 10             	add    $0x10,%esp
c01045c8:	eb 18                	jmp    c01045e2 <vsnprintfmt+0x32d>
c01045ca:	83 fe 01             	cmp    $0x1,%esi
c01045cd:	7e 0a                	jle    c01045d9 <vsnprintfmt+0x324>
c01045cf:	8d 7b 08             	lea    0x8(%ebx),%edi
c01045d2:	8b 0b                	mov    (%ebx),%ecx
c01045d4:	8b 5b 04             	mov    0x4(%ebx),%ebx
c01045d7:	eb 09                	jmp    c01045e2 <vsnprintfmt+0x32d>
c01045d9:	8d 43 04             	lea    0x4(%ebx),%eax
c01045dc:	89 c7                	mov    %eax,%edi
c01045de:	8b 0b                	mov    (%ebx),%ecx
c01045e0:	31 db                	xor    %ebx,%ebx
c01045e2:	be 10 00 00 00       	mov    $0x10,%esi
c01045e7:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01045ea:	89 45 88             	mov    %eax,-0x78(%ebp)
c01045ed:	85 c0                	test   %eax,%eax
c01045ef:	79 07                	jns    c01045f8 <vsnprintfmt+0x343>
c01045f1:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%ebp)
c01045f8:	8d 45 a4             	lea    -0x5c(%ebp),%eax
c01045fb:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01045fe:	89 75 80             	mov    %esi,-0x80(%ebp)
c0104601:	c1 fe 1f             	sar    $0x1f,%esi
c0104604:	89 75 84             	mov    %esi,-0x7c(%ebp)
c0104607:	89 d8                	mov    %ebx,%eax
c0104609:	09 c8                	or     %ecx,%eax
c010460b:	74 4d                	je     c010465a <vsnprintfmt+0x3a5>
c010460d:	ff 45 94             	incl   -0x6c(%ebp)
c0104610:	ff 75 84             	pushl  -0x7c(%ebp)
c0104613:	ff 75 80             	pushl  -0x80(%ebp)
c0104616:	53                   	push   %ebx
c0104617:	51                   	push   %ecx
c0104618:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c010461e:	89 9d 7c ff ff ff    	mov    %ebx,-0x84(%ebp)
c0104624:	e8 5f b7 00 00       	call   c010fd88 <__umoddi3>
c0104629:	83 c4 10             	add    $0x10,%esp
c010462c:	8a 80 86 0e 11 c0    	mov    -0x3feef17a(%eax),%al
c0104632:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104635:	88 42 ff             	mov    %al,-0x1(%edx)
c0104638:	ff 75 84             	pushl  -0x7c(%ebp)
c010463b:	ff 75 80             	pushl  -0x80(%ebp)
c010463e:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c0104644:	8b 9d 7c ff ff ff    	mov    -0x84(%ebp),%ebx
c010464a:	53                   	push   %ebx
c010464b:	51                   	push   %ecx
c010464c:	e8 27 b6 00 00       	call   c010fc78 <__udivdi3>
c0104651:	83 c4 10             	add    $0x10,%esp
c0104654:	89 c1                	mov    %eax,%ecx
c0104656:	89 d3                	mov    %edx,%ebx
c0104658:	eb ad                	jmp    c0104607 <vsnprintfmt+0x352>
c010465a:	8d 55 a4             	lea    -0x5c(%ebp),%edx
c010465d:	39 55 94             	cmp    %edx,-0x6c(%ebp)
c0104660:	75 0a                	jne    c010466c <vsnprintfmt+0x3b7>
c0104662:	c6 45 a4 30          	movb   $0x30,-0x5c(%ebp)
c0104666:	8d 45 a5             	lea    -0x5b(%ebp),%eax
c0104669:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010466c:	80 7d 90 2d          	cmpb   $0x2d,-0x70(%ebp)
c0104670:	74 22                	je     c0104694 <vsnprintfmt+0x3df>
c0104672:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0104675:	8d 45 a4             	lea    -0x5c(%ebp),%eax
c0104678:	29 c3                	sub    %eax,%ebx
c010467a:	0f be 75 90          	movsbl -0x70(%ebp),%esi
c010467e:	39 5d 88             	cmp    %ebx,-0x78(%ebp)
c0104681:	7e 11                	jle    c0104694 <vsnprintfmt+0x3df>
c0104683:	50                   	push   %eax
c0104684:	50                   	push   %eax
c0104685:	ff 75 0c             	pushl  0xc(%ebp)
c0104688:	56                   	push   %esi
c0104689:	ff 55 08             	call   *0x8(%ebp)
c010468c:	ff 4d 88             	decl   -0x78(%ebp)
c010468f:	83 c4 10             	add    $0x10,%esp
c0104692:	eb ea                	jmp    c010467e <vsnprintfmt+0x3c9>
c0104694:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0104697:	8b 45 88             	mov    -0x78(%ebp),%eax
c010469a:	29 f0                	sub    %esi,%eax
c010469c:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010469f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01046a2:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
c01046a5:	8d 45 a4             	lea    -0x5c(%ebp),%eax
c01046a8:	39 c6                	cmp    %eax,%esi
c01046aa:	76 12                	jbe    c01046be <vsnprintfmt+0x409>
c01046ac:	4e                   	dec    %esi
c01046ad:	50                   	push   %eax
c01046ae:	50                   	push   %eax
c01046af:	ff 75 0c             	pushl  0xc(%ebp)
c01046b2:	0f be 06             	movsbl (%esi),%eax
c01046b5:	50                   	push   %eax
c01046b6:	ff 55 08             	call   *0x8(%ebp)
c01046b9:	83 c4 10             	add    $0x10,%esp
c01046bc:	eb e1                	jmp    c010469f <vsnprintfmt+0x3ea>
c01046be:	80 7d 90 2d          	cmpb   $0x2d,-0x70(%ebp)
c01046c2:	0f 85 64 fd ff ff    	jne    c010442c <vsnprintfmt+0x177>
c01046c8:	85 db                	test   %ebx,%ebx
c01046ca:	0f 8e 5c fd ff ff    	jle    c010442c <vsnprintfmt+0x177>
c01046d0:	56                   	push   %esi
c01046d1:	56                   	push   %esi
c01046d2:	ff 75 0c             	pushl  0xc(%ebp)
c01046d5:	6a 20                	push   $0x20
c01046d7:	ff 55 08             	call   *0x8(%ebp)
c01046da:	4b                   	dec    %ebx
c01046db:	83 c4 10             	add    $0x10,%esp
c01046de:	eb e8                	jmp    c01046c8 <vsnprintfmt+0x413>
c01046e0:	51                   	push   %ecx
c01046e1:	51                   	push   %ecx
c01046e2:	ff 75 0c             	pushl  0xc(%ebp)
c01046e5:	6a 25                	push   $0x25
c01046e7:	ff 55 08             	call   *0x8(%ebp)
c01046ea:	83 c4 10             	add    $0x10,%esp
c01046ed:	4e                   	dec    %esi
c01046ee:	83 fe ff             	cmp    $0xffffffff,%esi
c01046f1:	74 09                	je     c01046fc <vsnprintfmt+0x447>
c01046f3:	52                   	push   %edx
c01046f4:	52                   	push   %edx
c01046f5:	ff 75 0c             	pushl  0xc(%ebp)
c01046f8:	6a 6c                	push   $0x6c
c01046fa:	eb eb                	jmp    c01046e7 <vsnprintfmt+0x432>
c01046fc:	50                   	push   %eax
c01046fd:	50                   	push   %eax
c01046fe:	ff 75 0c             	pushl  0xc(%ebp)
c0104701:	57                   	push   %edi
c0104702:	ff 55 08             	call   *0x8(%ebp)
c0104705:	83 c4 10             	add    $0x10,%esp
c0104708:	89 df                	mov    %ebx,%edi
c010470a:	e9 1d fd ff ff       	jmp    c010442c <vsnprintfmt+0x177>
c010470f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0104712:	5b                   	pop    %ebx
c0104713:	5e                   	pop    %esi
c0104714:	5f                   	pop    %edi
c0104715:	5d                   	pop    %ebp
c0104716:	c3                   	ret    

c0104717 <vsnprintf>:
c0104717:	55                   	push   %ebp
c0104718:	89 e5                	mov    %esp,%ebp
c010471a:	83 ec 18             	sub    $0x18,%esp
c010471d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104720:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104723:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104726:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
c010472a:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010472d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104734:	85 d2                	test   %edx,%edx
c0104736:	74 26                	je     c010475e <vsnprintf+0x47>
c0104738:	85 c0                	test   %eax,%eax
c010473a:	74 22                	je     c010475e <vsnprintf+0x47>
c010473c:	ff 75 14             	pushl  0x14(%ebp)
c010473f:	ff 75 10             	pushl  0x10(%ebp)
c0104742:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0104745:	50                   	push   %eax
c0104746:	68 99 42 10 c0       	push   $0xc0104299
c010474b:	e8 65 fb ff ff       	call   c01042b5 <vsnprintfmt>
c0104750:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104753:	c6 00 00             	movb   $0x0,(%eax)
c0104756:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104759:	83 c4 10             	add    $0x10,%esp
c010475c:	eb 05                	jmp    c0104763 <vsnprintf+0x4c>
c010475e:	b8 01 00 00 00       	mov    $0x1,%eax
c0104763:	c9                   	leave  
c0104764:	c3                   	ret    

c0104765 <snprintf>:
c0104765:	55                   	push   %ebp
c0104766:	89 e5                	mov    %esp,%ebp
c0104768:	83 ec 08             	sub    $0x8,%esp
c010476b:	8d 45 14             	lea    0x14(%ebp),%eax
c010476e:	50                   	push   %eax
c010476f:	ff 75 10             	pushl  0x10(%ebp)
c0104772:	ff 75 0c             	pushl  0xc(%ebp)
c0104775:	ff 75 08             	pushl  0x8(%ebp)
c0104778:	e8 9a ff ff ff       	call   c0104717 <vsnprintf>
c010477d:	c9                   	leave  
c010477e:	c3                   	ret    

c010477f <sprintf>:
c010477f:	55                   	push   %ebp
c0104780:	89 e5                	mov    %esp,%ebp
c0104782:	83 ec 08             	sub    $0x8,%esp
c0104785:	8d 45 10             	lea    0x10(%ebp),%eax
c0104788:	50                   	push   %eax
c0104789:	ff 75 0c             	pushl  0xc(%ebp)
c010478c:	68 a0 86 01 00       	push   $0x186a0
c0104791:	ff 75 08             	pushl  0x8(%ebp)
c0104794:	e8 7e ff ff ff       	call   c0104717 <vsnprintf>
c0104799:	c9                   	leave  
c010479a:	c3                   	ret    

c010479b <strlen>:
c010479b:	55                   	push   %ebp
c010479c:	89 e5                	mov    %esp,%ebp
c010479e:	8b 55 08             	mov    0x8(%ebp),%edx
c01047a1:	31 c0                	xor    %eax,%eax
c01047a3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
c01047a7:	74 03                	je     c01047ac <strlen+0x11>
c01047a9:	40                   	inc    %eax
c01047aa:	eb f7                	jmp    c01047a3 <strlen+0x8>
c01047ac:	5d                   	pop    %ebp
c01047ad:	c3                   	ret    

c01047ae <strchr>:
c01047ae:	55                   	push   %ebp
c01047af:	89 e5                	mov    %esp,%ebp
c01047b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01047b4:	8a 4d 0c             	mov    0xc(%ebp),%cl
c01047b7:	8a 10                	mov    (%eax),%dl
c01047b9:	38 ca                	cmp    %cl,%dl
c01047bb:	74 09                	je     c01047c6 <strchr+0x18>
c01047bd:	84 d2                	test   %dl,%dl
c01047bf:	74 03                	je     c01047c4 <strchr+0x16>
c01047c1:	40                   	inc    %eax
c01047c2:	eb f3                	jmp    c01047b7 <strchr+0x9>
c01047c4:	31 c0                	xor    %eax,%eax
c01047c6:	5d                   	pop    %ebp
c01047c7:	c3                   	ret    

c01047c8 <strstr>:
c01047c8:	55                   	push   %ebp
c01047c9:	89 e5                	mov    %esp,%ebp
c01047cb:	57                   	push   %edi
c01047cc:	56                   	push   %esi
c01047cd:	53                   	push   %ebx
c01047ce:	8b 55 08             	mov    0x8(%ebp),%edx
c01047d1:	8b 7d 0c             	mov    0xc(%ebp),%edi
c01047d4:	8a 0f                	mov    (%edi),%cl
c01047d6:	84 c9                	test   %cl,%cl
c01047d8:	74 22                	je     c01047fc <strstr+0x34>
c01047da:	8a 02                	mov    (%edx),%al
c01047dc:	84 c0                	test   %al,%al
c01047de:	74 18                	je     c01047f8 <strstr+0x30>
c01047e0:	38 c1                	cmp    %al,%cl
c01047e2:	75 11                	jne    c01047f5 <strstr+0x2d>
c01047e4:	31 f6                	xor    %esi,%esi
c01047e6:	8a 04 37             	mov    (%edi,%esi,1),%al
c01047e9:	84 c0                	test   %al,%al
c01047eb:	74 0f                	je     c01047fc <strstr+0x34>
c01047ed:	8a 1c 32             	mov    (%edx,%esi,1),%bl
c01047f0:	46                   	inc    %esi
c01047f1:	38 d8                	cmp    %bl,%al
c01047f3:	74 f1                	je     c01047e6 <strstr+0x1e>
c01047f5:	42                   	inc    %edx
c01047f6:	eb e2                	jmp    c01047da <strstr+0x12>
c01047f8:	31 c0                	xor    %eax,%eax
c01047fa:	eb 02                	jmp    c01047fe <strstr+0x36>
c01047fc:	89 d0                	mov    %edx,%eax
c01047fe:	5b                   	pop    %ebx
c01047ff:	5e                   	pop    %esi
c0104800:	5f                   	pop    %edi
c0104801:	5d                   	pop    %ebp
c0104802:	c3                   	ret    

c0104803 <strcmp>:
c0104803:	55                   	push   %ebp
c0104804:	89 e5                	mov    %esp,%ebp
c0104806:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0104809:	31 c0                	xor    %eax,%eax
c010480b:	8b 55 08             	mov    0x8(%ebp),%edx
c010480e:	8a 14 02             	mov    (%edx,%eax,1),%dl
c0104811:	3a 14 01             	cmp    (%ecx,%eax,1),%dl
c0104814:	75 09                	jne    c010481f <strcmp+0x1c>
c0104816:	40                   	inc    %eax
c0104817:	84 d2                	test   %dl,%dl
c0104819:	75 f0                	jne    c010480b <strcmp+0x8>
c010481b:	31 c0                	xor    %eax,%eax
c010481d:	eb 05                	jmp    c0104824 <strcmp+0x21>
c010481f:	19 c0                	sbb    %eax,%eax
c0104821:	83 c8 01             	or     $0x1,%eax
c0104824:	5d                   	pop    %ebp
c0104825:	c3                   	ret    

c0104826 <strcpy>:
c0104826:	55                   	push   %ebp
c0104827:	89 e5                	mov    %esp,%ebp
c0104829:	8b 45 08             	mov    0x8(%ebp),%eax
c010482c:	31 d2                	xor    %edx,%edx
c010482e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0104831:	8a 0c 11             	mov    (%ecx,%edx,1),%cl
c0104834:	88 0c 10             	mov    %cl,(%eax,%edx,1)
c0104837:	42                   	inc    %edx
c0104838:	84 c9                	test   %cl,%cl
c010483a:	75 f2                	jne    c010482e <strcpy+0x8>
c010483c:	5d                   	pop    %ebp
c010483d:	c3                   	ret    

c010483e <strcat>:
c010483e:	55                   	push   %ebp
c010483f:	89 e5                	mov    %esp,%ebp
c0104841:	53                   	push   %ebx
c0104842:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104845:	53                   	push   %ebx
c0104846:	e8 50 ff ff ff       	call   c010479b <strlen>
c010484b:	5a                   	pop    %edx
c010484c:	ff 75 0c             	pushl  0xc(%ebp)
c010484f:	01 d8                	add    %ebx,%eax
c0104851:	50                   	push   %eax
c0104852:	e8 cf ff ff ff       	call   c0104826 <strcpy>
c0104857:	89 d8                	mov    %ebx,%eax
c0104859:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010485c:	c9                   	leave  
c010485d:	c3                   	ret    

c010485e <strncmp>:
c010485e:	55                   	push   %ebp
c010485f:	89 e5                	mov    %esp,%ebp
c0104861:	53                   	push   %ebx
c0104862:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0104865:	31 c0                	xor    %eax,%eax
c0104867:	39 45 10             	cmp    %eax,0x10(%ebp)
c010486a:	74 17                	je     c0104883 <strncmp+0x25>
c010486c:	8a 14 01             	mov    (%ecx,%eax,1),%dl
c010486f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0104872:	3a 14 03             	cmp    (%ebx,%eax,1),%dl
c0104875:	74 07                	je     c010487e <strncmp+0x20>
c0104877:	19 c0                	sbb    %eax,%eax
c0104879:	83 c8 01             	or     $0x1,%eax
c010487c:	eb 07                	jmp    c0104885 <strncmp+0x27>
c010487e:	40                   	inc    %eax
c010487f:	84 d2                	test   %dl,%dl
c0104881:	75 e4                	jne    c0104867 <strncmp+0x9>
c0104883:	31 c0                	xor    %eax,%eax
c0104885:	5b                   	pop    %ebx
c0104886:	5d                   	pop    %ebp
c0104887:	c3                   	ret    

c0104888 <strncat>:
c0104888:	55                   	push   %ebp
c0104889:	89 e5                	mov    %esp,%ebp
c010488b:	56                   	push   %esi
c010488c:	53                   	push   %ebx
c010488d:	8b 75 10             	mov    0x10(%ebp),%esi
c0104890:	85 f6                	test   %esi,%esi
c0104892:	74 2c                	je     c01048c0 <strncat+0x38>
c0104894:	8b 55 08             	mov    0x8(%ebp),%edx
c0104897:	80 3a 00             	cmpb   $0x0,(%edx)
c010489a:	74 03                	je     c010489f <strncat+0x17>
c010489c:	42                   	inc    %edx
c010489d:	eb f8                	jmp    c0104897 <strncat+0xf>
c010489f:	31 c9                	xor    %ecx,%ecx
c01048a1:	8d 5a 01             	lea    0x1(%edx),%ebx
c01048a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048a7:	8a 04 08             	mov    (%eax,%ecx,1),%al
c01048aa:	88 43 ff             	mov    %al,-0x1(%ebx)
c01048ad:	84 c0                	test   %al,%al
c01048af:	75 06                	jne    c01048b7 <strncat+0x2f>
c01048b1:	c6 42 01 00          	movb   $0x0,0x1(%edx)
c01048b5:	eb 09                	jmp    c01048c0 <strncat+0x38>
c01048b7:	41                   	inc    %ecx
c01048b8:	39 ce                	cmp    %ecx,%esi
c01048ba:	74 f5                	je     c01048b1 <strncat+0x29>
c01048bc:	89 da                	mov    %ebx,%edx
c01048be:	eb e1                	jmp    c01048a1 <strncat+0x19>
c01048c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01048c3:	5b                   	pop    %ebx
c01048c4:	5e                   	pop    %esi
c01048c5:	5d                   	pop    %ebp
c01048c6:	c3                   	ret    

c01048c7 <strncpy>:
c01048c7:	55                   	push   %ebp
c01048c8:	89 e5                	mov    %esp,%ebp
c01048ca:	57                   	push   %edi
c01048cb:	56                   	push   %esi
c01048cc:	53                   	push   %ebx
c01048cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01048d0:	8b 7d 0c             	mov    0xc(%ebp),%edi
c01048d3:	8b 75 10             	mov    0x10(%ebp),%esi
c01048d6:	8d 56 ff             	lea    -0x1(%esi),%edx
c01048d9:	89 c3                	mov    %eax,%ebx
c01048db:	83 fa ff             	cmp    $0xffffffff,%edx
c01048de:	74 12                	je     c01048f2 <strncpy+0x2b>
c01048e0:	8a 0f                	mov    (%edi),%cl
c01048e2:	8d 72 ff             	lea    -0x1(%edx),%esi
c01048e5:	84 c9                	test   %cl,%cl
c01048e7:	74 09                	je     c01048f2 <strncpy+0x2b>
c01048e9:	43                   	inc    %ebx
c01048ea:	47                   	inc    %edi
c01048eb:	88 4b ff             	mov    %cl,-0x1(%ebx)
c01048ee:	89 f2                	mov    %esi,%edx
c01048f0:	eb e9                	jmp    c01048db <strncpy+0x14>
c01048f2:	31 c9                	xor    %ecx,%ecx
c01048f4:	39 ca                	cmp    %ecx,%edx
c01048f6:	74 07                	je     c01048ff <strncpy+0x38>
c01048f8:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
c01048fc:	41                   	inc    %ecx
c01048fd:	eb f5                	jmp    c01048f4 <strncpy+0x2d>
c01048ff:	5b                   	pop    %ebx
c0104900:	5e                   	pop    %esi
c0104901:	5f                   	pop    %edi
c0104902:	5d                   	pop    %ebp
c0104903:	c3                   	ret    

c0104904 <memcpy>:
c0104904:	55                   	push   %ebp
c0104905:	89 e5                	mov    %esp,%ebp
c0104907:	53                   	push   %ebx
c0104908:	8b 45 08             	mov    0x8(%ebp),%eax
c010490b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010490e:	31 d2                	xor    %edx,%edx
c0104910:	39 55 10             	cmp    %edx,0x10(%ebp)
c0104913:	74 09                	je     c010491e <memcpy+0x1a>
c0104915:	8a 1c 11             	mov    (%ecx,%edx,1),%bl
c0104918:	88 1c 10             	mov    %bl,(%eax,%edx,1)
c010491b:	42                   	inc    %edx
c010491c:	eb f2                	jmp    c0104910 <memcpy+0xc>
c010491e:	5b                   	pop    %ebx
c010491f:	5d                   	pop    %ebp
c0104920:	c3                   	ret    

c0104921 <memmove>:
c0104921:	55                   	push   %ebp
c0104922:	89 e5                	mov    %esp,%ebp
c0104924:	5d                   	pop    %ebp
c0104925:	e9 da ff ff ff       	jmp    c0104904 <memcpy>

c010492a <memset>:
c010492a:	55                   	push   %ebp
c010492b:	89 e5                	mov    %esp,%ebp
c010492d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104930:	8a 4d 0c             	mov    0xc(%ebp),%cl
c0104933:	31 d2                	xor    %edx,%edx
c0104935:	39 55 10             	cmp    %edx,0x10(%ebp)
c0104938:	74 06                	je     c0104940 <memset+0x16>
c010493a:	88 0c 10             	mov    %cl,(%eax,%edx,1)
c010493d:	42                   	inc    %edx
c010493e:	eb f5                	jmp    c0104935 <memset+0xb>
c0104940:	5d                   	pop    %ebp
c0104941:	c3                   	ret    

c0104942 <memsetw>:
c0104942:	55                   	push   %ebp
c0104943:	89 e5                	mov    %esp,%ebp
c0104945:	8b 45 08             	mov    0x8(%ebp),%eax
c0104948:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010494b:	31 d2                	xor    %edx,%edx
c010494d:	39 55 10             	cmp    %edx,0x10(%ebp)
c0104950:	74 07                	je     c0104959 <memsetw+0x17>
c0104952:	66 89 0c 50          	mov    %cx,(%eax,%edx,2)
c0104956:	42                   	inc    %edx
c0104957:	eb f4                	jmp    c010494d <memsetw+0xb>
c0104959:	5d                   	pop    %ebp
c010495a:	c3                   	ret    

c010495b <memcmp>:
c010495b:	55                   	push   %ebp
c010495c:	89 e5                	mov    %esp,%ebp
c010495e:	53                   	push   %ebx
c010495f:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0104962:	31 c0                	xor    %eax,%eax
c0104964:	85 c9                	test   %ecx,%ecx
c0104966:	74 1f                	je     c0104987 <memcmp+0x2c>
c0104968:	31 db                	xor    %ebx,%ebx
c010496a:	8b 45 08             	mov    0x8(%ebp),%eax
c010496d:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
c0104971:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104974:	0f b6 14 1a          	movzbl (%edx,%ebx,1),%edx
c0104978:	38 d0                	cmp    %dl,%al
c010497a:	74 04                	je     c0104980 <memcmp+0x25>
c010497c:	29 d0                	sub    %edx,%eax
c010497e:	eb 07                	jmp    c0104987 <memcmp+0x2c>
c0104980:	43                   	inc    %ebx
c0104981:	39 d9                	cmp    %ebx,%ecx
c0104983:	75 e5                	jne    c010496a <memcmp+0xf>
c0104985:	31 c0                	xor    %eax,%eax
c0104987:	5b                   	pop    %ebx
c0104988:	5d                   	pop    %ebp
c0104989:	c3                   	ret    

c010498a <strdup>:
c010498a:	55                   	push   %ebp
c010498b:	89 e5                	mov    %esp,%ebp
c010498d:	56                   	push   %esi
c010498e:	53                   	push   %ebx
c010498f:	8b 75 08             	mov    0x8(%ebp),%esi
c0104992:	56                   	push   %esi
c0104993:	e8 03 fe ff ff       	call   c010479b <strlen>
c0104998:	52                   	push   %edx
c0104999:	52                   	push   %edx
c010499a:	89 c3                	mov    %eax,%ebx
c010499c:	40                   	inc    %eax
c010499d:	50                   	push   %eax
c010499e:	e8 c9 d3 ff ff       	call   c0101d6c <kmalloc>
c01049a3:	83 c4 10             	add    $0x10,%esp
c01049a6:	31 d2                	xor    %edx,%edx
c01049a8:	39 da                	cmp    %ebx,%edx
c01049aa:	74 09                	je     c01049b5 <strdup+0x2b>
c01049ac:	8a 0c 16             	mov    (%esi,%edx,1),%cl
c01049af:	88 0c 10             	mov    %cl,(%eax,%edx,1)
c01049b2:	42                   	inc    %edx
c01049b3:	eb f3                	jmp    c01049a8 <strdup+0x1e>
c01049b5:	c6 04 10 00          	movb   $0x0,(%eax,%edx,1)
c01049b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01049bc:	5b                   	pop    %ebx
c01049bd:	5e                   	pop    %esi
c01049be:	5d                   	pop    %ebp
c01049bf:	c3                   	ret    

c01049c0 <xorshift128plus>:
c01049c0:	55                   	push   %ebp
c01049c1:	89 e5                	mov    %esp,%ebp
c01049c3:	57                   	push   %edi
c01049c4:	56                   	push   %esi
c01049c5:	53                   	push   %ebx
c01049c6:	83 ec 14             	sub    $0x14,%esp
c01049c9:	a1 40 ca 14 c0       	mov    0xc014ca40,%eax
c01049ce:	8b 15 44 ca 14 c0    	mov    0xc014ca44,%edx
c01049d4:	8b 0d 48 ca 14 c0    	mov    0xc014ca48,%ecx
c01049da:	8b 1d 4c ca 14 c0    	mov    0xc014ca4c,%ebx
c01049e0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01049e3:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c01049e6:	89 0d 40 ca 14 c0    	mov    %ecx,0xc014ca40
c01049ec:	89 1d 44 ca 14 c0    	mov    %ebx,0xc014ca44
c01049f2:	89 c6                	mov    %eax,%esi
c01049f4:	89 d7                	mov    %edx,%edi
c01049f6:	0f a4 f7 17          	shld   $0x17,%esi,%edi
c01049fa:	c1 e6 17             	shl    $0x17,%esi
c01049fd:	89 75 e0             	mov    %esi,-0x20(%ebp)
c0104a00:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c0104a03:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0104a06:	31 c3                	xor    %eax,%ebx
c0104a08:	89 de                	mov    %ebx,%esi
c0104a0a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c0104a0d:	31 d3                	xor    %edx,%ebx
c0104a0f:	89 df                	mov    %ebx,%edi
c0104a11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104a14:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104a17:	0f ac d0 1a          	shrd   $0x1a,%edx,%eax
c0104a1b:	c1 ea 1a             	shr    $0x1a,%edx
c0104a1e:	33 45 e8             	xor    -0x18(%ebp),%eax
c0104a21:	33 55 ec             	xor    -0x14(%ebp),%edx
c0104a24:	31 f0                	xor    %esi,%eax
c0104a26:	89 c1                	mov    %eax,%ecx
c0104a28:	31 da                	xor    %ebx,%edx
c0104a2a:	89 d3                	mov    %edx,%ebx
c0104a2c:	0f ac fe 11          	shrd   $0x11,%edi,%esi
c0104a30:	c1 ef 11             	shr    $0x11,%edi
c0104a33:	31 f1                	xor    %esi,%ecx
c0104a35:	89 c8                	mov    %ecx,%eax
c0104a37:	31 fb                	xor    %edi,%ebx
c0104a39:	89 da                	mov    %ebx,%edx
c0104a3b:	89 0d 48 ca 14 c0    	mov    %ecx,0xc014ca48
c0104a41:	89 1d 4c ca 14 c0    	mov    %ebx,0xc014ca4c
c0104a47:	03 45 e8             	add    -0x18(%ebp),%eax
c0104a4a:	13 55 ec             	adc    -0x14(%ebp),%edx
c0104a4d:	83 c4 14             	add    $0x14,%esp
c0104a50:	5b                   	pop    %ebx
c0104a51:	5e                   	pop    %esi
c0104a52:	5f                   	pop    %edi
c0104a53:	5d                   	pop    %ebp
c0104a54:	c3                   	ret    

c0104a55 <xorshift1024star>:
c0104a55:	55                   	push   %ebp
c0104a56:	89 e5                	mov    %esp,%ebp
c0104a58:	57                   	push   %edi
c0104a59:	56                   	push   %esi
c0104a5a:	53                   	push   %ebx
c0104a5b:	83 ec 14             	sub    $0x14,%esp
c0104a5e:	8b 35 a0 c9 14 c0    	mov    0xc014c9a0,%esi
c0104a64:	8b 04 f5 c0 c9 14 c0 	mov    -0x3feb3640(,%esi,8),%eax
c0104a6b:	8b 14 f5 c4 c9 14 c0 	mov    -0x3feb363c(,%esi,8),%edx
c0104a72:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104a75:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0104a78:	46                   	inc    %esi
c0104a79:	83 e6 0f             	and    $0xf,%esi
c0104a7c:	89 35 a0 c9 14 c0    	mov    %esi,0xc014c9a0
c0104a82:	8b 0c f5 c0 c9 14 c0 	mov    -0x3feb3640(,%esi,8),%ecx
c0104a89:	8b 1c f5 c4 c9 14 c0 	mov    -0x3feb363c(,%esi,8),%ebx
c0104a90:	0f a4 cb 1f          	shld   $0x1f,%ecx,%ebx
c0104a94:	c1 e1 1f             	shl    $0x1f,%ecx
c0104a97:	8b 3c f5 c0 c9 14 c0 	mov    -0x3feb3640(,%esi,8),%edi
c0104a9e:	31 cf                	xor    %ecx,%edi
c0104aa0:	89 f8                	mov    %edi,%eax
c0104aa2:	33 1c f5 c4 c9 14 c0 	xor    -0x3feb363c(,%esi,8),%ebx
c0104aa9:	89 da                	mov    %ebx,%edx
c0104aab:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0104aae:	8b 5d ec             	mov    -0x14(%ebp),%ebx
c0104ab1:	0f ac d9 1e          	shrd   $0x1e,%ebx,%ecx
c0104ab5:	c1 eb 1e             	shr    $0x1e,%ebx
c0104ab8:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0104abb:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
c0104abe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104ac1:	33 4d e8             	xor    -0x18(%ebp),%ecx
c0104ac4:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0104ac7:	33 7d e4             	xor    -0x1c(%ebp),%edi
c0104aca:	31 c1                	xor    %eax,%ecx
c0104acc:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0104acf:	31 d7                	xor    %edx,%edi
c0104ad1:	0f ac d0 0b          	shrd   $0xb,%edx,%eax
c0104ad5:	c1 ea 0b             	shr    $0xb,%edx
c0104ad8:	89 c1                	mov    %eax,%ecx
c0104ada:	89 d3                	mov    %edx,%ebx
c0104adc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104adf:	31 ca                	xor    %ecx,%edx
c0104ae1:	31 df                	xor    %ebx,%edi
c0104ae3:	89 14 f5 c0 c9 14 c0 	mov    %edx,-0x3feb3640(,%esi,8)
c0104aea:	89 3c f5 c4 c9 14 c0 	mov    %edi,-0x3feb363c(,%esi,8)
c0104af1:	69 ff b5 fd 97 54    	imul   $0x5497fdb5,%edi,%edi
c0104af7:	69 c2 d4 89 66 10    	imul   $0x106689d4,%edx,%eax
c0104afd:	01 c7                	add    %eax,%edi
c0104aff:	b8 b5 fd 97 54       	mov    $0x5497fdb5,%eax
c0104b04:	f7 e2                	mul    %edx
c0104b06:	01 fa                	add    %edi,%edx
c0104b08:	83 c4 14             	add    $0x14,%esp
c0104b0b:	5b                   	pop    %ebx
c0104b0c:	5e                   	pop    %esi
c0104b0d:	5f                   	pop    %edi
c0104b0e:	5d                   	pop    %ebp
c0104b0f:	c3                   	ret    

c0104b10 <random>:
c0104b10:	55                   	push   %ebp
c0104b11:	89 e5                	mov    %esp,%ebp
c0104b13:	5d                   	pop    %ebp
c0104b14:	e9 3c ff ff ff       	jmp    c0104a55 <xorshift1024star>

c0104b19 <init_rand>:
c0104b19:	55                   	push   %ebp
c0104b1a:	89 e5                	mov    %esp,%ebp
c0104b1c:	56                   	push   %esi
c0104b1d:	53                   	push   %ebx
c0104b1e:	0f 31                	rdtsc  
c0104b20:	89 c1                	mov    %eax,%ecx
c0104b22:	89 d0                	mov    %edx,%eax
c0104b24:	89 0d 40 ca 14 c0    	mov    %ecx,0xc014ca40
c0104b2a:	89 1d 44 ca 14 c0    	mov    %ebx,0xc014ca44
c0104b30:	a3 48 ca 14 c0       	mov    %eax,0xc014ca48
c0104b35:	89 15 4c ca 14 c0    	mov    %edx,0xc014ca4c
c0104b3b:	e8 80 fe ff ff       	call   c01049c0 <xorshift128plus>
c0104b40:	a8 3f                	test   $0x3f,%al
c0104b42:	75 f7                	jne    c0104b3b <init_rand+0x22>
c0104b44:	31 db                	xor    %ebx,%ebx
c0104b46:	e8 75 fe ff ff       	call   c01049c0 <xorshift128plus>
c0104b4b:	89 83 c0 c9 14 c0    	mov    %eax,-0x3feb3640(%ebx)
c0104b51:	89 93 c4 c9 14 c0    	mov    %edx,-0x3feb363c(%ebx)
c0104b57:	83 c3 08             	add    $0x8,%ebx
c0104b5a:	81 fb 80 00 00 00    	cmp    $0x80,%ebx
c0104b60:	75 e4                	jne    c0104b46 <init_rand+0x2d>
c0104b62:	e8 ee fe ff ff       	call   c0104a55 <xorshift1024star>
c0104b67:	a8 3f                	test   $0x3f,%al
c0104b69:	74 40                	je     c0104bab <init_rand+0x92>
c0104b6b:	e8 e5 fe ff ff       	call   c0104a55 <xorshift1024star>
c0104b70:	89 c3                	mov    %eax,%ebx
c0104b72:	89 d6                	mov    %edx,%esi
c0104b74:	e8 dc fe ff ff       	call   c0104a55 <xorshift1024star>
c0104b79:	39 d6                	cmp    %edx,%esi
c0104b7b:	75 e5                	jne    c0104b62 <init_rand+0x49>
c0104b7d:	39 c3                	cmp    %eax,%ebx
c0104b7f:	75 e1                	jne    c0104b62 <init_rand+0x49>
c0104b81:	83 ec 0c             	sub    $0xc,%esp
c0104b84:	68 d0 0e 11 c0       	push   $0xc0110ed0
c0104b89:	6a 34                	push   $0x34
c0104b8b:	68 ac 0e 11 c0       	push   $0xc0110eac
c0104b90:	68 b9 0e 11 c0       	push   $0xc0110eb9
c0104b95:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104b9a:	e8 c9 f6 ff ff       	call   c0104268 <print>
c0104b9f:	83 c4 20             	add    $0x20,%esp
c0104ba2:	e8 dc c3 ff ff       	call   c0100f83 <backtrace>
c0104ba7:	fa                   	cli    
c0104ba8:	f4                   	hlt    
c0104ba9:	eb b7                	jmp    c0104b62 <init_rand+0x49>
c0104bab:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0104bae:	5b                   	pop    %ebx
c0104baf:	5e                   	pop    %esi
c0104bb0:	5d                   	pop    %ebp
c0104bb1:	c3                   	ret    

c0104bb2 <msec2time>:
c0104bb2:	55                   	push   %ebp
c0104bb3:	89 e5                	mov    %esp,%ebp
c0104bb5:	57                   	push   %edi
c0104bb6:	56                   	push   %esi
c0104bb7:	53                   	push   %ebx
c0104bb8:	83 ec 08             	sub    $0x8,%esp
c0104bbb:	89 c3                	mov    %eax,%ebx
c0104bbd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0104bc0:	be e8 03 00 00       	mov    $0x3e8,%esi
c0104bc5:	89 d0                	mov    %edx,%eax
c0104bc7:	31 d2                	xor    %edx,%edx
c0104bc9:	f7 f6                	div    %esi
c0104bcb:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0104bce:	85 c0                	test   %eax,%eax
c0104bd0:	74 2f                	je     c0104c01 <msec2time+0x4f>
c0104bd2:	b9 3c 00 00 00       	mov    $0x3c,%ecx
c0104bd7:	31 d2                	xor    %edx,%edx
c0104bd9:	f7 f1                	div    %ecx
c0104bdb:	89 d6                	mov    %edx,%esi
c0104bdd:	bf 60 ea 00 00       	mov    $0xea60,%edi
c0104be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104be5:	31 d2                	xor    %edx,%edx
c0104be7:	f7 f7                	div    %edi
c0104be9:	85 c0                	test   %eax,%eax
c0104beb:	74 1c                	je     c0104c09 <msec2time+0x57>
c0104bed:	31 d2                	xor    %edx,%edx
c0104bef:	f7 f1                	div    %ecx
c0104bf1:	89 d7                	mov    %edx,%edi
c0104bf3:	b9 80 ee 36 00       	mov    $0x36ee80,%ecx
c0104bf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bfb:	31 d2                	xor    %edx,%edx
c0104bfd:	f7 f1                	div    %ecx
c0104bff:	eb 0c                	jmp    c0104c0d <msec2time+0x5b>
c0104c01:	31 c0                	xor    %eax,%eax
c0104c03:	31 ff                	xor    %edi,%edi
c0104c05:	31 f6                	xor    %esi,%esi
c0104c07:	eb 04                	jmp    c0104c0d <msec2time+0x5b>
c0104c09:	31 c0                	xor    %eax,%eax
c0104c0b:	31 ff                	xor    %edi,%edi
c0104c0d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0104c10:	89 0b                	mov    %ecx,(%ebx)
c0104c12:	89 73 04             	mov    %esi,0x4(%ebx)
c0104c15:	89 7b 08             	mov    %edi,0x8(%ebx)
c0104c18:	89 43 0c             	mov    %eax,0xc(%ebx)
c0104c1b:	89 d8                	mov    %ebx,%eax
c0104c1d:	5a                   	pop    %edx
c0104c1e:	59                   	pop    %ecx
c0104c1f:	5b                   	pop    %ebx
c0104c20:	5e                   	pop    %esi
c0104c21:	5f                   	pop    %edi
c0104c22:	5d                   	pop    %ebp
c0104c23:	c3                   	ret    

c0104c24 <timer_create>:
c0104c24:	55                   	push   %ebp
c0104c25:	89 e5                	mov    %esp,%ebp
c0104c27:	53                   	push   %ebx
c0104c28:	50                   	push   %eax
c0104c29:	31 db                	xor    %ebx,%ebx
c0104c2b:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104c32:	00 
c0104c33:	75 18                	jne    c0104c4d <timer_create+0x29>
c0104c35:	83 ec 0c             	sub    $0xc,%esp
c0104c38:	6a 0c                	push   $0xc
c0104c3a:	e8 2d d1 ff ff       	call   c0101d6c <kmalloc>
c0104c3f:	89 04 9d 60 ca 14 c0 	mov    %eax,-0x3feb35a0(,%ebx,4)
c0104c46:	83 c4 10             	add    $0x10,%esp
c0104c49:	89 d8                	mov    %ebx,%eax
c0104c4b:	eb 0e                	jmp    c0104c5b <timer_create+0x37>
c0104c4d:	43                   	inc    %ebx
c0104c4e:	81 fb 80 00 00 00    	cmp    $0x80,%ebx
c0104c54:	75 d5                	jne    c0104c2b <timer_create+0x7>
c0104c56:	b8 09 00 00 00       	mov    $0x9,%eax
c0104c5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104c5e:	c9                   	leave  
c0104c5f:	c3                   	ret    

c0104c60 <timer_start>:
c0104c60:	55                   	push   %ebp
c0104c61:	89 e5                	mov    %esp,%ebp
c0104c63:	53                   	push   %ebx
c0104c64:	50                   	push   %eax
c0104c65:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104c68:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104c6f:	00 
c0104c70:	75 28                	jne    c0104c9a <timer_start+0x3a>
c0104c72:	83 ec 0c             	sub    $0xc,%esp
c0104c75:	68 68 0f 11 c0       	push   $0xc0110f68
c0104c7a:	6a 34                	push   $0x34
c0104c7c:	68 da 0e 11 c0       	push   $0xc0110eda
c0104c81:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104c86:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104c8b:	e8 d8 f5 ff ff       	call   c0104268 <print>
c0104c90:	83 c4 20             	add    $0x20,%esp
c0104c93:	e8 eb c2 ff ff       	call   c0100f83 <backtrace>
c0104c98:	fa                   	cli    
c0104c99:	f4                   	hlt    
c0104c9a:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104ca1:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
c0104ca5:	74 28                	je     c0104ccf <timer_start+0x6f>
c0104ca7:	83 ec 0c             	sub    $0xc,%esp
c0104caa:	68 68 0f 11 c0       	push   $0xc0110f68
c0104caf:	6a 35                	push   $0x35
c0104cb1:	68 da 0e 11 c0       	push   $0xc0110eda
c0104cb6:	68 fe 0e 11 c0       	push   $0xc0110efe
c0104cbb:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104cc0:	e8 a3 f5 ff ff       	call   c0104268 <print>
c0104cc5:	83 c4 20             	add    $0x20,%esp
c0104cc8:	e8 b6 c2 ff ff       	call   c0100f83 <backtrace>
c0104ccd:	fa                   	cli    
c0104cce:	f4                   	hlt    
c0104ccf:	8b 1c 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%ebx
c0104cd6:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
c0104cda:	e8 c2 de ff ff       	call   c0102ba1 <pit_ticks>
c0104cdf:	89 03                	mov    %eax,(%ebx)
c0104ce1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104ce4:	c9                   	leave  
c0104ce5:	c3                   	ret    

c0104ce6 <timer_lap>:
c0104ce6:	55                   	push   %ebp
c0104ce7:	89 e5                	mov    %esp,%ebp
c0104ce9:	53                   	push   %ebx
c0104cea:	50                   	push   %eax
c0104ceb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0104cee:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104cf5:	00 
c0104cf6:	75 28                	jne    c0104d20 <timer_lap+0x3a>
c0104cf8:	83 ec 0c             	sub    $0xc,%esp
c0104cfb:	68 5c 0f 11 c0       	push   $0xc0110f5c
c0104d00:	6a 3d                	push   $0x3d
c0104d02:	68 da 0e 11 c0       	push   $0xc0110eda
c0104d07:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104d0c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104d11:	e8 52 f5 ff ff       	call   c0104268 <print>
c0104d16:	83 c4 20             	add    $0x20,%esp
c0104d19:	e8 65 c2 ff ff       	call   c0100f83 <backtrace>
c0104d1e:	fa                   	cli    
c0104d1f:	f4                   	hlt    
c0104d20:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104d27:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
c0104d2b:	75 28                	jne    c0104d55 <timer_lap+0x6f>
c0104d2d:	83 ec 0c             	sub    $0xc,%esp
c0104d30:	68 5c 0f 11 c0       	push   $0xc0110f5c
c0104d35:	6a 3e                	push   $0x3e
c0104d37:	68 da 0e 11 c0       	push   $0xc0110eda
c0104d3c:	68 ff 0e 11 c0       	push   $0xc0110eff
c0104d41:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104d46:	e8 1d f5 ff ff       	call   c0104268 <print>
c0104d4b:	83 c4 20             	add    $0x20,%esp
c0104d4e:	e8 30 c2 ff ff       	call   c0100f83 <backtrace>
c0104d53:	fa                   	cli    
c0104d54:	f4                   	hlt    
c0104d55:	e8 47 de ff ff       	call   c0102ba1 <pit_ticks>
c0104d5a:	8b 14 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%edx
c0104d61:	2b 02                	sub    (%edx),%eax
c0104d63:	89 c2                	mov    %eax,%edx
c0104d65:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d68:	e8 45 fe ff ff       	call   c0104bb2 <msec2time>
c0104d6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104d73:	c9                   	leave  
c0104d74:	c2 04 00             	ret    $0x4

c0104d77 <timer_stop>:
c0104d77:	55                   	push   %ebp
c0104d78:	89 e5                	mov    %esp,%ebp
c0104d7a:	56                   	push   %esi
c0104d7b:	53                   	push   %ebx
c0104d7c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0104d7f:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104d86:	00 
c0104d87:	75 28                	jne    c0104db1 <timer_stop+0x3a>
c0104d89:	83 ec 0c             	sub    $0xc,%esp
c0104d8c:	68 50 0f 11 c0       	push   $0xc0110f50
c0104d91:	6a 48                	push   $0x48
c0104d93:	68 da 0e 11 c0       	push   $0xc0110eda
c0104d98:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104d9d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104da2:	e8 c1 f4 ff ff       	call   c0104268 <print>
c0104da7:	83 c4 20             	add    $0x20,%esp
c0104daa:	e8 d4 c1 ff ff       	call   c0100f83 <backtrace>
c0104daf:	fa                   	cli    
c0104db0:	f4                   	hlt    
c0104db1:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104db8:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
c0104dbc:	75 28                	jne    c0104de6 <timer_stop+0x6f>
c0104dbe:	83 ec 0c             	sub    $0xc,%esp
c0104dc1:	68 50 0f 11 c0       	push   $0xc0110f50
c0104dc6:	6a 49                	push   $0x49
c0104dc8:	68 da 0e 11 c0       	push   $0xc0110eda
c0104dcd:	68 ff 0e 11 c0       	push   $0xc0110eff
c0104dd2:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104dd7:	e8 8c f4 ff ff       	call   c0104268 <print>
c0104ddc:	83 c4 20             	add    $0x20,%esp
c0104ddf:	e8 9f c1 ff ff       	call   c0100f83 <backtrace>
c0104de4:	fa                   	cli    
c0104de5:	f4                   	hlt    
c0104de6:	8b 34 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%esi
c0104ded:	e8 af dd ff ff       	call   c0102ba1 <pit_ticks>
c0104df2:	89 46 04             	mov    %eax,0x4(%esi)
c0104df5:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104dfc:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c0104e00:	8b 50 04             	mov    0x4(%eax),%edx
c0104e03:	2b 10                	sub    (%eax),%edx
c0104e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e08:	e8 a5 fd ff ff       	call   c0104bb2 <msec2time>
c0104e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e10:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0104e13:	5b                   	pop    %ebx
c0104e14:	5e                   	pop    %esi
c0104e15:	5d                   	pop    %ebp
c0104e16:	c2 04 00             	ret    $0x4

c0104e19 <timer_resume>:
c0104e19:	55                   	push   %ebp
c0104e1a:	89 e5                	mov    %esp,%ebp
c0104e1c:	53                   	push   %ebx
c0104e1d:	50                   	push   %eax
c0104e1e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104e21:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104e28:	00 
c0104e29:	75 28                	jne    c0104e53 <timer_resume+0x3a>
c0104e2b:	83 ec 0c             	sub    $0xc,%esp
c0104e2e:	68 40 0f 11 c0       	push   $0xc0110f40
c0104e33:	6a 54                	push   $0x54
c0104e35:	68 da 0e 11 c0       	push   $0xc0110eda
c0104e3a:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104e3f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104e44:	e8 1f f4 ff ff       	call   c0104268 <print>
c0104e49:	83 c4 20             	add    $0x20,%esp
c0104e4c:	e8 32 c1 ff ff       	call   c0100f83 <backtrace>
c0104e51:	fa                   	cli    
c0104e52:	f4                   	hlt    
c0104e53:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104e5a:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
c0104e5e:	74 28                	je     c0104e88 <timer_resume+0x6f>
c0104e60:	83 ec 0c             	sub    $0xc,%esp
c0104e63:	68 40 0f 11 c0       	push   $0xc0110f40
c0104e68:	6a 55                	push   $0x55
c0104e6a:	68 da 0e 11 c0       	push   $0xc0110eda
c0104e6f:	68 fe 0e 11 c0       	push   $0xc0110efe
c0104e74:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104e79:	e8 ea f3 ff ff       	call   c0104268 <print>
c0104e7e:	83 c4 20             	add    $0x20,%esp
c0104e81:	e8 fd c0 ff ff       	call   c0100f83 <backtrace>
c0104e86:	fa                   	cli    
c0104e87:	f4                   	hlt    
c0104e88:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104e8f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
c0104e93:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104e96:	c9                   	leave  
c0104e97:	c3                   	ret    

c0104e98 <timer_reset>:
c0104e98:	55                   	push   %ebp
c0104e99:	89 e5                	mov    %esp,%ebp
c0104e9b:	53                   	push   %ebx
c0104e9c:	50                   	push   %eax
c0104e9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104ea0:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104ea7:	00 
c0104ea8:	75 28                	jne    c0104ed2 <timer_reset+0x3a>
c0104eaa:	83 ec 0c             	sub    $0xc,%esp
c0104ead:	68 34 0f 11 c0       	push   $0xc0110f34
c0104eb2:	6a 5c                	push   $0x5c
c0104eb4:	68 da 0e 11 c0       	push   $0xc0110eda
c0104eb9:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104ebe:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104ec3:	e8 a0 f3 ff ff       	call   c0104268 <print>
c0104ec8:	83 c4 20             	add    $0x20,%esp
c0104ecb:	e8 b3 c0 ff ff       	call   c0100f83 <backtrace>
c0104ed0:	fa                   	cli    
c0104ed1:	f4                   	hlt    
c0104ed2:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104ed9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0104edf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0104ee6:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c0104eea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104eed:	c9                   	leave  
c0104eee:	c3                   	ret    

c0104eef <timer_delete>:
c0104eef:	55                   	push   %ebp
c0104ef0:	89 e5                	mov    %esp,%ebp
c0104ef2:	53                   	push   %ebx
c0104ef3:	50                   	push   %eax
c0104ef4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104ef7:	83 3c 9d 60 ca 14 c0 	cmpl   $0x0,-0x3feb35a0(,%ebx,4)
c0104efe:	00 
c0104eff:	75 28                	jne    c0104f29 <timer_delete+0x3a>
c0104f01:	83 ec 0c             	sub    $0xc,%esp
c0104f04:	68 24 0f 11 c0       	push   $0xc0110f24
c0104f09:	6a 65                	push   $0x65
c0104f0b:	68 da 0e 11 c0       	push   $0xc0110eda
c0104f10:	68 e5 0e 11 c0       	push   $0xc0110ee5
c0104f15:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104f1a:	e8 49 f3 ff ff       	call   c0104268 <print>
c0104f1f:	83 c4 20             	add    $0x20,%esp
c0104f22:	e8 5c c0 ff ff       	call   c0100f83 <backtrace>
c0104f27:	fa                   	cli    
c0104f28:	f4                   	hlt    
c0104f29:	8b 04 9d 60 ca 14 c0 	mov    -0x3feb35a0(,%ebx,4),%eax
c0104f30:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
c0104f34:	74 28                	je     c0104f5e <timer_delete+0x6f>
c0104f36:	83 ec 0c             	sub    $0xc,%esp
c0104f39:	68 24 0f 11 c0       	push   $0xc0110f24
c0104f3e:	6a 66                	push   $0x66
c0104f40:	68 da 0e 11 c0       	push   $0xc0110eda
c0104f45:	68 fe 0e 11 c0       	push   $0xc0110efe
c0104f4a:	68 2b ff 10 c0       	push   $0xc010ff2b
c0104f4f:	e8 14 f3 ff ff       	call   c0104268 <print>
c0104f54:	83 c4 20             	add    $0x20,%esp
c0104f57:	e8 27 c0 ff ff       	call   c0100f83 <backtrace>
c0104f5c:	fa                   	cli    
c0104f5d:	f4                   	hlt    
c0104f5e:	83 ec 0c             	sub    $0xc,%esp
c0104f61:	ff 34 9d 60 ca 14 c0 	pushl  -0x3feb35a0(,%ebx,4)
c0104f68:	e8 ff ce ff ff       	call   c0101e6c <kfree>
c0104f6d:	c7 04 9d 60 ca 14 c0 	movl   $0x0,-0x3feb35a0(,%ebx,4)
c0104f74:	00 00 00 00 
c0104f78:	83 c4 10             	add    $0x10,%esp
c0104f7b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104f7e:	c9                   	leave  
c0104f7f:	c3                   	ret    

c0104f80 <print_time>:
c0104f80:	55                   	push   %ebp
c0104f81:	89 e5                	mov    %esp,%ebp
c0104f83:	57                   	push   %edi
c0104f84:	56                   	push   %esi
c0104f85:	53                   	push   %ebx
c0104f86:	83 ec 3c             	sub    $0x3c,%esp
c0104f89:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104f8c:	8b 75 0c             	mov    0xc(%ebp),%esi
c0104f8f:	8b 55 10             	mov    0x10(%ebp),%edx
c0104f92:	8b 45 14             	mov    0x14(%ebp),%eax
c0104f95:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0104f98:	8d 7d c8             	lea    -0x38(%ebp),%edi
c0104f9b:	b9 08 00 00 00       	mov    $0x8,%ecx
c0104fa0:	31 c0                	xor    %eax,%eax
c0104fa2:	f3 ab                	rep stos %eax,%es:(%edi)
c0104fa4:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0104fa8:	8d 7d c8             	lea    -0x38(%ebp),%edi
c0104fab:	74 0e                	je     c0104fbb <print_time+0x3b>
c0104fad:	50                   	push   %eax
c0104fae:	53                   	push   %ebx
c0104faf:	56                   	push   %esi
c0104fb0:	52                   	push   %edx
c0104fb1:	ff 75 c4             	pushl  -0x3c(%ebp)
c0104fb4:	68 18 0f 11 c0       	push   $0xc0110f18
c0104fb9:	eb 1a                	jmp    c0104fd5 <print_time+0x55>
c0104fbb:	85 d2                	test   %edx,%edx
c0104fbd:	74 0c                	je     c0104fcb <print_time+0x4b>
c0104fbf:	51                   	push   %ecx
c0104fc0:	51                   	push   %ecx
c0104fc1:	53                   	push   %ebx
c0104fc2:	56                   	push   %esi
c0104fc3:	52                   	push   %edx
c0104fc4:	68 1b 0f 11 c0       	push   $0xc0110f1b
c0104fc9:	eb 0a                	jmp    c0104fd5 <print_time+0x55>
c0104fcb:	83 ec 0c             	sub    $0xc,%esp
c0104fce:	53                   	push   %ebx
c0104fcf:	56                   	push   %esi
c0104fd0:	68 1e 0f 11 c0       	push   $0xc0110f1e
c0104fd5:	6a 20                	push   $0x20
c0104fd7:	57                   	push   %edi
c0104fd8:	e8 88 f7 ff ff       	call   c0104765 <snprintf>
c0104fdd:	83 c4 20             	add    $0x20,%esp
c0104fe0:	50                   	push   %eax
c0104fe1:	50                   	push   %eax
c0104fe2:	57                   	push   %edi
c0104fe3:	68 47 23 11 c0       	push   $0xc0112347
c0104fe8:	e8 7b f2 ff ff       	call   c0104268 <print>
c0104fed:	83 c4 10             	add    $0x10,%esp
c0104ff0:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0104ff3:	5b                   	pop    %ebx
c0104ff4:	5e                   	pop    %esi
c0104ff5:	5f                   	pop    %edi
c0104ff6:	5d                   	pop    %ebp
c0104ff7:	c3                   	ret    

c0104ff8 <time_diff>:
c0104ff8:	55                   	push   %ebp
c0104ff9:	89 e5                	mov    %esp,%ebp
c0104ffb:	53                   	push   %ebx
c0104ffc:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0104fff:	6b 45 18 3c          	imul   $0x3c,0x18(%ebp),%eax
c0105003:	03 45 14             	add    0x14(%ebp),%eax
c0105006:	6b c0 3c             	imul   $0x3c,%eax,%eax
c0105009:	03 45 10             	add    0x10(%ebp),%eax
c010500c:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c0105012:	03 45 0c             	add    0xc(%ebp),%eax
c0105015:	6b 55 28 3c          	imul   $0x3c,0x28(%ebp),%edx
c0105019:	03 55 24             	add    0x24(%ebp),%edx
c010501c:	6b d2 3c             	imul   $0x3c,%edx,%edx
c010501f:	03 55 20             	add    0x20(%ebp),%edx
c0105022:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
c0105028:	03 55 1c             	add    0x1c(%ebp),%edx
c010502b:	39 c2                	cmp    %eax,%edx
c010502d:	76 04                	jbe    c0105033 <time_diff+0x3b>
c010502f:	29 c2                	sub    %eax,%edx
c0105031:	eb 04                	jmp    c0105037 <time_diff+0x3f>
c0105033:	29 d0                	sub    %edx,%eax
c0105035:	89 c2                	mov    %eax,%edx
c0105037:	89 d8                	mov    %ebx,%eax
c0105039:	e8 74 fb ff ff       	call   c0104bb2 <msec2time>
c010503e:	89 d8                	mov    %ebx,%eax
c0105040:	5b                   	pop    %ebx
c0105041:	5d                   	pop    %ebp
c0105042:	c2 04 00             	ret    $0x4

c0105045 <atoi>:
c0105045:	55                   	push   %ebp
c0105046:	89 e5                	mov    %esp,%ebp
c0105048:	57                   	push   %edi
c0105049:	56                   	push   %esi
c010504a:	53                   	push   %ebx
c010504b:	83 ec 0c             	sub    $0xc,%esp
c010504e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105051:	8a 03                	mov    (%ebx),%al
c0105053:	3c 09                	cmp    $0x9,%al
c0105055:	75 03                	jne    c010505a <atoi+0x15>
c0105057:	43                   	inc    %ebx
c0105058:	eb f7                	jmp    c0105051 <atoi+0xc>
c010505a:	3c 20                	cmp    $0x20,%al
c010505c:	74 f9                	je     c0105057 <atoi+0x12>
c010505e:	3c 2d                	cmp    $0x2d,%al
c0105060:	75 08                	jne    c010506a <atoi+0x25>
c0105062:	43                   	inc    %ebx
c0105063:	bf 01 00 00 00       	mov    $0x1,%edi
c0105068:	eb 0c                	jmp    c0105076 <atoi+0x31>
c010506a:	31 ff                	xor    %edi,%edi
c010506c:	3c 2b                	cmp    $0x2b,%al
c010506e:	0f 94 c0             	sete   %al
c0105071:	0f b6 c0             	movzbl %al,%eax
c0105074:	01 c3                	add    %eax,%ebx
c0105076:	31 f6                	xor    %esi,%esi
c0105078:	0f be 03             	movsbl (%ebx),%eax
c010507b:	84 c0                	test   %al,%al
c010507d:	74 14                	je     c0105093 <atoi+0x4e>
c010507f:	52                   	push   %edx
c0105080:	52                   	push   %edx
c0105081:	50                   	push   %eax
c0105082:	68 74 0f 11 c0       	push   $0xc0110f74
c0105087:	e8 22 f7 ff ff       	call   c01047ae <strchr>
c010508c:	83 c4 10             	add    $0x10,%esp
c010508f:	85 c0                	test   %eax,%eax
c0105091:	75 0e                	jne    c01050a1 <atoi+0x5c>
c0105093:	89 f0                	mov    %esi,%eax
c0105095:	f7 d8                	neg    %eax
c0105097:	89 fa                	mov    %edi,%edx
c0105099:	84 d2                	test   %dl,%dl
c010509b:	75 11                	jne    c01050ae <atoi+0x69>
c010509d:	89 f0                	mov    %esi,%eax
c010509f:	eb 0d                	jmp    c01050ae <atoi+0x69>
c01050a1:	6b f6 0a             	imul   $0xa,%esi,%esi
c01050a4:	2d 74 0f 11 c0       	sub    $0xc0110f74,%eax
c01050a9:	01 c6                	add    %eax,%esi
c01050ab:	43                   	inc    %ebx
c01050ac:	eb ca                	jmp    c0105078 <atoi+0x33>
c01050ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01050b1:	5b                   	pop    %ebx
c01050b2:	5e                   	pop    %esi
c01050b3:	5f                   	pop    %edi
c01050b4:	5d                   	pop    %ebp
c01050b5:	c3                   	ret    

c01050b6 <array_num>:
c01050b6:	55                   	push   %ebp
c01050b7:	89 e5                	mov    %esp,%ebp
c01050b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01050bc:	8b 40 04             	mov    0x4(%eax),%eax
c01050bf:	5d                   	pop    %ebp
c01050c0:	c3                   	ret    

c01050c1 <array_get>:
c01050c1:	55                   	push   %ebp
c01050c2:	89 e5                	mov    %esp,%ebp
c01050c4:	56                   	push   %esi
c01050c5:	53                   	push   %ebx
c01050c6:	8b 75 08             	mov    0x8(%ebp),%esi
c01050c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c01050cc:	39 5e 04             	cmp    %ebx,0x4(%esi)
c01050cf:	77 28                	ja     c01050f9 <array_get+0x38>
c01050d1:	83 ec 0c             	sub    $0xc,%esp
c01050d4:	68 e4 0f 11 c0       	push   $0xc0110fe4
c01050d9:	6a 0d                	push   $0xd
c01050db:	68 7f 0f 11 c0       	push   $0xc0110f7f
c01050e0:	68 8b 0f 11 c0       	push   $0xc0110f8b
c01050e5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01050ea:	e8 79 f1 ff ff       	call   c0104268 <print>
c01050ef:	83 c4 20             	add    $0x20,%esp
c01050f2:	e8 8c be ff ff       	call   c0100f83 <backtrace>
c01050f7:	fa                   	cli    
c01050f8:	f4                   	hlt    
c01050f9:	8b 06                	mov    (%esi),%eax
c01050fb:	8b 04 98             	mov    (%eax,%ebx,4),%eax
c01050fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105101:	5b                   	pop    %ebx
c0105102:	5e                   	pop    %esi
c0105103:	5d                   	pop    %ebp
c0105104:	c3                   	ret    

c0105105 <array_set>:
c0105105:	55                   	push   %ebp
c0105106:	89 e5                	mov    %esp,%ebp
c0105108:	56                   	push   %esi
c0105109:	53                   	push   %ebx
c010510a:	8b 75 08             	mov    0x8(%ebp),%esi
c010510d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0105110:	39 5e 04             	cmp    %ebx,0x4(%esi)
c0105113:	77 28                	ja     c010513d <array_set+0x38>
c0105115:	83 ec 0c             	sub    $0xc,%esp
c0105118:	68 d8 0f 11 c0       	push   $0xc0110fd8
c010511d:	6a 13                	push   $0x13
c010511f:	68 7f 0f 11 c0       	push   $0xc0110f7f
c0105124:	68 8b 0f 11 c0       	push   $0xc0110f8b
c0105129:	68 2b ff 10 c0       	push   $0xc010ff2b
c010512e:	e8 35 f1 ff ff       	call   c0104268 <print>
c0105133:	83 c4 20             	add    $0x20,%esp
c0105136:	e8 48 be ff ff       	call   c0100f83 <backtrace>
c010513b:	fa                   	cli    
c010513c:	f4                   	hlt    
c010513d:	8b 06                	mov    (%esi),%eax
c010513f:	8b 55 10             	mov    0x10(%ebp),%edx
c0105142:	89 14 98             	mov    %edx,(%eax,%ebx,4)
c0105145:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105148:	5b                   	pop    %ebx
c0105149:	5e                   	pop    %esi
c010514a:	5d                   	pop    %ebp
c010514b:	c3                   	ret    

c010514c <array_create>:
c010514c:	55                   	push   %ebp
c010514d:	89 e5                	mov    %esp,%ebp
c010514f:	83 ec 14             	sub    $0x14,%esp
c0105152:	6a 0c                	push   $0xc
c0105154:	e8 13 cc ff ff       	call   c0101d6c <kmalloc>
c0105159:	83 c4 10             	add    $0x10,%esp
c010515c:	85 c0                	test   %eax,%eax
c010515e:	74 14                	je     c0105174 <array_create+0x28>
c0105160:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105167:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c010516e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0105174:	c9                   	leave  
c0105175:	c3                   	ret    

c0105176 <array_init>:
c0105176:	55                   	push   %ebp
c0105177:	89 e5                	mov    %esp,%ebp
c0105179:	8b 45 08             	mov    0x8(%ebp),%eax
c010517c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c010518a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0105190:	5d                   	pop    %ebp
c0105191:	c3                   	ret    

c0105192 <array_cleanup>:
c0105192:	55                   	push   %ebp
c0105193:	89 e5                	mov    %esp,%ebp
c0105195:	53                   	push   %ebx
c0105196:	50                   	push   %eax
c0105197:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010519a:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c010519e:	74 28                	je     c01051c8 <array_cleanup+0x36>
c01051a0:	83 ec 0c             	sub    $0xc,%esp
c01051a3:	68 c8 0f 11 c0       	push   $0xc0110fc8
c01051a8:	6a 43                	push   $0x43
c01051aa:	68 7f 0f 11 c0       	push   $0xc0110f7f
c01051af:	68 9a 0f 11 c0       	push   $0xc0110f9a
c01051b4:	68 2b ff 10 c0       	push   $0xc010ff2b
c01051b9:	e8 aa f0 ff ff       	call   c0104268 <print>
c01051be:	83 c4 20             	add    $0x20,%esp
c01051c1:	e8 bd bd ff ff       	call   c0100f83 <backtrace>
c01051c6:	fa                   	cli    
c01051c7:	f4                   	hlt    
c01051c8:	83 ec 0c             	sub    $0xc,%esp
c01051cb:	ff 33                	pushl  (%ebx)
c01051cd:	e8 9a cc ff ff       	call   c0101e6c <kfree>
c01051d2:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
c01051d8:	83 c4 10             	add    $0x10,%esp
c01051db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01051de:	c9                   	leave  
c01051df:	c3                   	ret    

c01051e0 <array_destroy>:
c01051e0:	55                   	push   %ebp
c01051e1:	89 e5                	mov    %esp,%ebp
c01051e3:	53                   	push   %ebx
c01051e4:	83 ec 10             	sub    $0x10,%esp
c01051e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01051ea:	53                   	push   %ebx
c01051eb:	e8 a2 ff ff ff       	call   c0105192 <array_cleanup>
c01051f0:	83 c4 10             	add    $0x10,%esp
c01051f3:	89 5d 08             	mov    %ebx,0x8(%ebp)
c01051f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01051f9:	c9                   	leave  
c01051fa:	e9 6d cc ff ff       	jmp    c0101e6c <kfree>

c01051ff <array_setsize>:
c01051ff:	55                   	push   %ebp
c0105200:	89 e5                	mov    %esp,%ebp
c0105202:	57                   	push   %edi
c0105203:	56                   	push   %esi
c0105204:	53                   	push   %ebx
c0105205:	83 ec 0c             	sub    $0xc,%esp
c0105208:	8b 75 08             	mov    0x8(%ebp),%esi
c010520b:	8b 5e 08             	mov    0x8(%esi),%ebx
c010520e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
c0105211:	73 52                	jae    c0105265 <array_setsize+0x66>
c0105213:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
c0105216:	73 0f                	jae    c0105227 <array_setsize+0x28>
c0105218:	85 db                	test   %ebx,%ebx
c010521a:	74 04                	je     c0105220 <array_setsize+0x21>
c010521c:	01 db                	add    %ebx,%ebx
c010521e:	eb f3                	jmp    c0105213 <array_setsize+0x14>
c0105220:	bb 04 00 00 00       	mov    $0x4,%ebx
c0105225:	eb ec                	jmp    c0105213 <array_setsize+0x14>
c0105227:	83 ec 0c             	sub    $0xc,%esp
c010522a:	8d 04 9d 00 00 00 00 	lea    0x0(,%ebx,4),%eax
c0105231:	50                   	push   %eax
c0105232:	e8 35 cb ff ff       	call   c0101d6c <kmalloc>
c0105237:	89 c7                	mov    %eax,%edi
c0105239:	83 c4 10             	add    $0x10,%esp
c010523c:	b8 02 00 00 00       	mov    $0x2,%eax
c0105241:	85 ff                	test   %edi,%edi
c0105243:	74 28                	je     c010526d <array_setsize+0x6e>
c0105245:	50                   	push   %eax
c0105246:	8b 46 04             	mov    0x4(%esi),%eax
c0105249:	c1 e0 02             	shl    $0x2,%eax
c010524c:	50                   	push   %eax
c010524d:	ff 36                	pushl  (%esi)
c010524f:	57                   	push   %edi
c0105250:	e8 af f6 ff ff       	call   c0104904 <memcpy>
c0105255:	5a                   	pop    %edx
c0105256:	ff 36                	pushl  (%esi)
c0105258:	e8 0f cc ff ff       	call   c0101e6c <kfree>
c010525d:	89 3e                	mov    %edi,(%esi)
c010525f:	89 5e 08             	mov    %ebx,0x8(%esi)
c0105262:	83 c4 10             	add    $0x10,%esp
c0105265:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105268:	89 46 04             	mov    %eax,0x4(%esi)
c010526b:	31 c0                	xor    %eax,%eax
c010526d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0105270:	5b                   	pop    %ebx
c0105271:	5e                   	pop    %esi
c0105272:	5f                   	pop    %edi
c0105273:	5d                   	pop    %ebp
c0105274:	c3                   	ret    

c0105275 <array_add>:
c0105275:	55                   	push   %ebp
c0105276:	89 e5                	mov    %esp,%ebp
c0105278:	57                   	push   %edi
c0105279:	56                   	push   %esi
c010527a:	53                   	push   %ebx
c010527b:	83 ec 14             	sub    $0x14,%esp
c010527e:	8b 7d 08             	mov    0x8(%ebp),%edi
c0105281:	8b 5d 10             	mov    0x10(%ebp),%ebx
c0105284:	8b 77 04             	mov    0x4(%edi),%esi
c0105287:	8d 46 01             	lea    0x1(%esi),%eax
c010528a:	50                   	push   %eax
c010528b:	57                   	push   %edi
c010528c:	e8 6e ff ff ff       	call   c01051ff <array_setsize>
c0105291:	83 c4 10             	add    $0x10,%esp
c0105294:	85 c0                	test   %eax,%eax
c0105296:	75 0e                	jne    c01052a6 <array_add+0x31>
c0105298:	8b 17                	mov    (%edi),%edx
c010529a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010529d:	89 0c b2             	mov    %ecx,(%edx,%esi,4)
c01052a0:	85 db                	test   %ebx,%ebx
c01052a2:	74 02                	je     c01052a6 <array_add+0x31>
c01052a4:	89 33                	mov    %esi,(%ebx)
c01052a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01052a9:	5b                   	pop    %ebx
c01052aa:	5e                   	pop    %esi
c01052ab:	5f                   	pop    %edi
c01052ac:	5d                   	pop    %ebp
c01052ad:	c3                   	ret    

c01052ae <array_remove>:
c01052ae:	55                   	push   %ebp
c01052af:	89 e5                	mov    %esp,%ebp
c01052b1:	56                   	push   %esi
c01052b2:	53                   	push   %ebx
c01052b3:	8b 75 08             	mov    0x8(%ebp),%esi
c01052b6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c01052b9:	8b 46 08             	mov    0x8(%esi),%eax
c01052bc:	39 46 04             	cmp    %eax,0x4(%esi)
c01052bf:	76 28                	jbe    c01052e9 <array_remove+0x3b>
c01052c1:	83 ec 0c             	sub    $0xc,%esp
c01052c4:	68 b8 0f 11 c0       	push   $0xc0110fb8
c01052c9:	6a 6b                	push   $0x6b
c01052cb:	68 7f 0f 11 c0       	push   $0xc0110f7f
c01052d0:	68 a6 0f 11 c0       	push   $0xc0110fa6
c01052d5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01052da:	e8 89 ef ff ff       	call   c0104268 <print>
c01052df:	83 c4 20             	add    $0x20,%esp
c01052e2:	e8 9c bc ff ff       	call   c0100f83 <backtrace>
c01052e7:	fa                   	cli    
c01052e8:	f4                   	hlt    
c01052e9:	39 5e 04             	cmp    %ebx,0x4(%esi)
c01052ec:	77 28                	ja     c0105316 <array_remove+0x68>
c01052ee:	83 ec 0c             	sub    $0xc,%esp
c01052f1:	68 b8 0f 11 c0       	push   $0xc0110fb8
c01052f6:	6a 6c                	push   $0x6c
c01052f8:	68 7f 0f 11 c0       	push   $0xc0110f7f
c01052fd:	68 8b 0f 11 c0       	push   $0xc0110f8b
c0105302:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105307:	e8 5c ef ff ff       	call   c0104268 <print>
c010530c:	83 c4 20             	add    $0x20,%esp
c010530f:	e8 6f bc ff ff       	call   c0100f83 <backtrace>
c0105314:	fa                   	cli    
c0105315:	f4                   	hlt    
c0105316:	8b 16                	mov    (%esi),%edx
c0105318:	8d 04 9d 04 00 00 00 	lea    0x4(,%ebx,4),%eax
c010531f:	51                   	push   %ecx
c0105320:	f7 d3                	not    %ebx
c0105322:	03 5e 04             	add    0x4(%esi),%ebx
c0105325:	c1 e3 02             	shl    $0x2,%ebx
c0105328:	53                   	push   %ebx
c0105329:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010532c:	51                   	push   %ecx
c010532d:	8d 44 02 fc          	lea    -0x4(%edx,%eax,1),%eax
c0105331:	50                   	push   %eax
c0105332:	e8 ea f5 ff ff       	call   c0104921 <memmove>
c0105337:	ff 4e 04             	decl   0x4(%esi)
c010533a:	83 c4 10             	add    $0x10,%esp
c010533d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105340:	5b                   	pop    %ebx
c0105341:	5e                   	pop    %esi
c0105342:	5d                   	pop    %ebp
c0105343:	c3                   	ret    

c0105344 <assert_heap_property>:
c0105344:	55                   	push   %ebp
c0105345:	89 e5                	mov    %esp,%ebp
c0105347:	57                   	push   %edi
c0105348:	56                   	push   %esi
c0105349:	53                   	push   %ebx
c010534a:	83 ec 1c             	sub    $0x1c,%esp
c010534d:	89 c6                	mov    %eax,%esi
c010534f:	89 d7                	mov    %edx,%edi
c0105351:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0105354:	3b 7d e0             	cmp    -0x20(%ebp),%edi
c0105357:	0f 83 cb 00 00 00    	jae    c0105428 <assert_heap_property+0xe4>
c010535d:	8d 1c 3f             	lea    (%edi,%edi,1),%ebx
c0105360:	8d 43 01             	lea    0x1(%ebx),%eax
c0105363:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105366:	51                   	push   %ecx
c0105367:	51                   	push   %ecx
c0105368:	50                   	push   %eax
c0105369:	56                   	push   %esi
c010536a:	e8 52 fd ff ff       	call   c01050c1 <array_get>
c010536f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105372:	58                   	pop    %eax
c0105373:	5a                   	pop    %edx
c0105374:	57                   	push   %edi
c0105375:	56                   	push   %esi
c0105376:	e8 46 fd ff ff       	call   c01050c1 <array_get>
c010537b:	59                   	pop    %ecx
c010537c:	5a                   	pop    %edx
c010537d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105380:	51                   	push   %ecx
c0105381:	50                   	push   %eax
c0105382:	ff 55 08             	call   *0x8(%ebp)
c0105385:	83 c4 10             	add    $0x10,%esp
c0105388:	85 c0                	test   %eax,%eax
c010538a:	75 2b                	jne    c01053b7 <assert_heap_property+0x73>
c010538c:	83 ec 0c             	sub    $0xc,%esp
c010538f:	68 c8 10 11 c0       	push   $0xc01110c8
c0105394:	68 a2 00 00 00       	push   $0xa2
c0105399:	68 ee 0f 11 c0       	push   $0xc0110fee
c010539e:	68 f9 0f 11 c0       	push   $0xc0110ff9
c01053a3:	68 2b ff 10 c0       	push   $0xc010ff2b
c01053a8:	e8 bb ee ff ff       	call   c0104268 <print>
c01053ad:	83 c4 20             	add    $0x20,%esp
c01053b0:	e8 ce bb ff ff       	call   c0100f83 <backtrace>
c01053b5:	fa                   	cli    
c01053b6:	f4                   	hlt    
c01053b7:	83 c3 02             	add    $0x2,%ebx
c01053ba:	50                   	push   %eax
c01053bb:	50                   	push   %eax
c01053bc:	53                   	push   %ebx
c01053bd:	56                   	push   %esi
c01053be:	e8 fe fc ff ff       	call   c01050c1 <array_get>
c01053c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01053c6:	5a                   	pop    %edx
c01053c7:	59                   	pop    %ecx
c01053c8:	57                   	push   %edi
c01053c9:	56                   	push   %esi
c01053ca:	e8 f2 fc ff ff       	call   c01050c1 <array_get>
c01053cf:	5f                   	pop    %edi
c01053d0:	5a                   	pop    %edx
c01053d1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01053d4:	51                   	push   %ecx
c01053d5:	50                   	push   %eax
c01053d6:	ff 55 08             	call   *0x8(%ebp)
c01053d9:	83 c4 10             	add    $0x10,%esp
c01053dc:	85 c0                	test   %eax,%eax
c01053de:	75 2b                	jne    c010540b <assert_heap_property+0xc7>
c01053e0:	83 ec 0c             	sub    $0xc,%esp
c01053e3:	68 c8 10 11 c0       	push   $0xc01110c8
c01053e8:	68 a3 00 00 00       	push   $0xa3
c01053ed:	68 ee 0f 11 c0       	push   $0xc0110fee
c01053f2:	68 3a 10 11 c0       	push   $0xc011103a
c01053f7:	68 2b ff 10 c0       	push   $0xc010ff2b
c01053fc:	e8 67 ee ff ff       	call   c0104268 <print>
c0105401:	83 c4 20             	add    $0x20,%esp
c0105404:	e8 7a bb ff ff       	call   c0100f83 <backtrace>
c0105409:	fa                   	cli    
c010540a:	f4                   	hlt    
c010540b:	83 ec 0c             	sub    $0xc,%esp
c010540e:	ff 75 08             	pushl  0x8(%ebp)
c0105411:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105414:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105417:	89 f0                	mov    %esi,%eax
c0105419:	e8 26 ff ff ff       	call   c0105344 <assert_heap_property>
c010541e:	83 c4 10             	add    $0x10,%esp
c0105421:	89 df                	mov    %ebx,%edi
c0105423:	e9 2c ff ff ff       	jmp    c0105354 <assert_heap_property+0x10>
c0105428:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010542b:	5b                   	pop    %ebx
c010542c:	5e                   	pop    %esi
c010542d:	5f                   	pop    %edi
c010542e:	5d                   	pop    %ebp
c010542f:	c3                   	ret    

c0105430 <heap_create>:
c0105430:	55                   	push   %ebp
c0105431:	89 e5                	mov    %esp,%ebp
c0105433:	53                   	push   %ebx
c0105434:	83 ec 10             	sub    $0x10,%esp
c0105437:	6a 0c                	push   $0xc
c0105439:	e8 2e c9 ff ff       	call   c0101d6c <kmalloc>
c010543e:	89 c3                	mov    %eax,%ebx
c0105440:	83 c4 10             	add    $0x10,%esp
c0105443:	31 c0                	xor    %eax,%eax
c0105445:	85 db                	test   %ebx,%ebx
c0105447:	74 2a                	je     c0105473 <heap_create+0x43>
c0105449:	8b 45 08             	mov    0x8(%ebp),%eax
c010544c:	89 43 04             	mov    %eax,0x4(%ebx)
c010544f:	e8 f8 fc ff ff       	call   c010514c <array_create>
c0105454:	89 43 08             	mov    %eax,0x8(%ebx)
c0105457:	85 c0                	test   %eax,%eax
c0105459:	75 10                	jne    c010546b <heap_create+0x3b>
c010545b:	83 ec 0c             	sub    $0xc,%esp
c010545e:	53                   	push   %ebx
c010545f:	e8 08 ca ff ff       	call   c0101e6c <kfree>
c0105464:	83 c4 10             	add    $0x10,%esp
c0105467:	31 c0                	xor    %eax,%eax
c0105469:	eb 08                	jmp    c0105473 <heap_create+0x43>
c010546b:	c7 03 05 0d 00 00    	movl   $0xd05,(%ebx)
c0105471:	89 d8                	mov    %ebx,%eax
c0105473:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0105476:	c9                   	leave  
c0105477:	c3                   	ret    

c0105478 <heap_top>:
c0105478:	55                   	push   %ebp
c0105479:	89 e5                	mov    %esp,%ebp
c010547b:	53                   	push   %ebx
c010547c:	52                   	push   %edx
c010547d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105480:	85 db                	test   %ebx,%ebx
c0105482:	75 28                	jne    c01054ac <heap_top+0x34>
c0105484:	83 ec 0c             	sub    $0xc,%esp
c0105487:	68 40 11 11 c0       	push   $0xc0111140
c010548c:	6a 4c                	push   $0x4c
c010548e:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105493:	68 7c 10 11 c0       	push   $0xc011107c
c0105498:	68 2b ff 10 c0       	push   $0xc010ff2b
c010549d:	e8 c6 ed ff ff       	call   c0104268 <print>
c01054a2:	83 c4 20             	add    $0x20,%esp
c01054a5:	e8 d9 ba ff ff       	call   c0100f83 <backtrace>
c01054aa:	fa                   	cli    
c01054ab:	f4                   	hlt    
c01054ac:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c01054b2:	74 28                	je     c01054dc <heap_top+0x64>
c01054b4:	83 ec 0c             	sub    $0xc,%esp
c01054b7:	68 40 11 11 c0       	push   $0xc0111140
c01054bc:	6a 4d                	push   $0x4d
c01054be:	68 ee 0f 11 c0       	push   $0xc0110fee
c01054c3:	68 86 10 11 c0       	push   $0xc0111086
c01054c8:	68 2b ff 10 c0       	push   $0xc010ff2b
c01054cd:	e8 96 ed ff ff       	call   c0104268 <print>
c01054d2:	83 c4 20             	add    $0x20,%esp
c01054d5:	e8 a9 ba ff ff       	call   c0100f83 <backtrace>
c01054da:	fa                   	cli    
c01054db:	f4                   	hlt    
c01054dc:	50                   	push   %eax
c01054dd:	50                   	push   %eax
c01054de:	6a 00                	push   $0x0
c01054e0:	ff 73 08             	pushl  0x8(%ebx)
c01054e3:	e8 d9 fb ff ff       	call   c01050c1 <array_get>
c01054e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01054eb:	c9                   	leave  
c01054ec:	c3                   	ret    

c01054ed <heap_isempty>:
c01054ed:	55                   	push   %ebp
c01054ee:	89 e5                	mov    %esp,%ebp
c01054f0:	53                   	push   %ebx
c01054f1:	50                   	push   %eax
c01054f2:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01054f5:	85 db                	test   %ebx,%ebx
c01054f7:	75 28                	jne    c0105521 <heap_isempty+0x34>
c01054f9:	83 ec 0c             	sub    $0xc,%esp
c01054fc:	68 30 11 11 c0       	push   $0xc0111130
c0105501:	6a 53                	push   $0x53
c0105503:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105508:	68 7c 10 11 c0       	push   $0xc011107c
c010550d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105512:	e8 51 ed ff ff       	call   c0104268 <print>
c0105517:	83 c4 20             	add    $0x20,%esp
c010551a:	e8 64 ba ff ff       	call   c0100f83 <backtrace>
c010551f:	fa                   	cli    
c0105520:	f4                   	hlt    
c0105521:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c0105527:	74 28                	je     c0105551 <heap_isempty+0x64>
c0105529:	83 ec 0c             	sub    $0xc,%esp
c010552c:	68 30 11 11 c0       	push   $0xc0111130
c0105531:	6a 54                	push   $0x54
c0105533:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105538:	68 86 10 11 c0       	push   $0xc0111086
c010553d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105542:	e8 21 ed ff ff       	call   c0104268 <print>
c0105547:	83 c4 20             	add    $0x20,%esp
c010554a:	e8 34 ba ff ff       	call   c0100f83 <backtrace>
c010554f:	fa                   	cli    
c0105550:	f4                   	hlt    
c0105551:	83 ec 0c             	sub    $0xc,%esp
c0105554:	ff 73 08             	pushl  0x8(%ebx)
c0105557:	e8 5a fb ff ff       	call   c01050b6 <array_num>
c010555c:	83 c4 10             	add    $0x10,%esp
c010555f:	85 c0                	test   %eax,%eax
c0105561:	0f 94 c0             	sete   %al
c0105564:	0f b6 c0             	movzbl %al,%eax
c0105567:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010556a:	c9                   	leave  
c010556b:	c3                   	ret    

c010556c <heap_getsize>:
c010556c:	55                   	push   %ebp
c010556d:	89 e5                	mov    %esp,%ebp
c010556f:	53                   	push   %ebx
c0105570:	50                   	push   %eax
c0105571:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105574:	85 db                	test   %ebx,%ebx
c0105576:	75 28                	jne    c01055a0 <heap_getsize+0x34>
c0105578:	83 ec 0c             	sub    $0xc,%esp
c010557b:	68 20 11 11 c0       	push   $0xc0111120
c0105580:	6a 5a                	push   $0x5a
c0105582:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105587:	68 7c 10 11 c0       	push   $0xc011107c
c010558c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105591:	e8 d2 ec ff ff       	call   c0104268 <print>
c0105596:	83 c4 20             	add    $0x20,%esp
c0105599:	e8 e5 b9 ff ff       	call   c0100f83 <backtrace>
c010559e:	fa                   	cli    
c010559f:	f4                   	hlt    
c01055a0:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c01055a6:	74 28                	je     c01055d0 <heap_getsize+0x64>
c01055a8:	83 ec 0c             	sub    $0xc,%esp
c01055ab:	68 20 11 11 c0       	push   $0xc0111120
c01055b0:	6a 5b                	push   $0x5b
c01055b2:	68 ee 0f 11 c0       	push   $0xc0110fee
c01055b7:	68 86 10 11 c0       	push   $0xc0111086
c01055bc:	68 2b ff 10 c0       	push   $0xc010ff2b
c01055c1:	e8 a2 ec ff ff       	call   c0104268 <print>
c01055c6:	83 c4 20             	add    $0x20,%esp
c01055c9:	e8 b5 b9 ff ff       	call   c0100f83 <backtrace>
c01055ce:	fa                   	cli    
c01055cf:	f4                   	hlt    
c01055d0:	8b 43 08             	mov    0x8(%ebx),%eax
c01055d3:	89 45 08             	mov    %eax,0x8(%ebp)
c01055d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01055d9:	c9                   	leave  
c01055da:	e9 d7 fa ff ff       	jmp    c01050b6 <array_num>

c01055df <heap_destroy>:
c01055df:	55                   	push   %ebp
c01055e0:	89 e5                	mov    %esp,%ebp
c01055e2:	53                   	push   %ebx
c01055e3:	50                   	push   %eax
c01055e4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01055e7:	85 db                	test   %ebx,%ebx
c01055e9:	74 3e                	je     c0105629 <heap_destroy+0x4a>
c01055eb:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c01055f1:	74 28                	je     c010561b <heap_destroy+0x3c>
c01055f3:	83 ec 0c             	sub    $0xc,%esp
c01055f6:	68 10 11 11 c0       	push   $0xc0111110
c01055fb:	6a 62                	push   $0x62
c01055fd:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105602:	68 86 10 11 c0       	push   $0xc0111086
c0105607:	68 2b ff 10 c0       	push   $0xc010ff2b
c010560c:	e8 57 ec ff ff       	call   c0104268 <print>
c0105611:	83 c4 20             	add    $0x20,%esp
c0105614:	e8 6a b9 ff ff       	call   c0100f83 <backtrace>
c0105619:	fa                   	cli    
c010561a:	f4                   	hlt    
c010561b:	83 ec 0c             	sub    $0xc,%esp
c010561e:	ff 73 08             	pushl  0x8(%ebx)
c0105621:	e8 ba fb ff ff       	call   c01051e0 <array_destroy>
c0105626:	83 c4 10             	add    $0x10,%esp
c0105629:	89 5d 08             	mov    %ebx,0x8(%ebp)
c010562c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010562f:	c9                   	leave  
c0105630:	e9 37 c8 ff ff       	jmp    c0101e6c <kfree>

c0105635 <bubble_up>:
c0105635:	55                   	push   %ebp
c0105636:	89 e5                	mov    %esp,%ebp
c0105638:	57                   	push   %edi
c0105639:	56                   	push   %esi
c010563a:	53                   	push   %ebx
c010563b:	83 ec 1c             	sub    $0x1c,%esp
c010563e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0105641:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105645:	75 28                	jne    c010566f <bubble_up+0x3a>
c0105647:	83 ec 0c             	sub    $0xc,%esp
c010564a:	68 04 11 11 c0       	push   $0xc0111104
c010564f:	6a 6a                	push   $0x6a
c0105651:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105656:	68 7c 10 11 c0       	push   $0xc011107c
c010565b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105660:	e8 03 ec ff ff       	call   c0104268 <print>
c0105665:	83 c4 20             	add    $0x20,%esp
c0105668:	e8 16 b9 ff ff       	call   c0100f83 <backtrace>
c010566d:	fa                   	cli    
c010566e:	f4                   	hlt    
c010566f:	85 db                	test   %ebx,%ebx
c0105671:	79 28                	jns    c010569b <bubble_up+0x66>
c0105673:	83 ec 0c             	sub    $0xc,%esp
c0105676:	68 04 11 11 c0       	push   $0xc0111104
c010567b:	6a 6b                	push   $0x6b
c010567d:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105682:	68 9e 10 11 c0       	push   $0xc011109e
c0105687:	68 2b ff 10 c0       	push   $0xc010ff2b
c010568c:	e8 d7 eb ff ff       	call   c0104268 <print>
c0105691:	83 c4 20             	add    $0x20,%esp
c0105694:	e8 ea b8 ff ff       	call   c0100f83 <backtrace>
c0105699:	fa                   	cli    
c010569a:	f4                   	hlt    
c010569b:	8b 45 08             	mov    0x8(%ebp),%eax
c010569e:	81 38 05 0d 00 00    	cmpl   $0xd05,(%eax)
c01056a4:	74 28                	je     c01056ce <bubble_up+0x99>
c01056a6:	83 ec 0c             	sub    $0xc,%esp
c01056a9:	68 04 11 11 c0       	push   $0xc0111104
c01056ae:	6a 6c                	push   $0x6c
c01056b0:	68 ee 0f 11 c0       	push   $0xc0110fee
c01056b5:	68 86 10 11 c0       	push   $0xc0111086
c01056ba:	68 2b ff 10 c0       	push   $0xc010ff2b
c01056bf:	e8 a4 eb ff ff       	call   c0104268 <print>
c01056c4:	83 c4 20             	add    $0x20,%esp
c01056c7:	e8 b7 b8 ff ff       	call   c0100f83 <backtrace>
c01056cc:	fa                   	cli    
c01056cd:	f4                   	hlt    
c01056ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01056d1:	8b 70 08             	mov    0x8(%eax),%esi
c01056d4:	8d 43 ff             	lea    -0x1(%ebx),%eax
c01056d7:	b9 02 00 00 00       	mov    $0x2,%ecx
c01056dc:	99                   	cltd   
c01056dd:	f7 f9                	idiv   %ecx
c01056df:	89 c7                	mov    %eax,%edi
c01056e1:	85 db                	test   %ebx,%ebx
c01056e3:	7e 6e                	jle    c0105753 <bubble_up+0x11e>
c01056e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01056e8:	8b 50 04             	mov    0x4(%eax),%edx
c01056eb:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01056ee:	50                   	push   %eax
c01056ef:	50                   	push   %eax
c01056f0:	57                   	push   %edi
c01056f1:	56                   	push   %esi
c01056f2:	e8 ca f9 ff ff       	call   c01050c1 <array_get>
c01056f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056fa:	5a                   	pop    %edx
c01056fb:	59                   	pop    %ecx
c01056fc:	53                   	push   %ebx
c01056fd:	56                   	push   %esi
c01056fe:	e8 be f9 ff ff       	call   c01050c1 <array_get>
c0105703:	5a                   	pop    %edx
c0105704:	59                   	pop    %ecx
c0105705:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105708:	51                   	push   %ecx
c0105709:	50                   	push   %eax
c010570a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010570d:	ff d2                	call   *%edx
c010570f:	83 c4 10             	add    $0x10,%esp
c0105712:	85 c0                	test   %eax,%eax
c0105714:	74 3d                	je     c0105753 <bubble_up+0x11e>
c0105716:	50                   	push   %eax
c0105717:	50                   	push   %eax
c0105718:	53                   	push   %ebx
c0105719:	56                   	push   %esi
c010571a:	e8 a2 f9 ff ff       	call   c01050c1 <array_get>
c010571f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105722:	58                   	pop    %eax
c0105723:	5a                   	pop    %edx
c0105724:	57                   	push   %edi
c0105725:	56                   	push   %esi
c0105726:	e8 96 f9 ff ff       	call   c01050c1 <array_get>
c010572b:	83 c4 0c             	add    $0xc,%esp
c010572e:	50                   	push   %eax
c010572f:	53                   	push   %ebx
c0105730:	56                   	push   %esi
c0105731:	e8 cf f9 ff ff       	call   c0105105 <array_set>
c0105736:	83 c4 0c             	add    $0xc,%esp
c0105739:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010573c:	52                   	push   %edx
c010573d:	57                   	push   %edi
c010573e:	56                   	push   %esi
c010573f:	e8 c1 f9 ff ff       	call   c0105105 <array_set>
c0105744:	8d 47 ff             	lea    -0x1(%edi),%eax
c0105747:	b9 02 00 00 00       	mov    $0x2,%ecx
c010574c:	83 c4 10             	add    $0x10,%esp
c010574f:	89 fb                	mov    %edi,%ebx
c0105751:	eb 89                	jmp    c01056dc <bubble_up+0xa7>
c0105753:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0105756:	5b                   	pop    %ebx
c0105757:	5e                   	pop    %esi
c0105758:	5f                   	pop    %edi
c0105759:	5d                   	pop    %ebp
c010575a:	c3                   	ret    

c010575b <heap_push>:
c010575b:	55                   	push   %ebp
c010575c:	89 e5                	mov    %esp,%ebp
c010575e:	53                   	push   %ebx
c010575f:	83 ec 14             	sub    $0x14,%esp
c0105762:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105765:	85 db                	test   %ebx,%ebx
c0105767:	75 28                	jne    c0105791 <heap_push+0x36>
c0105769:	83 ec 0c             	sub    $0xc,%esp
c010576c:	68 58 11 11 c0       	push   $0xc0111158
c0105771:	6a 2b                	push   $0x2b
c0105773:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105778:	68 7c 10 11 c0       	push   $0xc011107c
c010577d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105782:	e8 e1 ea ff ff       	call   c0104268 <print>
c0105787:	83 c4 20             	add    $0x20,%esp
c010578a:	e8 f4 b7 ff ff       	call   c0100f83 <backtrace>
c010578f:	fa                   	cli    
c0105790:	f4                   	hlt    
c0105791:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c0105797:	74 28                	je     c01057c1 <heap_push+0x66>
c0105799:	83 ec 0c             	sub    $0xc,%esp
c010579c:	68 58 11 11 c0       	push   $0xc0111158
c01057a1:	6a 2c                	push   $0x2c
c01057a3:	68 ee 0f 11 c0       	push   $0xc0110fee
c01057a8:	68 86 10 11 c0       	push   $0xc0111086
c01057ad:	68 2b ff 10 c0       	push   $0xc010ff2b
c01057b2:	e8 b1 ea ff ff       	call   c0104268 <print>
c01057b7:	83 c4 20             	add    $0x20,%esp
c01057ba:	e8 c4 b7 ff ff       	call   c0100f83 <backtrace>
c01057bf:	fa                   	cli    
c01057c0:	f4                   	hlt    
c01057c1:	52                   	push   %edx
c01057c2:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01057c5:	50                   	push   %eax
c01057c6:	ff 75 0c             	pushl  0xc(%ebp)
c01057c9:	ff 73 08             	pushl  0x8(%ebx)
c01057cc:	e8 a4 fa ff ff       	call   c0105275 <array_add>
c01057d1:	83 c4 10             	add    $0x10,%esp
c01057d4:	83 f8 02             	cmp    $0x2,%eax
c01057d7:	75 1d                	jne    c01057f6 <heap_push+0x9b>
c01057d9:	83 ec 0c             	sub    $0xc,%esp
c01057dc:	ff 73 08             	pushl  0x8(%ebx)
c01057df:	e8 fc f9 ff ff       	call   c01051e0 <array_destroy>
c01057e4:	89 1c 24             	mov    %ebx,(%esp)
c01057e7:	e8 80 c6 ff ff       	call   c0101e6c <kfree>
c01057ec:	83 c4 10             	add    $0x10,%esp
c01057ef:	b8 02 00 00 00       	mov    $0x2,%eax
c01057f4:	eb 49                	jmp    c010583f <heap_push+0xe4>
c01057f6:	8b 43 08             	mov    0x8(%ebx),%eax
c01057f9:	8b 40 04             	mov    0x4(%eax),%eax
c01057fc:	48                   	dec    %eax
c01057fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105800:	74 28                	je     c010582a <heap_push+0xcf>
c0105802:	83 ec 0c             	sub    $0xc,%esp
c0105805:	68 58 11 11 c0       	push   $0xc0111158
c010580a:	6a 36                	push   $0x36
c010580c:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105811:	68 a9 10 11 c0       	push   $0xc01110a9
c0105816:	68 2b ff 10 c0       	push   $0xc010ff2b
c010581b:	e8 48 ea ff ff       	call   c0104268 <print>
c0105820:	83 c4 20             	add    $0x20,%esp
c0105823:	e8 5b b7 ff ff       	call   c0100f83 <backtrace>
c0105828:	fa                   	cli    
c0105829:	f4                   	hlt    
c010582a:	50                   	push   %eax
c010582b:	50                   	push   %eax
c010582c:	8b 43 08             	mov    0x8(%ebx),%eax
c010582f:	8b 40 04             	mov    0x4(%eax),%eax
c0105832:	48                   	dec    %eax
c0105833:	50                   	push   %eax
c0105834:	53                   	push   %ebx
c0105835:	e8 fb fd ff ff       	call   c0105635 <bubble_up>
c010583a:	83 c4 10             	add    $0x10,%esp
c010583d:	31 c0                	xor    %eax,%eax
c010583f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0105842:	c9                   	leave  
c0105843:	c3                   	ret    

c0105844 <trickle_down>:
c0105844:	55                   	push   %ebp
c0105845:	89 e5                	mov    %esp,%ebp
c0105847:	57                   	push   %edi
c0105848:	56                   	push   %esi
c0105849:	53                   	push   %ebx
c010584a:	83 ec 1c             	sub    $0x1c,%esp
c010584d:	8b 7d 08             	mov    0x8(%ebp),%edi
c0105850:	85 ff                	test   %edi,%edi
c0105852:	75 28                	jne    c010587c <trickle_down+0x38>
c0105854:	83 ec 0c             	sub    $0xc,%esp
c0105857:	68 f4 10 11 c0       	push   $0xc01110f4
c010585c:	6a 7d                	push   $0x7d
c010585e:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105863:	68 7c 10 11 c0       	push   $0xc011107c
c0105868:	68 2b ff 10 c0       	push   $0xc010ff2b
c010586d:	e8 f6 e9 ff ff       	call   c0104268 <print>
c0105872:	83 c4 20             	add    $0x20,%esp
c0105875:	e8 09 b7 ff ff       	call   c0100f83 <backtrace>
c010587a:	fa                   	cli    
c010587b:	f4                   	hlt    
c010587c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105880:	79 28                	jns    c01058aa <trickle_down+0x66>
c0105882:	83 ec 0c             	sub    $0xc,%esp
c0105885:	68 f4 10 11 c0       	push   $0xc01110f4
c010588a:	6a 7e                	push   $0x7e
c010588c:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105891:	68 9e 10 11 c0       	push   $0xc011109e
c0105896:	68 2b ff 10 c0       	push   $0xc010ff2b
c010589b:	e8 c8 e9 ff ff       	call   c0104268 <print>
c01058a0:	83 c4 20             	add    $0x20,%esp
c01058a3:	e8 db b6 ff ff       	call   c0100f83 <backtrace>
c01058a8:	fa                   	cli    
c01058a9:	f4                   	hlt    
c01058aa:	81 3f 05 0d 00 00    	cmpl   $0xd05,(%edi)
c01058b0:	74 28                	je     c01058da <trickle_down+0x96>
c01058b2:	83 ec 0c             	sub    $0xc,%esp
c01058b5:	68 f4 10 11 c0       	push   $0xc01110f4
c01058ba:	6a 7f                	push   $0x7f
c01058bc:	68 ee 0f 11 c0       	push   $0xc0110fee
c01058c1:	68 86 10 11 c0       	push   $0xc0111086
c01058c6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01058cb:	e8 98 e9 ff ff       	call   c0104268 <print>
c01058d0:	83 c4 20             	add    $0x20,%esp
c01058d3:	e8 ab b6 ff ff       	call   c0100f83 <backtrace>
c01058d8:	fa                   	cli    
c01058d9:	f4                   	hlt    
c01058da:	8b 5f 08             	mov    0x8(%edi),%ebx
c01058dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01058e1:	0f 88 f8 00 00 00    	js     c01059df <trickle_down+0x19b>
c01058e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058ea:	8d 44 00 02          	lea    0x2(%eax,%eax,1),%eax
c01058ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058f1:	8b 47 08             	mov    0x8(%edi),%eax
c01058f4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01058f7:	3b 48 04             	cmp    0x4(%eax),%ecx
c01058fa:	73 65                	jae    c0105961 <trickle_down+0x11d>
c01058fc:	8b 77 04             	mov    0x4(%edi),%esi
c01058ff:	51                   	push   %ecx
c0105900:	51                   	push   %ecx
c0105901:	ff 75 0c             	pushl  0xc(%ebp)
c0105904:	53                   	push   %ebx
c0105905:	e8 b7 f7 ff ff       	call   c01050c1 <array_get>
c010590a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010590d:	58                   	pop    %eax
c010590e:	5a                   	pop    %edx
c010590f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105912:	53                   	push   %ebx
c0105913:	e8 a9 f7 ff ff       	call   c01050c1 <array_get>
c0105918:	59                   	pop    %ecx
c0105919:	5a                   	pop    %edx
c010591a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010591d:	52                   	push   %edx
c010591e:	50                   	push   %eax
c010591f:	ff d6                	call   *%esi
c0105921:	83 c4 10             	add    $0x10,%esp
c0105924:	85 c0                	test   %eax,%eax
c0105926:	74 39                	je     c0105961 <trickle_down+0x11d>
c0105928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010592b:	8d 70 ff             	lea    -0x1(%eax),%esi
c010592e:	8b 57 04             	mov    0x4(%edi),%edx
c0105931:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0105934:	51                   	push   %ecx
c0105935:	51                   	push   %ecx
c0105936:	50                   	push   %eax
c0105937:	53                   	push   %ebx
c0105938:	e8 84 f7 ff ff       	call   c01050c1 <array_get>
c010593d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105940:	58                   	pop    %eax
c0105941:	5a                   	pop    %edx
c0105942:	56                   	push   %esi
c0105943:	53                   	push   %ebx
c0105944:	e8 78 f7 ff ff       	call   c01050c1 <array_get>
c0105949:	59                   	pop    %ecx
c010594a:	5a                   	pop    %edx
c010594b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010594e:	51                   	push   %ecx
c010594f:	50                   	push   %eax
c0105950:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105953:	ff d2                	call   *%edx
c0105955:	83 c4 10             	add    $0x10,%esp
c0105958:	85 c0                	test   %eax,%eax
c010595a:	75 4c                	jne    c01059a8 <trickle_down+0x164>
c010595c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010595f:	eb 47                	jmp    c01059a8 <trickle_down+0x164>
c0105961:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0105964:	4e                   	dec    %esi
c0105965:	8b 47 08             	mov    0x8(%edi),%eax
c0105968:	3b 70 04             	cmp    0x4(%eax),%esi
c010596b:	73 30                	jae    c010599d <trickle_down+0x159>
c010596d:	8b 57 04             	mov    0x4(%edi),%edx
c0105970:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0105973:	50                   	push   %eax
c0105974:	50                   	push   %eax
c0105975:	ff 75 0c             	pushl  0xc(%ebp)
c0105978:	53                   	push   %ebx
c0105979:	e8 43 f7 ff ff       	call   c01050c1 <array_get>
c010597e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105981:	58                   	pop    %eax
c0105982:	5a                   	pop    %edx
c0105983:	56                   	push   %esi
c0105984:	53                   	push   %ebx
c0105985:	e8 37 f7 ff ff       	call   c01050c1 <array_get>
c010598a:	59                   	pop    %ecx
c010598b:	5a                   	pop    %edx
c010598c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010598f:	51                   	push   %ecx
c0105990:	50                   	push   %eax
c0105991:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105994:	ff d2                	call   *%edx
c0105996:	83 c4 10             	add    $0x10,%esp
c0105999:	85 c0                	test   %eax,%eax
c010599b:	75 0b                	jne    c01059a8 <trickle_down+0x164>
c010599d:	83 ce ff             	or     $0xffffffff,%esi
c01059a0:	89 75 0c             	mov    %esi,0xc(%ebp)
c01059a3:	e9 35 ff ff ff       	jmp    c01058dd <trickle_down+0x99>
c01059a8:	50                   	push   %eax
c01059a9:	50                   	push   %eax
c01059aa:	56                   	push   %esi
c01059ab:	53                   	push   %ebx
c01059ac:	e8 10 f7 ff ff       	call   c01050c1 <array_get>
c01059b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01059b4:	5a                   	pop    %edx
c01059b5:	59                   	pop    %ecx
c01059b6:	ff 75 0c             	pushl  0xc(%ebp)
c01059b9:	53                   	push   %ebx
c01059ba:	e8 02 f7 ff ff       	call   c01050c1 <array_get>
c01059bf:	83 c4 0c             	add    $0xc,%esp
c01059c2:	50                   	push   %eax
c01059c3:	56                   	push   %esi
c01059c4:	53                   	push   %ebx
c01059c5:	e8 3b f7 ff ff       	call   c0105105 <array_set>
c01059ca:	83 c4 0c             	add    $0xc,%esp
c01059cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01059d0:	52                   	push   %edx
c01059d1:	ff 75 0c             	pushl  0xc(%ebp)
c01059d4:	53                   	push   %ebx
c01059d5:	e8 2b f7 ff ff       	call   c0105105 <array_set>
c01059da:	83 c4 10             	add    $0x10,%esp
c01059dd:	eb c1                	jmp    c01059a0 <trickle_down+0x15c>
c01059df:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01059e2:	5b                   	pop    %ebx
c01059e3:	5e                   	pop    %esi
c01059e4:	5f                   	pop    %edi
c01059e5:	5d                   	pop    %ebp
c01059e6:	c3                   	ret    

c01059e7 <heap_pop>:
c01059e7:	55                   	push   %ebp
c01059e8:	89 e5                	mov    %esp,%ebp
c01059ea:	56                   	push   %esi
c01059eb:	53                   	push   %ebx
c01059ec:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01059ef:	85 db                	test   %ebx,%ebx
c01059f1:	75 28                	jne    c0105a1b <heap_pop+0x34>
c01059f3:	83 ec 0c             	sub    $0xc,%esp
c01059f6:	68 4c 11 11 c0       	push   $0xc011114c
c01059fb:	6a 3d                	push   $0x3d
c01059fd:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105a02:	68 7c 10 11 c0       	push   $0xc011107c
c0105a07:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105a0c:	e8 57 e8 ff ff       	call   c0104268 <print>
c0105a11:	83 c4 20             	add    $0x20,%esp
c0105a14:	e8 6a b5 ff ff       	call   c0100f83 <backtrace>
c0105a19:	fa                   	cli    
c0105a1a:	f4                   	hlt    
c0105a1b:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c0105a21:	74 28                	je     c0105a4b <heap_pop+0x64>
c0105a23:	83 ec 0c             	sub    $0xc,%esp
c0105a26:	68 4c 11 11 c0       	push   $0xc011114c
c0105a2b:	6a 3e                	push   $0x3e
c0105a2d:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105a32:	68 86 10 11 c0       	push   $0xc0111086
c0105a37:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105a3c:	e8 27 e8 ff ff       	call   c0104268 <print>
c0105a41:	83 c4 20             	add    $0x20,%esp
c0105a44:	e8 3a b5 ff ff       	call   c0100f83 <backtrace>
c0105a49:	fa                   	cli    
c0105a4a:	f4                   	hlt    
c0105a4b:	8b 53 08             	mov    0x8(%ebx),%edx
c0105a4e:	31 c0                	xor    %eax,%eax
c0105a50:	83 7a 04 00          	cmpl   $0x0,0x4(%edx)
c0105a54:	74 3f                	je     c0105a95 <heap_pop+0xae>
c0105a56:	50                   	push   %eax
c0105a57:	50                   	push   %eax
c0105a58:	6a 00                	push   $0x0
c0105a5a:	52                   	push   %edx
c0105a5b:	e8 61 f6 ff ff       	call   c01050c1 <array_get>
c0105a60:	89 c6                	mov    %eax,%esi
c0105a62:	8b 53 08             	mov    0x8(%ebx),%edx
c0105a65:	59                   	pop    %ecx
c0105a66:	58                   	pop    %eax
c0105a67:	8b 42 04             	mov    0x4(%edx),%eax
c0105a6a:	48                   	dec    %eax
c0105a6b:	50                   	push   %eax
c0105a6c:	52                   	push   %edx
c0105a6d:	e8 4f f6 ff ff       	call   c01050c1 <array_get>
c0105a72:	83 c4 0c             	add    $0xc,%esp
c0105a75:	50                   	push   %eax
c0105a76:	6a 00                	push   $0x0
c0105a78:	ff 73 08             	pushl  0x8(%ebx)
c0105a7b:	e8 85 f6 ff ff       	call   c0105105 <array_set>
c0105a80:	8b 43 08             	mov    0x8(%ebx),%eax
c0105a83:	ff 48 04             	decl   0x4(%eax)
c0105a86:	58                   	pop    %eax
c0105a87:	5a                   	pop    %edx
c0105a88:	6a 00                	push   $0x0
c0105a8a:	53                   	push   %ebx
c0105a8b:	e8 b4 fd ff ff       	call   c0105844 <trickle_down>
c0105a90:	83 c4 10             	add    $0x10,%esp
c0105a93:	89 f0                	mov    %esi,%eax
c0105a95:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105a98:	5b                   	pop    %ebx
c0105a99:	5e                   	pop    %esi
c0105a9a:	5d                   	pop    %ebp
c0105a9b:	c3                   	ret    

c0105a9c <heap_assertvalid>:
c0105a9c:	55                   	push   %ebp
c0105a9d:	89 e5                	mov    %esp,%ebp
c0105a9f:	56                   	push   %esi
c0105aa0:	53                   	push   %ebx
c0105aa1:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105aa4:	85 db                	test   %ebx,%ebx
c0105aa6:	75 2b                	jne    c0105ad3 <heap_assertvalid+0x37>
c0105aa8:	83 ec 0c             	sub    $0xc,%esp
c0105aab:	68 e0 10 11 c0       	push   $0xc01110e0
c0105ab0:	68 ab 00 00 00       	push   $0xab
c0105ab5:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105aba:	68 7c 10 11 c0       	push   $0xc011107c
c0105abf:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105ac4:	e8 9f e7 ff ff       	call   c0104268 <print>
c0105ac9:	83 c4 20             	add    $0x20,%esp
c0105acc:	e8 b2 b4 ff ff       	call   c0100f83 <backtrace>
c0105ad1:	fa                   	cli    
c0105ad2:	f4                   	hlt    
c0105ad3:	81 3b 05 0d 00 00    	cmpl   $0xd05,(%ebx)
c0105ad9:	74 2b                	je     c0105b06 <heap_assertvalid+0x6a>
c0105adb:	83 ec 0c             	sub    $0xc,%esp
c0105ade:	68 e0 10 11 c0       	push   $0xc01110e0
c0105ae3:	68 ac 00 00 00       	push   $0xac
c0105ae8:	68 ee 0f 11 c0       	push   $0xc0110fee
c0105aed:	68 86 10 11 c0       	push   $0xc0111086
c0105af2:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105af7:	e8 6c e7 ff ff       	call   c0104268 <print>
c0105afc:	83 c4 20             	add    $0x20,%esp
c0105aff:	e8 7f b4 ff ff       	call   c0100f83 <backtrace>
c0105b04:	fa                   	cli    
c0105b05:	f4                   	hlt    
c0105b06:	8b 73 04             	mov    0x4(%ebx),%esi
c0105b09:	83 ec 0c             	sub    $0xc,%esp
c0105b0c:	ff 73 08             	pushl  0x8(%ebx)
c0105b0f:	e8 a2 f5 ff ff       	call   c01050b6 <array_num>
c0105b14:	83 c4 10             	add    $0x10,%esp
c0105b17:	8b 5b 08             	mov    0x8(%ebx),%ebx
c0105b1a:	89 75 08             	mov    %esi,0x8(%ebp)
c0105b1d:	89 c1                	mov    %eax,%ecx
c0105b1f:	31 d2                	xor    %edx,%edx
c0105b21:	89 d8                	mov    %ebx,%eax
c0105b23:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105b26:	5b                   	pop    %ebx
c0105b27:	5e                   	pop    %esi
c0105b28:	5d                   	pop    %ebp
c0105b29:	e9 16 f8 ff ff       	jmp    c0105344 <assert_heap_property>

c0105b2e <listnode_create>:
c0105b2e:	55                   	push   %ebp
c0105b2f:	89 e5                	mov    %esp,%ebp
c0105b31:	83 ec 14             	sub    $0x14,%esp
c0105b34:	6a 0c                	push   $0xc
c0105b36:	e8 31 c2 ff ff       	call   c0101d6c <kmalloc>
c0105b3b:	83 c4 10             	add    $0x10,%esp
c0105b3e:	85 c0                	test   %eax,%eax
c0105b40:	74 13                	je     c0105b55 <listnode_create+0x27>
c0105b42:	c7 00 58 04 00 00    	movl   $0x458,(%eax)
c0105b48:	8b 55 08             	mov    0x8(%ebp),%edx
c0105b4b:	89 50 04             	mov    %edx,0x4(%eax)
c0105b4e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105b55:	c9                   	leave  
c0105b56:	c3                   	ret    

c0105b57 <list_create>:
c0105b57:	55                   	push   %ebp
c0105b58:	89 e5                	mov    %esp,%ebp
c0105b5a:	83 ec 14             	sub    $0x14,%esp
c0105b5d:	6a 10                	push   $0x10
c0105b5f:	e8 08 c2 ff ff       	call   c0101d6c <kmalloc>
c0105b64:	83 c4 10             	add    $0x10,%esp
c0105b67:	85 c0                	test   %eax,%eax
c0105b69:	74 1b                	je     c0105b86 <list_create+0x2f>
c0105b6b:	c7 00 57 04 00 00    	movl   $0x457,(%eax)
c0105b71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0105b78:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105b7f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
c0105b86:	c9                   	leave  
c0105b87:	c3                   	ret    

c0105b88 <list_push_back>:
c0105b88:	55                   	push   %ebp
c0105b89:	89 e5                	mov    %esp,%ebp
c0105b8b:	56                   	push   %esi
c0105b8c:	53                   	push   %ebx
c0105b8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105b90:	85 db                	test   %ebx,%ebx
c0105b92:	75 28                	jne    c0105bbc <list_push_back+0x34>
c0105b94:	83 ec 0c             	sub    $0xc,%esp
c0105b97:	68 00 13 11 c0       	push   $0xc0111300
c0105b9c:	6a 3d                	push   $0x3d
c0105b9e:	68 62 11 11 c0       	push   $0xc0111162
c0105ba3:	68 6d 11 11 c0       	push   $0xc011116d
c0105ba8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105bad:	e8 b6 e6 ff ff       	call   c0104268 <print>
c0105bb2:	83 c4 20             	add    $0x20,%esp
c0105bb5:	e8 c9 b3 ff ff       	call   c0100f83 <backtrace>
c0105bba:	fa                   	cli    
c0105bbb:	f4                   	hlt    
c0105bbc:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0105bc2:	74 28                	je     c0105bec <list_push_back+0x64>
c0105bc4:	83 ec 0c             	sub    $0xc,%esp
c0105bc7:	68 00 13 11 c0       	push   $0xc0111300
c0105bcc:	6a 3e                	push   $0x3e
c0105bce:	68 62 11 11 c0       	push   $0xc0111162
c0105bd3:	68 79 11 11 c0       	push   $0xc0111179
c0105bd8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105bdd:	e8 86 e6 ff ff       	call   c0104268 <print>
c0105be2:	83 c4 20             	add    $0x20,%esp
c0105be5:	e8 99 b3 ff ff       	call   c0100f83 <backtrace>
c0105bea:	fa                   	cli    
c0105beb:	f4                   	hlt    
c0105bec:	83 ec 0c             	sub    $0xc,%esp
c0105bef:	ff 75 0c             	pushl  0xc(%ebp)
c0105bf2:	e8 37 ff ff ff       	call   c0105b2e <listnode_create>
c0105bf7:	89 c6                	mov    %eax,%esi
c0105bf9:	83 c4 10             	add    $0x10,%esp
c0105bfc:	b8 02 00 00 00       	mov    $0x2,%eax
c0105c01:	85 f6                	test   %esi,%esi
c0105c03:	74 7c                	je     c0105c81 <list_push_back+0xf9>
c0105c05:	81 3e 58 04 00 00    	cmpl   $0x458,(%esi)
c0105c0b:	74 28                	je     c0105c35 <list_push_back+0xad>
c0105c0d:	83 ec 0c             	sub    $0xc,%esp
c0105c10:	68 00 13 11 c0       	push   $0xc0111300
c0105c15:	6a 43                	push   $0x43
c0105c17:	68 62 11 11 c0       	push   $0xc0111162
c0105c1c:	68 93 11 11 c0       	push   $0xc0111193
c0105c21:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105c26:	e8 3d e6 ff ff       	call   c0104268 <print>
c0105c2b:	83 c4 20             	add    $0x20,%esp
c0105c2e:	e8 50 b3 ff ff       	call   c0100f83 <backtrace>
c0105c33:	fa                   	cli    
c0105c34:	f4                   	hlt    
c0105c35:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
c0105c39:	75 05                	jne    c0105c40 <list_push_back+0xb8>
c0105c3b:	89 73 04             	mov    %esi,0x4(%ebx)
c0105c3e:	eb 39                	jmp    c0105c79 <list_push_back+0xf1>
c0105c40:	8b 43 08             	mov    0x8(%ebx),%eax
c0105c43:	81 38 58 04 00 00    	cmpl   $0x458,(%eax)
c0105c49:	74 28                	je     c0105c73 <list_push_back+0xeb>
c0105c4b:	83 ec 0c             	sub    $0xc,%esp
c0105c4e:	68 00 13 11 c0       	push   $0xc0111300
c0105c53:	6a 48                	push   $0x48
c0105c55:	68 62 11 11 c0       	push   $0xc0111162
c0105c5a:	68 b5 11 11 c0       	push   $0xc01111b5
c0105c5f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105c64:	e8 ff e5 ff ff       	call   c0104268 <print>
c0105c69:	83 c4 20             	add    $0x20,%esp
c0105c6c:	e8 12 b3 ff ff       	call   c0100f83 <backtrace>
c0105c71:	fa                   	cli    
c0105c72:	f4                   	hlt    
c0105c73:	8b 43 08             	mov    0x8(%ebx),%eax
c0105c76:	89 70 08             	mov    %esi,0x8(%eax)
c0105c79:	89 73 08             	mov    %esi,0x8(%ebx)
c0105c7c:	ff 43 0c             	incl   0xc(%ebx)
c0105c7f:	31 c0                	xor    %eax,%eax
c0105c81:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105c84:	5b                   	pop    %ebx
c0105c85:	5e                   	pop    %esi
c0105c86:	5d                   	pop    %ebp
c0105c87:	c3                   	ret    

c0105c88 <list_pop_front>:
c0105c88:	55                   	push   %ebp
c0105c89:	89 e5                	mov    %esp,%ebp
c0105c8b:	56                   	push   %esi
c0105c8c:	53                   	push   %ebx
c0105c8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105c90:	85 db                	test   %ebx,%ebx
c0105c92:	75 28                	jne    c0105cbc <list_pop_front+0x34>
c0105c94:	83 ec 0c             	sub    $0xc,%esp
c0105c97:	68 f0 12 11 c0       	push   $0xc01112f0
c0105c9c:	6a 54                	push   $0x54
c0105c9e:	68 62 11 11 c0       	push   $0xc0111162
c0105ca3:	68 6d 11 11 c0       	push   $0xc011116d
c0105ca8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105cad:	e8 b6 e5 ff ff       	call   c0104268 <print>
c0105cb2:	83 c4 20             	add    $0x20,%esp
c0105cb5:	e8 c9 b2 ff ff       	call   c0100f83 <backtrace>
c0105cba:	fa                   	cli    
c0105cbb:	f4                   	hlt    
c0105cbc:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0105cc2:	74 28                	je     c0105cec <list_pop_front+0x64>
c0105cc4:	83 ec 0c             	sub    $0xc,%esp
c0105cc7:	68 f0 12 11 c0       	push   $0xc01112f0
c0105ccc:	6a 55                	push   $0x55
c0105cce:	68 62 11 11 c0       	push   $0xc0111162
c0105cd3:	68 79 11 11 c0       	push   $0xc0111179
c0105cd8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105cdd:	e8 86 e5 ff ff       	call   c0104268 <print>
c0105ce2:	83 c4 20             	add    $0x20,%esp
c0105ce5:	e8 99 b2 ff ff       	call   c0100f83 <backtrace>
c0105cea:	fa                   	cli    
c0105ceb:	f4                   	hlt    
c0105cec:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
c0105cf0:	74 56                	je     c0105d48 <list_pop_front+0xc0>
c0105cf2:	8b 73 04             	mov    0x4(%ebx),%esi
c0105cf5:	81 3e 58 04 00 00    	cmpl   $0x458,(%esi)
c0105cfb:	74 28                	je     c0105d25 <list_pop_front+0x9d>
c0105cfd:	83 ec 0c             	sub    $0xc,%esp
c0105d00:	68 f0 12 11 c0       	push   $0xc01112f0
c0105d05:	6a 5b                	push   $0x5b
c0105d07:	68 62 11 11 c0       	push   $0xc0111162
c0105d0c:	68 d9 11 11 c0       	push   $0xc01111d9
c0105d11:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105d16:	e8 4d e5 ff ff       	call   c0104268 <print>
c0105d1b:	83 c4 20             	add    $0x20,%esp
c0105d1e:	e8 60 b2 ff ff       	call   c0100f83 <backtrace>
c0105d23:	fa                   	cli    
c0105d24:	f4                   	hlt    
c0105d25:	8b 43 04             	mov    0x4(%ebx),%eax
c0105d28:	8b 40 08             	mov    0x8(%eax),%eax
c0105d2b:	89 43 04             	mov    %eax,0x4(%ebx)
c0105d2e:	ff 4b 0c             	decl   0xc(%ebx)
c0105d31:	75 07                	jne    c0105d3a <list_pop_front+0xb2>
c0105d33:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
c0105d3a:	89 75 08             	mov    %esi,0x8(%ebp)
c0105d3d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105d40:	5b                   	pop    %ebx
c0105d41:	5e                   	pop    %esi
c0105d42:	5d                   	pop    %ebp
c0105d43:	e9 24 c1 ff ff       	jmp    c0101e6c <kfree>
c0105d48:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0105d4b:	5b                   	pop    %ebx
c0105d4c:	5e                   	pop    %esi
c0105d4d:	5d                   	pop    %ebp
c0105d4e:	c3                   	ret    

c0105d4f <list_front>:
c0105d4f:	55                   	push   %ebp
c0105d50:	89 e5                	mov    %esp,%ebp
c0105d52:	53                   	push   %ebx
c0105d53:	50                   	push   %eax
c0105d54:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105d57:	85 db                	test   %ebx,%ebx
c0105d59:	75 28                	jne    c0105d83 <list_front+0x34>
c0105d5b:	83 ec 0c             	sub    $0xc,%esp
c0105d5e:	68 e4 12 11 c0       	push   $0xc01112e4
c0105d63:	6a 67                	push   $0x67
c0105d65:	68 62 11 11 c0       	push   $0xc0111162
c0105d6a:	68 6d 11 11 c0       	push   $0xc011116d
c0105d6f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105d74:	e8 ef e4 ff ff       	call   c0104268 <print>
c0105d79:	83 c4 20             	add    $0x20,%esp
c0105d7c:	e8 02 b2 ff ff       	call   c0100f83 <backtrace>
c0105d81:	fa                   	cli    
c0105d82:	f4                   	hlt    
c0105d83:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0105d89:	74 28                	je     c0105db3 <list_front+0x64>
c0105d8b:	83 ec 0c             	sub    $0xc,%esp
c0105d8e:	68 e4 12 11 c0       	push   $0xc01112e4
c0105d93:	6a 68                	push   $0x68
c0105d95:	68 62 11 11 c0       	push   $0xc0111162
c0105d9a:	68 79 11 11 c0       	push   $0xc0111179
c0105d9f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105da4:	e8 bf e4 ff ff       	call   c0104268 <print>
c0105da9:	83 c4 20             	add    $0x20,%esp
c0105dac:	e8 d2 b1 ff ff       	call   c0100f83 <backtrace>
c0105db1:	fa                   	cli    
c0105db2:	f4                   	hlt    
c0105db3:	31 c0                	xor    %eax,%eax
c0105db5:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
c0105db9:	74 67                	je     c0105e22 <list_front+0xd3>
c0105dbb:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c0105dbf:	75 28                	jne    c0105de9 <list_front+0x9a>
c0105dc1:	83 ec 0c             	sub    $0xc,%esp
c0105dc4:	68 e4 12 11 c0       	push   $0xc01112e4
c0105dc9:	6a 6d                	push   $0x6d
c0105dcb:	68 62 11 11 c0       	push   $0xc0111162
c0105dd0:	68 fc 11 11 c0       	push   $0xc01111fc
c0105dd5:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105dda:	e8 89 e4 ff ff       	call   c0104268 <print>
c0105ddf:	83 c4 20             	add    $0x20,%esp
c0105de2:	e8 9c b1 ff ff       	call   c0100f83 <backtrace>
c0105de7:	fa                   	cli    
c0105de8:	f4                   	hlt    
c0105de9:	8b 43 04             	mov    0x4(%ebx),%eax
c0105dec:	81 38 58 04 00 00    	cmpl   $0x458,(%eax)
c0105df2:	74 28                	je     c0105e1c <list_front+0xcd>
c0105df4:	83 ec 0c             	sub    $0xc,%esp
c0105df7:	68 e4 12 11 c0       	push   $0xc01112e4
c0105dfc:	6a 6e                	push   $0x6e
c0105dfe:	68 62 11 11 c0       	push   $0xc0111162
c0105e03:	68 0e 12 11 c0       	push   $0xc011120e
c0105e08:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105e0d:	e8 56 e4 ff ff       	call   c0104268 <print>
c0105e12:	83 c4 20             	add    $0x20,%esp
c0105e15:	e8 69 b1 ff ff       	call   c0100f83 <backtrace>
c0105e1a:	fa                   	cli    
c0105e1b:	f4                   	hlt    
c0105e1c:	8b 43 04             	mov    0x4(%ebx),%eax
c0105e1f:	8b 40 04             	mov    0x4(%eax),%eax
c0105e22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0105e25:	c9                   	leave  
c0105e26:	c3                   	ret    

c0105e27 <list_find>:
c0105e27:	55                   	push   %ebp
c0105e28:	89 e5                	mov    %esp,%ebp
c0105e2a:	53                   	push   %ebx
c0105e2b:	52                   	push   %edx
c0105e2c:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105e2f:	85 db                	test   %ebx,%ebx
c0105e31:	75 28                	jne    c0105e5b <list_find+0x34>
c0105e33:	83 ec 0c             	sub    $0xc,%esp
c0105e36:	68 d8 12 11 c0       	push   $0xc01112d8
c0105e3b:	6a 74                	push   $0x74
c0105e3d:	68 62 11 11 c0       	push   $0xc0111162
c0105e42:	68 6d 11 11 c0       	push   $0xc011116d
c0105e47:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105e4c:	e8 17 e4 ff ff       	call   c0104268 <print>
c0105e51:	83 c4 20             	add    $0x20,%esp
c0105e54:	e8 2a b1 ff ff       	call   c0100f83 <backtrace>
c0105e59:	fa                   	cli    
c0105e5a:	f4                   	hlt    
c0105e5b:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0105e61:	74 28                	je     c0105e8b <list_find+0x64>
c0105e63:	83 ec 0c             	sub    $0xc,%esp
c0105e66:	68 d8 12 11 c0       	push   $0xc01112d8
c0105e6b:	6a 75                	push   $0x75
c0105e6d:	68 62 11 11 c0       	push   $0xc0111162
c0105e72:	68 79 11 11 c0       	push   $0xc0111179
c0105e77:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105e7c:	e8 e7 e3 ff ff       	call   c0104268 <print>
c0105e81:	83 c4 20             	add    $0x20,%esp
c0105e84:	e8 fa b0 ff ff       	call   c0100f83 <backtrace>
c0105e89:	fa                   	cli    
c0105e8a:	f4                   	hlt    
c0105e8b:	8b 5b 04             	mov    0x4(%ebx),%ebx
c0105e8e:	85 db                	test   %ebx,%ebx
c0105e90:	74 4c                	je     c0105ede <list_find+0xb7>
c0105e92:	81 3b 58 04 00 00    	cmpl   $0x458,(%ebx)
c0105e98:	74 28                	je     c0105ec2 <list_find+0x9b>
c0105e9a:	83 ec 0c             	sub    $0xc,%esp
c0105e9d:	68 d8 12 11 c0       	push   $0xc01112d8
c0105ea2:	6a 79                	push   $0x79
c0105ea4:	68 62 11 11 c0       	push   $0xc0111162
c0105ea9:	68 32 12 11 c0       	push   $0xc0111232
c0105eae:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105eb3:	e8 b0 e3 ff ff       	call   c0104268 <print>
c0105eb8:	83 c4 20             	add    $0x20,%esp
c0105ebb:	e8 c3 b0 ff ff       	call   c0100f83 <backtrace>
c0105ec0:	fa                   	cli    
c0105ec1:	f4                   	hlt    
c0105ec2:	50                   	push   %eax
c0105ec3:	50                   	push   %eax
c0105ec4:	ff 75 0c             	pushl  0xc(%ebp)
c0105ec7:	ff 73 04             	pushl  0x4(%ebx)
c0105eca:	ff 55 10             	call   *0x10(%ebp)
c0105ecd:	83 c4 10             	add    $0x10,%esp
c0105ed0:	85 c0                	test   %eax,%eax
c0105ed2:	75 05                	jne    c0105ed9 <list_find+0xb2>
c0105ed4:	8b 43 04             	mov    0x4(%ebx),%eax
c0105ed7:	eb 07                	jmp    c0105ee0 <list_find+0xb9>
c0105ed9:	8b 5b 08             	mov    0x8(%ebx),%ebx
c0105edc:	eb b0                	jmp    c0105e8e <list_find+0x67>
c0105ede:	31 c0                	xor    %eax,%eax
c0105ee0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0105ee3:	c9                   	leave  
c0105ee4:	c3                   	ret    

c0105ee5 <list_remove>:
c0105ee5:	55                   	push   %ebp
c0105ee6:	89 e5                	mov    %esp,%ebp
c0105ee8:	57                   	push   %edi
c0105ee9:	56                   	push   %esi
c0105eea:	53                   	push   %ebx
c0105eeb:	83 ec 0c             	sub    $0xc,%esp
c0105eee:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105ef1:	85 db                	test   %ebx,%ebx
c0105ef3:	75 2b                	jne    c0105f20 <list_remove+0x3b>
c0105ef5:	83 ec 0c             	sub    $0xc,%esp
c0105ef8:	68 cc 12 11 c0       	push   $0xc01112cc
c0105efd:	68 83 00 00 00       	push   $0x83
c0105f02:	68 62 11 11 c0       	push   $0xc0111162
c0105f07:	68 6d 11 11 c0       	push   $0xc011116d
c0105f0c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105f11:	e8 52 e3 ff ff       	call   c0104268 <print>
c0105f16:	83 c4 20             	add    $0x20,%esp
c0105f19:	e8 65 b0 ff ff       	call   c0100f83 <backtrace>
c0105f1e:	fa                   	cli    
c0105f1f:	f4                   	hlt    
c0105f20:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0105f26:	74 2b                	je     c0105f53 <list_remove+0x6e>
c0105f28:	83 ec 0c             	sub    $0xc,%esp
c0105f2b:	68 cc 12 11 c0       	push   $0xc01112cc
c0105f30:	68 84 00 00 00       	push   $0x84
c0105f35:	68 62 11 11 c0       	push   $0xc0111162
c0105f3a:	68 79 11 11 c0       	push   $0xc0111179
c0105f3f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105f44:	e8 1f e3 ff ff       	call   c0104268 <print>
c0105f49:	83 c4 20             	add    $0x20,%esp
c0105f4c:	e8 32 b0 ff ff       	call   c0100f83 <backtrace>
c0105f51:	fa                   	cli    
c0105f52:	f4                   	hlt    
c0105f53:	8b 73 04             	mov    0x4(%ebx),%esi
c0105f56:	31 ff                	xor    %edi,%edi
c0105f58:	85 f6                	test   %esi,%esi
c0105f5a:	74 76                	je     c0105fd2 <list_remove+0xed>
c0105f5c:	81 3e 58 04 00 00    	cmpl   $0x458,(%esi)
c0105f62:	74 2b                	je     c0105f8f <list_remove+0xaa>
c0105f64:	83 ec 0c             	sub    $0xc,%esp
c0105f67:	68 cc 12 11 c0       	push   $0xc01112cc
c0105f6c:	68 8a 00 00 00       	push   $0x8a
c0105f71:	68 62 11 11 c0       	push   $0xc0111162
c0105f76:	68 32 12 11 c0       	push   $0xc0111232
c0105f7b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0105f80:	e8 e3 e2 ff ff       	call   c0104268 <print>
c0105f85:	83 c4 20             	add    $0x20,%esp
c0105f88:	e8 f6 af ff ff       	call   c0100f83 <backtrace>
c0105f8d:	fa                   	cli    
c0105f8e:	f4                   	hlt    
c0105f8f:	50                   	push   %eax
c0105f90:	50                   	push   %eax
c0105f91:	ff 75 0c             	pushl  0xc(%ebp)
c0105f94:	ff 76 04             	pushl  0x4(%esi)
c0105f97:	ff 55 10             	call   *0x10(%ebp)
c0105f9a:	83 c4 10             	add    $0x10,%esp
c0105f9d:	85 c0                	test   %eax,%eax
c0105f9f:	8b 46 08             	mov    0x8(%esi),%eax
c0105fa2:	75 28                	jne    c0105fcc <list_remove+0xe7>
c0105fa4:	85 ff                	test   %edi,%edi
c0105fa6:	75 05                	jne    c0105fad <list_remove+0xc8>
c0105fa8:	89 43 04             	mov    %eax,0x4(%ebx)
c0105fab:	eb 03                	jmp    c0105fb0 <list_remove+0xcb>
c0105fad:	89 47 08             	mov    %eax,0x8(%edi)
c0105fb0:	3b 73 08             	cmp    0x8(%ebx),%esi
c0105fb3:	75 03                	jne    c0105fb8 <list_remove+0xd3>
c0105fb5:	89 7b 08             	mov    %edi,0x8(%ebx)
c0105fb8:	8b 7e 04             	mov    0x4(%esi),%edi
c0105fbb:	83 ec 0c             	sub    $0xc,%esp
c0105fbe:	56                   	push   %esi
c0105fbf:	e8 a8 be ff ff       	call   c0101e6c <kfree>
c0105fc4:	ff 4b 0c             	decl   0xc(%ebx)
c0105fc7:	83 c4 10             	add    $0x10,%esp
c0105fca:	eb 08                	jmp    c0105fd4 <list_remove+0xef>
c0105fcc:	89 f7                	mov    %esi,%edi
c0105fce:	89 c6                	mov    %eax,%esi
c0105fd0:	eb 86                	jmp    c0105f58 <list_remove+0x73>
c0105fd2:	31 ff                	xor    %edi,%edi
c0105fd4:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
c0105fd8:	75 07                	jne    c0105fe1 <list_remove+0xfc>
c0105fda:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
c0105fe1:	89 f8                	mov    %edi,%eax
c0105fe3:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0105fe6:	5b                   	pop    %ebx
c0105fe7:	5e                   	pop    %esi
c0105fe8:	5f                   	pop    %edi
c0105fe9:	5d                   	pop    %ebp
c0105fea:	c3                   	ret    

c0105feb <list_isempty>:
c0105feb:	55                   	push   %ebp
c0105fec:	89 e5                	mov    %esp,%ebp
c0105fee:	53                   	push   %ebx
c0105fef:	50                   	push   %eax
c0105ff0:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0105ff3:	85 db                	test   %ebx,%ebx
c0105ff5:	75 2b                	jne    c0106022 <list_isempty+0x37>
c0105ff7:	83 ec 0c             	sub    $0xc,%esp
c0105ffa:	68 bc 12 11 c0       	push   $0xc01112bc
c0105fff:	68 a2 00 00 00       	push   $0xa2
c0106004:	68 62 11 11 c0       	push   $0xc0111162
c0106009:	68 6d 11 11 c0       	push   $0xc011116d
c010600e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106013:	e8 50 e2 ff ff       	call   c0104268 <print>
c0106018:	83 c4 20             	add    $0x20,%esp
c010601b:	e8 63 af ff ff       	call   c0100f83 <backtrace>
c0106020:	fa                   	cli    
c0106021:	f4                   	hlt    
c0106022:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c0106028:	74 2b                	je     c0106055 <list_isempty+0x6a>
c010602a:	83 ec 0c             	sub    $0xc,%esp
c010602d:	68 bc 12 11 c0       	push   $0xc01112bc
c0106032:	68 a3 00 00 00       	push   $0xa3
c0106037:	68 62 11 11 c0       	push   $0xc0111162
c010603c:	68 79 11 11 c0       	push   $0xc0111179
c0106041:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106046:	e8 1d e2 ff ff       	call   c0104268 <print>
c010604b:	83 c4 20             	add    $0x20,%esp
c010604e:	e8 30 af ff ff       	call   c0100f83 <backtrace>
c0106053:	fa                   	cli    
c0106054:	f4                   	hlt    
c0106055:	31 c0                	xor    %eax,%eax
c0106057:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
c010605b:	0f 94 c0             	sete   %al
c010605e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106061:	c9                   	leave  
c0106062:	c3                   	ret    

c0106063 <list_getsize>:
c0106063:	55                   	push   %ebp
c0106064:	89 e5                	mov    %esp,%ebp
c0106066:	53                   	push   %ebx
c0106067:	50                   	push   %eax
c0106068:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010606b:	85 db                	test   %ebx,%ebx
c010606d:	75 2b                	jne    c010609a <list_getsize+0x37>
c010606f:	83 ec 0c             	sub    $0xc,%esp
c0106072:	68 ac 12 11 c0       	push   $0xc01112ac
c0106077:	68 aa 00 00 00       	push   $0xaa
c010607c:	68 62 11 11 c0       	push   $0xc0111162
c0106081:	68 6d 11 11 c0       	push   $0xc011116d
c0106086:	68 2b ff 10 c0       	push   $0xc010ff2b
c010608b:	e8 d8 e1 ff ff       	call   c0104268 <print>
c0106090:	83 c4 20             	add    $0x20,%esp
c0106093:	e8 eb ae ff ff       	call   c0100f83 <backtrace>
c0106098:	fa                   	cli    
c0106099:	f4                   	hlt    
c010609a:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c01060a0:	74 2b                	je     c01060cd <list_getsize+0x6a>
c01060a2:	83 ec 0c             	sub    $0xc,%esp
c01060a5:	68 ac 12 11 c0       	push   $0xc01112ac
c01060aa:	68 ab 00 00 00       	push   $0xab
c01060af:	68 62 11 11 c0       	push   $0xc0111162
c01060b4:	68 79 11 11 c0       	push   $0xc0111179
c01060b9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01060be:	e8 a5 e1 ff ff       	call   c0104268 <print>
c01060c3:	83 c4 20             	add    $0x20,%esp
c01060c6:	e8 b8 ae ff ff       	call   c0100f83 <backtrace>
c01060cb:	fa                   	cli    
c01060cc:	f4                   	hlt    
c01060cd:	8b 43 0c             	mov    0xc(%ebx),%eax
c01060d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01060d3:	c9                   	leave  
c01060d4:	c3                   	ret    

c01060d5 <list_destroy>:
c01060d5:	55                   	push   %ebp
c01060d6:	89 e5                	mov    %esp,%ebp
c01060d8:	57                   	push   %edi
c01060d9:	56                   	push   %esi
c01060da:	53                   	push   %ebx
c01060db:	83 ec 0c             	sub    $0xc,%esp
c01060de:	8b 75 08             	mov    0x8(%ebp),%esi
c01060e1:	85 f6                	test   %esi,%esi
c01060e3:	75 0f                	jne    c01060f4 <list_destroy+0x1f>
c01060e5:	89 75 08             	mov    %esi,0x8(%ebp)
c01060e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01060eb:	5b                   	pop    %ebx
c01060ec:	5e                   	pop    %esi
c01060ed:	5f                   	pop    %edi
c01060ee:	5d                   	pop    %ebp
c01060ef:	e9 78 bd ff ff       	jmp    c0101e6c <kfree>
c01060f4:	81 3e 57 04 00 00    	cmpl   $0x457,(%esi)
c01060fa:	74 2b                	je     c0106127 <list_destroy+0x52>
c01060fc:	83 ec 0c             	sub    $0xc,%esp
c01060ff:	68 9c 12 11 c0       	push   $0xc011129c
c0106104:	68 b3 00 00 00       	push   $0xb3
c0106109:	68 62 11 11 c0       	push   $0xc0111162
c010610e:	68 79 11 11 c0       	push   $0xc0111179
c0106113:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106118:	e8 4b e1 ff ff       	call   c0104268 <print>
c010611d:	83 c4 20             	add    $0x20,%esp
c0106120:	e8 5e ae ff ff       	call   c0100f83 <backtrace>
c0106125:	fa                   	cli    
c0106126:	f4                   	hlt    
c0106127:	8b 5e 04             	mov    0x4(%esi),%ebx
c010612a:	85 db                	test   %ebx,%ebx
c010612c:	74 b7                	je     c01060e5 <list_destroy+0x10>
c010612e:	81 3b 58 04 00 00    	cmpl   $0x458,(%ebx)
c0106134:	74 2b                	je     c0106161 <list_destroy+0x8c>
c0106136:	83 ec 0c             	sub    $0xc,%esp
c0106139:	68 9c 12 11 c0       	push   $0xc011129c
c010613e:	68 b9 00 00 00       	push   $0xb9
c0106143:	68 62 11 11 c0       	push   $0xc0111162
c0106148:	68 32 12 11 c0       	push   $0xc0111232
c010614d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106152:	e8 11 e1 ff ff       	call   c0104268 <print>
c0106157:	83 c4 20             	add    $0x20,%esp
c010615a:	e8 24 ae ff ff       	call   c0100f83 <backtrace>
c010615f:	fa                   	cli    
c0106160:	f4                   	hlt    
c0106161:	8b 7b 08             	mov    0x8(%ebx),%edi
c0106164:	83 ec 0c             	sub    $0xc,%esp
c0106167:	53                   	push   %ebx
c0106168:	e8 ff bc ff ff       	call   c0101e6c <kfree>
c010616d:	83 c4 10             	add    $0x10,%esp
c0106170:	89 fb                	mov    %edi,%ebx
c0106172:	eb b6                	jmp    c010612a <list_destroy+0x55>

c0106174 <list_assertvalid>:
c0106174:	55                   	push   %ebp
c0106175:	89 e5                	mov    %esp,%ebp
c0106177:	57                   	push   %edi
c0106178:	56                   	push   %esi
c0106179:	53                   	push   %ebx
c010617a:	83 ec 0c             	sub    $0xc,%esp
c010617d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106180:	85 db                	test   %ebx,%ebx
c0106182:	75 2b                	jne    c01061af <list_assertvalid+0x3b>
c0106184:	83 ec 0c             	sub    $0xc,%esp
c0106187:	68 88 12 11 c0       	push   $0xc0111288
c010618c:	68 c5 00 00 00       	push   $0xc5
c0106191:	68 62 11 11 c0       	push   $0xc0111162
c0106196:	68 6d 11 11 c0       	push   $0xc011116d
c010619b:	68 2b ff 10 c0       	push   $0xc010ff2b
c01061a0:	e8 c3 e0 ff ff       	call   c0104268 <print>
c01061a5:	83 c4 20             	add    $0x20,%esp
c01061a8:	e8 d6 ad ff ff       	call   c0100f83 <backtrace>
c01061ad:	fa                   	cli    
c01061ae:	f4                   	hlt    
c01061af:	81 3b 57 04 00 00    	cmpl   $0x457,(%ebx)
c01061b5:	74 2b                	je     c01061e2 <list_assertvalid+0x6e>
c01061b7:	83 ec 0c             	sub    $0xc,%esp
c01061ba:	68 88 12 11 c0       	push   $0xc0111288
c01061bf:	68 c6 00 00 00       	push   $0xc6
c01061c4:	68 62 11 11 c0       	push   $0xc0111162
c01061c9:	68 79 11 11 c0       	push   $0xc0111179
c01061ce:	68 2b ff 10 c0       	push   $0xc010ff2b
c01061d3:	e8 90 e0 ff ff       	call   c0104268 <print>
c01061d8:	83 c4 20             	add    $0x20,%esp
c01061db:	e8 a3 ad ff ff       	call   c0100f83 <backtrace>
c01061e0:	fa                   	cli    
c01061e1:	f4                   	hlt    
c01061e2:	8b 73 04             	mov    0x4(%ebx),%esi
c01061e5:	31 c0                	xor    %eax,%eax
c01061e7:	31 ff                	xor    %edi,%edi
c01061e9:	85 f6                	test   %esi,%esi
c01061eb:	74 3b                	je     c0106228 <list_assertvalid+0xb4>
c01061ed:	81 3e 58 04 00 00    	cmpl   $0x458,(%esi)
c01061f3:	74 2b                	je     c0106220 <list_assertvalid+0xac>
c01061f5:	83 ec 0c             	sub    $0xc,%esp
c01061f8:	68 88 12 11 c0       	push   $0xc0111288
c01061fd:	68 cc 00 00 00       	push   $0xcc
c0106202:	68 62 11 11 c0       	push   $0xc0111162
c0106207:	68 32 12 11 c0       	push   $0xc0111232
c010620c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106211:	e8 52 e0 ff ff       	call   c0104268 <print>
c0106216:	83 c4 20             	add    $0x20,%esp
c0106219:	e8 65 ad ff ff       	call   c0100f83 <backtrace>
c010621e:	fa                   	cli    
c010621f:	f4                   	hlt    
c0106220:	47                   	inc    %edi
c0106221:	89 f0                	mov    %esi,%eax
c0106223:	8b 76 08             	mov    0x8(%esi),%esi
c0106226:	eb c1                	jmp    c01061e9 <list_assertvalid+0x75>
c0106228:	85 ff                	test   %edi,%edi
c010622a:	75 1f                	jne    c010624b <list_assertvalid+0xd7>
c010622c:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c0106230:	74 49                	je     c010627b <list_assertvalid+0x107>
c0106232:	83 ec 0c             	sub    $0xc,%esp
c0106235:	68 88 12 11 c0       	push   $0xc0111288
c010623a:	68 d2 00 00 00       	push   $0xd2
c010623f:	68 62 11 11 c0       	push   $0xc0111162
c0106244:	68 4e 12 11 c0       	push   $0xc011124e
c0106249:	eb 1c                	jmp    c0106267 <list_assertvalid+0xf3>
c010624b:	3b 43 08             	cmp    0x8(%ebx),%eax
c010624e:	74 2b                	je     c010627b <list_assertvalid+0x107>
c0106250:	83 ec 0c             	sub    $0xc,%esp
c0106253:	68 88 12 11 c0       	push   $0xc0111288
c0106258:	68 d4 00 00 00       	push   $0xd4
c010625d:	68 62 11 11 c0       	push   $0xc0111162
c0106262:	68 60 12 11 c0       	push   $0xc0111260
c0106267:	68 2b ff 10 c0       	push   $0xc010ff2b
c010626c:	e8 f7 df ff ff       	call   c0104268 <print>
c0106271:	83 c4 20             	add    $0x20,%esp
c0106274:	e8 0a ad ff ff       	call   c0100f83 <backtrace>
c0106279:	fa                   	cli    
c010627a:	f4                   	hlt    
c010627b:	3b 7b 0c             	cmp    0xc(%ebx),%edi
c010627e:	74 2b                	je     c01062ab <list_assertvalid+0x137>
c0106280:	83 ec 0c             	sub    $0xc,%esp
c0106283:	68 88 12 11 c0       	push   $0xc0111288
c0106288:	68 d5 00 00 00       	push   $0xd5
c010628d:	68 62 11 11 c0       	push   $0xc0111162
c0106292:	68 72 12 11 c0       	push   $0xc0111272
c0106297:	68 2b ff 10 c0       	push   $0xc010ff2b
c010629c:	e8 c7 df ff ff       	call   c0104268 <print>
c01062a1:	83 c4 20             	add    $0x20,%esp
c01062a4:	e8 da ac ff ff       	call   c0100f83 <backtrace>
c01062a9:	fa                   	cli    
c01062aa:	f4                   	hlt    
c01062ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01062ae:	5b                   	pop    %ebx
c01062af:	5e                   	pop    %esi
c01062b0:	5f                   	pop    %edi
c01062b1:	5d                   	pop    %ebp
c01062b2:	c3                   	ret    

c01062b3 <queue_create>:
c01062b3:	55                   	push   %ebp
c01062b4:	89 e5                	mov    %esp,%ebp
c01062b6:	53                   	push   %ebx
c01062b7:	83 ec 10             	sub    $0x10,%esp
c01062ba:	6a 08                	push   $0x8
c01062bc:	e8 ab ba ff ff       	call   c0101d6c <kmalloc>
c01062c1:	89 c3                	mov    %eax,%ebx
c01062c3:	83 c4 10             	add    $0x10,%esp
c01062c6:	31 c0                	xor    %eax,%eax
c01062c8:	85 db                	test   %ebx,%ebx
c01062ca:	74 24                	je     c01062f0 <queue_create+0x3d>
c01062cc:	e8 86 f8 ff ff       	call   c0105b57 <list_create>
c01062d1:	89 43 04             	mov    %eax,0x4(%ebx)
c01062d4:	85 c0                	test   %eax,%eax
c01062d6:	75 10                	jne    c01062e8 <queue_create+0x35>
c01062d8:	83 ec 0c             	sub    $0xc,%esp
c01062db:	53                   	push   %ebx
c01062dc:	e8 8b bb ff ff       	call   c0101e6c <kfree>
c01062e1:	83 c4 10             	add    $0x10,%esp
c01062e4:	31 c0                	xor    %eax,%eax
c01062e6:	eb 08                	jmp    c01062f0 <queue_create+0x3d>
c01062e8:	c7 03 ae 08 00 00    	movl   $0x8ae,(%ebx)
c01062ee:	89 d8                	mov    %ebx,%eax
c01062f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01062f3:	c9                   	leave  
c01062f4:	c3                   	ret    

c01062f5 <queue_push>:
c01062f5:	55                   	push   %ebp
c01062f6:	89 e5                	mov    %esp,%ebp
c01062f8:	56                   	push   %esi
c01062f9:	53                   	push   %ebx
c01062fa:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01062fd:	8b 75 0c             	mov    0xc(%ebp),%esi
c0106300:	85 db                	test   %ebx,%ebx
c0106302:	75 28                	jne    c010632c <queue_push+0x37>
c0106304:	83 ec 0c             	sub    $0xc,%esp
c0106307:	68 9c 13 11 c0       	push   $0xc011139c
c010630c:	6a 21                	push   $0x21
c010630e:	68 0f 13 11 c0       	push   $0xc011130f
c0106313:	68 1b 13 11 c0       	push   $0xc011131b
c0106318:	68 2b ff 10 c0       	push   $0xc010ff2b
c010631d:	e8 46 df ff ff       	call   c0104268 <print>
c0106322:	83 c4 20             	add    $0x20,%esp
c0106325:	e8 59 ac ff ff       	call   c0100f83 <backtrace>
c010632a:	fa                   	cli    
c010632b:	f4                   	hlt    
c010632c:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c0106332:	74 28                	je     c010635c <queue_push+0x67>
c0106334:	83 ec 0c             	sub    $0xc,%esp
c0106337:	68 9c 13 11 c0       	push   $0xc011139c
c010633c:	6a 22                	push   $0x22
c010633e:	68 0f 13 11 c0       	push   $0xc011130f
c0106343:	68 25 13 11 c0       	push   $0xc0111325
c0106348:	68 2b ff 10 c0       	push   $0xc010ff2b
c010634d:	e8 16 df ff ff       	call   c0104268 <print>
c0106352:	83 c4 20             	add    $0x20,%esp
c0106355:	e8 29 ac ff ff       	call   c0100f83 <backtrace>
c010635a:	fa                   	cli    
c010635b:	f4                   	hlt    
c010635c:	89 75 0c             	mov    %esi,0xc(%ebp)
c010635f:	8b 43 04             	mov    0x4(%ebx),%eax
c0106362:	89 45 08             	mov    %eax,0x8(%ebp)
c0106365:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0106368:	5b                   	pop    %ebx
c0106369:	5e                   	pop    %esi
c010636a:	5d                   	pop    %ebp
c010636b:	e9 18 f8 ff ff       	jmp    c0105b88 <list_push_back>

c0106370 <queue_pop>:
c0106370:	55                   	push   %ebp
c0106371:	89 e5                	mov    %esp,%ebp
c0106373:	53                   	push   %ebx
c0106374:	50                   	push   %eax
c0106375:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106378:	85 db                	test   %ebx,%ebx
c010637a:	75 28                	jne    c01063a4 <queue_pop+0x34>
c010637c:	83 ec 0c             	sub    $0xc,%esp
c010637f:	68 90 13 11 c0       	push   $0xc0111390
c0106384:	6a 28                	push   $0x28
c0106386:	68 0f 13 11 c0       	push   $0xc011130f
c010638b:	68 1b 13 11 c0       	push   $0xc011131b
c0106390:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106395:	e8 ce de ff ff       	call   c0104268 <print>
c010639a:	83 c4 20             	add    $0x20,%esp
c010639d:	e8 e1 ab ff ff       	call   c0100f83 <backtrace>
c01063a2:	fa                   	cli    
c01063a3:	f4                   	hlt    
c01063a4:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c01063aa:	74 28                	je     c01063d4 <queue_pop+0x64>
c01063ac:	83 ec 0c             	sub    $0xc,%esp
c01063af:	68 90 13 11 c0       	push   $0xc0111390
c01063b4:	6a 29                	push   $0x29
c01063b6:	68 0f 13 11 c0       	push   $0xc011130f
c01063bb:	68 25 13 11 c0       	push   $0xc0111325
c01063c0:	68 2b ff 10 c0       	push   $0xc010ff2b
c01063c5:	e8 9e de ff ff       	call   c0104268 <print>
c01063ca:	83 c4 20             	add    $0x20,%esp
c01063cd:	e8 b1 ab ff ff       	call   c0100f83 <backtrace>
c01063d2:	fa                   	cli    
c01063d3:	f4                   	hlt    
c01063d4:	8b 43 04             	mov    0x4(%ebx),%eax
c01063d7:	89 45 08             	mov    %eax,0x8(%ebp)
c01063da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01063dd:	c9                   	leave  
c01063de:	e9 a5 f8 ff ff       	jmp    c0105c88 <list_pop_front>

c01063e3 <queue_front>:
c01063e3:	55                   	push   %ebp
c01063e4:	89 e5                	mov    %esp,%ebp
c01063e6:	53                   	push   %ebx
c01063e7:	50                   	push   %eax
c01063e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01063eb:	85 db                	test   %ebx,%ebx
c01063ed:	75 28                	jne    c0106417 <queue_front+0x34>
c01063ef:	83 ec 0c             	sub    $0xc,%esp
c01063f2:	68 84 13 11 c0       	push   $0xc0111384
c01063f7:	6a 2f                	push   $0x2f
c01063f9:	68 0f 13 11 c0       	push   $0xc011130f
c01063fe:	68 1b 13 11 c0       	push   $0xc011131b
c0106403:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106408:	e8 5b de ff ff       	call   c0104268 <print>
c010640d:	83 c4 20             	add    $0x20,%esp
c0106410:	e8 6e ab ff ff       	call   c0100f83 <backtrace>
c0106415:	fa                   	cli    
c0106416:	f4                   	hlt    
c0106417:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c010641d:	74 28                	je     c0106447 <queue_front+0x64>
c010641f:	83 ec 0c             	sub    $0xc,%esp
c0106422:	68 84 13 11 c0       	push   $0xc0111384
c0106427:	6a 30                	push   $0x30
c0106429:	68 0f 13 11 c0       	push   $0xc011130f
c010642e:	68 25 13 11 c0       	push   $0xc0111325
c0106433:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106438:	e8 2b de ff ff       	call   c0104268 <print>
c010643d:	83 c4 20             	add    $0x20,%esp
c0106440:	e8 3e ab ff ff       	call   c0100f83 <backtrace>
c0106445:	fa                   	cli    
c0106446:	f4                   	hlt    
c0106447:	8b 43 04             	mov    0x4(%ebx),%eax
c010644a:	89 45 08             	mov    %eax,0x8(%ebp)
c010644d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106450:	c9                   	leave  
c0106451:	e9 f9 f8 ff ff       	jmp    c0105d4f <list_front>

c0106456 <queue_isempty>:
c0106456:	55                   	push   %ebp
c0106457:	89 e5                	mov    %esp,%ebp
c0106459:	53                   	push   %ebx
c010645a:	50                   	push   %eax
c010645b:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010645e:	85 db                	test   %ebx,%ebx
c0106460:	75 28                	jne    c010648a <queue_isempty+0x34>
c0106462:	83 ec 0c             	sub    $0xc,%esp
c0106465:	68 74 13 11 c0       	push   $0xc0111374
c010646a:	6a 36                	push   $0x36
c010646c:	68 0f 13 11 c0       	push   $0xc011130f
c0106471:	68 1b 13 11 c0       	push   $0xc011131b
c0106476:	68 2b ff 10 c0       	push   $0xc010ff2b
c010647b:	e8 e8 dd ff ff       	call   c0104268 <print>
c0106480:	83 c4 20             	add    $0x20,%esp
c0106483:	e8 fb aa ff ff       	call   c0100f83 <backtrace>
c0106488:	fa                   	cli    
c0106489:	f4                   	hlt    
c010648a:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c0106490:	74 28                	je     c01064ba <queue_isempty+0x64>
c0106492:	83 ec 0c             	sub    $0xc,%esp
c0106495:	68 74 13 11 c0       	push   $0xc0111374
c010649a:	6a 37                	push   $0x37
c010649c:	68 0f 13 11 c0       	push   $0xc011130f
c01064a1:	68 25 13 11 c0       	push   $0xc0111325
c01064a6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01064ab:	e8 b8 dd ff ff       	call   c0104268 <print>
c01064b0:	83 c4 20             	add    $0x20,%esp
c01064b3:	e8 cb aa ff ff       	call   c0100f83 <backtrace>
c01064b8:	fa                   	cli    
c01064b9:	f4                   	hlt    
c01064ba:	8b 43 04             	mov    0x4(%ebx),%eax
c01064bd:	89 45 08             	mov    %eax,0x8(%ebp)
c01064c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01064c3:	c9                   	leave  
c01064c4:	e9 22 fb ff ff       	jmp    c0105feb <list_isempty>

c01064c9 <queue_getsize>:
c01064c9:	55                   	push   %ebp
c01064ca:	89 e5                	mov    %esp,%ebp
c01064cc:	53                   	push   %ebx
c01064cd:	50                   	push   %eax
c01064ce:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01064d1:	85 db                	test   %ebx,%ebx
c01064d3:	75 28                	jne    c01064fd <queue_getsize+0x34>
c01064d5:	83 ec 0c             	sub    $0xc,%esp
c01064d8:	68 64 13 11 c0       	push   $0xc0111364
c01064dd:	6a 3d                	push   $0x3d
c01064df:	68 0f 13 11 c0       	push   $0xc011130f
c01064e4:	68 1b 13 11 c0       	push   $0xc011131b
c01064e9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01064ee:	e8 75 dd ff ff       	call   c0104268 <print>
c01064f3:	83 c4 20             	add    $0x20,%esp
c01064f6:	e8 88 aa ff ff       	call   c0100f83 <backtrace>
c01064fb:	fa                   	cli    
c01064fc:	f4                   	hlt    
c01064fd:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c0106503:	74 28                	je     c010652d <queue_getsize+0x64>
c0106505:	83 ec 0c             	sub    $0xc,%esp
c0106508:	68 64 13 11 c0       	push   $0xc0111364
c010650d:	6a 3e                	push   $0x3e
c010650f:	68 0f 13 11 c0       	push   $0xc011130f
c0106514:	68 25 13 11 c0       	push   $0xc0111325
c0106519:	68 2b ff 10 c0       	push   $0xc010ff2b
c010651e:	e8 45 dd ff ff       	call   c0104268 <print>
c0106523:	83 c4 20             	add    $0x20,%esp
c0106526:	e8 58 aa ff ff       	call   c0100f83 <backtrace>
c010652b:	fa                   	cli    
c010652c:	f4                   	hlt    
c010652d:	8b 43 04             	mov    0x4(%ebx),%eax
c0106530:	89 45 08             	mov    %eax,0x8(%ebp)
c0106533:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106536:	c9                   	leave  
c0106537:	e9 27 fb ff ff       	jmp    c0106063 <list_getsize>

c010653c <queue_destroy>:
c010653c:	55                   	push   %ebp
c010653d:	89 e5                	mov    %esp,%ebp
c010653f:	53                   	push   %ebx
c0106540:	50                   	push   %eax
c0106541:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106544:	85 db                	test   %ebx,%ebx
c0106546:	74 3e                	je     c0106586 <queue_destroy+0x4a>
c0106548:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c010654e:	74 28                	je     c0106578 <queue_destroy+0x3c>
c0106550:	83 ec 0c             	sub    $0xc,%esp
c0106553:	68 54 13 11 c0       	push   $0xc0111354
c0106558:	6a 45                	push   $0x45
c010655a:	68 0f 13 11 c0       	push   $0xc011130f
c010655f:	68 25 13 11 c0       	push   $0xc0111325
c0106564:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106569:	e8 fa dc ff ff       	call   c0104268 <print>
c010656e:	83 c4 20             	add    $0x20,%esp
c0106571:	e8 0d aa ff ff       	call   c0100f83 <backtrace>
c0106576:	fa                   	cli    
c0106577:	f4                   	hlt    
c0106578:	83 ec 0c             	sub    $0xc,%esp
c010657b:	ff 73 04             	pushl  0x4(%ebx)
c010657e:	e8 52 fb ff ff       	call   c01060d5 <list_destroy>
c0106583:	83 c4 10             	add    $0x10,%esp
c0106586:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0106589:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010658c:	c9                   	leave  
c010658d:	e9 da b8 ff ff       	jmp    c0101e6c <kfree>

c0106592 <queue_assertvalid>:
c0106592:	55                   	push   %ebp
c0106593:	89 e5                	mov    %esp,%ebp
c0106595:	53                   	push   %ebx
c0106596:	50                   	push   %eax
c0106597:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010659a:	85 db                	test   %ebx,%ebx
c010659c:	75 28                	jne    c01065c6 <queue_assertvalid+0x34>
c010659e:	83 ec 0c             	sub    $0xc,%esp
c01065a1:	68 40 13 11 c0       	push   $0xc0111340
c01065a6:	6a 4d                	push   $0x4d
c01065a8:	68 0f 13 11 c0       	push   $0xc011130f
c01065ad:	68 1b 13 11 c0       	push   $0xc011131b
c01065b2:	68 2b ff 10 c0       	push   $0xc010ff2b
c01065b7:	e8 ac dc ff ff       	call   c0104268 <print>
c01065bc:	83 c4 20             	add    $0x20,%esp
c01065bf:	e8 bf a9 ff ff       	call   c0100f83 <backtrace>
c01065c4:	fa                   	cli    
c01065c5:	f4                   	hlt    
c01065c6:	81 3b ae 08 00 00    	cmpl   $0x8ae,(%ebx)
c01065cc:	74 28                	je     c01065f6 <queue_assertvalid+0x64>
c01065ce:	83 ec 0c             	sub    $0xc,%esp
c01065d1:	68 40 13 11 c0       	push   $0xc0111340
c01065d6:	6a 4e                	push   $0x4e
c01065d8:	68 0f 13 11 c0       	push   $0xc011130f
c01065dd:	68 25 13 11 c0       	push   $0xc0111325
c01065e2:	68 2b ff 10 c0       	push   $0xc010ff2b
c01065e7:	e8 7c dc ff ff       	call   c0104268 <print>
c01065ec:	83 c4 20             	add    $0x20,%esp
c01065ef:	e8 8f a9 ff ff       	call   c0100f83 <backtrace>
c01065f4:	fa                   	cli    
c01065f5:	f4                   	hlt    
c01065f6:	8b 43 04             	mov    0x4(%ebx),%eax
c01065f9:	89 45 08             	mov    %eax,0x8(%ebp)
c01065fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01065ff:	c9                   	leave  
c0106600:	e9 6f fb ff ff       	jmp    c0106174 <list_assertvalid>

c0106605 <bitmap_create>:
c0106605:	55                   	push   %ebp
c0106606:	89 e5                	mov    %esp,%ebp
c0106608:	57                   	push   %edi
c0106609:	56                   	push   %esi
c010660a:	53                   	push   %ebx
c010660b:	83 ec 28             	sub    $0x28,%esp
c010660e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106611:	6a 08                	push   $0x8
c0106613:	e8 54 b7 ff ff       	call   c0101d6c <kmalloc>
c0106618:	89 c7                	mov    %eax,%edi
c010661a:	83 c4 10             	add    $0x10,%esp
c010661d:	31 c0                	xor    %eax,%eax
c010661f:	85 ff                	test   %edi,%edi
c0106621:	0f 84 d4 00 00 00    	je     c01066fb <bitmap_create+0xf6>
c0106627:	8d 73 07             	lea    0x7(%ebx),%esi
c010662a:	c1 ee 03             	shr    $0x3,%esi
c010662d:	83 ec 0c             	sub    $0xc,%esp
c0106630:	56                   	push   %esi
c0106631:	e8 36 b7 ff ff       	call   c0101d6c <kmalloc>
c0106636:	89 47 04             	mov    %eax,0x4(%edi)
c0106639:	83 c4 10             	add    $0x10,%esp
c010663c:	85 c0                	test   %eax,%eax
c010663e:	75 13                	jne    c0106653 <bitmap_create+0x4e>
c0106640:	83 ec 0c             	sub    $0xc,%esp
c0106643:	57                   	push   %edi
c0106644:	e8 23 b8 ff ff       	call   c0101e6c <kfree>
c0106649:	83 c4 10             	add    $0x10,%esp
c010664c:	31 c0                	xor    %eax,%eax
c010664e:	e9 a8 00 00 00       	jmp    c01066fb <bitmap_create+0xf6>
c0106653:	52                   	push   %edx
c0106654:	56                   	push   %esi
c0106655:	6a 00                	push   $0x0
c0106657:	50                   	push   %eax
c0106658:	e8 cd e2 ff ff       	call   c010492a <memset>
c010665d:	89 1f                	mov    %ebx,(%edi)
c010665f:	89 da                	mov    %ebx,%edx
c0106661:	c1 ea 03             	shr    $0x3,%edx
c0106664:	83 c4 10             	add    $0x10,%esp
c0106667:	89 f8                	mov    %edi,%eax
c0106669:	39 d6                	cmp    %edx,%esi
c010666b:	0f 86 8a 00 00 00    	jbe    c01066fb <bitmap_create+0xf6>
c0106671:	4e                   	dec    %esi
c0106672:	39 f2                	cmp    %esi,%edx
c0106674:	74 28                	je     c010669e <bitmap_create+0x99>
c0106676:	83 ec 0c             	sub    $0xc,%esp
c0106679:	68 70 14 11 c0       	push   $0xc0111470
c010667e:	6a 20                	push   $0x20
c0106680:	68 a7 13 11 c0       	push   $0xc01113a7
c0106685:	68 b4 13 11 c0       	push   $0xc01113b4
c010668a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010668f:	e8 d4 db ff ff       	call   c0104268 <print>
c0106694:	83 c4 20             	add    $0x20,%esp
c0106697:	e8 e7 a8 ff ff       	call   c0100f83 <backtrace>
c010669c:	fa                   	cli    
c010669d:	f4                   	hlt    
c010669e:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
c01066a5:	29 c3                	sub    %eax,%ebx
c01066a7:	8d 43 ff             	lea    -0x1(%ebx),%eax
c01066aa:	83 f8 06             	cmp    $0x6,%eax
c01066ad:	76 28                	jbe    c01066d7 <bitmap_create+0xd2>
c01066af:	83 ec 0c             	sub    $0xc,%esp
c01066b2:	68 70 14 11 c0       	push   $0xc0111470
c01066b7:	6a 23                	push   $0x23
c01066b9:	68 a7 13 11 c0       	push   $0xc01113a7
c01066be:	68 c3 13 11 c0       	push   $0xc01113c3
c01066c3:	68 2b ff 10 c0       	push   $0xc010ff2b
c01066c8:	e8 9b db ff ff       	call   c0104268 <print>
c01066cd:	83 c4 20             	add    $0x20,%esp
c01066d0:	e8 ae a8 ff ff       	call   c0100f83 <backtrace>
c01066d5:	fa                   	cli    
c01066d6:	f4                   	hlt    
c01066d7:	ba 01 00 00 00       	mov    $0x1,%edx
c01066dc:	83 fb 07             	cmp    $0x7,%ebx
c01066df:	77 18                	ja     c01066f9 <bitmap_create+0xf4>
c01066e1:	8b 47 04             	mov    0x4(%edi),%eax
c01066e4:	01 f0                	add    %esi,%eax
c01066e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01066e9:	89 d0                	mov    %edx,%eax
c01066eb:	88 d9                	mov    %bl,%cl
c01066ed:	d3 e0                	shl    %cl,%eax
c01066ef:	89 c1                	mov    %eax,%ecx
c01066f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066f4:	08 08                	or     %cl,(%eax)
c01066f6:	43                   	inc    %ebx
c01066f7:	eb e3                	jmp    c01066dc <bitmap_create+0xd7>
c01066f9:	89 f8                	mov    %edi,%eax
c01066fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01066fe:	5b                   	pop    %ebx
c01066ff:	5e                   	pop    %esi
c0106700:	5f                   	pop    %edi
c0106701:	5d                   	pop    %ebp
c0106702:	c3                   	ret    

c0106703 <bitmap_getdata>:
c0106703:	55                   	push   %ebp
c0106704:	89 e5                	mov    %esp,%ebp
c0106706:	8b 45 08             	mov    0x8(%ebp),%eax
c0106709:	8b 40 04             	mov    0x4(%eax),%eax
c010670c:	5d                   	pop    %ebp
c010670d:	c3                   	ret    

c010670e <bitmap_alloc>:
c010670e:	55                   	push   %ebp
c010670f:	89 e5                	mov    %esp,%ebp
c0106711:	57                   	push   %edi
c0106712:	56                   	push   %esi
c0106713:	53                   	push   %ebx
c0106714:	83 ec 1c             	sub    $0x1c,%esp
c0106717:	8b 75 08             	mov    0x8(%ebp),%esi
c010671a:	8b 06                	mov    (%esi),%eax
c010671c:	83 c0 07             	add    $0x7,%eax
c010671f:	c1 e8 03             	shr    $0x3,%eax
c0106722:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106725:	31 db                	xor    %ebx,%ebx
c0106727:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
c010672a:	74 7f                	je     c01067ab <bitmap_alloc+0x9d>
c010672c:	8b 7e 04             	mov    0x4(%esi),%edi
c010672f:	01 df                	add    %ebx,%edi
c0106731:	8a 07                	mov    (%edi),%al
c0106733:	3c ff                	cmp    $0xff,%al
c0106735:	74 6e                	je     c01067a5 <bitmap_alloc+0x97>
c0106737:	31 c9                	xor    %ecx,%ecx
c0106739:	ba 01 00 00 00       	mov    $0x1,%edx
c010673e:	d3 e2                	shl    %cl,%edx
c0106740:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0106743:	8a 55 e4             	mov    -0x1c(%ebp),%dl
c0106746:	84 c2                	test   %al,%dl
c0106748:	75 3c                	jne    c0106786 <bitmap_alloc+0x78>
c010674a:	09 d0                	or     %edx,%eax
c010674c:	88 07                	mov    %al,(%edi)
c010674e:	8d 04 d9             	lea    (%ecx,%ebx,8),%eax
c0106751:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106754:	89 02                	mov    %eax,(%edx)
c0106756:	31 db                	xor    %ebx,%ebx
c0106758:	3b 06                	cmp    (%esi),%eax
c010675a:	72 54                	jb     c01067b0 <bitmap_alloc+0xa2>
c010675c:	83 ec 0c             	sub    $0xc,%esp
c010675f:	68 60 14 11 c0       	push   $0xc0111460
c0106764:	6a 3e                	push   $0x3e
c0106766:	68 a7 13 11 c0       	push   $0xc01113a7
c010676b:	68 da 13 11 c0       	push   $0xc01113da
c0106770:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106775:	e8 ee da ff ff       	call   c0104268 <print>
c010677a:	83 c4 20             	add    $0x20,%esp
c010677d:	e8 01 a8 ff ff       	call   c0100f83 <backtrace>
c0106782:	fa                   	cli    
c0106783:	f4                   	hlt    
c0106784:	eb 2a                	jmp    c01067b0 <bitmap_alloc+0xa2>
c0106786:	41                   	inc    %ecx
c0106787:	83 f9 08             	cmp    $0x8,%ecx
c010678a:	75 ad                	jne    c0106739 <bitmap_alloc+0x2b>
c010678c:	68 e9 13 11 c0       	push   $0xc01113e9
c0106791:	68 60 14 11 c0       	push   $0xc0111460
c0106796:	6a 42                	push   $0x42
c0106798:	68 a7 13 11 c0       	push   $0xc01113a7
c010679d:	e8 d3 d4 ff ff       	call   c0103c75 <_panic>
c01067a2:	83 c4 10             	add    $0x10,%esp
c01067a5:	43                   	inc    %ebx
c01067a6:	e9 7c ff ff ff       	jmp    c0106727 <bitmap_alloc+0x19>
c01067ab:	bb 05 00 00 00       	mov    $0x5,%ebx
c01067b0:	89 d8                	mov    %ebx,%eax
c01067b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01067b5:	5b                   	pop    %ebx
c01067b6:	5e                   	pop    %esi
c01067b7:	5f                   	pop    %edi
c01067b8:	5d                   	pop    %ebp
c01067b9:	c3                   	ret    

c01067ba <bitmap_mark>:
c01067ba:	55                   	push   %ebp
c01067bb:	89 e5                	mov    %esp,%ebp
c01067bd:	57                   	push   %edi
c01067be:	56                   	push   %esi
c01067bf:	53                   	push   %ebx
c01067c0:	83 ec 1c             	sub    $0x1c,%esp
c01067c3:	8b 7d 08             	mov    0x8(%ebp),%edi
c01067c6:	8b 75 0c             	mov    0xc(%ebp),%esi
c01067c9:	39 37                	cmp    %esi,(%edi)
c01067cb:	77 28                	ja     c01067f5 <bitmap_mark+0x3b>
c01067cd:	83 ec 0c             	sub    $0xc,%esp
c01067d0:	68 54 14 11 c0       	push   $0xc0111454
c01067d5:	6a 50                	push   $0x50
c01067d7:	68 a7 13 11 c0       	push   $0xc01113a7
c01067dc:	68 db 13 11 c0       	push   $0xc01113db
c01067e1:	68 2b ff 10 c0       	push   $0xc010ff2b
c01067e6:	e8 7d da ff ff       	call   c0104268 <print>
c01067eb:	83 c4 20             	add    $0x20,%esp
c01067ee:	e8 90 a7 ff ff       	call   c0100f83 <backtrace>
c01067f3:	fa                   	cli    
c01067f4:	f4                   	hlt    
c01067f5:	89 f3                	mov    %esi,%ebx
c01067f7:	c1 eb 03             	shr    $0x3,%ebx
c01067fa:	89 f1                	mov    %esi,%ecx
c01067fc:	83 e1 07             	and    $0x7,%ecx
c01067ff:	b8 01 00 00 00       	mov    $0x1,%eax
c0106804:	d3 e0                	shl    %cl,%eax
c0106806:	8b 57 04             	mov    0x4(%edi),%edx
c0106809:	84 04 1a             	test   %al,(%edx,%ebx,1)
c010680c:	74 2e                	je     c010683c <bitmap_mark+0x82>
c010680e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106811:	83 ec 0c             	sub    $0xc,%esp
c0106814:	68 54 14 11 c0       	push   $0xc0111454
c0106819:	6a 56                	push   $0x56
c010681b:	68 a7 13 11 c0       	push   $0xc01113a7
c0106820:	68 ff 13 11 c0       	push   $0xc01113ff
c0106825:	68 2b ff 10 c0       	push   $0xc010ff2b
c010682a:	e8 39 da ff ff       	call   c0104268 <print>
c010682f:	83 c4 20             	add    $0x20,%esp
c0106832:	e8 4c a7 ff ff       	call   c0100f83 <backtrace>
c0106837:	fa                   	cli    
c0106838:	f4                   	hlt    
c0106839:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010683c:	03 5f 04             	add    0x4(%edi),%ebx
c010683f:	08 03                	or     %al,(%ebx)
c0106841:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106844:	5b                   	pop    %ebx
c0106845:	5e                   	pop    %esi
c0106846:	5f                   	pop    %edi
c0106847:	5d                   	pop    %ebp
c0106848:	c3                   	ret    

c0106849 <bitmap_unmark>:
c0106849:	55                   	push   %ebp
c010684a:	89 e5                	mov    %esp,%ebp
c010684c:	57                   	push   %edi
c010684d:	56                   	push   %esi
c010684e:	53                   	push   %ebx
c010684f:	83 ec 0c             	sub    $0xc,%esp
c0106852:	8b 75 08             	mov    0x8(%ebp),%esi
c0106855:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0106858:	39 1e                	cmp    %ebx,(%esi)
c010685a:	77 28                	ja     c0106884 <bitmap_unmark+0x3b>
c010685c:	83 ec 0c             	sub    $0xc,%esp
c010685f:	68 44 14 11 c0       	push   $0xc0111444
c0106864:	6a 5c                	push   $0x5c
c0106866:	68 a7 13 11 c0       	push   $0xc01113a7
c010686b:	68 db 13 11 c0       	push   $0xc01113db
c0106870:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106875:	e8 ee d9 ff ff       	call   c0104268 <print>
c010687a:	83 c4 20             	add    $0x20,%esp
c010687d:	e8 01 a7 ff ff       	call   c0100f83 <backtrace>
c0106882:	fa                   	cli    
c0106883:	f4                   	hlt    
c0106884:	89 df                	mov    %ebx,%edi
c0106886:	c1 ef 03             	shr    $0x3,%edi
c0106889:	89 d9                	mov    %ebx,%ecx
c010688b:	83 e1 07             	and    $0x7,%ecx
c010688e:	bb 01 00 00 00       	mov    $0x1,%ebx
c0106893:	d3 e3                	shl    %cl,%ebx
c0106895:	8b 46 04             	mov    0x4(%esi),%eax
c0106898:	84 1c 38             	test   %bl,(%eax,%edi,1)
c010689b:	75 28                	jne    c01068c5 <bitmap_unmark+0x7c>
c010689d:	83 ec 0c             	sub    $0xc,%esp
c01068a0:	68 44 14 11 c0       	push   $0xc0111444
c01068a5:	6a 62                	push   $0x62
c01068a7:	68 a7 13 11 c0       	push   $0xc01113a7
c01068ac:	68 18 14 11 c0       	push   $0xc0111418
c01068b1:	68 2b ff 10 c0       	push   $0xc010ff2b
c01068b6:	e8 ad d9 ff ff       	call   c0104268 <print>
c01068bb:	83 c4 20             	add    $0x20,%esp
c01068be:	e8 c0 a6 ff ff       	call   c0100f83 <backtrace>
c01068c3:	fa                   	cli    
c01068c4:	f4                   	hlt    
c01068c5:	03 7e 04             	add    0x4(%esi),%edi
c01068c8:	f7 d3                	not    %ebx
c01068ca:	20 1f                	and    %bl,(%edi)
c01068cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01068cf:	5b                   	pop    %ebx
c01068d0:	5e                   	pop    %esi
c01068d1:	5f                   	pop    %edi
c01068d2:	5d                   	pop    %ebp
c01068d3:	c3                   	ret    

c01068d4 <bitmap_isset>:
c01068d4:	55                   	push   %ebp
c01068d5:	89 e5                	mov    %esp,%ebp
c01068d7:	56                   	push   %esi
c01068d8:	53                   	push   %ebx
c01068d9:	8b 75 08             	mov    0x8(%ebp),%esi
c01068dc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c01068df:	39 1e                	cmp    %ebx,(%esi)
c01068e1:	77 28                	ja     c010690b <bitmap_isset+0x37>
c01068e3:	83 ec 0c             	sub    $0xc,%esp
c01068e6:	68 34 14 11 c0       	push   $0xc0111434
c01068eb:	6a 69                	push   $0x69
c01068ed:	68 a7 13 11 c0       	push   $0xc01113a7
c01068f2:	68 db 13 11 c0       	push   $0xc01113db
c01068f7:	68 2b ff 10 c0       	push   $0xc010ff2b
c01068fc:	e8 67 d9 ff ff       	call   c0104268 <print>
c0106901:	83 c4 20             	add    $0x20,%esp
c0106904:	e8 7a a6 ff ff       	call   c0100f83 <backtrace>
c0106909:	fa                   	cli    
c010690a:	f4                   	hlt    
c010690b:	89 da                	mov    %ebx,%edx
c010690d:	c1 ea 03             	shr    $0x3,%edx
c0106910:	8b 76 04             	mov    0x4(%esi),%esi
c0106913:	89 d9                	mov    %ebx,%ecx
c0106915:	83 e1 07             	and    $0x7,%ecx
c0106918:	b8 01 00 00 00       	mov    $0x1,%eax
c010691d:	d3 e0                	shl    %cl,%eax
c010691f:	84 04 16             	test   %al,(%esi,%edx,1)
c0106922:	0f 95 c0             	setne  %al
c0106925:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0106928:	5b                   	pop    %ebx
c0106929:	5e                   	pop    %esi
c010692a:	5d                   	pop    %ebp
c010692b:	c3                   	ret    

c010692c <bitmap_destroy>:
c010692c:	55                   	push   %ebp
c010692d:	89 e5                	mov    %esp,%ebp
c010692f:	53                   	push   %ebx
c0106930:	83 ec 10             	sub    $0x10,%esp
c0106933:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106936:	ff 73 04             	pushl  0x4(%ebx)
c0106939:	e8 2e b5 ff ff       	call   c0101e6c <kfree>
c010693e:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
c0106945:	83 c4 10             	add    $0x10,%esp
c0106948:	89 5d 08             	mov    %ebx,0x8(%ebp)
c010694b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010694e:	c9                   	leave  
c010694f:	e9 18 b5 ff ff       	jmp    c0101e6c <kfree>

c0106954 <hash>:
c0106954:	55                   	push   %ebp
c0106955:	89 e5                	mov    %esp,%ebp
c0106957:	57                   	push   %edi
c0106958:	56                   	push   %esi
c0106959:	53                   	push   %ebx
c010695a:	31 db                	xor    %ebx,%ebx
c010695c:	b9 05 15 00 00       	mov    $0x1505,%ecx
c0106961:	39 d3                	cmp    %edx,%ebx
c0106963:	74 10                	je     c0106975 <hash+0x21>
c0106965:	89 cf                	mov    %ecx,%edi
c0106967:	c1 e7 05             	shl    $0x5,%edi
c010696a:	0f be 34 18          	movsbl (%eax,%ebx,1),%esi
c010696e:	01 fe                	add    %edi,%esi
c0106970:	01 f1                	add    %esi,%ecx
c0106972:	43                   	inc    %ebx
c0106973:	eb ec                	jmp    c0106961 <hash+0xd>
c0106975:	89 c8                	mov    %ecx,%eax
c0106977:	5b                   	pop    %ebx
c0106978:	5e                   	pop    %esi
c0106979:	5f                   	pop    %edi
c010697a:	5d                   	pop    %ebp
c010697b:	c3                   	ret    

c010697c <key_comparator>:
c010697c:	55                   	push   %ebp
c010697d:	89 e5                	mov    %esp,%ebp
c010697f:	56                   	push   %esi
c0106980:	53                   	push   %ebx
c0106981:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106984:	8b 75 0c             	mov    0xc(%ebp),%esi
c0106987:	81 3b 5d 11 00 00    	cmpl   $0x115d,(%ebx)
c010698d:	74 2b                	je     c01069ba <key_comparator+0x3e>
c010698f:	83 ec 0c             	sub    $0xc,%esp
c0106992:	68 68 16 11 c0       	push   $0xc0111668
c0106997:	68 ce 00 00 00       	push   $0xce
c010699c:	68 7e 14 11 c0       	push   $0xc011147e
c01069a1:	68 8e 14 11 c0       	push   $0xc011148e
c01069a6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01069ab:	e8 b8 d8 ff ff       	call   c0104268 <print>
c01069b0:	83 c4 20             	add    $0x20,%esp
c01069b3:	e8 cb a5 ff ff       	call   c0100f83 <backtrace>
c01069b8:	fa                   	cli    
c01069b9:	f4                   	hlt    
c01069ba:	81 3e 5d 11 00 00    	cmpl   $0x115d,(%esi)
c01069c0:	74 2b                	je     c01069ed <key_comparator+0x71>
c01069c2:	83 ec 0c             	sub    $0xc,%esp
c01069c5:	68 68 16 11 c0       	push   $0xc0111668
c01069ca:	68 cf 00 00 00       	push   $0xcf
c01069cf:	68 7e 14 11 c0       	push   $0xc011147e
c01069d4:	68 a4 14 11 c0       	push   $0xc01114a4
c01069d9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01069de:	e8 85 d8 ff ff       	call   c0104268 <print>
c01069e3:	83 c4 20             	add    $0x20,%esp
c01069e6:	e8 98 a5 ff ff       	call   c0100f83 <backtrace>
c01069eb:	fa                   	cli    
c01069ec:	f4                   	hlt    
c01069ed:	8b 43 08             	mov    0x8(%ebx),%eax
c01069f0:	8b 56 08             	mov    0x8(%esi),%edx
c01069f3:	39 d0                	cmp    %edx,%eax
c01069f5:	75 17                	jne    c0106a0e <key_comparator+0x92>
c01069f7:	8b 46 04             	mov    0x4(%esi),%eax
c01069fa:	89 45 0c             	mov    %eax,0xc(%ebp)
c01069fd:	8b 43 04             	mov    0x4(%ebx),%eax
c0106a00:	89 45 08             	mov    %eax,0x8(%ebp)
c0106a03:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0106a06:	5b                   	pop    %ebx
c0106a07:	5e                   	pop    %esi
c0106a08:	5d                   	pop    %ebp
c0106a09:	e9 f5 dd ff ff       	jmp    c0104803 <strcmp>
c0106a0e:	29 d0                	sub    %edx,%eax
c0106a10:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0106a13:	5b                   	pop    %ebx
c0106a14:	5e                   	pop    %esi
c0106a15:	5d                   	pop    %ebp
c0106a16:	c3                   	ret    

c0106a17 <cleanup_array_with_lists.constprop.1>:
c0106a17:	55                   	push   %ebp
c0106a18:	89 e5                	mov    %esp,%ebp
c0106a1a:	57                   	push   %edi
c0106a1b:	56                   	push   %esi
c0106a1c:	53                   	push   %ebx
c0106a1d:	83 ec 0c             	sub    $0xc,%esp
c0106a20:	89 c6                	mov    %eax,%esi
c0106a22:	89 d7                	mov    %edx,%edi
c0106a24:	31 db                	xor    %ebx,%ebx
c0106a26:	39 fb                	cmp    %edi,%ebx
c0106a28:	74 4b                	je     c0106a75 <cleanup_array_with_lists.constprop.1+0x5e>
c0106a2a:	83 ec 0c             	sub    $0xc,%esp
c0106a2d:	ff 34 9e             	pushl  (%esi,%ebx,4)
c0106a30:	e8 b6 f5 ff ff       	call   c0105feb <list_isempty>
c0106a35:	83 c4 10             	add    $0x10,%esp
c0106a38:	85 c0                	test   %eax,%eax
c0106a3a:	75 28                	jne    c0106a64 <cleanup_array_with_lists.constprop.1+0x4d>
c0106a3c:	83 ec 0c             	sub    $0xc,%esp
c0106a3f:	68 3c 16 11 c0       	push   $0xc011163c
c0106a44:	6a 68                	push   $0x68
c0106a46:	68 7e 14 11 c0       	push   $0xc011147e
c0106a4b:	68 ba 14 11 c0       	push   $0xc01114ba
c0106a50:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106a55:	e8 0e d8 ff ff       	call   c0104268 <print>
c0106a5a:	83 c4 20             	add    $0x20,%esp
c0106a5d:	e8 21 a5 ff ff       	call   c0100f83 <backtrace>
c0106a62:	fa                   	cli    
c0106a63:	f4                   	hlt    
c0106a64:	83 ec 0c             	sub    $0xc,%esp
c0106a67:	ff 34 9e             	pushl  (%esi,%ebx,4)
c0106a6a:	e8 66 f6 ff ff       	call   c01060d5 <list_destroy>
c0106a6f:	43                   	inc    %ebx
c0106a70:	83 c4 10             	add    $0x10,%esp
c0106a73:	eb b1                	jmp    c0106a26 <cleanup_array_with_lists.constprop.1+0xf>
c0106a75:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106a78:	5b                   	pop    %ebx
c0106a79:	5e                   	pop    %esi
c0106a7a:	5f                   	pop    %edi
c0106a7b:	5d                   	pop    %ebp
c0106a7c:	c3                   	ret    

c0106a7d <init_array_with_lists.constprop.2>:
c0106a7d:	55                   	push   %ebp
c0106a7e:	89 e5                	mov    %esp,%ebp
c0106a80:	57                   	push   %edi
c0106a81:	56                   	push   %esi
c0106a82:	53                   	push   %ebx
c0106a83:	83 ec 0c             	sub    $0xc,%esp
c0106a86:	89 c7                	mov    %eax,%edi
c0106a88:	89 d6                	mov    %edx,%esi
c0106a8a:	31 db                	xor    %ebx,%ebx
c0106a8c:	39 f3                	cmp    %esi,%ebx
c0106a8e:	74 13                	je     c0106aa3 <init_array_with_lists.constprop.2+0x26>
c0106a90:	e8 c2 f0 ff ff       	call   c0105b57 <list_create>
c0106a95:	89 04 9f             	mov    %eax,(%edi,%ebx,4)
c0106a98:	85 c0                	test   %eax,%eax
c0106a9a:	75 04                	jne    c0106aa0 <init_array_with_lists.constprop.2+0x23>
c0106a9c:	31 f6                	xor    %esi,%esi
c0106a9e:	eb 07                	jmp    c0106aa7 <init_array_with_lists.constprop.2+0x2a>
c0106aa0:	43                   	inc    %ebx
c0106aa1:	eb e9                	jmp    c0106a8c <init_array_with_lists.constprop.2+0xf>
c0106aa3:	31 c0                	xor    %eax,%eax
c0106aa5:	eb 1a                	jmp    c0106ac1 <init_array_with_lists.constprop.2+0x44>
c0106aa7:	39 f3                	cmp    %esi,%ebx
c0106aa9:	74 11                	je     c0106abc <init_array_with_lists.constprop.2+0x3f>
c0106aab:	83 ec 0c             	sub    $0xc,%esp
c0106aae:	ff 34 b7             	pushl  (%edi,%esi,4)
c0106ab1:	e8 1f f6 ff ff       	call   c01060d5 <list_destroy>
c0106ab6:	46                   	inc    %esi
c0106ab7:	83 c4 10             	add    $0x10,%esp
c0106aba:	eb eb                	jmp    c0106aa7 <init_array_with_lists.constprop.2+0x2a>
c0106abc:	b8 02 00 00 00       	mov    $0x2,%eax
c0106ac1:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106ac4:	5b                   	pop    %ebx
c0106ac5:	5e                   	pop    %esi
c0106ac6:	5f                   	pop    %edi
c0106ac7:	5d                   	pop    %ebp
c0106ac8:	c3                   	ret    

c0106ac9 <hashtable_create>:
c0106ac9:	55                   	push   %ebp
c0106aca:	89 e5                	mov    %esp,%ebp
c0106acc:	53                   	push   %ebx
c0106acd:	83 ec 10             	sub    $0x10,%esp
c0106ad0:	6a 14                	push   $0x14
c0106ad2:	e8 95 b2 ff ff       	call   c0101d6c <kmalloc>
c0106ad7:	89 c3                	mov    %eax,%ebx
c0106ad9:	83 c4 10             	add    $0x10,%esp
c0106adc:	31 c0                	xor    %eax,%eax
c0106ade:	85 db                	test   %ebx,%ebx
c0106ae0:	74 57                	je     c0106b39 <hashtable_create+0x70>
c0106ae2:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
c0106ae9:	c7 43 08 08 00 00 00 	movl   $0x8,0x8(%ebx)
c0106af0:	83 ec 0c             	sub    $0xc,%esp
c0106af3:	6a 20                	push   $0x20
c0106af5:	e8 72 b2 ff ff       	call   c0101d6c <kmalloc>
c0106afa:	89 43 10             	mov    %eax,0x10(%ebx)
c0106afd:	83 c4 10             	add    $0x10,%esp
c0106b00:	85 c0                	test   %eax,%eax
c0106b02:	75 06                	jne    c0106b0a <hashtable_create+0x41>
c0106b04:	83 ec 0c             	sub    $0xc,%esp
c0106b07:	53                   	push   %ebx
c0106b08:	eb 1b                	jmp    c0106b25 <hashtable_create+0x5c>
c0106b0a:	8b 53 08             	mov    0x8(%ebx),%edx
c0106b0d:	e8 6b ff ff ff       	call   c0106a7d <init_array_with_lists.constprop.2>
c0106b12:	83 f8 02             	cmp    $0x2,%eax
c0106b15:	75 1a                	jne    c0106b31 <hashtable_create+0x68>
c0106b17:	83 ec 0c             	sub    $0xc,%esp
c0106b1a:	ff 73 10             	pushl  0x10(%ebx)
c0106b1d:	e8 4a b3 ff ff       	call   c0101e6c <kfree>
c0106b22:	89 1c 24             	mov    %ebx,(%esp)
c0106b25:	e8 42 b3 ff ff       	call   c0101e6c <kfree>
c0106b2a:	83 c4 10             	add    $0x10,%esp
c0106b2d:	31 c0                	xor    %eax,%eax
c0106b2f:	eb 08                	jmp    c0106b39 <hashtable_create+0x70>
c0106b31:	c7 03 5c 11 00 00    	movl   $0x115c,(%ebx)
c0106b37:	89 d8                	mov    %ebx,%eax
c0106b39:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106b3c:	c9                   	leave  
c0106b3d:	c3                   	ret    

c0106b3e <hashtable_add>:
c0106b3e:	55                   	push   %ebp
c0106b3f:	89 e5                	mov    %esp,%ebp
c0106b41:	57                   	push   %edi
c0106b42:	56                   	push   %esi
c0106b43:	53                   	push   %ebx
c0106b44:	83 ec 2c             	sub    $0x2c,%esp
c0106b47:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106b4a:	85 db                	test   %ebx,%ebx
c0106b4c:	75 2b                	jne    c0106b79 <hashtable_add+0x3b>
c0106b4e:	83 ec 0c             	sub    $0xc,%esp
c0106b51:	68 78 16 11 c0       	push   $0xc0111678
c0106b56:	68 d7 00 00 00       	push   $0xd7
c0106b5b:	68 7e 14 11 c0       	push   $0xc011147e
c0106b60:	68 7c 10 11 c0       	push   $0xc011107c
c0106b65:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106b6a:	e8 f9 d6 ff ff       	call   c0104268 <print>
c0106b6f:	83 c4 20             	add    $0x20,%esp
c0106b72:	e8 0c a4 ff ff       	call   c0100f83 <backtrace>
c0106b77:	fa                   	cli    
c0106b78:	f4                   	hlt    
c0106b79:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c0106b7f:	74 2b                	je     c0106bac <hashtable_add+0x6e>
c0106b81:	83 ec 0c             	sub    $0xc,%esp
c0106b84:	68 78 16 11 c0       	push   $0xc0111678
c0106b89:	68 d8 00 00 00       	push   $0xd8
c0106b8e:	68 7e 14 11 c0       	push   $0xc011147e
c0106b93:	68 d0 14 11 c0       	push   $0xc01114d0
c0106b98:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106b9d:	e8 c6 d6 ff ff       	call   c0104268 <print>
c0106ba2:	83 c4 20             	add    $0x20,%esp
c0106ba5:	e8 d9 a3 ff ff       	call   c0100f83 <backtrace>
c0106baa:	fa                   	cli    
c0106bab:	f4                   	hlt    
c0106bac:	8b 43 04             	mov    0x4(%ebx),%eax
c0106baf:	8d 44 00 02          	lea    0x2(%eax,%eax,1),%eax
c0106bb3:	3b 43 08             	cmp    0x8(%ebx),%eax
c0106bb6:	0f 86 9b 00 00 00    	jbe    c0106c57 <hashtable_add+0x119>
c0106bbc:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c0106bc2:	74 2b                	je     c0106bef <hashtable_add+0xb1>
c0106bc4:	83 ec 0c             	sub    $0xc,%esp
c0106bc7:	68 60 16 11 c0       	push   $0xc0111660
c0106bcc:	68 ac 00 00 00       	push   $0xac
c0106bd1:	68 7e 14 11 c0       	push   $0xc011147e
c0106bd6:	68 d0 14 11 c0       	push   $0xc01114d0
c0106bdb:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106be0:	e8 83 d6 ff ff       	call   c0104268 <print>
c0106be5:	83 c4 20             	add    $0x20,%esp
c0106be8:	e8 96 a3 ff ff       	call   c0100f83 <backtrace>
c0106bed:	fa                   	cli    
c0106bee:	f4                   	hlt    
c0106bef:	8b 43 10             	mov    0x10(%ebx),%eax
c0106bf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0106bf5:	8b 73 08             	mov    0x8(%ebx),%esi
c0106bf8:	83 ec 0c             	sub    $0xc,%esp
c0106bfb:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
c0106c02:	50                   	push   %eax
c0106c03:	e8 64 b1 ff ff       	call   c0101d6c <kmalloc>
c0106c08:	89 c7                	mov    %eax,%edi
c0106c0a:	83 c4 10             	add    $0x10,%esp
c0106c0d:	85 c0                	test   %eax,%eax
c0106c0f:	74 46                	je     c0106c57 <hashtable_add+0x119>
c0106c11:	8d 0c 36             	lea    (%esi,%esi,1),%ecx
c0106c14:	89 ca                	mov    %ecx,%edx
c0106c16:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c0106c19:	e8 5f fe ff ff       	call   c0106a7d <init_array_with_lists.constprop.2>
c0106c1e:	83 f8 02             	cmp    $0x2,%eax
c0106c21:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0106c24:	74 31                	je     c0106c57 <hashtable_add+0x119>
c0106c26:	89 7b 10             	mov    %edi,0x10(%ebx)
c0106c29:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
c0106c30:	89 4b 08             	mov    %ecx,0x8(%ebx)
c0106c33:	89 f1                	mov    %esi,%ecx
c0106c35:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106c38:	89 d8                	mov    %ebx,%eax
c0106c3a:	e8 d6 00 00 00       	call   c0106d15 <rehash>
c0106c3f:	89 f2                	mov    %esi,%edx
c0106c41:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106c44:	e8 ce fd ff ff       	call   c0106a17 <cleanup_array_with_lists.constprop.1>
c0106c49:	83 ec 0c             	sub    $0xc,%esp
c0106c4c:	ff 75 d4             	pushl  -0x2c(%ebp)
c0106c4f:	e8 18 b2 ff ff       	call   c0101e6c <kfree>
c0106c54:	83 c4 10             	add    $0x10,%esp
c0106c57:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106c5d:	e8 f2 fc ff ff       	call   c0106954 <hash>
c0106c62:	31 d2                	xor    %edx,%edx
c0106c64:	f7 73 08             	divl   0x8(%ebx)
c0106c67:	8b 43 10             	mov    0x10(%ebx),%eax
c0106c6a:	8b 3c 90             	mov    (%eax,%edx,4),%edi
c0106c6d:	85 ff                	test   %edi,%edi
c0106c6f:	75 2b                	jne    c0106c9c <hashtable_add+0x15e>
c0106c71:	83 ec 0c             	sub    $0xc,%esp
c0106c74:	68 78 16 11 c0       	push   $0xc0111678
c0106c79:	68 df 00 00 00       	push   $0xdf
c0106c7e:	68 7e 14 11 c0       	push   $0xc011147e
c0106c83:	68 ed 14 11 c0       	push   $0xc01114ed
c0106c88:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106c8d:	e8 d6 d5 ff ff       	call   c0104268 <print>
c0106c92:	83 c4 20             	add    $0x20,%esp
c0106c95:	e8 e9 a2 ff ff       	call   c0100f83 <backtrace>
c0106c9a:	fa                   	cli    
c0106c9b:	f4                   	hlt    
c0106c9c:	c7 45 d8 5d 11 00 00 	movl   $0x115d,-0x28(%ebp)
c0106ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ca6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106ca9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106caf:	51                   	push   %ecx
c0106cb0:	68 7c 69 10 c0       	push   $0xc010697c
c0106cb5:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0106cb8:	50                   	push   %eax
c0106cb9:	57                   	push   %edi
c0106cba:	e8 26 f2 ff ff       	call   c0105ee5 <list_remove>
c0106cbf:	89 c6                	mov    %eax,%esi
c0106cc1:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0106cc8:	e8 9f b0 ff ff       	call   c0101d6c <kmalloc>
c0106ccd:	83 c4 10             	add    $0x10,%esp
c0106cd0:	85 c0                	test   %eax,%eax
c0106cd2:	75 07                	jne    c0106cdb <hashtable_add+0x19d>
c0106cd4:	b8 02 00 00 00       	mov    $0x2,%eax
c0106cd9:	eb 32                	jmp    c0106d0d <hashtable_add+0x1cf>
c0106cdb:	c7 00 5d 11 00 00    	movl   $0x115d,(%eax)
c0106ce1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106ce4:	89 48 04             	mov    %ecx,0x4(%eax)
c0106ce7:	8b 55 10             	mov    0x10(%ebp),%edx
c0106cea:	89 50 08             	mov    %edx,0x8(%eax)
c0106ced:	8b 55 14             	mov    0x14(%ebp),%edx
c0106cf0:	89 50 0c             	mov    %edx,0xc(%eax)
c0106cf3:	52                   	push   %edx
c0106cf4:	52                   	push   %edx
c0106cf5:	50                   	push   %eax
c0106cf6:	57                   	push   %edi
c0106cf7:	e8 8c ee ff ff       	call   c0105b88 <list_push_back>
c0106cfc:	83 c4 10             	add    $0x10,%esp
c0106cff:	83 f8 02             	cmp    $0x2,%eax
c0106d02:	74 d0                	je     c0106cd4 <hashtable_add+0x196>
c0106d04:	31 c0                	xor    %eax,%eax
c0106d06:	85 f6                	test   %esi,%esi
c0106d08:	75 03                	jne    c0106d0d <hashtable_add+0x1cf>
c0106d0a:	ff 43 04             	incl   0x4(%ebx)
c0106d0d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106d10:	5b                   	pop    %ebx
c0106d11:	5e                   	pop    %esi
c0106d12:	5f                   	pop    %edi
c0106d13:	5d                   	pop    %ebp
c0106d14:	c3                   	ret    

c0106d15 <rehash>:
c0106d15:	55                   	push   %ebp
c0106d16:	89 e5                	mov    %esp,%ebp
c0106d18:	57                   	push   %edi
c0106d19:	56                   	push   %esi
c0106d1a:	53                   	push   %ebx
c0106d1b:	83 ec 1c             	sub    $0x1c,%esp
c0106d1e:	89 c7                	mov    %eax,%edi
c0106d20:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0106d23:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0106d26:	85 c0                	test   %eax,%eax
c0106d28:	75 2b                	jne    c0106d55 <rehash+0x40>
c0106d2a:	83 ec 0c             	sub    $0xc,%esp
c0106d2d:	68 58 16 11 c0       	push   $0xc0111658
c0106d32:	68 8d 00 00 00       	push   $0x8d
c0106d37:	68 7e 14 11 c0       	push   $0xc011147e
c0106d3c:	68 7c 10 11 c0       	push   $0xc011107c
c0106d41:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106d46:	e8 1d d5 ff ff       	call   c0104268 <print>
c0106d4b:	83 c4 20             	add    $0x20,%esp
c0106d4e:	e8 30 a2 ff ff       	call   c0100f83 <backtrace>
c0106d53:	fa                   	cli    
c0106d54:	f4                   	hlt    
c0106d55:	81 3f 5c 11 00 00    	cmpl   $0x115c,(%edi)
c0106d5b:	74 2b                	je     c0106d88 <rehash+0x73>
c0106d5d:	83 ec 0c             	sub    $0xc,%esp
c0106d60:	68 58 16 11 c0       	push   $0xc0111658
c0106d65:	68 8e 00 00 00       	push   $0x8e
c0106d6a:	68 7e 14 11 c0       	push   $0xc011147e
c0106d6f:	68 d0 14 11 c0       	push   $0xc01114d0
c0106d74:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106d79:	e8 ea d4 ff ff       	call   c0104268 <print>
c0106d7e:	83 c4 20             	add    $0x20,%esp
c0106d81:	e8 fd a1 ff ff       	call   c0100f83 <backtrace>
c0106d86:	fa                   	cli    
c0106d87:	f4                   	hlt    
c0106d88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0106d8f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d92:	39 4d e4             	cmp    %ecx,-0x1c(%ebp)
c0106d95:	0f 84 f8 00 00 00    	je     c0106e93 <rehash+0x17e>
c0106d9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d9e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106da1:	8b 1c 90             	mov    (%eax,%edx,4),%ebx
c0106da4:	85 db                	test   %ebx,%ebx
c0106da6:	75 2b                	jne    c0106dd3 <rehash+0xbe>
c0106da8:	83 ec 0c             	sub    $0xc,%esp
c0106dab:	68 58 16 11 c0       	push   $0xc0111658
c0106db0:	68 94 00 00 00       	push   $0x94
c0106db5:	68 7e 14 11 c0       	push   $0xc011147e
c0106dba:	68 ed 14 11 c0       	push   $0xc01114ed
c0106dbf:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106dc4:	e8 9f d4 ff ff       	call   c0104268 <print>
c0106dc9:	83 c4 20             	add    $0x20,%esp
c0106dcc:	e8 b2 a1 ff ff       	call   c0100f83 <backtrace>
c0106dd1:	fa                   	cli    
c0106dd2:	f4                   	hlt    
c0106dd3:	83 ec 0c             	sub    $0xc,%esp
c0106dd6:	53                   	push   %ebx
c0106dd7:	e8 87 f2 ff ff       	call   c0106063 <list_getsize>
c0106ddc:	83 c4 10             	add    $0x10,%esp
c0106ddf:	85 c0                	test   %eax,%eax
c0106de1:	0f 84 a4 00 00 00    	je     c0106e8b <rehash+0x176>
c0106de7:	83 ec 0c             	sub    $0xc,%esp
c0106dea:	53                   	push   %ebx
c0106deb:	e8 5f ef ff ff       	call   c0105d4f <list_front>
c0106df0:	89 c6                	mov    %eax,%esi
c0106df2:	83 c4 10             	add    $0x10,%esp
c0106df5:	85 c0                	test   %eax,%eax
c0106df7:	74 57                	je     c0106e50 <rehash+0x13b>
c0106df9:	81 3e 5d 11 00 00    	cmpl   $0x115d,(%esi)
c0106dff:	74 2b                	je     c0106e2c <rehash+0x117>
c0106e01:	83 ec 0c             	sub    $0xc,%esp
c0106e04:	68 58 16 11 c0       	push   $0xc0111658
c0106e09:	68 98 00 00 00       	push   $0x98
c0106e0e:	68 7e 14 11 c0       	push   $0xc011147e
c0106e13:	68 fb 14 11 c0       	push   $0xc01114fb
c0106e18:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106e1d:	e8 46 d4 ff ff       	call   c0104268 <print>
c0106e22:	83 c4 20             	add    $0x20,%esp
c0106e25:	e8 59 a1 ff ff       	call   c0100f83 <backtrace>
c0106e2a:	fa                   	cli    
c0106e2b:	f4                   	hlt    
c0106e2c:	ff 76 0c             	pushl  0xc(%esi)
c0106e2f:	ff 76 08             	pushl  0x8(%esi)
c0106e32:	ff 76 04             	pushl  0x4(%esi)
c0106e35:	57                   	push   %edi
c0106e36:	e8 03 fd ff ff       	call   c0106b3e <hashtable_add>
c0106e3b:	89 1c 24             	mov    %ebx,(%esp)
c0106e3e:	e8 45 ee ff ff       	call   c0105c88 <list_pop_front>
c0106e43:	89 34 24             	mov    %esi,(%esp)
c0106e46:	e8 21 b0 ff ff       	call   c0101e6c <kfree>
c0106e4b:	89 1c 24             	mov    %ebx,(%esp)
c0106e4e:	eb 9b                	jmp    c0106deb <rehash+0xd6>
c0106e50:	83 ec 0c             	sub    $0xc,%esp
c0106e53:	53                   	push   %ebx
c0106e54:	e8 0a f2 ff ff       	call   c0106063 <list_getsize>
c0106e59:	83 c4 10             	add    $0x10,%esp
c0106e5c:	85 c0                	test   %eax,%eax
c0106e5e:	74 2b                	je     c0106e8b <rehash+0x176>
c0106e60:	83 ec 0c             	sub    $0xc,%esp
c0106e63:	68 58 16 11 c0       	push   $0xc0111658
c0106e68:	68 9e 00 00 00       	push   $0x9e
c0106e6d:	68 7e 14 11 c0       	push   $0xc011147e
c0106e72:	68 14 15 11 c0       	push   $0xc0111514
c0106e77:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106e7c:	e8 e7 d3 ff ff       	call   c0104268 <print>
c0106e81:	83 c4 20             	add    $0x20,%esp
c0106e84:	e8 fa a0 ff ff       	call   c0100f83 <backtrace>
c0106e89:	fa                   	cli    
c0106e8a:	f4                   	hlt    
c0106e8b:	ff 45 e4             	incl   -0x1c(%ebp)
c0106e8e:	e9 fc fe ff ff       	jmp    c0106d8f <rehash+0x7a>
c0106e93:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106e96:	5b                   	pop    %ebx
c0106e97:	5e                   	pop    %esi
c0106e98:	5f                   	pop    %edi
c0106e99:	5d                   	pop    %ebp
c0106e9a:	c3                   	ret    

c0106e9b <hashtable_find>:
c0106e9b:	55                   	push   %ebp
c0106e9c:	89 e5                	mov    %esp,%ebp
c0106e9e:	57                   	push   %edi
c0106e9f:	56                   	push   %esi
c0106ea0:	53                   	push   %ebx
c0106ea1:	83 ec 1c             	sub    $0x1c,%esp
c0106ea4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106ea7:	8b 7d 0c             	mov    0xc(%ebp),%edi
c0106eaa:	8b 75 10             	mov    0x10(%ebp),%esi
c0106ead:	85 db                	test   %ebx,%ebx
c0106eaf:	75 2b                	jne    c0106edc <hashtable_find+0x41>
c0106eb1:	83 ec 0c             	sub    $0xc,%esp
c0106eb4:	68 2c 16 11 c0       	push   $0xc011162c
c0106eb9:	68 fa 00 00 00       	push   $0xfa
c0106ebe:	68 7e 14 11 c0       	push   $0xc011147e
c0106ec3:	68 7c 10 11 c0       	push   $0xc011107c
c0106ec8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106ecd:	e8 96 d3 ff ff       	call   c0104268 <print>
c0106ed2:	83 c4 20             	add    $0x20,%esp
c0106ed5:	e8 a9 a0 ff ff       	call   c0100f83 <backtrace>
c0106eda:	fa                   	cli    
c0106edb:	f4                   	hlt    
c0106edc:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c0106ee2:	74 2b                	je     c0106f0f <hashtable_find+0x74>
c0106ee4:	83 ec 0c             	sub    $0xc,%esp
c0106ee7:	68 2c 16 11 c0       	push   $0xc011162c
c0106eec:	68 fb 00 00 00       	push   $0xfb
c0106ef1:	68 7e 14 11 c0       	push   $0xc011147e
c0106ef6:	68 d0 14 11 c0       	push   $0xc01114d0
c0106efb:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106f00:	e8 63 d3 ff ff       	call   c0104268 <print>
c0106f05:	83 c4 20             	add    $0x20,%esp
c0106f08:	e8 76 a0 ff ff       	call   c0100f83 <backtrace>
c0106f0d:	fa                   	cli    
c0106f0e:	f4                   	hlt    
c0106f0f:	89 f2                	mov    %esi,%edx
c0106f11:	89 f8                	mov    %edi,%eax
c0106f13:	e8 3c fa ff ff       	call   c0106954 <hash>
c0106f18:	31 d2                	xor    %edx,%edx
c0106f1a:	f7 73 08             	divl   0x8(%ebx)
c0106f1d:	8b 43 10             	mov    0x10(%ebx),%eax
c0106f20:	8b 1c 90             	mov    (%eax,%edx,4),%ebx
c0106f23:	85 db                	test   %ebx,%ebx
c0106f25:	75 2b                	jne    c0106f52 <hashtable_find+0xb7>
c0106f27:	83 ec 0c             	sub    $0xc,%esp
c0106f2a:	68 2c 16 11 c0       	push   $0xc011162c
c0106f2f:	68 00 01 00 00       	push   $0x100
c0106f34:	68 7e 14 11 c0       	push   $0xc011147e
c0106f39:	68 ed 14 11 c0       	push   $0xc01114ed
c0106f3e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106f43:	e8 20 d3 ff ff       	call   c0104268 <print>
c0106f48:	83 c4 20             	add    $0x20,%esp
c0106f4b:	e8 33 a0 ff ff       	call   c0100f83 <backtrace>
c0106f50:	fa                   	cli    
c0106f51:	f4                   	hlt    
c0106f52:	c7 45 d8 5d 11 00 00 	movl   $0x115d,-0x28(%ebp)
c0106f59:	89 7d dc             	mov    %edi,-0x24(%ebp)
c0106f5c:	89 75 e0             	mov    %esi,-0x20(%ebp)
c0106f5f:	50                   	push   %eax
c0106f60:	68 7c 69 10 c0       	push   $0xc010697c
c0106f65:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0106f68:	50                   	push   %eax
c0106f69:	53                   	push   %ebx
c0106f6a:	e8 b8 ee ff ff       	call   c0105e27 <list_find>
c0106f6f:	89 c3                	mov    %eax,%ebx
c0106f71:	83 c4 10             	add    $0x10,%esp
c0106f74:	31 c0                	xor    %eax,%eax
c0106f76:	85 db                	test   %ebx,%ebx
c0106f78:	74 36                	je     c0106fb0 <hashtable_find+0x115>
c0106f7a:	81 3b 5d 11 00 00    	cmpl   $0x115d,(%ebx)
c0106f80:	74 2b                	je     c0106fad <hashtable_find+0x112>
c0106f82:	83 ec 0c             	sub    $0xc,%esp
c0106f85:	68 2c 16 11 c0       	push   $0xc011162c
c0106f8a:	68 0c 01 00 00       	push   $0x10c
c0106f8f:	68 7e 14 11 c0       	push   $0xc011147e
c0106f94:	68 2d 15 11 c0       	push   $0xc011152d
c0106f99:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106f9e:	e8 c5 d2 ff ff       	call   c0104268 <print>
c0106fa3:	83 c4 20             	add    $0x20,%esp
c0106fa6:	e8 d8 9f ff ff       	call   c0100f83 <backtrace>
c0106fab:	fa                   	cli    
c0106fac:	f4                   	hlt    
c0106fad:	8b 43 0c             	mov    0xc(%ebx),%eax
c0106fb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106fb3:	5b                   	pop    %ebx
c0106fb4:	5e                   	pop    %esi
c0106fb5:	5f                   	pop    %edi
c0106fb6:	5d                   	pop    %ebp
c0106fb7:	c3                   	ret    

c0106fb8 <hashtable_remove>:
c0106fb8:	55                   	push   %ebp
c0106fb9:	89 e5                	mov    %esp,%ebp
c0106fbb:	57                   	push   %edi
c0106fbc:	56                   	push   %esi
c0106fbd:	53                   	push   %ebx
c0106fbe:	83 ec 2c             	sub    $0x2c,%esp
c0106fc1:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0106fc4:	8b 7d 0c             	mov    0xc(%ebp),%edi
c0106fc7:	85 db                	test   %ebx,%ebx
c0106fc9:	75 2b                	jne    c0106ff6 <hashtable_remove+0x3e>
c0106fcb:	83 ec 0c             	sub    $0xc,%esp
c0106fce:	68 18 16 11 c0       	push   $0xc0111618
c0106fd3:	68 39 01 00 00       	push   $0x139
c0106fd8:	68 7e 14 11 c0       	push   $0xc011147e
c0106fdd:	68 7c 10 11 c0       	push   $0xc011107c
c0106fe2:	68 2b ff 10 c0       	push   $0xc010ff2b
c0106fe7:	e8 7c d2 ff ff       	call   c0104268 <print>
c0106fec:	83 c4 20             	add    $0x20,%esp
c0106fef:	e8 8f 9f ff ff       	call   c0100f83 <backtrace>
c0106ff4:	fa                   	cli    
c0106ff5:	f4                   	hlt    
c0106ff6:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c0106ffc:	74 2b                	je     c0107029 <hashtable_remove+0x71>
c0106ffe:	83 ec 0c             	sub    $0xc,%esp
c0107001:	68 18 16 11 c0       	push   $0xc0111618
c0107006:	68 3a 01 00 00       	push   $0x13a
c010700b:	68 7e 14 11 c0       	push   $0xc011147e
c0107010:	68 d0 14 11 c0       	push   $0xc01114d0
c0107015:	68 2b ff 10 c0       	push   $0xc010ff2b
c010701a:	e8 49 d2 ff ff       	call   c0104268 <print>
c010701f:	83 c4 20             	add    $0x20,%esp
c0107022:	e8 5c 9f ff ff       	call   c0100f83 <backtrace>
c0107027:	fa                   	cli    
c0107028:	f4                   	hlt    
c0107029:	8b 55 10             	mov    0x10(%ebp),%edx
c010702c:	89 f8                	mov    %edi,%eax
c010702e:	e8 21 f9 ff ff       	call   c0106954 <hash>
c0107033:	31 d2                	xor    %edx,%edx
c0107035:	f7 73 08             	divl   0x8(%ebx)
c0107038:	8b 43 10             	mov    0x10(%ebx),%eax
c010703b:	8b 34 90             	mov    (%eax,%edx,4),%esi
c010703e:	85 f6                	test   %esi,%esi
c0107040:	75 2b                	jne    c010706d <hashtable_remove+0xb5>
c0107042:	83 ec 0c             	sub    $0xc,%esp
c0107045:	68 18 16 11 c0       	push   $0xc0111618
c010704a:	68 3f 01 00 00       	push   $0x13f
c010704f:	68 7e 14 11 c0       	push   $0xc011147e
c0107054:	68 ed 14 11 c0       	push   $0xc01114ed
c0107059:	68 2b ff 10 c0       	push   $0xc010ff2b
c010705e:	e8 05 d2 ff ff       	call   c0104268 <print>
c0107063:	83 c4 20             	add    $0x20,%esp
c0107066:	e8 18 9f ff ff       	call   c0100f83 <backtrace>
c010706b:	fa                   	cli    
c010706c:	f4                   	hlt    
c010706d:	c7 45 d8 5d 11 00 00 	movl   $0x115d,-0x28(%ebp)
c0107074:	89 7d dc             	mov    %edi,-0x24(%ebp)
c0107077:	8b 45 10             	mov    0x10(%ebp),%eax
c010707a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010707d:	50                   	push   %eax
c010707e:	68 7c 69 10 c0       	push   $0xc010697c
c0107083:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0107086:	52                   	push   %edx
c0107087:	56                   	push   %esi
c0107088:	e8 58 ee ff ff       	call   c0105ee5 <list_remove>
c010708d:	89 c6                	mov    %eax,%esi
c010708f:	83 c4 10             	add    $0x10,%esp
c0107092:	31 c0                	xor    %eax,%eax
c0107094:	85 f6                	test   %esi,%esi
c0107096:	0f 84 04 01 00 00    	je     c01071a0 <hashtable_remove+0x1e8>
c010709c:	81 3e 5d 11 00 00    	cmpl   $0x115d,(%esi)
c01070a2:	74 2b                	je     c01070cf <hashtable_remove+0x117>
c01070a4:	83 ec 0c             	sub    $0xc,%esp
c01070a7:	68 18 16 11 c0       	push   $0xc0111618
c01070ac:	68 4d 01 00 00       	push   $0x14d
c01070b1:	68 7e 14 11 c0       	push   $0xc011147e
c01070b6:	68 47 15 11 c0       	push   $0xc0111547
c01070bb:	68 2b ff 10 c0       	push   $0xc010ff2b
c01070c0:	e8 a3 d1 ff ff       	call   c0104268 <print>
c01070c5:	83 c4 20             	add    $0x20,%esp
c01070c8:	e8 b6 9e ff ff       	call   c0100f83 <backtrace>
c01070cd:	fa                   	cli    
c01070ce:	f4                   	hlt    
c01070cf:	8b 53 04             	mov    0x4(%ebx),%edx
c01070d2:	8d 42 ff             	lea    -0x1(%edx),%eax
c01070d5:	89 43 04             	mov    %eax,0x4(%ebx)
c01070d8:	8b 43 08             	mov    0x8(%ebx),%eax
c01070db:	83 f8 08             	cmp    $0x8,%eax
c01070de:	0f 86 ab 00 00 00    	jbe    c010718f <hashtable_remove+0x1d7>
c01070e4:	8d 54 12 fc          	lea    -0x4(%edx,%edx,1),%edx
c01070e8:	39 d0                	cmp    %edx,%eax
c01070ea:	0f 86 9f 00 00 00    	jbe    c010718f <hashtable_remove+0x1d7>
c01070f0:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c01070f6:	74 2b                	je     c0107123 <hashtable_remove+0x16b>
c01070f8:	83 ec 0c             	sub    $0xc,%esp
c01070fb:	68 10 16 11 c0       	push   $0xc0111610
c0107100:	68 19 01 00 00       	push   $0x119
c0107105:	68 7e 14 11 c0       	push   $0xc011147e
c010710a:	68 d0 14 11 c0       	push   $0xc01114d0
c010710f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107114:	e8 4f d1 ff ff       	call   c0104268 <print>
c0107119:	83 c4 20             	add    $0x20,%esp
c010711c:	e8 62 9e ff ff       	call   c0100f83 <backtrace>
c0107121:	fa                   	cli    
c0107122:	f4                   	hlt    
c0107123:	8b 43 10             	mov    0x10(%ebx),%eax
c0107126:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107129:	8b 43 08             	mov    0x8(%ebx),%eax
c010712c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010712f:	89 c7                	mov    %eax,%edi
c0107131:	d1 ef                	shr    %edi
c0107133:	83 ec 0c             	sub    $0xc,%esp
c0107136:	8d 04 bd 00 00 00 00 	lea    0x0(,%edi,4),%eax
c010713d:	50                   	push   %eax
c010713e:	e8 29 ac ff ff       	call   c0101d6c <kmalloc>
c0107143:	83 c4 10             	add    $0x10,%esp
c0107146:	85 c0                	test   %eax,%eax
c0107148:	74 45                	je     c010718f <hashtable_remove+0x1d7>
c010714a:	89 fa                	mov    %edi,%edx
c010714c:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010714f:	e8 29 f9 ff ff       	call   c0106a7d <init_array_with_lists.constprop.2>
c0107154:	83 f8 02             	cmp    $0x2,%eax
c0107157:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010715a:	74 33                	je     c010718f <hashtable_remove+0x1d7>
c010715c:	89 4b 10             	mov    %ecx,0x10(%ebx)
c010715f:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
c0107166:	89 7b 08             	mov    %edi,0x8(%ebx)
c0107169:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010716c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010716f:	89 d8                	mov    %ebx,%eax
c0107171:	e8 9f fb ff ff       	call   c0106d15 <rehash>
c0107176:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107179:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010717c:	e8 96 f8 ff ff       	call   c0106a17 <cleanup_array_with_lists.constprop.1>
c0107181:	83 ec 0c             	sub    $0xc,%esp
c0107184:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107187:	e8 e0 ac ff ff       	call   c0101e6c <kfree>
c010718c:	83 c4 10             	add    $0x10,%esp
c010718f:	8b 5e 0c             	mov    0xc(%esi),%ebx
c0107192:	83 ec 0c             	sub    $0xc,%esp
c0107195:	56                   	push   %esi
c0107196:	e8 d1 ac ff ff       	call   c0101e6c <kfree>
c010719b:	83 c4 10             	add    $0x10,%esp
c010719e:	89 d8                	mov    %ebx,%eax
c01071a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01071a3:	5b                   	pop    %ebx
c01071a4:	5e                   	pop    %esi
c01071a5:	5f                   	pop    %edi
c01071a6:	5d                   	pop    %ebp
c01071a7:	c3                   	ret    

c01071a8 <hashtable_isempty>:
c01071a8:	55                   	push   %ebp
c01071a9:	89 e5                	mov    %esp,%ebp
c01071ab:	53                   	push   %ebx
c01071ac:	50                   	push   %eax
c01071ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01071b0:	85 db                	test   %ebx,%ebx
c01071b2:	75 2b                	jne    c01071df <hashtable_isempty+0x37>
c01071b4:	83 ec 0c             	sub    $0xc,%esp
c01071b7:	68 fc 15 11 c0       	push   $0xc01115fc
c01071bc:	68 5e 01 00 00       	push   $0x15e
c01071c1:	68 7e 14 11 c0       	push   $0xc011147e
c01071c6:	68 7c 10 11 c0       	push   $0xc011107c
c01071cb:	68 2b ff 10 c0       	push   $0xc010ff2b
c01071d0:	e8 93 d0 ff ff       	call   c0104268 <print>
c01071d5:	83 c4 20             	add    $0x20,%esp
c01071d8:	e8 a6 9d ff ff       	call   c0100f83 <backtrace>
c01071dd:	fa                   	cli    
c01071de:	f4                   	hlt    
c01071df:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c01071e5:	74 2b                	je     c0107212 <hashtable_isempty+0x6a>
c01071e7:	83 ec 0c             	sub    $0xc,%esp
c01071ea:	68 fc 15 11 c0       	push   $0xc01115fc
c01071ef:	68 5f 01 00 00       	push   $0x15f
c01071f4:	68 7e 14 11 c0       	push   $0xc011147e
c01071f9:	68 d0 14 11 c0       	push   $0xc01114d0
c01071fe:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107203:	e8 60 d0 ff ff       	call   c0104268 <print>
c0107208:	83 c4 20             	add    $0x20,%esp
c010720b:	e8 73 9d ff ff       	call   c0100f83 <backtrace>
c0107210:	fa                   	cli    
c0107211:	f4                   	hlt    
c0107212:	31 c0                	xor    %eax,%eax
c0107214:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c0107218:	0f 94 c0             	sete   %al
c010721b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010721e:	c9                   	leave  
c010721f:	c3                   	ret    

c0107220 <hashtable_getsize>:
c0107220:	55                   	push   %ebp
c0107221:	89 e5                	mov    %esp,%ebp
c0107223:	53                   	push   %ebx
c0107224:	50                   	push   %eax
c0107225:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107228:	85 db                	test   %ebx,%ebx
c010722a:	75 2b                	jne    c0107257 <hashtable_getsize+0x37>
c010722c:	83 ec 0c             	sub    $0xc,%esp
c010722f:	68 e8 15 11 c0       	push   $0xc01115e8
c0107234:	68 65 01 00 00       	push   $0x165
c0107239:	68 7e 14 11 c0       	push   $0xc011147e
c010723e:	68 7c 10 11 c0       	push   $0xc011107c
c0107243:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107248:	e8 1b d0 ff ff       	call   c0104268 <print>
c010724d:	83 c4 20             	add    $0x20,%esp
c0107250:	e8 2e 9d ff ff       	call   c0100f83 <backtrace>
c0107255:	fa                   	cli    
c0107256:	f4                   	hlt    
c0107257:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c010725d:	74 2b                	je     c010728a <hashtable_getsize+0x6a>
c010725f:	83 ec 0c             	sub    $0xc,%esp
c0107262:	68 e8 15 11 c0       	push   $0xc01115e8
c0107267:	68 66 01 00 00       	push   $0x166
c010726c:	68 7e 14 11 c0       	push   $0xc011147e
c0107271:	68 d0 14 11 c0       	push   $0xc01114d0
c0107276:	68 2b ff 10 c0       	push   $0xc010ff2b
c010727b:	e8 e8 cf ff ff       	call   c0104268 <print>
c0107280:	83 c4 20             	add    $0x20,%esp
c0107283:	e8 fb 9c ff ff       	call   c0100f83 <backtrace>
c0107288:	fa                   	cli    
c0107289:	f4                   	hlt    
c010728a:	8b 43 04             	mov    0x4(%ebx),%eax
c010728d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107290:	c9                   	leave  
c0107291:	c3                   	ret    

c0107292 <hashtable_destroy>:
c0107292:	55                   	push   %ebp
c0107293:	89 e5                	mov    %esp,%ebp
c0107295:	53                   	push   %ebx
c0107296:	50                   	push   %eax
c0107297:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010729a:	85 db                	test   %ebx,%ebx
c010729c:	74 4c                	je     c01072ea <hashtable_destroy+0x58>
c010729e:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c01072a4:	74 2b                	je     c01072d1 <hashtable_destroy+0x3f>
c01072a6:	83 ec 0c             	sub    $0xc,%esp
c01072a9:	68 d4 15 11 c0       	push   $0xc01115d4
c01072ae:	68 6d 01 00 00       	push   $0x16d
c01072b3:	68 7e 14 11 c0       	push   $0xc011147e
c01072b8:	68 d0 14 11 c0       	push   $0xc01114d0
c01072bd:	68 2b ff 10 c0       	push   $0xc010ff2b
c01072c2:	e8 a1 cf ff ff       	call   c0104268 <print>
c01072c7:	83 c4 20             	add    $0x20,%esp
c01072ca:	e8 b4 9c ff ff       	call   c0100f83 <backtrace>
c01072cf:	fa                   	cli    
c01072d0:	f4                   	hlt    
c01072d1:	8b 53 08             	mov    0x8(%ebx),%edx
c01072d4:	8b 43 10             	mov    0x10(%ebx),%eax
c01072d7:	e8 3b f7 ff ff       	call   c0106a17 <cleanup_array_with_lists.constprop.1>
c01072dc:	83 ec 0c             	sub    $0xc,%esp
c01072df:	ff 73 10             	pushl  0x10(%ebx)
c01072e2:	e8 85 ab ff ff       	call   c0101e6c <kfree>
c01072e7:	83 c4 10             	add    $0x10,%esp
c01072ea:	89 5d 08             	mov    %ebx,0x8(%ebp)
c01072ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01072f0:	c9                   	leave  
c01072f1:	e9 76 ab ff ff       	jmp    c0101e6c <kfree>

c01072f6 <hashtable_assertvalid>:
c01072f6:	55                   	push   %ebp
c01072f7:	89 e5                	mov    %esp,%ebp
c01072f9:	57                   	push   %edi
c01072fa:	56                   	push   %esi
c01072fb:	53                   	push   %ebx
c01072fc:	83 ec 1c             	sub    $0x1c,%esp
c01072ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107302:	85 db                	test   %ebx,%ebx
c0107304:	75 2b                	jne    c0107331 <hashtable_assertvalid+0x3b>
c0107306:	83 ec 0c             	sub    $0xc,%esp
c0107309:	68 bc 15 11 c0       	push   $0xc01115bc
c010730e:	68 76 01 00 00       	push   $0x176
c0107313:	68 7e 14 11 c0       	push   $0xc011147e
c0107318:	68 7c 10 11 c0       	push   $0xc011107c
c010731d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107322:	e8 41 cf ff ff       	call   c0104268 <print>
c0107327:	83 c4 20             	add    $0x20,%esp
c010732a:	e8 54 9c ff ff       	call   c0100f83 <backtrace>
c010732f:	fa                   	cli    
c0107330:	f4                   	hlt    
c0107331:	81 3b 5c 11 00 00    	cmpl   $0x115c,(%ebx)
c0107337:	74 2b                	je     c0107364 <hashtable_assertvalid+0x6e>
c0107339:	83 ec 0c             	sub    $0xc,%esp
c010733c:	68 bc 15 11 c0       	push   $0xc01115bc
c0107341:	68 77 01 00 00       	push   $0x177
c0107346:	68 7e 14 11 c0       	push   $0xc011147e
c010734b:	68 d0 14 11 c0       	push   $0xc01114d0
c0107350:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107355:	e8 0e cf ff ff       	call   c0104268 <print>
c010735a:	83 c4 20             	add    $0x20,%esp
c010735d:	e8 21 9c ff ff       	call   c0100f83 <backtrace>
c0107362:	fa                   	cli    
c0107363:	f4                   	hlt    
c0107364:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010736b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107375:	3b 43 08             	cmp    0x8(%ebx),%eax
c0107378:	0f 83 0b 01 00 00    	jae    c0107489 <hashtable_assertvalid+0x193>
c010737e:	8b 43 10             	mov    0x10(%ebx),%eax
c0107381:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0107384:	8b 34 88             	mov    (%eax,%ecx,4),%esi
c0107387:	85 f6                	test   %esi,%esi
c0107389:	75 2b                	jne    c01073b6 <hashtable_assertvalid+0xc0>
c010738b:	83 ec 0c             	sub    $0xc,%esp
c010738e:	68 bc 15 11 c0       	push   $0xc01115bc
c0107393:	68 7f 01 00 00       	push   $0x17f
c0107398:	68 7e 14 11 c0       	push   $0xc011147e
c010739d:	68 ed 14 11 c0       	push   $0xc01114ed
c01073a2:	68 2b ff 10 c0       	push   $0xc010ff2b
c01073a7:	e8 bc ce ff ff       	call   c0104268 <print>
c01073ac:	83 c4 20             	add    $0x20,%esp
c01073af:	e8 cf 9b ff ff       	call   c0100f83 <backtrace>
c01073b4:	fa                   	cli    
c01073b5:	f4                   	hlt    
c01073b6:	83 ec 0c             	sub    $0xc,%esp
c01073b9:	56                   	push   %esi
c01073ba:	e8 b5 ed ff ff       	call   c0106174 <list_assertvalid>
c01073bf:	89 34 24             	mov    %esi,(%esp)
c01073c2:	e8 9c ec ff ff       	call   c0106063 <list_getsize>
c01073c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01073ca:	01 45 e0             	add    %eax,-0x20(%ebp)
c01073cd:	83 c4 10             	add    $0x10,%esp
c01073d0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01073d7:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c01073da:	39 4d dc             	cmp    %ecx,-0x24(%ebp)
c01073dd:	0f 84 9e 00 00 00    	je     c0107481 <hashtable_assertvalid+0x18b>
c01073e3:	83 ec 0c             	sub    $0xc,%esp
c01073e6:	56                   	push   %esi
c01073e7:	e8 63 e9 ff ff       	call   c0105d4f <list_front>
c01073ec:	89 c7                	mov    %eax,%edi
c01073ee:	83 c4 10             	add    $0x10,%esp
c01073f1:	81 38 5d 11 00 00    	cmpl   $0x115d,(%eax)
c01073f7:	74 2b                	je     c0107424 <hashtable_assertvalid+0x12e>
c01073f9:	83 ec 0c             	sub    $0xc,%esp
c01073fc:	68 bc 15 11 c0       	push   $0xc01115bc
c0107401:	68 86 01 00 00       	push   $0x186
c0107406:	68 7e 14 11 c0       	push   $0xc011147e
c010740b:	68 63 15 11 c0       	push   $0xc0111563
c0107410:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107415:	e8 4e ce ff ff       	call   c0104268 <print>
c010741a:	83 c4 20             	add    $0x20,%esp
c010741d:	e8 61 9b ff ff       	call   c0100f83 <backtrace>
c0107422:	fa                   	cli    
c0107423:	f4                   	hlt    
c0107424:	8b 57 08             	mov    0x8(%edi),%edx
c0107427:	8b 47 04             	mov    0x4(%edi),%eax
c010742a:	e8 25 f5 ff ff       	call   c0106954 <hash>
c010742f:	31 d2                	xor    %edx,%edx
c0107431:	f7 73 08             	divl   0x8(%ebx)
c0107434:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
c0107437:	74 2b                	je     c0107464 <hashtable_assertvalid+0x16e>
c0107439:	83 ec 0c             	sub    $0xc,%esp
c010743c:	68 bc 15 11 c0       	push   $0xc01115bc
c0107441:	68 87 01 00 00       	push   $0x187
c0107446:	68 7e 14 11 c0       	push   $0xc011147e
c010744b:	68 7a 15 11 c0       	push   $0xc011157a
c0107450:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107455:	e8 0e ce ff ff       	call   c0104268 <print>
c010745a:	83 c4 20             	add    $0x20,%esp
c010745d:	e8 21 9b ff ff       	call   c0100f83 <backtrace>
c0107462:	fa                   	cli    
c0107463:	f4                   	hlt    
c0107464:	83 ec 0c             	sub    $0xc,%esp
c0107467:	56                   	push   %esi
c0107468:	e8 1b e8 ff ff       	call   c0105c88 <list_pop_front>
c010746d:	58                   	pop    %eax
c010746e:	5a                   	pop    %edx
c010746f:	57                   	push   %edi
c0107470:	56                   	push   %esi
c0107471:	e8 12 e7 ff ff       	call   c0105b88 <list_push_back>
c0107476:	ff 45 dc             	incl   -0x24(%ebp)
c0107479:	83 c4 10             	add    $0x10,%esp
c010747c:	e9 56 ff ff ff       	jmp    c01073d7 <hashtable_assertvalid+0xe1>
c0107481:	ff 45 e4             	incl   -0x1c(%ebp)
c0107484:	e9 e9 fe ff ff       	jmp    c0107372 <hashtable_assertvalid+0x7c>
c0107489:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010748c:	3b 43 04             	cmp    0x4(%ebx),%eax
c010748f:	74 2b                	je     c01074bc <hashtable_assertvalid+0x1c6>
c0107491:	83 ec 0c             	sub    $0xc,%esp
c0107494:	68 bc 15 11 c0       	push   $0xc01115bc
c0107499:	68 8c 01 00 00       	push   $0x18c
c010749e:	68 7e 14 11 c0       	push   $0xc011147e
c01074a3:	68 a8 15 11 c0       	push   $0xc01115a8
c01074a8:	68 2b ff 10 c0       	push   $0xc010ff2b
c01074ad:	e8 b6 cd ff ff       	call   c0104268 <print>
c01074b2:	83 c4 20             	add    $0x20,%esp
c01074b5:	e8 c9 9a ff ff       	call   c0100f83 <backtrace>
c01074ba:	fa                   	cli    
c01074bb:	f4                   	hlt    
c01074bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01074bf:	5b                   	pop    %ebx
c01074c0:	5e                   	pop    %esi
c01074c1:	5f                   	pop    %edi
c01074c2:	5d                   	pop    %ebp
c01074c3:	c3                   	ret    

c01074c4 <bitmap_ts_create>:
c01074c4:	55                   	push   %ebp
c01074c5:	89 e5                	mov    %esp,%ebp
c01074c7:	56                   	push   %esi
c01074c8:	53                   	push   %ebx
c01074c9:	83 ec 0c             	sub    $0xc,%esp
c01074cc:	6a 0c                	push   $0xc
c01074ce:	e8 99 a8 ff ff       	call   c0101d6c <kmalloc>
c01074d3:	83 c4 10             	add    $0x10,%esp
c01074d6:	31 db                	xor    %ebx,%ebx
c01074d8:	85 c0                	test   %eax,%eax
c01074da:	0f 84 83 00 00 00    	je     c0107563 <bitmap_ts_create+0x9f>
c01074e0:	89 c6                	mov    %eax,%esi
c01074e2:	83 ec 0c             	sub    $0xc,%esp
c01074e5:	ff 75 08             	pushl  0x8(%ebp)
c01074e8:	e8 18 f1 ff ff       	call   c0106605 <bitmap_create>
c01074ed:	89 06                	mov    %eax,(%esi)
c01074ef:	83 c4 10             	add    $0x10,%esp
c01074f2:	85 c0                	test   %eax,%eax
c01074f4:	75 0e                	jne    c0107504 <bitmap_ts_create+0x40>
c01074f6:	83 ec 0c             	sub    $0xc,%esp
c01074f9:	56                   	push   %esi
c01074fa:	e8 6d a9 ff ff       	call   c0101e6c <kfree>
c01074ff:	83 c4 10             	add    $0x10,%esp
c0107502:	eb 5f                	jmp    c0107563 <bitmap_ts_create+0x9f>
c0107504:	83 ec 0c             	sub    $0xc,%esp
c0107507:	68 86 16 11 c0       	push   $0xc0111686
c010750c:	e8 62 ba ff ff       	call   c0102f73 <lock_create>
c0107511:	89 46 04             	mov    %eax,0x4(%esi)
c0107514:	83 c4 10             	add    $0x10,%esp
c0107517:	85 c0                	test   %eax,%eax
c0107519:	75 0f                	jne    c010752a <bitmap_ts_create+0x66>
c010751b:	83 ec 0c             	sub    $0xc,%esp
c010751e:	ff 36                	pushl  (%esi)
c0107520:	e8 47 a9 ff ff       	call   c0101e6c <kfree>
c0107525:	89 34 24             	mov    %esi,(%esp)
c0107528:	eb 2f                	jmp    c0107559 <bitmap_ts_create+0x95>
c010752a:	83 ec 0c             	sub    $0xc,%esp
c010752d:	68 93 16 11 c0       	push   $0xc0111693
c0107532:	e8 af b8 ff ff       	call   c0102de6 <cv_create>
c0107537:	89 46 08             	mov    %eax,0x8(%esi)
c010753a:	83 c4 10             	add    $0x10,%esp
c010753d:	89 f3                	mov    %esi,%ebx
c010753f:	85 c0                	test   %eax,%eax
c0107541:	75 20                	jne    c0107563 <bitmap_ts_create+0x9f>
c0107543:	83 ec 0c             	sub    $0xc,%esp
c0107546:	ff 76 04             	pushl  0x4(%esi)
c0107549:	e8 1e a9 ff ff       	call   c0101e6c <kfree>
c010754e:	58                   	pop    %eax
c010754f:	ff 36                	pushl  (%esi)
c0107551:	e8 16 a9 ff ff       	call   c0101e6c <kfree>
c0107556:	89 34 24             	mov    %esi,(%esp)
c0107559:	e8 0e a9 ff ff       	call   c0101e6c <kfree>
c010755e:	83 c4 10             	add    $0x10,%esp
c0107561:	31 db                	xor    %ebx,%ebx
c0107563:	89 d8                	mov    %ebx,%eax
c0107565:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107568:	5b                   	pop    %ebx
c0107569:	5e                   	pop    %esi
c010756a:	5d                   	pop    %ebp
c010756b:	c3                   	ret    

c010756c <bitmap_ts_getdata>:
c010756c:	55                   	push   %ebp
c010756d:	89 e5                	mov    %esp,%ebp
c010756f:	53                   	push   %ebx
c0107570:	83 ec 14             	sub    $0x14,%esp
c0107573:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107576:	85 db                	test   %ebx,%ebx
c0107578:	75 28                	jne    c01075a2 <bitmap_ts_getdata+0x36>
c010757a:	83 ec 0c             	sub    $0xc,%esp
c010757d:	68 3c 17 11 c0       	push   $0xc011173c
c0107582:	6a 29                	push   $0x29
c0107584:	68 a0 16 11 c0       	push   $0xc01116a0
c0107589:	68 b0 16 11 c0       	push   $0xc01116b0
c010758e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107593:	e8 d0 cc ff ff       	call   c0104268 <print>
c0107598:	83 c4 20             	add    $0x20,%esp
c010759b:	e8 e3 99 ff ff       	call   c0100f83 <backtrace>
c01075a0:	fa                   	cli    
c01075a1:	f4                   	hlt    
c01075a2:	83 ec 0c             	sub    $0xc,%esp
c01075a5:	ff 73 04             	pushl  0x4(%ebx)
c01075a8:	e8 46 bb ff ff       	call   c01030f3 <lock_acquire>
c01075ad:	58                   	pop    %eax
c01075ae:	ff 33                	pushl  (%ebx)
c01075b0:	e8 4e f1 ff ff       	call   c0106703 <bitmap_getdata>
c01075b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01075b8:	5a                   	pop    %edx
c01075b9:	ff 73 04             	pushl  0x4(%ebx)
c01075bc:	e8 a3 bc ff ff       	call   c0103264 <lock_release>
c01075c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01075c7:	c9                   	leave  
c01075c8:	c3                   	ret    

c01075c9 <bitmap_ts_alloc>:
c01075c9:	55                   	push   %ebp
c01075ca:	89 e5                	mov    %esp,%ebp
c01075cc:	56                   	push   %esi
c01075cd:	53                   	push   %ebx
c01075ce:	83 ec 10             	sub    $0x10,%esp
c01075d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01075d4:	8b 75 0c             	mov    0xc(%ebp),%esi
c01075d7:	85 db                	test   %ebx,%ebx
c01075d9:	75 28                	jne    c0107603 <bitmap_ts_alloc+0x3a>
c01075db:	83 ec 0c             	sub    $0xc,%esp
c01075de:	68 2c 17 11 c0       	push   $0xc011172c
c01075e3:	6a 32                	push   $0x32
c01075e5:	68 a0 16 11 c0       	push   $0xc01116a0
c01075ea:	68 b0 16 11 c0       	push   $0xc01116b0
c01075ef:	68 2b ff 10 c0       	push   $0xc010ff2b
c01075f4:	e8 6f cc ff ff       	call   c0104268 <print>
c01075f9:	83 c4 20             	add    $0x20,%esp
c01075fc:	e8 82 99 ff ff       	call   c0100f83 <backtrace>
c0107601:	fa                   	cli    
c0107602:	f4                   	hlt    
c0107603:	85 f6                	test   %esi,%esi
c0107605:	75 28                	jne    c010762f <bitmap_ts_alloc+0x66>
c0107607:	83 ec 0c             	sub    $0xc,%esp
c010760a:	68 2c 17 11 c0       	push   $0xc011172c
c010760f:	6a 33                	push   $0x33
c0107611:	68 a0 16 11 c0       	push   $0xc01116a0
c0107616:	68 ba 16 11 c0       	push   $0xc01116ba
c010761b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107620:	e8 43 cc ff ff       	call   c0104268 <print>
c0107625:	83 c4 20             	add    $0x20,%esp
c0107628:	e8 56 99 ff ff       	call   c0100f83 <backtrace>
c010762d:	fa                   	cli    
c010762e:	f4                   	hlt    
c010762f:	83 ec 0c             	sub    $0xc,%esp
c0107632:	ff 73 04             	pushl  0x4(%ebx)
c0107635:	e8 b9 ba ff ff       	call   c01030f3 <lock_acquire>
c010763a:	58                   	pop    %eax
c010763b:	5a                   	pop    %edx
c010763c:	56                   	push   %esi
c010763d:	ff 33                	pushl  (%ebx)
c010763f:	e8 ca f0 ff ff       	call   c010670e <bitmap_alloc>
c0107644:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107647:	59                   	pop    %ecx
c0107648:	ff 73 04             	pushl  0x4(%ebx)
c010764b:	e8 14 bc ff ff       	call   c0103264 <lock_release>
c0107650:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107653:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107656:	5b                   	pop    %ebx
c0107657:	5e                   	pop    %esi
c0107658:	5d                   	pop    %ebp
c0107659:	c3                   	ret    

c010765a <bitmap_ts_mark>:
c010765a:	55                   	push   %ebp
c010765b:	89 e5                	mov    %esp,%ebp
c010765d:	56                   	push   %esi
c010765e:	53                   	push   %ebx
c010765f:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107662:	8b 75 0c             	mov    0xc(%ebp),%esi
c0107665:	85 db                	test   %ebx,%ebx
c0107667:	75 28                	jne    c0107691 <bitmap_ts_mark+0x37>
c0107669:	83 ec 0c             	sub    $0xc,%esp
c010766c:	68 1c 17 11 c0       	push   $0xc011171c
c0107671:	6a 3d                	push   $0x3d
c0107673:	68 a0 16 11 c0       	push   $0xc01116a0
c0107678:	68 b0 16 11 c0       	push   $0xc01116b0
c010767d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107682:	e8 e1 cb ff ff       	call   c0104268 <print>
c0107687:	83 c4 20             	add    $0x20,%esp
c010768a:	e8 f4 98 ff ff       	call   c0100f83 <backtrace>
c010768f:	fa                   	cli    
c0107690:	f4                   	hlt    
c0107691:	83 ec 0c             	sub    $0xc,%esp
c0107694:	ff 73 04             	pushl  0x4(%ebx)
c0107697:	e8 57 ba ff ff       	call   c01030f3 <lock_acquire>
c010769c:	58                   	pop    %eax
c010769d:	5a                   	pop    %edx
c010769e:	56                   	push   %esi
c010769f:	ff 33                	pushl  (%ebx)
c01076a1:	e8 14 f1 ff ff       	call   c01067ba <bitmap_mark>
c01076a6:	59                   	pop    %ecx
c01076a7:	5e                   	pop    %esi
c01076a8:	ff 73 04             	pushl  0x4(%ebx)
c01076ab:	ff 73 08             	pushl  0x8(%ebx)
c01076ae:	e8 36 b8 ff ff       	call   c0102ee9 <cv_signal>
c01076b3:	83 c4 10             	add    $0x10,%esp
c01076b6:	8b 43 04             	mov    0x4(%ebx),%eax
c01076b9:	89 45 08             	mov    %eax,0x8(%ebp)
c01076bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01076bf:	5b                   	pop    %ebx
c01076c0:	5e                   	pop    %esi
c01076c1:	5d                   	pop    %ebp
c01076c2:	e9 9d bb ff ff       	jmp    c0103264 <lock_release>

c01076c7 <bitmap_ts_unmark>:
c01076c7:	55                   	push   %ebp
c01076c8:	89 e5                	mov    %esp,%ebp
c01076ca:	56                   	push   %esi
c01076cb:	53                   	push   %ebx
c01076cc:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01076cf:	8b 75 0c             	mov    0xc(%ebp),%esi
c01076d2:	85 db                	test   %ebx,%ebx
c01076d4:	75 28                	jne    c01076fe <bitmap_ts_unmark+0x37>
c01076d6:	83 ec 0c             	sub    $0xc,%esp
c01076d9:	68 08 17 11 c0       	push   $0xc0111708
c01076de:	6a 46                	push   $0x46
c01076e0:	68 a0 16 11 c0       	push   $0xc01116a0
c01076e5:	68 b0 16 11 c0       	push   $0xc01116b0
c01076ea:	68 2b ff 10 c0       	push   $0xc010ff2b
c01076ef:	e8 74 cb ff ff       	call   c0104268 <print>
c01076f4:	83 c4 20             	add    $0x20,%esp
c01076f7:	e8 87 98 ff ff       	call   c0100f83 <backtrace>
c01076fc:	fa                   	cli    
c01076fd:	f4                   	hlt    
c01076fe:	83 ec 0c             	sub    $0xc,%esp
c0107701:	ff 73 04             	pushl  0x4(%ebx)
c0107704:	e8 ea b9 ff ff       	call   c01030f3 <lock_acquire>
c0107709:	58                   	pop    %eax
c010770a:	5a                   	pop    %edx
c010770b:	56                   	push   %esi
c010770c:	ff 33                	pushl  (%ebx)
c010770e:	e8 36 f1 ff ff       	call   c0106849 <bitmap_unmark>
c0107713:	83 c4 10             	add    $0x10,%esp
c0107716:	8b 43 04             	mov    0x4(%ebx),%eax
c0107719:	89 45 08             	mov    %eax,0x8(%ebp)
c010771c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010771f:	5b                   	pop    %ebx
c0107720:	5e                   	pop    %esi
c0107721:	5d                   	pop    %ebp
c0107722:	e9 3d bb ff ff       	jmp    c0103264 <lock_release>

c0107727 <bitmap_ts_isset>:
c0107727:	55                   	push   %ebp
c0107728:	89 e5                	mov    %esp,%ebp
c010772a:	53                   	push   %ebx
c010772b:	83 ec 14             	sub    $0x14,%esp
c010772e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107731:	85 db                	test   %ebx,%ebx
c0107733:	75 28                	jne    c010775d <bitmap_ts_isset+0x36>
c0107735:	83 ec 0c             	sub    $0xc,%esp
c0107738:	68 f8 16 11 c0       	push   $0xc01116f8
c010773d:	6a 4e                	push   $0x4e
c010773f:	68 a0 16 11 c0       	push   $0xc01116a0
c0107744:	68 b0 16 11 c0       	push   $0xc01116b0
c0107749:	68 2b ff 10 c0       	push   $0xc010ff2b
c010774e:	e8 15 cb ff ff       	call   c0104268 <print>
c0107753:	83 c4 20             	add    $0x20,%esp
c0107756:	e8 28 98 ff ff       	call   c0100f83 <backtrace>
c010775b:	fa                   	cli    
c010775c:	f4                   	hlt    
c010775d:	83 ec 0c             	sub    $0xc,%esp
c0107760:	ff 73 04             	pushl  0x4(%ebx)
c0107763:	e8 8b b9 ff ff       	call   c01030f3 <lock_acquire>
c0107768:	58                   	pop    %eax
c0107769:	5a                   	pop    %edx
c010776a:	ff 75 0c             	pushl  0xc(%ebp)
c010776d:	ff 33                	pushl  (%ebx)
c010776f:	e8 60 f1 ff ff       	call   c01068d4 <bitmap_isset>
c0107774:	88 45 f7             	mov    %al,-0x9(%ebp)
c0107777:	59                   	pop    %ecx
c0107778:	ff 73 04             	pushl  0x4(%ebx)
c010777b:	e8 e4 ba ff ff       	call   c0103264 <lock_release>
c0107780:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0107784:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107787:	c9                   	leave  
c0107788:	c3                   	ret    

c0107789 <bitmap_ts_isset_blocking>:
c0107789:	55                   	push   %ebp
c010778a:	89 e5                	mov    %esp,%ebp
c010778c:	53                   	push   %ebx
c010778d:	51                   	push   %ecx
c010778e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107791:	85 db                	test   %ebx,%ebx
c0107793:	75 28                	jne    c01077bd <bitmap_ts_isset_blocking+0x34>
c0107795:	83 ec 0c             	sub    $0xc,%esp
c0107798:	68 dc 16 11 c0       	push   $0xc01116dc
c010779d:	6a 57                	push   $0x57
c010779f:	68 a0 16 11 c0       	push   $0xc01116a0
c01077a4:	68 b0 16 11 c0       	push   $0xc01116b0
c01077a9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01077ae:	e8 b5 ca ff ff       	call   c0104268 <print>
c01077b3:	83 c4 20             	add    $0x20,%esp
c01077b6:	e8 c8 97 ff ff       	call   c0100f83 <backtrace>
c01077bb:	fa                   	cli    
c01077bc:	f4                   	hlt    
c01077bd:	83 ec 0c             	sub    $0xc,%esp
c01077c0:	ff 73 04             	pushl  0x4(%ebx)
c01077c3:	e8 2b b9 ff ff       	call   c01030f3 <lock_acquire>
c01077c8:	83 c4 10             	add    $0x10,%esp
c01077cb:	50                   	push   %eax
c01077cc:	50                   	push   %eax
c01077cd:	ff 75 0c             	pushl  0xc(%ebp)
c01077d0:	ff 33                	pushl  (%ebx)
c01077d2:	e8 fd f0 ff ff       	call   c01068d4 <bitmap_isset>
c01077d7:	83 c4 10             	add    $0x10,%esp
c01077da:	84 c0                	test   %al,%al
c01077dc:	74 0f                	je     c01077ed <bitmap_ts_isset_blocking+0x64>
c01077de:	52                   	push   %edx
c01077df:	52                   	push   %edx
c01077e0:	ff 73 04             	pushl  0x4(%ebx)
c01077e3:	ff 73 08             	pushl  0x8(%ebx)
c01077e6:	e8 b9 b6 ff ff       	call   c0102ea4 <cv_wait>
c01077eb:	eb db                	jmp    c01077c8 <bitmap_ts_isset_blocking+0x3f>
c01077ed:	83 ec 0c             	sub    $0xc,%esp
c01077f0:	ff 73 04             	pushl  0x4(%ebx)
c01077f3:	e8 6c ba ff ff       	call   c0103264 <lock_release>
c01077f8:	31 c0                	xor    %eax,%eax
c01077fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01077fd:	c9                   	leave  
c01077fe:	c3                   	ret    

c01077ff <bitmap_ts_destroy>:
c01077ff:	55                   	push   %ebp
c0107800:	89 e5                	mov    %esp,%ebp
c0107802:	53                   	push   %ebx
c0107803:	50                   	push   %eax
c0107804:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107807:	85 db                	test   %ebx,%ebx
c0107809:	75 28                	jne    c0107833 <bitmap_ts_destroy+0x34>
c010780b:	83 ec 0c             	sub    $0xc,%esp
c010780e:	68 c8 16 11 c0       	push   $0xc01116c8
c0107813:	6a 61                	push   $0x61
c0107815:	68 a0 16 11 c0       	push   $0xc01116a0
c010781a:	68 b0 16 11 c0       	push   $0xc01116b0
c010781f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107824:	e8 3f ca ff ff       	call   c0104268 <print>
c0107829:	83 c4 20             	add    $0x20,%esp
c010782c:	e8 52 97 ff ff       	call   c0100f83 <backtrace>
c0107831:	fa                   	cli    
c0107832:	f4                   	hlt    
c0107833:	83 ec 0c             	sub    $0xc,%esp
c0107836:	ff 73 04             	pushl  0x4(%ebx)
c0107839:	e8 b5 b8 ff ff       	call   c01030f3 <lock_acquire>
c010783e:	58                   	pop    %eax
c010783f:	ff 33                	pushl  (%ebx)
c0107841:	e8 e6 f0 ff ff       	call   c010692c <bitmap_destroy>
c0107846:	5a                   	pop    %edx
c0107847:	ff 73 08             	pushl  0x8(%ebx)
c010784a:	e8 f5 b5 ff ff       	call   c0102e44 <cv_destroy>
c010784f:	59                   	pop    %ecx
c0107850:	ff 73 04             	pushl  0x4(%ebx)
c0107853:	e8 0c ba ff ff       	call   c0103264 <lock_release>
c0107858:	58                   	pop    %eax
c0107859:	ff 73 04             	pushl  0x4(%ebx)
c010785c:	e8 95 b7 ff ff       	call   c0102ff6 <lock_destroy>
c0107861:	83 c4 10             	add    $0x10,%esp
c0107864:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0107867:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010786a:	c9                   	leave  
c010786b:	e9 fc a5 ff ff       	jmp    c0101e6c <kfree>

c0107870 <queue_ts_create>:
c0107870:	55                   	push   %ebp
c0107871:	89 e5                	mov    %esp,%ebp
c0107873:	56                   	push   %esi
c0107874:	53                   	push   %ebx
c0107875:	83 ec 0c             	sub    $0xc,%esp
c0107878:	6a 0c                	push   $0xc
c010787a:	e8 ed a4 ff ff       	call   c0101d6c <kmalloc>
c010787f:	83 c4 10             	add    $0x10,%esp
c0107882:	31 db                	xor    %ebx,%ebx
c0107884:	85 c0                	test   %eax,%eax
c0107886:	74 7a                	je     c0107902 <queue_ts_create+0x92>
c0107888:	89 c6                	mov    %eax,%esi
c010788a:	e8 24 ea ff ff       	call   c01062b3 <queue_create>
c010788f:	89 06                	mov    %eax,(%esi)
c0107891:	85 c0                	test   %eax,%eax
c0107893:	75 0e                	jne    c01078a3 <queue_ts_create+0x33>
c0107895:	83 ec 0c             	sub    $0xc,%esp
c0107898:	56                   	push   %esi
c0107899:	e8 ce a5 ff ff       	call   c0101e6c <kfree>
c010789e:	83 c4 10             	add    $0x10,%esp
c01078a1:	eb 5f                	jmp    c0107902 <queue_ts_create+0x92>
c01078a3:	83 ec 0c             	sub    $0xc,%esp
c01078a6:	68 4e 17 11 c0       	push   $0xc011174e
c01078ab:	e8 c3 b6 ff ff       	call   c0102f73 <lock_create>
c01078b0:	89 46 04             	mov    %eax,0x4(%esi)
c01078b3:	83 c4 10             	add    $0x10,%esp
c01078b6:	85 c0                	test   %eax,%eax
c01078b8:	75 0f                	jne    c01078c9 <queue_ts_create+0x59>
c01078ba:	83 ec 0c             	sub    $0xc,%esp
c01078bd:	ff 36                	pushl  (%esi)
c01078bf:	e8 a8 a5 ff ff       	call   c0101e6c <kfree>
c01078c4:	89 34 24             	mov    %esi,(%esp)
c01078c7:	eb 2f                	jmp    c01078f8 <queue_ts_create+0x88>
c01078c9:	83 ec 0c             	sub    $0xc,%esp
c01078cc:	68 5a 17 11 c0       	push   $0xc011175a
c01078d1:	e8 10 b5 ff ff       	call   c0102de6 <cv_create>
c01078d6:	89 46 08             	mov    %eax,0x8(%esi)
c01078d9:	83 c4 10             	add    $0x10,%esp
c01078dc:	89 f3                	mov    %esi,%ebx
c01078de:	85 c0                	test   %eax,%eax
c01078e0:	75 20                	jne    c0107902 <queue_ts_create+0x92>
c01078e2:	83 ec 0c             	sub    $0xc,%esp
c01078e5:	ff 76 04             	pushl  0x4(%esi)
c01078e8:	e8 7f a5 ff ff       	call   c0101e6c <kfree>
c01078ed:	58                   	pop    %eax
c01078ee:	ff 36                	pushl  (%esi)
c01078f0:	e8 77 a5 ff ff       	call   c0101e6c <kfree>
c01078f5:	89 34 24             	mov    %esi,(%esp)
c01078f8:	e8 6f a5 ff ff       	call   c0101e6c <kfree>
c01078fd:	83 c4 10             	add    $0x10,%esp
c0107900:	31 db                	xor    %ebx,%ebx
c0107902:	89 d8                	mov    %ebx,%eax
c0107904:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107907:	5b                   	pop    %ebx
c0107908:	5e                   	pop    %esi
c0107909:	5d                   	pop    %ebp
c010790a:	c3                   	ret    

c010790b <queue_ts_push>:
c010790b:	55                   	push   %ebp
c010790c:	89 e5                	mov    %esp,%ebp
c010790e:	53                   	push   %ebx
c010790f:	83 ec 14             	sub    $0x14,%esp
c0107912:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107915:	85 db                	test   %ebx,%ebx
c0107917:	75 28                	jne    c0107941 <queue_ts_push+0x36>
c0107919:	83 ec 0c             	sub    $0xc,%esp
c010791c:	68 f4 17 11 c0       	push   $0xc01117f4
c0107921:	6a 29                	push   $0x29
c0107923:	68 66 17 11 c0       	push   $0xc0111766
c0107928:	68 1b 13 11 c0       	push   $0xc011131b
c010792d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107932:	e8 31 c9 ff ff       	call   c0104268 <print>
c0107937:	83 c4 20             	add    $0x20,%esp
c010793a:	e8 44 96 ff ff       	call   c0100f83 <backtrace>
c010793f:	fa                   	cli    
c0107940:	f4                   	hlt    
c0107941:	83 ec 0c             	sub    $0xc,%esp
c0107944:	ff 73 04             	pushl  0x4(%ebx)
c0107947:	e8 a7 b7 ff ff       	call   c01030f3 <lock_acquire>
c010794c:	58                   	pop    %eax
c010794d:	5a                   	pop    %edx
c010794e:	ff 75 0c             	pushl  0xc(%ebp)
c0107951:	ff 33                	pushl  (%ebx)
c0107953:	e8 9d e9 ff ff       	call   c01062f5 <queue_push>
c0107958:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010795b:	59                   	pop    %ecx
c010795c:	58                   	pop    %eax
c010795d:	ff 73 04             	pushl  0x4(%ebx)
c0107960:	ff 73 08             	pushl  0x8(%ebx)
c0107963:	e8 81 b5 ff ff       	call   c0102ee9 <cv_signal>
c0107968:	58                   	pop    %eax
c0107969:	ff 73 04             	pushl  0x4(%ebx)
c010796c:	e8 f3 b8 ff ff       	call   c0103264 <lock_release>
c0107971:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107974:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107977:	c9                   	leave  
c0107978:	c3                   	ret    

c0107979 <queue_ts_pop>:
c0107979:	55                   	push   %ebp
c010797a:	89 e5                	mov    %esp,%ebp
c010797c:	56                   	push   %esi
c010797d:	53                   	push   %ebx
c010797e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107981:	85 db                	test   %ebx,%ebx
c0107983:	75 28                	jne    c01079ad <queue_ts_pop+0x34>
c0107985:	83 ec 0c             	sub    $0xc,%esp
c0107988:	68 e4 17 11 c0       	push   $0xc01117e4
c010798d:	6a 34                	push   $0x34
c010798f:	68 66 17 11 c0       	push   $0xc0111766
c0107994:	68 1b 13 11 c0       	push   $0xc011131b
c0107999:	68 2b ff 10 c0       	push   $0xc010ff2b
c010799e:	e8 c5 c8 ff ff       	call   c0104268 <print>
c01079a3:	83 c4 20             	add    $0x20,%esp
c01079a6:	e8 d8 95 ff ff       	call   c0100f83 <backtrace>
c01079ab:	fa                   	cli    
c01079ac:	f4                   	hlt    
c01079ad:	83 ec 0c             	sub    $0xc,%esp
c01079b0:	ff 73 04             	pushl  0x4(%ebx)
c01079b3:	e8 3b b7 ff ff       	call   c01030f3 <lock_acquire>
c01079b8:	5a                   	pop    %edx
c01079b9:	ff 33                	pushl  (%ebx)
c01079bb:	e8 96 ea ff ff       	call   c0106456 <queue_isempty>
c01079c0:	83 c4 10             	add    $0x10,%esp
c01079c3:	31 f6                	xor    %esi,%esi
c01079c5:	85 c0                	test   %eax,%eax
c01079c7:	75 17                	jne    c01079e0 <queue_ts_pop+0x67>
c01079c9:	83 ec 0c             	sub    $0xc,%esp
c01079cc:	ff 33                	pushl  (%ebx)
c01079ce:	e8 10 ea ff ff       	call   c01063e3 <queue_front>
c01079d3:	89 c6                	mov    %eax,%esi
c01079d5:	58                   	pop    %eax
c01079d6:	ff 33                	pushl  (%ebx)
c01079d8:	e8 93 e9 ff ff       	call   c0106370 <queue_pop>
c01079dd:	83 c4 10             	add    $0x10,%esp
c01079e0:	83 ec 0c             	sub    $0xc,%esp
c01079e3:	ff 73 04             	pushl  0x4(%ebx)
c01079e6:	e8 79 b8 ff ff       	call   c0103264 <lock_release>
c01079eb:	89 f0                	mov    %esi,%eax
c01079ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01079f0:	5b                   	pop    %ebx
c01079f1:	5e                   	pop    %esi
c01079f2:	5d                   	pop    %ebp
c01079f3:	c3                   	ret    

c01079f4 <queue_ts_pop_blocking>:
c01079f4:	55                   	push   %ebp
c01079f5:	89 e5                	mov    %esp,%ebp
c01079f7:	56                   	push   %esi
c01079f8:	53                   	push   %ebx
c01079f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01079fc:	85 db                	test   %ebx,%ebx
c01079fe:	75 28                	jne    c0107a28 <queue_ts_pop_blocking+0x34>
c0107a00:	83 ec 0c             	sub    $0xc,%esp
c0107a03:	68 cc 17 11 c0       	push   $0xc01117cc
c0107a08:	6a 41                	push   $0x41
c0107a0a:	68 66 17 11 c0       	push   $0xc0111766
c0107a0f:	68 1b 13 11 c0       	push   $0xc011131b
c0107a14:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107a19:	e8 4a c8 ff ff       	call   c0104268 <print>
c0107a1e:	83 c4 20             	add    $0x20,%esp
c0107a21:	e8 5d 95 ff ff       	call   c0100f83 <backtrace>
c0107a26:	fa                   	cli    
c0107a27:	f4                   	hlt    
c0107a28:	83 ec 0c             	sub    $0xc,%esp
c0107a2b:	ff 73 04             	pushl  0x4(%ebx)
c0107a2e:	e8 c0 b6 ff ff       	call   c01030f3 <lock_acquire>
c0107a33:	83 c4 10             	add    $0x10,%esp
c0107a36:	83 ec 0c             	sub    $0xc,%esp
c0107a39:	ff 33                	pushl  (%ebx)
c0107a3b:	e8 16 ea ff ff       	call   c0106456 <queue_isempty>
c0107a40:	83 c4 10             	add    $0x10,%esp
c0107a43:	85 c0                	test   %eax,%eax
c0107a45:	74 0f                	je     c0107a56 <queue_ts_pop_blocking+0x62>
c0107a47:	50                   	push   %eax
c0107a48:	50                   	push   %eax
c0107a49:	ff 73 04             	pushl  0x4(%ebx)
c0107a4c:	ff 73 08             	pushl  0x8(%ebx)
c0107a4f:	e8 50 b4 ff ff       	call   c0102ea4 <cv_wait>
c0107a54:	eb dd                	jmp    c0107a33 <queue_ts_pop_blocking+0x3f>
c0107a56:	83 ec 0c             	sub    $0xc,%esp
c0107a59:	ff 33                	pushl  (%ebx)
c0107a5b:	e8 83 e9 ff ff       	call   c01063e3 <queue_front>
c0107a60:	89 c6                	mov    %eax,%esi
c0107a62:	83 c4 10             	add    $0x10,%esp
c0107a65:	85 c0                	test   %eax,%eax
c0107a67:	74 0d                	je     c0107a76 <queue_ts_pop_blocking+0x82>
c0107a69:	83 ec 0c             	sub    $0xc,%esp
c0107a6c:	ff 33                	pushl  (%ebx)
c0107a6e:	e8 fd e8 ff ff       	call   c0106370 <queue_pop>
c0107a73:	83 c4 10             	add    $0x10,%esp
c0107a76:	83 ec 0c             	sub    $0xc,%esp
c0107a79:	ff 73 04             	pushl  0x4(%ebx)
c0107a7c:	e8 e3 b7 ff ff       	call   c0103264 <lock_release>
c0107a81:	89 f0                	mov    %esi,%eax
c0107a83:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107a86:	5b                   	pop    %ebx
c0107a87:	5e                   	pop    %esi
c0107a88:	5d                   	pop    %ebp
c0107a89:	c3                   	ret    

c0107a8a <queue_ts_isempty>:
c0107a8a:	55                   	push   %ebp
c0107a8b:	89 e5                	mov    %esp,%ebp
c0107a8d:	53                   	push   %ebx
c0107a8e:	83 ec 14             	sub    $0x14,%esp
c0107a91:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107a94:	85 db                	test   %ebx,%ebx
c0107a96:	75 28                	jne    c0107ac0 <queue_ts_isempty+0x36>
c0107a98:	83 ec 0c             	sub    $0xc,%esp
c0107a9b:	68 b8 17 11 c0       	push   $0xc01117b8
c0107aa0:	6a 4f                	push   $0x4f
c0107aa2:	68 66 17 11 c0       	push   $0xc0111766
c0107aa7:	68 1b 13 11 c0       	push   $0xc011131b
c0107aac:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107ab1:	e8 b2 c7 ff ff       	call   c0104268 <print>
c0107ab6:	83 c4 20             	add    $0x20,%esp
c0107ab9:	e8 c5 94 ff ff       	call   c0100f83 <backtrace>
c0107abe:	fa                   	cli    
c0107abf:	f4                   	hlt    
c0107ac0:	83 ec 0c             	sub    $0xc,%esp
c0107ac3:	ff 73 04             	pushl  0x4(%ebx)
c0107ac6:	e8 28 b6 ff ff       	call   c01030f3 <lock_acquire>
c0107acb:	58                   	pop    %eax
c0107acc:	ff 33                	pushl  (%ebx)
c0107ace:	e8 83 e9 ff ff       	call   c0106456 <queue_isempty>
c0107ad3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107ad6:	5a                   	pop    %edx
c0107ad7:	ff 73 04             	pushl  0x4(%ebx)
c0107ada:	e8 85 b7 ff ff       	call   c0103264 <lock_release>
c0107adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ae2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107ae5:	c9                   	leave  
c0107ae6:	c3                   	ret    

c0107ae7 <queue_ts_getsize>:
c0107ae7:	55                   	push   %ebp
c0107ae8:	89 e5                	mov    %esp,%ebp
c0107aea:	53                   	push   %ebx
c0107aeb:	83 ec 14             	sub    $0x14,%esp
c0107aee:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107af1:	85 db                	test   %ebx,%ebx
c0107af3:	75 28                	jne    c0107b1d <queue_ts_getsize+0x36>
c0107af5:	83 ec 0c             	sub    $0xc,%esp
c0107af8:	68 a4 17 11 c0       	push   $0xc01117a4
c0107afd:	6a 59                	push   $0x59
c0107aff:	68 66 17 11 c0       	push   $0xc0111766
c0107b04:	68 1b 13 11 c0       	push   $0xc011131b
c0107b09:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107b0e:	e8 55 c7 ff ff       	call   c0104268 <print>
c0107b13:	83 c4 20             	add    $0x20,%esp
c0107b16:	e8 68 94 ff ff       	call   c0100f83 <backtrace>
c0107b1b:	fa                   	cli    
c0107b1c:	f4                   	hlt    
c0107b1d:	83 ec 0c             	sub    $0xc,%esp
c0107b20:	ff 73 04             	pushl  0x4(%ebx)
c0107b23:	e8 cb b5 ff ff       	call   c01030f3 <lock_acquire>
c0107b28:	58                   	pop    %eax
c0107b29:	ff 33                	pushl  (%ebx)
c0107b2b:	e8 99 e9 ff ff       	call   c01064c9 <queue_getsize>
c0107b30:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107b33:	5a                   	pop    %edx
c0107b34:	ff 73 04             	pushl  0x4(%ebx)
c0107b37:	e8 28 b7 ff ff       	call   c0103264 <lock_release>
c0107b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b3f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107b42:	c9                   	leave  
c0107b43:	c3                   	ret    

c0107b44 <queue_ts_destroy>:
c0107b44:	55                   	push   %ebp
c0107b45:	89 e5                	mov    %esp,%ebp
c0107b47:	53                   	push   %ebx
c0107b48:	50                   	push   %eax
c0107b49:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107b4c:	85 db                	test   %ebx,%ebx
c0107b4e:	75 28                	jne    c0107b78 <queue_ts_destroy+0x34>
c0107b50:	83 ec 0c             	sub    $0xc,%esp
c0107b53:	68 90 17 11 c0       	push   $0xc0111790
c0107b58:	6a 63                	push   $0x63
c0107b5a:	68 66 17 11 c0       	push   $0xc0111766
c0107b5f:	68 1b 13 11 c0       	push   $0xc011131b
c0107b64:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107b69:	e8 fa c6 ff ff       	call   c0104268 <print>
c0107b6e:	83 c4 20             	add    $0x20,%esp
c0107b71:	e8 0d 94 ff ff       	call   c0100f83 <backtrace>
c0107b76:	fa                   	cli    
c0107b77:	f4                   	hlt    
c0107b78:	83 ec 0c             	sub    $0xc,%esp
c0107b7b:	ff 73 04             	pushl  0x4(%ebx)
c0107b7e:	e8 70 b5 ff ff       	call   c01030f3 <lock_acquire>
c0107b83:	58                   	pop    %eax
c0107b84:	ff 33                	pushl  (%ebx)
c0107b86:	e8 b1 e9 ff ff       	call   c010653c <queue_destroy>
c0107b8b:	5a                   	pop    %edx
c0107b8c:	ff 73 08             	pushl  0x8(%ebx)
c0107b8f:	e8 b0 b2 ff ff       	call   c0102e44 <cv_destroy>
c0107b94:	59                   	pop    %ecx
c0107b95:	ff 73 04             	pushl  0x4(%ebx)
c0107b98:	e8 c7 b6 ff ff       	call   c0103264 <lock_release>
c0107b9d:	58                   	pop    %eax
c0107b9e:	ff 73 04             	pushl  0x4(%ebx)
c0107ba1:	e8 50 b4 ff ff       	call   c0102ff6 <lock_destroy>
c0107ba6:	83 c4 10             	add    $0x10,%esp
c0107ba9:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0107bac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107baf:	c9                   	leave  
c0107bb0:	e9 b7 a2 ff ff       	jmp    c0101e6c <kfree>

c0107bb5 <queue_ts_assertvalid>:
c0107bb5:	55                   	push   %ebp
c0107bb6:	89 e5                	mov    %esp,%ebp
c0107bb8:	53                   	push   %ebx
c0107bb9:	52                   	push   %edx
c0107bba:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107bbd:	85 db                	test   %ebx,%ebx
c0107bbf:	75 28                	jne    c0107be9 <queue_ts_assertvalid+0x34>
c0107bc1:	83 ec 0c             	sub    $0xc,%esp
c0107bc4:	68 78 17 11 c0       	push   $0xc0111778
c0107bc9:	6a 6f                	push   $0x6f
c0107bcb:	68 66 17 11 c0       	push   $0xc0111766
c0107bd0:	68 1b 13 11 c0       	push   $0xc011131b
c0107bd5:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107bda:	e8 89 c6 ff ff       	call   c0104268 <print>
c0107bdf:	83 c4 20             	add    $0x20,%esp
c0107be2:	e8 9c 93 ff ff       	call   c0100f83 <backtrace>
c0107be7:	fa                   	cli    
c0107be8:	f4                   	hlt    
c0107be9:	83 ec 0c             	sub    $0xc,%esp
c0107bec:	ff 73 04             	pushl  0x4(%ebx)
c0107bef:	e8 ff b4 ff ff       	call   c01030f3 <lock_acquire>
c0107bf4:	58                   	pop    %eax
c0107bf5:	ff 33                	pushl  (%ebx)
c0107bf7:	e8 96 e9 ff ff       	call   c0106592 <queue_assertvalid>
c0107bfc:	83 c4 10             	add    $0x10,%esp
c0107bff:	8b 43 04             	mov    0x4(%ebx),%eax
c0107c02:	89 45 08             	mov    %eax,0x8(%ebp)
c0107c05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107c08:	c9                   	leave  
c0107c09:	e9 56 b6 ff ff       	jmp    c0103264 <lock_release>

c0107c0e <hashtable_ts_create>:
c0107c0e:	55                   	push   %ebp
c0107c0f:	89 e5                	mov    %esp,%ebp
c0107c11:	56                   	push   %esi
c0107c12:	53                   	push   %ebx
c0107c13:	83 ec 0c             	sub    $0xc,%esp
c0107c16:	6a 08                	push   $0x8
c0107c18:	e8 4f a1 ff ff       	call   c0101d6c <kmalloc>
c0107c1d:	83 c4 10             	add    $0x10,%esp
c0107c20:	31 db                	xor    %ebx,%ebx
c0107c22:	85 c0                	test   %eax,%eax
c0107c24:	74 4b                	je     c0107c71 <hashtable_ts_create+0x63>
c0107c26:	89 c6                	mov    %eax,%esi
c0107c28:	e8 9c ee ff ff       	call   c0106ac9 <hashtable_create>
c0107c2d:	89 06                	mov    %eax,(%esi)
c0107c2f:	85 c0                	test   %eax,%eax
c0107c31:	75 0e                	jne    c0107c41 <hashtable_ts_create+0x33>
c0107c33:	83 ec 0c             	sub    $0xc,%esp
c0107c36:	56                   	push   %esi
c0107c37:	e8 30 a2 ff ff       	call   c0101e6c <kfree>
c0107c3c:	83 c4 10             	add    $0x10,%esp
c0107c3f:	eb 30                	jmp    c0107c71 <hashtable_ts_create+0x63>
c0107c41:	83 ec 0c             	sub    $0xc,%esp
c0107c44:	68 02 18 11 c0       	push   $0xc0111802
c0107c49:	e8 25 b3 ff ff       	call   c0102f73 <lock_create>
c0107c4e:	89 46 04             	mov    %eax,0x4(%esi)
c0107c51:	83 c4 10             	add    $0x10,%esp
c0107c54:	89 f3                	mov    %esi,%ebx
c0107c56:	85 c0                	test   %eax,%eax
c0107c58:	75 17                	jne    c0107c71 <hashtable_ts_create+0x63>
c0107c5a:	83 ec 0c             	sub    $0xc,%esp
c0107c5d:	ff 36                	pushl  (%esi)
c0107c5f:	e8 2e f6 ff ff       	call   c0107292 <hashtable_destroy>
c0107c64:	89 34 24             	mov    %esi,(%esp)
c0107c67:	e8 00 a2 ff ff       	call   c0101e6c <kfree>
c0107c6c:	83 c4 10             	add    $0x10,%esp
c0107c6f:	31 db                	xor    %ebx,%ebx
c0107c71:	89 d8                	mov    %ebx,%eax
c0107c73:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0107c76:	5b                   	pop    %ebx
c0107c77:	5e                   	pop    %esi
c0107c78:	5d                   	pop    %ebp
c0107c79:	c3                   	ret    

c0107c7a <hashtable_ts_destroy>:
c0107c7a:	55                   	push   %ebp
c0107c7b:	89 e5                	mov    %esp,%ebp
c0107c7d:	53                   	push   %ebx
c0107c7e:	83 ec 10             	sub    $0x10,%esp
c0107c81:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107c84:	ff 33                	pushl  (%ebx)
c0107c86:	e8 07 f6 ff ff       	call   c0107292 <hashtable_destroy>
c0107c8b:	58                   	pop    %eax
c0107c8c:	ff 73 04             	pushl  0x4(%ebx)
c0107c8f:	e8 62 b3 ff ff       	call   c0102ff6 <lock_destroy>
c0107c94:	83 c4 10             	add    $0x10,%esp
c0107c97:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0107c9a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107c9d:	c9                   	leave  
c0107c9e:	e9 c9 a1 ff ff       	jmp    c0101e6c <kfree>

c0107ca3 <hashtable_ts_add>:
c0107ca3:	55                   	push   %ebp
c0107ca4:	89 e5                	mov    %esp,%ebp
c0107ca6:	53                   	push   %ebx
c0107ca7:	83 ec 20             	sub    $0x20,%esp
c0107caa:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107cad:	ff 73 04             	pushl  0x4(%ebx)
c0107cb0:	e8 3e b4 ff ff       	call   c01030f3 <lock_acquire>
c0107cb5:	ff 75 14             	pushl  0x14(%ebp)
c0107cb8:	ff 75 10             	pushl  0x10(%ebp)
c0107cbb:	ff 75 0c             	pushl  0xc(%ebp)
c0107cbe:	ff 33                	pushl  (%ebx)
c0107cc0:	e8 79 ee ff ff       	call   c0106b3e <hashtable_add>
c0107cc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107cc8:	83 c4 14             	add    $0x14,%esp
c0107ccb:	ff 73 04             	pushl  0x4(%ebx)
c0107cce:	e8 91 b5 ff ff       	call   c0103264 <lock_release>
c0107cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cd6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107cd9:	c9                   	leave  
c0107cda:	c3                   	ret    

c0107cdb <hashtable_ts_find>:
c0107cdb:	55                   	push   %ebp
c0107cdc:	89 e5                	mov    %esp,%ebp
c0107cde:	53                   	push   %ebx
c0107cdf:	83 ec 20             	sub    $0x20,%esp
c0107ce2:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107ce5:	ff 73 04             	pushl  0x4(%ebx)
c0107ce8:	e8 06 b4 ff ff       	call   c01030f3 <lock_acquire>
c0107ced:	83 c4 0c             	add    $0xc,%esp
c0107cf0:	ff 75 10             	pushl  0x10(%ebp)
c0107cf3:	ff 75 0c             	pushl  0xc(%ebp)
c0107cf6:	ff 33                	pushl  (%ebx)
c0107cf8:	e8 9e f1 ff ff       	call   c0106e9b <hashtable_find>
c0107cfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d00:	58                   	pop    %eax
c0107d01:	ff 73 04             	pushl  0x4(%ebx)
c0107d04:	e8 5b b5 ff ff       	call   c0103264 <lock_release>
c0107d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d0c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107d0f:	c9                   	leave  
c0107d10:	c3                   	ret    

c0107d11 <hashtable_ts_remove>:
c0107d11:	55                   	push   %ebp
c0107d12:	89 e5                	mov    %esp,%ebp
c0107d14:	53                   	push   %ebx
c0107d15:	83 ec 20             	sub    $0x20,%esp
c0107d18:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107d1b:	ff 73 04             	pushl  0x4(%ebx)
c0107d1e:	e8 d0 b3 ff ff       	call   c01030f3 <lock_acquire>
c0107d23:	83 c4 0c             	add    $0xc,%esp
c0107d26:	ff 75 10             	pushl  0x10(%ebp)
c0107d29:	ff 75 0c             	pushl  0xc(%ebp)
c0107d2c:	ff 33                	pushl  (%ebx)
c0107d2e:	e8 85 f2 ff ff       	call   c0106fb8 <hashtable_remove>
c0107d33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d36:	58                   	pop    %eax
c0107d37:	ff 73 04             	pushl  0x4(%ebx)
c0107d3a:	e8 25 b5 ff ff       	call   c0103264 <lock_release>
c0107d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d42:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107d45:	c9                   	leave  
c0107d46:	c3                   	ret    

c0107d47 <hashtable_ts_isempty>:
c0107d47:	55                   	push   %ebp
c0107d48:	89 e5                	mov    %esp,%ebp
c0107d4a:	53                   	push   %ebx
c0107d4b:	83 ec 20             	sub    $0x20,%esp
c0107d4e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107d51:	ff 73 04             	pushl  0x4(%ebx)
c0107d54:	e8 9a b3 ff ff       	call   c01030f3 <lock_acquire>
c0107d59:	58                   	pop    %eax
c0107d5a:	ff 33                	pushl  (%ebx)
c0107d5c:	e8 47 f4 ff ff       	call   c01071a8 <hashtable_isempty>
c0107d61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d64:	5a                   	pop    %edx
c0107d65:	ff 73 04             	pushl  0x4(%ebx)
c0107d68:	e8 f7 b4 ff ff       	call   c0103264 <lock_release>
c0107d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107d73:	c9                   	leave  
c0107d74:	c3                   	ret    

c0107d75 <hashtable_ts_getsize>:
c0107d75:	55                   	push   %ebp
c0107d76:	89 e5                	mov    %esp,%ebp
c0107d78:	53                   	push   %ebx
c0107d79:	83 ec 20             	sub    $0x20,%esp
c0107d7c:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107d7f:	ff 73 04             	pushl  0x4(%ebx)
c0107d82:	e8 6c b3 ff ff       	call   c01030f3 <lock_acquire>
c0107d87:	58                   	pop    %eax
c0107d88:	ff 33                	pushl  (%ebx)
c0107d8a:	e8 91 f4 ff ff       	call   c0107220 <hashtable_getsize>
c0107d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d92:	5a                   	pop    %edx
c0107d93:	ff 73 04             	pushl  0x4(%ebx)
c0107d96:	e8 c9 b4 ff ff       	call   c0103264 <lock_release>
c0107d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107da1:	c9                   	leave  
c0107da2:	c3                   	ret    

c0107da3 <hashtable_ts_assertvalid>:
c0107da3:	55                   	push   %ebp
c0107da4:	89 e5                	mov    %esp,%ebp
c0107da6:	53                   	push   %ebx
c0107da7:	83 ec 10             	sub    $0x10,%esp
c0107daa:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107dad:	ff 73 04             	pushl  0x4(%ebx)
c0107db0:	e8 3e b3 ff ff       	call   c01030f3 <lock_acquire>
c0107db5:	58                   	pop    %eax
c0107db6:	ff 33                	pushl  (%ebx)
c0107db8:	e8 39 f5 ff ff       	call   c01072f6 <hashtable_assertvalid>
c0107dbd:	83 c4 10             	add    $0x10,%esp
c0107dc0:	8b 43 04             	mov    0x4(%ebx),%eax
c0107dc3:	89 45 08             	mov    %eax,0x8(%ebp)
c0107dc6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107dc9:	c9                   	leave  
c0107dca:	e9 95 b4 ff ff       	jmp    c0103264 <lock_release>

c0107dcf <cli>:
#include <types.h>

static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
c0107dcf:	55                   	push   %ebp
c0107dd0:	89 e5                	mov    %esp,%ebp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c0107dd2:	9c                   	pushf  
c0107dd3:	58                   	pop    %eax
static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
    asm volatile ("cli" : : : "memory");
c0107dd4:	fa                   	cli    
    return on;
c0107dd5:	c1 e8 09             	shr    $0x9,%eax
c0107dd8:	83 e0 01             	and    $0x1,%eax
}
c0107ddb:	5d                   	pop    %ebp
c0107ddc:	c3                   	ret    

c0107ddd <thread_checkstack.isra.0>:
    ((uint32_t*) stack_addr)[3] = THREAD_STACK_MAGIC;
}

static
void
thread_checkstack(struct thread* thread) {
c0107ddd:	55                   	push   %ebp
c0107dde:	89 e5                	mov    %esp,%ebp
c0107de0:	53                   	push   %ebx
c0107de1:	52                   	push   %edx
c0107de2:	89 c3                	mov    %eax,%ebx
    assert(thisthread == bootthread || thread->stack != NULL);
c0107de4:	e8 cd aa ff ff       	call   c01028b6 <cpunum>
c0107de9:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0107df0:	8b 15 e0 d1 14 c0    	mov    0xc014d1e0,%edx
c0107df6:	39 50 08             	cmp    %edx,0x8(%eax)
c0107df9:	74 2d                	je     c0107e28 <thread_checkstack.isra.0+0x4b>
c0107dfb:	83 3b 00             	cmpl   $0x0,(%ebx)
c0107dfe:	75 28                	jne    c0107e28 <thread_checkstack.isra.0+0x4b>
c0107e00:	83 ec 0c             	sub    $0xc,%esp
c0107e03:	68 ec 1a 11 c0       	push   $0xc0111aec
c0107e08:	6a 22                	push   $0x22
c0107e0a:	68 11 18 11 c0       	push   $0xc0111811
c0107e0f:	68 21 18 11 c0       	push   $0xc0111821
c0107e14:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107e19:	e8 4a c4 ff ff       	call   c0104268 <print>
c0107e1e:	83 c4 20             	add    $0x20,%esp
c0107e21:	e8 5d 91 ff ff       	call   c0100f83 <backtrace>
c0107e26:	fa                   	cli    
c0107e27:	f4                   	hlt    
    assert(((uint32_t*) thread->stack)[0] = THREAD_STACK_MAGIC);
c0107e28:	8b 03                	mov    (%ebx),%eax
c0107e2a:	c7 00 ce fa ad de    	movl   $0xdeadface,(%eax)
    assert(((uint32_t*) thread->stack)[1] = THREAD_STACK_MAGIC);
c0107e30:	c7 40 04 ce fa ad de 	movl   $0xdeadface,0x4(%eax)
    assert(((uint32_t*) thread->stack)[2] = THREAD_STACK_MAGIC);
c0107e37:	c7 40 08 ce fa ad de 	movl   $0xdeadface,0x8(%eax)
    assert(((uint32_t*) thread->stack)[3] = THREAD_STACK_MAGIC);
c0107e3e:	c7 40 0c ce fa ad de 	movl   $0xdeadface,0xc(%eax)
}
c0107e45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107e48:	c9                   	leave  
c0107e49:	c3                   	ret    

c0107e4a <threadarray_create>:
#include <errno.h>
#include <switchframe.h>
#include <debug.h>
#include <syscall.h>

DEFARRAY(thread, );
c0107e4a:	55                   	push   %ebp
c0107e4b:	89 e5                	mov    %esp,%ebp
c0107e4d:	83 ec 24             	sub    $0x24,%esp
c0107e50:	6a 0c                	push   $0xc
c0107e52:	e8 15 9f ff ff       	call   c0101d6c <kmalloc>
c0107e57:	83 c4 10             	add    $0x10,%esp
c0107e5a:	85 c0                	test   %eax,%eax
c0107e5c:	74 12                	je     c0107e70 <threadarray_create+0x26>
c0107e5e:	83 ec 0c             	sub    $0xc,%esp
c0107e61:	50                   	push   %eax
c0107e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107e65:	e8 0c d3 ff ff       	call   c0105176 <array_init>
c0107e6a:	83 c4 10             	add    $0x10,%esp
c0107e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e70:	c9                   	leave  
c0107e71:	c3                   	ret    

c0107e72 <threadarray_destroy>:
c0107e72:	55                   	push   %ebp
c0107e73:	89 e5                	mov    %esp,%ebp
c0107e75:	53                   	push   %ebx
c0107e76:	83 ec 10             	sub    $0x10,%esp
c0107e79:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0107e7c:	53                   	push   %ebx
c0107e7d:	e8 10 d3 ff ff       	call   c0105192 <array_cleanup>
c0107e82:	83 c4 10             	add    $0x10,%esp
c0107e85:	89 5d 08             	mov    %ebx,0x8(%ebp)
c0107e88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107e8b:	c9                   	leave  
c0107e8c:	e9 db 9f ff ff       	jmp    c0101e6c <kfree>

c0107e91 <threadarray_init>:
c0107e91:	55                   	push   %ebp
c0107e92:	89 e5                	mov    %esp,%ebp
c0107e94:	5d                   	pop    %ebp
c0107e95:	e9 dc d2 ff ff       	jmp    c0105176 <array_init>

c0107e9a <threadarray_cleanup>:
c0107e9a:	55                   	push   %ebp
c0107e9b:	89 e5                	mov    %esp,%ebp
c0107e9d:	5d                   	pop    %ebp
c0107e9e:	e9 ef d2 ff ff       	jmp    c0105192 <array_cleanup>

c0107ea3 <threadarray_num>:
c0107ea3:	55                   	push   %ebp
c0107ea4:	89 e5                	mov    %esp,%ebp
c0107ea6:	5d                   	pop    %ebp
c0107ea7:	e9 0a d2 ff ff       	jmp    c01050b6 <array_num>

c0107eac <threadarray_get>:
c0107eac:	55                   	push   %ebp
c0107ead:	89 e5                	mov    %esp,%ebp
c0107eaf:	5d                   	pop    %ebp
c0107eb0:	e9 0c d2 ff ff       	jmp    c01050c1 <array_get>

c0107eb5 <threadarray_set>:
c0107eb5:	55                   	push   %ebp
c0107eb6:	89 e5                	mov    %esp,%ebp
c0107eb8:	5d                   	pop    %ebp
c0107eb9:	e9 47 d2 ff ff       	jmp    c0105105 <array_set>

c0107ebe <threadarray_setsize>:
c0107ebe:	55                   	push   %ebp
c0107ebf:	89 e5                	mov    %esp,%ebp
c0107ec1:	5d                   	pop    %ebp
c0107ec2:	e9 38 d3 ff ff       	jmp    c01051ff <array_setsize>

c0107ec7 <threadarray_add>:
c0107ec7:	55                   	push   %ebp
c0107ec8:	89 e5                	mov    %esp,%ebp
c0107eca:	5d                   	pop    %ebp
c0107ecb:	e9 a5 d3 ff ff       	jmp    c0105275 <array_add>

c0107ed0 <threadarray_remove>:
c0107ed0:	55                   	push   %ebp
c0107ed1:	89 e5                	mov    %esp,%ebp
c0107ed3:	5d                   	pop    %ebp
c0107ed4:	e9 d5 d3 ff ff       	jmp    c01052ae <array_remove>

c0107ed9 <thread_getstack>:
/*
 * Marks next avaialble stack_addr in registrar's bitmap as in use.
 * Returns this stack_addr.
 */
void*
thread_getstack(void) {
c0107ed9:	55                   	push   %ebp
c0107eda:	89 e5                	mov    %esp,%ebp
c0107edc:	83 ec 18             	sub    $0x18,%esp
    void* stack_addr = page_get();
c0107edf:	e8 88 95 ff ff       	call   c010146c <page_get>

    if (stack_addr == NULL)
c0107ee4:	85 c0                	test   %eax,%eax
c0107ee6:	75 1f                	jne    c0107f07 <thread_getstack+0x2e>
c0107ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        panic("OOM: no memory available for stack creation");
c0107eeb:	68 53 18 11 c0       	push   $0xc0111853
c0107ef0:	68 24 1b 11 c0       	push   $0xc0111b24
c0107ef5:	6a 32                	push   $0x32
c0107ef7:	68 11 18 11 c0       	push   $0xc0111811
c0107efc:	e8 74 bd ff ff       	call   c0103c75 <_panic>
c0107f01:	83 c4 10             	add    $0x10,%esp
c0107f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
#define THREAD_STACK_MAGIC 0xDEADFACE

static
void
thread_initstack(void* stack_addr) {
    ((uint32_t*) stack_addr)[0] = THREAD_STACK_MAGIC;
c0107f07:	c7 00 ce fa ad de    	movl   $0xdeadface,(%eax)
    ((uint32_t*) stack_addr)[1] = THREAD_STACK_MAGIC;
c0107f0d:	c7 40 04 ce fa ad de 	movl   $0xdeadface,0x4(%eax)
    ((uint32_t*) stack_addr)[2] = THREAD_STACK_MAGIC;
c0107f14:	c7 40 08 ce fa ad de 	movl   $0xdeadface,0x8(%eax)
    ((uint32_t*) stack_addr)[3] = THREAD_STACK_MAGIC;
c0107f1b:	c7 40 0c ce fa ad de 	movl   $0xdeadface,0xc(%eax)
        panic("OOM: no memory available for stack creation");

    thread_initstack(stack_addr);

    return stack_addr;
}
c0107f22:	c9                   	leave  
c0107f23:	c3                   	ret    

c0107f24 <thread_returnstack>:

// this makes a stack_addr available again to the system
void
thread_returnstack(void* stack_addr) {
c0107f24:	55                   	push   %ebp
c0107f25:	89 e5                	mov    %esp,%ebp
c0107f27:	53                   	push   %ebx
c0107f28:	50                   	push   %eax
c0107f29:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(stack_addr != NULL);
c0107f2c:	85 db                	test   %ebx,%ebx
c0107f2e:	75 28                	jne    c0107f58 <thread_returnstack+0x34>
c0107f30:	83 ec 0c             	sub    $0xc,%esp
c0107f33:	68 10 1b 11 c0       	push   $0xc0111b10
c0107f38:	6a 3c                	push   $0x3c
c0107f3a:	68 11 18 11 c0       	push   $0xc0111811
c0107f3f:	68 7f 18 11 c0       	push   $0xc011187f
c0107f44:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107f49:	e8 1a c3 ff ff       	call   c0104268 <print>
c0107f4e:	83 c4 20             	add    $0x20,%esp
c0107f51:	e8 2d 90 ff ff       	call   c0100f83 <backtrace>
c0107f56:	fa                   	cli    
c0107f57:	f4                   	hlt    

    page_return(stack_addr);
c0107f58:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0107f5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0107f5e:	c9                   	leave  
// this makes a stack_addr available again to the system
void
thread_returnstack(void* stack_addr) {
    assert(stack_addr != NULL);

    page_return(stack_addr);
c0107f5f:	e9 e5 96 ff ff       	jmp    c0101649 <page_return>

c0107f64 <thread_create>:
}

struct thread*
thread_create(const char* name) {
c0107f64:	55                   	push   %ebp
c0107f65:	89 e5                	mov    %esp,%ebp
c0107f67:	56                   	push   %esi
c0107f68:	53                   	push   %ebx
c0107f69:	8b 75 08             	mov    0x8(%ebp),%esi
    struct thread* thread = kmalloc(sizeof(struct thread));
c0107f6c:	83 ec 0c             	sub    $0xc,%esp
c0107f6f:	6a 3c                	push   $0x3c
c0107f71:	e8 f6 9d ff ff       	call   c0101d6c <kmalloc>
c0107f76:	89 c3                	mov    %eax,%ebx
    if (thread == NULL)
c0107f78:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0107f7b:	31 c0                	xor    %eax,%eax
}

struct thread*
thread_create(const char* name) {
    struct thread* thread = kmalloc(sizeof(struct thread));
    if (thread == NULL)
c0107f7d:	85 db                	test   %ebx,%ebx
c0107f7f:	0f 84 a3 00 00 00    	je     c0108028 <thread_create+0xc4>
        return NULL;

    assert(name != NULL);
c0107f85:	85 f6                	test   %esi,%esi
c0107f87:	75 28                	jne    c0107fb1 <thread_create+0x4d>
c0107f89:	83 ec 0c             	sub    $0xc,%esp
c0107f8c:	68 00 1b 11 c0       	push   $0xc0111b00
c0107f91:	6a 47                	push   $0x47
c0107f93:	68 11 18 11 c0       	push   $0xc0111811
c0107f98:	68 92 18 11 c0       	push   $0xc0111892
c0107f9d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0107fa2:	e8 c1 c2 ff ff       	call   c0104268 <print>
c0107fa7:	83 c4 20             	add    $0x20,%esp
c0107faa:	e8 d4 8f ff ff       	call   c0100f83 <backtrace>
c0107faf:	fa                   	cli    
c0107fb0:	f4                   	hlt    
    thread->name = strdup(name);
c0107fb1:	83 ec 0c             	sub    $0xc,%esp
c0107fb4:	56                   	push   %esi
c0107fb5:	e8 d0 c9 ff ff       	call   c010498a <strdup>
c0107fba:	89 43 10             	mov    %eax,0x10(%ebx)
    if (thread->name == NULL) {
c0107fbd:	83 c4 10             	add    $0x10,%esp
c0107fc0:	85 c0                	test   %eax,%eax
c0107fc2:	75 10                	jne    c0107fd4 <thread_create+0x70>
        kfree(thread);
c0107fc4:	83 ec 0c             	sub    $0xc,%esp
c0107fc7:	53                   	push   %ebx
c0107fc8:	e8 9f 9e ff ff       	call   c0101e6c <kfree>
        return NULL;
c0107fcd:	83 c4 10             	add    $0x10,%esp
c0107fd0:	31 c0                	xor    %eax,%eax
c0107fd2:	eb 54                	jmp    c0108028 <thread_create+0xc4>
    }

    thread->wchan_name = "NEW";
c0107fd4:	c7 43 14 9f 18 11 c0 	movl   $0xc011189f,0x14(%ebx)
    thread->state = S_READY;
c0107fdb:	c7 43 18 01 00 00 00 	movl   $0x1,0x18(%ebx)

    threadlistnode_init(&thread->listnode, thread);
c0107fe2:	50                   	push   %eax
c0107fe3:	50                   	push   %eax
c0107fe4:	53                   	push   %ebx
c0107fe5:	8d 43 04             	lea    0x4(%ebx),%eax
c0107fe8:	50                   	push   %eax
c0107fe9:	e8 14 0e 00 00       	call   c0108e02 <threadlistnode_init>

    thread->cpu = NULL;
c0107fee:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    thread->proc = NULL;
c0107ff5:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)

    thread->stack = NULL;
c0107ffc:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)

    thread->in_interrupt = false;
c0108003:	c6 43 28 00          	movb   $0x0,0x28(%ebx)

    thread->rval = -1;
c0108007:	c7 43 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%ebx)
    thread->parent = NULL;
c010800e:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
    thread->psem = NULL;
c0108015:	c7 43 34 00 00 00 00 	movl   $0x0,0x34(%ebx)
    thread->csem = NULL;
c010801c:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)

    return thread;
c0108023:	83 c4 10             	add    $0x10,%esp
c0108026:	89 d8                	mov    %ebx,%eax
}
c0108028:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010802b:	5b                   	pop    %ebx
c010802c:	5e                   	pop    %esi
c010802d:	5d                   	pop    %ebp
c010802e:	c3                   	ret    

c010802f <thread_destroy>:

    panic("thread_switch returned\n");
}

void
thread_destroy(struct thread* thread) {
c010802f:	55                   	push   %ebp
c0108030:	89 e5                	mov    %esp,%ebp
c0108032:	53                   	push   %ebx
c0108033:	52                   	push   %edx
c0108034:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(cli() == false);  // interrupts are off
c0108037:	e8 93 fd ff ff       	call   c0107dcf <cli>
c010803c:	84 c0                	test   %al,%al
c010803e:	74 2b                	je     c010806b <thread_destroy+0x3c>
c0108040:	83 ec 0c             	sub    $0xc,%esp
c0108043:	68 98 1a 11 c0       	push   $0xc0111a98
c0108048:	68 26 01 00 00       	push   $0x126
c010804d:	68 11 18 11 c0       	push   $0xc0111811
c0108052:	68 a3 18 11 c0       	push   $0xc01118a3
c0108057:	68 2b ff 10 c0       	push   $0xc010ff2b
c010805c:	e8 07 c2 ff ff       	call   c0104268 <print>
c0108061:	83 c4 20             	add    $0x20,%esp
c0108064:	e8 1a 8f ff ff       	call   c0100f83 <backtrace>
c0108069:	fa                   	cli    
c010806a:	f4                   	hlt    
    assert(thread != thisthread);
c010806b:	e8 46 a8 ff ff       	call   c01028b6 <cpunum>
c0108070:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108077:	39 58 08             	cmp    %ebx,0x8(%eax)
c010807a:	75 2b                	jne    c01080a7 <thread_destroy+0x78>
c010807c:	83 ec 0c             	sub    $0xc,%esp
c010807f:	68 98 1a 11 c0       	push   $0xc0111a98
c0108084:	68 27 01 00 00       	push   $0x127
c0108089:	68 11 18 11 c0       	push   $0xc0111811
c010808e:	68 b2 18 11 c0       	push   $0xc01118b2
c0108093:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108098:	e8 cb c1 ff ff       	call   c0104268 <print>
c010809d:	83 c4 20             	add    $0x20,%esp
c01080a0:	e8 de 8e ff ff       	call   c0100f83 <backtrace>
c01080a5:	fa                   	cli    
c01080a6:	f4                   	hlt    
    assert(thread->state != S_RUN);
c01080a7:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c01080ab:	75 2b                	jne    c01080d8 <thread_destroy+0xa9>
c01080ad:	83 ec 0c             	sub    $0xc,%esp
c01080b0:	68 98 1a 11 c0       	push   $0xc0111a98
c01080b5:	68 28 01 00 00       	push   $0x128
c01080ba:	68 11 18 11 c0       	push   $0xc0111811
c01080bf:	68 c7 18 11 c0       	push   $0xc01118c7
c01080c4:	68 2b ff 10 c0       	push   $0xc010ff2b
c01080c9:	e8 9a c1 ff ff       	call   c0104268 <print>
c01080ce:	83 c4 20             	add    $0x20,%esp
c01080d1:	e8 ad 8e ff ff       	call   c0100f83 <backtrace>
c01080d6:	fa                   	cli    
c01080d7:	f4                   	hlt    
    assert(thread->proc == NULL);
c01080d8:	83 7b 20 00          	cmpl   $0x0,0x20(%ebx)
c01080dc:	74 2b                	je     c0108109 <thread_destroy+0xda>
c01080de:	83 ec 0c             	sub    $0xc,%esp
c01080e1:	68 98 1a 11 c0       	push   $0xc0111a98
c01080e6:	68 29 01 00 00       	push   $0x129
c01080eb:	68 11 18 11 c0       	push   $0xc0111811
c01080f0:	68 19 1a 11 c0       	push   $0xc0111a19
c01080f5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01080fa:	e8 69 c1 ff ff       	call   c0104268 <print>
c01080ff:	83 c4 20             	add    $0x20,%esp
c0108102:	e8 7c 8e ff ff       	call   c0100f83 <backtrace>
c0108107:	fa                   	cli    
c0108108:	f4                   	hlt    

    // if (thread->page_directory != NULL)
    //     kfree(thread->page_directory);      // not correct

    thread_returnstack(thread->stack);
c0108109:	83 ec 0c             	sub    $0xc,%esp
c010810c:	ff 73 24             	pushl  0x24(%ebx)
c010810f:	e8 10 fe ff ff       	call   c0107f24 <thread_returnstack>

    threadlistnode_cleanup(&thread->listnode);
c0108114:	8d 43 04             	lea    0x4(%ebx),%eax
c0108117:	89 04 24             	mov    %eax,(%esp)
c010811a:	e8 5d 0d 00 00       	call   c0108e7c <threadlistnode_cleanup>

    thread->wchan_name = "DESTROYED";
c010811f:	c7 43 14 de 18 11 c0 	movl   $0xc01118de,0x14(%ebx)

    kfree(thread->name);
c0108126:	58                   	pop    %eax
c0108127:	ff 73 10             	pushl  0x10(%ebx)
c010812a:	e8 3d 9d ff ff       	call   c0101e6c <kfree>
    kfree(thread);
c010812f:	83 c4 10             	add    $0x10,%esp
c0108132:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0108135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108138:	c9                   	leave  
    threadlistnode_cleanup(&thread->listnode);

    thread->wchan_name = "DESTROYED";

    kfree(thread->name);
    kfree(thread);
c0108139:	e9 2e 9d ff ff       	jmp    c0101e6c <kfree>

c010813e <thread_exorcise>:
}

void
thread_exorcise(void) {
c010813e:	55                   	push   %ebp
c010813f:	89 e5                	mov    %esp,%ebp
c0108141:	53                   	push   %ebx
c0108142:	50                   	push   %eax
    assert(cli() == false);  // interrupts are off
c0108143:	e8 87 fc ff ff       	call   c0107dcf <cli>
c0108148:	84 c0                	test   %al,%al
c010814a:	0f 84 a6 00 00 00    	je     c01081f6 <thread_exorcise+0xb8>
c0108150:	83 ec 0c             	sub    $0xc,%esp
c0108153:	68 88 1a 11 c0       	push   $0xc0111a88
c0108158:	68 3a 01 00 00       	push   $0x13a
c010815d:	68 11 18 11 c0       	push   $0xc0111811
c0108162:	68 a3 18 11 c0       	push   $0xc01118a3
c0108167:	68 2b ff 10 c0       	push   $0xc010ff2b
c010816c:	e8 f7 c0 ff ff       	call   c0104268 <print>
c0108171:	83 c4 20             	add    $0x20,%esp
c0108174:	e8 0a 8e ff ff       	call   c0100f83 <backtrace>
c0108179:	fa                   	cli    
c010817a:	f4                   	hlt    
c010817b:	eb 79                	jmp    c01081f6 <thread_exorcise+0xb8>
    struct thread* thread;

    while ((thread = threadlist_remhead(&thiscpu->zombie_threads)) != NULL) {
        assert(thread != NULL);
        assert(thread != thisthread);
c010817d:	e8 34 a7 ff ff       	call   c01028b6 <cpunum>
c0108182:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108189:	3b 58 08             	cmp    0x8(%eax),%ebx
c010818c:	75 2b                	jne    c01081b9 <thread_exorcise+0x7b>
c010818e:	83 ec 0c             	sub    $0xc,%esp
c0108191:	68 88 1a 11 c0       	push   $0xc0111a88
c0108196:	68 3f 01 00 00       	push   $0x13f
c010819b:	68 11 18 11 c0       	push   $0xc0111811
c01081a0:	68 b2 18 11 c0       	push   $0xc01118b2
c01081a5:	68 2b ff 10 c0       	push   $0xc010ff2b
c01081aa:	e8 b9 c0 ff ff       	call   c0104268 <print>
c01081af:	83 c4 20             	add    $0x20,%esp
c01081b2:	e8 cc 8d ff ff       	call   c0100f83 <backtrace>
c01081b7:	fa                   	cli    
c01081b8:	f4                   	hlt    
        assert(thread->state == S_ZOMBIE);
c01081b9:	83 7b 18 03          	cmpl   $0x3,0x18(%ebx)
c01081bd:	74 2b                	je     c01081ea <thread_exorcise+0xac>
c01081bf:	83 ec 0c             	sub    $0xc,%esp
c01081c2:	68 88 1a 11 c0       	push   $0xc0111a88
c01081c7:	68 40 01 00 00       	push   $0x140
c01081cc:	68 11 18 11 c0       	push   $0xc0111811
c01081d1:	68 e8 18 11 c0       	push   $0xc01118e8
c01081d6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01081db:	e8 88 c0 ff ff       	call   c0104268 <print>
c01081e0:	83 c4 20             	add    $0x20,%esp
c01081e3:	e8 9b 8d ff ff       	call   c0100f83 <backtrace>
c01081e8:	fa                   	cli    
c01081e9:	f4                   	hlt    
        thread_destroy(thread);
c01081ea:	83 ec 0c             	sub    $0xc,%esp
c01081ed:	53                   	push   %ebx
c01081ee:	e8 3c fe ff ff       	call   c010802f <thread_destroy>
c01081f3:	83 c4 10             	add    $0x10,%esp
void
thread_exorcise(void) {
    assert(cli() == false);  // interrupts are off
    struct thread* thread;

    while ((thread = threadlist_remhead(&thiscpu->zombie_threads)) != NULL) {
c01081f6:	e8 bb a6 ff ff       	call   c01028b6 <cpunum>
c01081fb:	83 ec 0c             	sub    $0xc,%esp
c01081fe:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108205:	83 c0 10             	add    $0x10,%eax
c0108208:	50                   	push   %eax
c0108209:	e8 7a 10 00 00       	call   c0109288 <threadlist_remhead>
c010820e:	89 c3                	mov    %eax,%ebx
c0108210:	83 c4 10             	add    $0x10,%esp
c0108213:	85 c0                	test   %eax,%eax
c0108215:	0f 85 62 ff ff ff    	jne    c010817d <thread_exorcise+0x3f>
        assert(thread != NULL);
        assert(thread != thisthread);
        assert(thread->state == S_ZOMBIE);
        thread_destroy(thread);
    }
}
c010821b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010821e:	c9                   	leave  
c010821f:	c3                   	ret    

c0108220 <thread_join>:

int thread_join(struct thread* thread, int* ret_out) {
c0108220:	55                   	push   %ebp
c0108221:	89 e5                	mov    %esp,%ebp
c0108223:	57                   	push   %edi
c0108224:	56                   	push   %esi
c0108225:	53                   	push   %ebx
c0108226:	83 ec 0c             	sub    $0xc,%esp
c0108229:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(thread != NULL);
c010822c:	85 db                	test   %ebx,%ebx
c010822e:	75 2b                	jne    c010825b <thread_join+0x3b>
c0108230:	83 ec 0c             	sub    $0xc,%esp
c0108233:	68 7c 1a 11 c0       	push   $0xc0111a7c
c0108238:	68 46 01 00 00       	push   $0x146
c010823d:	68 11 18 11 c0       	push   $0xc0111811
c0108242:	68 05 0c 11 c0       	push   $0xc0110c05
c0108247:	68 2b ff 10 c0       	push   $0xc010ff2b
c010824c:	e8 17 c0 ff ff       	call   c0104268 <print>
c0108251:	83 c4 20             	add    $0x20,%esp
c0108254:	e8 2a 8d ff ff       	call   c0100f83 <backtrace>
c0108259:	fa                   	cli    
c010825a:	f4                   	hlt    
    assert(ret_out != NULL);
c010825b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010825f:	75 2b                	jne    c010828c <thread_join+0x6c>
c0108261:	83 ec 0c             	sub    $0xc,%esp
c0108264:	68 7c 1a 11 c0       	push   $0xc0111a7c
c0108269:	68 47 01 00 00       	push   $0x147
c010826e:	68 11 18 11 c0       	push   $0xc0111811
c0108273:	68 02 19 11 c0       	push   $0xc0111902
c0108278:	68 2b ff 10 c0       	push   $0xc010ff2b
c010827d:	e8 e6 bf ff ff       	call   c0104268 <print>
c0108282:	83 c4 20             	add    $0x20,%esp
c0108285:	e8 f9 8c ff ff       	call   c0100f83 <backtrace>
c010828a:	fa                   	cli    
c010828b:	f4                   	hlt    
    assert(thread->parent != NULL);
c010828c:	83 7b 30 00          	cmpl   $0x0,0x30(%ebx)
c0108290:	75 2b                	jne    c01082bd <thread_join+0x9d>
c0108292:	83 ec 0c             	sub    $0xc,%esp
c0108295:	68 7c 1a 11 c0       	push   $0xc0111a7c
c010829a:	68 48 01 00 00       	push   $0x148
c010829f:	68 11 18 11 c0       	push   $0xc0111811
c01082a4:	68 12 19 11 c0       	push   $0xc0111912
c01082a9:	68 2b ff 10 c0       	push   $0xc010ff2b
c01082ae:	e8 b5 bf ff ff       	call   c0104268 <print>
c01082b3:	83 c4 20             	add    $0x20,%esp
c01082b6:	e8 c8 8c ff ff       	call   c0100f83 <backtrace>
c01082bb:	fa                   	cli    
c01082bc:	f4                   	hlt    

    bool on = cli();
c01082bd:	e8 0d fb ff ff       	call   c0107dcf <cli>
c01082c2:	89 c7                	mov    %eax,%edi

    if (thread == thisthread)
c01082c4:	e8 ed a5 ff ff       	call   c01028b6 <cpunum>
c01082c9:	8b 14 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%edx
        return EDEADLK;
c01082d0:	b8 08 00 00 00       	mov    $0x8,%eax
    assert(ret_out != NULL);
    assert(thread->parent != NULL);

    bool on = cli();

    if (thread == thisthread)
c01082d5:	3b 5a 08             	cmp    0x8(%edx),%ebx
c01082d8:	74 6e                	je     c0108348 <thread_join+0x128>
        return EDEADLK;

    assert(thread->parent == thisthread);
c01082da:	8b 73 30             	mov    0x30(%ebx),%esi
c01082dd:	e8 d4 a5 ff ff       	call   c01028b6 <cpunum>
c01082e2:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01082e9:	3b 70 08             	cmp    0x8(%eax),%esi
c01082ec:	74 2b                	je     c0108319 <thread_join+0xf9>
c01082ee:	83 ec 0c             	sub    $0xc,%esp
c01082f1:	68 7c 1a 11 c0       	push   $0xc0111a7c
c01082f6:	68 4f 01 00 00       	push   $0x14f
c01082fb:	68 11 18 11 c0       	push   $0xc0111811
c0108300:	68 29 19 11 c0       	push   $0xc0111929
c0108305:	68 2b ff 10 c0       	push   $0xc010ff2b
c010830a:	e8 59 bf ff ff       	call   c0104268 <print>
c010830f:	83 c4 20             	add    $0x20,%esp
c0108312:	e8 6c 8c ff ff       	call   c0100f83 <backtrace>
c0108317:	fa                   	cli    
c0108318:	f4                   	hlt    

    P(thread->psem);
c0108319:	83 ec 0c             	sub    $0xc,%esp
c010831c:	ff 73 34             	pushl  0x34(%ebx)
c010831f:	e8 00 b1 ff ff       	call   c0103424 <P>
    V(thread->csem);
c0108324:	58                   	pop    %eax
c0108325:	ff 73 38             	pushl  0x38(%ebx)
c0108328:	e8 cf b1 ff ff       	call   c01034fc <V>

    *ret_out = thread->rval;
c010832d:	8b 43 2c             	mov    0x2c(%ebx),%eax
c0108330:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108333:	89 02                	mov    %eax,(%edx)
    thread->parent = NULL;
c0108335:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c010833c:	83 c4 10             	add    $0x10,%esp

    ifx(on);

    return 0;
c010833f:	31 c0                	xor    %eax,%eax
c0108341:	89 f9                	mov    %edi,%ecx
c0108343:	84 c9                	test   %cl,%cl
c0108345:	74 01                	je     c0108348 <thread_join+0x128>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c0108347:	fb                   	sti    
}
c0108348:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010834b:	5b                   	pop    %ebx
c010834c:	5e                   	pop    %esi
c010834d:	5f                   	pop    %edi
c010834e:	5d                   	pop    %ebp
c010834f:	c3                   	ret    

c0108350 <thread_panic>:

void thread_panic(void) {
c0108350:	55                   	push   %ebp
c0108351:	89 e5                	mov    %esp,%ebp
c0108353:	53                   	push   %ebx
c0108354:	50                   	push   %eax
     *
     * Don't try to get the run queue lock; we might not be able
     * to.  Instead, blat the list structure by hand, and take the
     * risk that it might not be quite atomic.
     */
    thiscpu->active_threads.tl_count = 0;
c0108355:	e8 5c a5 ff ff       	call   c01028b6 <cpunum>
c010835a:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108361:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    thiscpu->active_threads.tl_head.tln_next = &thiscpu->active_threads.tl_tail;
c0108368:	e8 49 a5 ff ff       	call   c01028b6 <cpunum>
c010836d:	8b 1c 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%ebx
c0108374:	e8 3d a5 ff ff       	call   c01028b6 <cpunum>
c0108379:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108380:	83 c0 38             	add    $0x38,%eax
c0108383:	89 43 30             	mov    %eax,0x30(%ebx)
    thiscpu->active_threads.tl_tail.tln_prev = &thiscpu->active_threads.tl_head;
c0108386:	e8 2b a5 ff ff       	call   c01028b6 <cpunum>
c010838b:	8b 1c 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%ebx
c0108392:	e8 1f a5 ff ff       	call   c01028b6 <cpunum>
c0108397:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010839e:	83 c0 2c             	add    $0x2c,%eax
c01083a1:	89 43 38             	mov    %eax,0x38(%ebx)
}
c01083a4:	5a                   	pop    %edx
c01083a5:	5b                   	pop    %ebx
c01083a6:	5d                   	pop    %ebp
c01083a7:	c3                   	ret    

c01083a8 <thread_shutdown>:

void thread_shutdown(void) {
c01083a8:	55                   	push   %ebp
c01083a9:	89 e5                	mov    %esp,%ebp

}
c01083ab:	5d                   	pop    %ebp
c01083ac:	c3                   	ret    

c01083ad <thread_make_runnable>:

void
thread_make_runnable(struct thread* thread, bool holding_lock) {
c01083ad:	55                   	push   %ebp
c01083ae:	89 e5                	mov    %esp,%ebp
c01083b0:	57                   	push   %edi
c01083b1:	56                   	push   %esi
c01083b2:	53                   	push   %ebx
c01083b3:	83 ec 1c             	sub    $0x1c,%esp
c01083b6:	8b 7d 08             	mov    0x8(%ebp),%edi
c01083b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    bool on = cli();
c01083bf:	e8 0b fa ff ff       	call   c0107dcf <cli>
c01083c4:	88 45 e3             	mov    %al,-0x1d(%ebp)

    struct cpu* cpu = thread->cpu;
c01083c7:	8b 77 1c             	mov    0x1c(%edi),%esi

    thread->state = S_READY;
c01083ca:	c7 47 18 01 00 00 00 	movl   $0x1,0x18(%edi)

    if (holding_lock)
c01083d1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c01083d5:	8d 5e 48             	lea    0x48(%esi),%ebx
c01083d8:	74 3d                	je     c0108417 <thread_make_runnable+0x6a>
        assert(spinlock_held(&cpu->active_threads_lock));
c01083da:	83 ec 0c             	sub    $0xc,%esp
c01083dd:	53                   	push   %ebx
c01083de:	e8 ae b1 ff ff       	call   c0103591 <spinlock_held>
c01083e3:	83 c4 10             	add    $0x10,%esp
c01083e6:	84 c0                	test   %al,%al
c01083e8:	75 39                	jne    c0108423 <thread_make_runnable+0x76>
c01083ea:	83 ec 0c             	sub    $0xc,%esp
c01083ed:	68 64 1a 11 c0       	push   $0xc0111a64
c01083f2:	68 7b 01 00 00       	push   $0x17b
c01083f7:	68 11 18 11 c0       	push   $0xc0111811
c01083fc:	68 46 19 11 c0       	push   $0xc0111946
c0108401:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108406:	e8 5d be ff ff       	call   c0104268 <print>
c010840b:	83 c4 20             	add    $0x20,%esp
c010840e:	e8 70 8b ff ff       	call   c0100f83 <backtrace>
c0108413:	fa                   	cli    
c0108414:	f4                   	hlt    
c0108415:	eb 0c                	jmp    c0108423 <thread_make_runnable+0x76>
    else
        spinlock_acquire(&cpu->active_threads_lock);
c0108417:	83 ec 0c             	sub    $0xc,%esp
c010841a:	53                   	push   %ebx
c010841b:	e8 13 b2 ff ff       	call   c0103633 <spinlock_acquire>
c0108420:	83 c4 10             	add    $0x10,%esp

    threadlist_addtail(&cpu->active_threads, thread);
c0108423:	50                   	push   %eax
c0108424:	50                   	push   %eax
c0108425:	57                   	push   %edi
c0108426:	8d 46 2c             	lea    0x2c(%esi),%eax
c0108429:	50                   	push   %eax
c010842a:	e8 dc 0d 00 00       	call   c010920b <threadlist_addtail>

    /*
     * Other processor is idle; send interrupt to make
     * sure it unidles.
     */
    if (cpu->status == CPU_IDLE) {
c010842f:	8a 46 05             	mov    0x5(%esi),%al
c0108432:	83 c4 10             	add    $0x10,%esp
c0108435:	3c 03                	cmp    $0x3,%al
c0108437:	75 1c                	jne    c0108455 <thread_make_runnable+0xa8>
        // ipi_send(cpu, IPI_UNIDLE);
        panic("CPU_IDLE");
c0108439:	68 41 1a 11 c0       	push   $0xc0111a41
c010843e:	68 64 1a 11 c0       	push   $0xc0111a64
c0108443:	68 87 01 00 00       	push   $0x187
c0108448:	68 11 18 11 c0       	push   $0xc0111811
c010844d:	e8 23 b8 ff ff       	call   c0103c75 <_panic>
c0108452:	83 c4 10             	add    $0x10,%esp
    }

    if (!holding_lock)
c0108455:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0108459:	75 0c                	jne    c0108467 <thread_make_runnable+0xba>
        spinlock_release(&cpu->active_threads_lock);
c010845b:	83 ec 0c             	sub    $0xc,%esp
c010845e:	53                   	push   %ebx
c010845f:	e8 85 b2 ff ff       	call   c01036e9 <spinlock_release>
c0108464:	83 c4 10             	add    $0x10,%esp
}

static inline void
ifx(bool set) {
    if (set)
c0108467:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c010846b:	74 01                	je     c010846e <thread_make_runnable+0xc1>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010846d:	fb                   	sti    

    ifx(on);
}
c010846e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108471:	5b                   	pop    %ebx
c0108472:	5e                   	pop    %esi
c0108473:	5f                   	pop    %edi
c0108474:	5d                   	pop    %ebp
c0108475:	c3                   	ret    

c0108476 <thread_fork>:
}

int
thread_fork(const char* name, struct thread** thread_out,
        struct proc* proc, int (*entrypoint)(void*, unsigned long),
        void* data1, unsigned long data2) {
c0108476:	55                   	push   %ebp
c0108477:	89 e5                	mov    %esp,%ebp
c0108479:	57                   	push   %edi
c010847a:	56                   	push   %esi
c010847b:	53                   	push   %ebx
c010847c:	83 ec 1c             	sub    $0x1c,%esp
c010847f:	8b 7d 08             	mov    0x8(%ebp),%edi

    bool on = cli();
c0108482:	e8 48 f9 ff ff       	call   c0107dcf <cli>
c0108487:	88 45 e7             	mov    %al,-0x19(%ebp)

    struct thread* newthread = thread_create(name);
c010848a:	83 ec 0c             	sub    $0xc,%esp
c010848d:	57                   	push   %edi
c010848e:	e8 d1 fa ff ff       	call   c0107f64 <thread_create>
    if (newthread == NULL)
c0108493:	83 c4 10             	add    $0x10,%esp
        return ENOMEM;
c0108496:	be 02 00 00 00       	mov    $0x2,%esi
        void* data1, unsigned long data2) {

    bool on = cli();

    struct thread* newthread = thread_create(name);
    if (newthread == NULL)
c010849b:	85 c0                	test   %eax,%eax
c010849d:	0f 84 f9 00 00 00    	je     c010859c <thread_fork+0x126>
c01084a3:	89 c3                	mov    %eax,%ebx
        return ENOMEM;

    newthread->stack = thread_getstack();
c01084a5:	e8 2f fa ff ff       	call   c0107ed9 <thread_getstack>
c01084aa:	89 43 24             	mov    %eax,0x24(%ebx)
    if (newthread->stack == NULL) {
c01084ad:	85 c0                	test   %eax,%eax
c01084af:	0f 84 b4 00 00 00    	je     c0108569 <thread_fork+0xf3>
c01084b5:	8d 43 24             	lea    0x24(%ebx),%eax
        thread_destroy(newthread);
        return ENOMEM;
    }
    thread_checkstack(newthread);
c01084b8:	e8 20 f9 ff ff       	call   c0107ddd <thread_checkstack.isra.0>

    newthread->cpu = thiscpu;
c01084bd:	e8 f4 a3 ff ff       	call   c01028b6 <cpunum>
c01084c2:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01084c9:	89 43 1c             	mov    %eax,0x1c(%ebx)

    if (thread_out != NULL) {
c01084cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01084d0:	74 4f                	je     c0108521 <thread_fork+0xab>
        *thread_out = newthread;
c01084d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084d5:	89 18                	mov    %ebx,(%eax)
        newthread->parent = thisthread;
c01084d7:	e8 da a3 ff ff       	call   c01028b6 <cpunum>
c01084dc:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01084e3:	8b 40 08             	mov    0x8(%eax),%eax
c01084e6:	89 43 30             	mov    %eax,0x30(%ebx)

        newthread->csem = semaphore_create(name, 0);
c01084e9:	50                   	push   %eax
c01084ea:	50                   	push   %eax
c01084eb:	6a 00                	push   $0x0
c01084ed:	57                   	push   %edi
c01084ee:	e8 56 ae ff ff       	call   c0103349 <semaphore_create>
c01084f3:	89 43 38             	mov    %eax,0x38(%ebx)
        if (newthread->csem == NULL) {
c01084f6:	83 c4 10             	add    $0x10,%esp
c01084f9:	85 c0                	test   %eax,%eax
c01084fb:	74 6c                	je     c0108569 <thread_fork+0xf3>
            thread_destroy(newthread);
            return ENOMEM;
        }

        newthread->psem = semaphore_create(name, 0);
c01084fd:	50                   	push   %eax
c01084fe:	50                   	push   %eax
c01084ff:	6a 00                	push   $0x0
c0108501:	57                   	push   %edi
c0108502:	e8 42 ae ff ff       	call   c0103349 <semaphore_create>
c0108507:	89 43 34             	mov    %eax,0x34(%ebx)
        if (newthread->psem == NULL) {
c010850a:	83 c4 10             	add    $0x10,%esp
c010850d:	85 c0                	test   %eax,%eax
c010850f:	75 10                	jne    c0108521 <thread_fork+0xab>
            semaphore_destroy(newthread->csem);
c0108511:	83 ec 0c             	sub    $0xc,%esp
c0108514:	ff 73 38             	pushl  0x38(%ebx)
c0108517:	e8 a8 ae ff ff       	call   c01033c4 <semaphore_destroy>
            thread_destroy(newthread);
c010851c:	89 1c 24             	mov    %ebx,(%esp)
c010851f:	eb 4c                	jmp    c010856d <thread_fork+0xf7>
c0108521:	8b 45 10             	mov    0x10(%ebp),%eax
            return ENOMEM;
        }
    }

    int result = proc_addthread(proc ? proc : thisthread->proc, newthread);
c0108524:	85 c0                	test   %eax,%eax
c0108526:	75 12                	jne    c010853a <thread_fork+0xc4>
c0108528:	e8 89 a3 ff ff       	call   c01028b6 <cpunum>
c010852d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108534:	8b 40 08             	mov    0x8(%eax),%eax
c0108537:	8b 40 20             	mov    0x20(%eax),%eax
c010853a:	56                   	push   %esi
c010853b:	56                   	push   %esi
c010853c:	53                   	push   %ebx
c010853d:	50                   	push   %eax
c010853e:	e8 d8 1b 00 00       	call   c010a11b <proc_addthread>
c0108543:	89 c6                	mov    %eax,%esi
    if (result) {
c0108545:	83 c4 10             	add    $0x10,%esp
c0108548:	85 c0                	test   %eax,%eax
c010854a:	74 2b                	je     c0108577 <thread_fork+0x101>
        if (thread_out != NULL) {
c010854c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108550:	74 17                	je     c0108569 <thread_fork+0xf3>
            semaphore_destroy(newthread->psem);
c0108552:	83 ec 0c             	sub    $0xc,%esp
c0108555:	ff 73 34             	pushl  0x34(%ebx)
c0108558:	e8 67 ae ff ff       	call   c01033c4 <semaphore_destroy>
            semaphore_destroy(newthread->csem);
c010855d:	59                   	pop    %ecx
c010855e:	ff 73 38             	pushl  0x38(%ebx)
c0108561:	e8 5e ae ff ff       	call   c01033c4 <semaphore_destroy>
c0108566:	83 c4 10             	add    $0x10,%esp
        }
        thread_destroy(newthread);
c0108569:	83 ec 0c             	sub    $0xc,%esp
c010856c:	53                   	push   %ebx
c010856d:	e8 bd fa ff ff       	call   c010802f <thread_destroy>
        return result;
c0108572:	83 c4 10             	add    $0x10,%esp
c0108575:	eb 25                	jmp    c010859c <thread_fork+0x126>
    }

    switchframe_init(newthread, entrypoint, data1, data2);
c0108577:	ff 75 1c             	pushl  0x1c(%ebp)
c010857a:	ff 75 18             	pushl  0x18(%ebp)
c010857d:	ff 75 14             	pushl  0x14(%ebp)
c0108580:	53                   	push   %ebx
c0108581:	e8 19 0f 00 00       	call   c010949f <switchframe_init>

    thread_make_runnable(newthread, false);
c0108586:	58                   	pop    %eax
c0108587:	5a                   	pop    %edx
c0108588:	6a 00                	push   $0x0
c010858a:	53                   	push   %ebx
c010858b:	e8 1d fe ff ff       	call   c01083ad <thread_make_runnable>
}

static inline void
ifx(bool set) {
    if (set)
c0108590:	83 c4 10             	add    $0x10,%esp

    ifx(on);

    return 0;
c0108593:	31 f6                	xor    %esi,%esi
c0108595:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
c0108599:	74 01                	je     c010859c <thread_fork+0x126>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010859b:	fb                   	sti    
}
c010859c:	89 f0                	mov    %esi,%eax
c010859e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01085a1:	5b                   	pop    %ebx
c01085a2:	5e                   	pop    %esi
c01085a3:	5f                   	pop    %edi
c01085a4:	5d                   	pop    %ebp
c01085a5:	c3                   	ret    

c01085a6 <thread_switch>:

void
thread_switch(threadstate_t newstate, struct wchan* wc, struct spinlock* lk) {
c01085a6:	55                   	push   %ebp
c01085a7:	89 e5                	mov    %esp,%ebp
c01085a9:	57                   	push   %edi
c01085aa:	56                   	push   %esi
c01085ab:	53                   	push   %ebx
c01085ac:	83 ec 1c             	sub    $0x1c,%esp
c01085af:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01085b2:	8b 75 0c             	mov    0xc(%ebp),%esi
c01085b5:	8b 7d 10             	mov    0x10(%ebp),%edi
    assert(cli() == false);  // interrupts are off
c01085b8:	e8 12 f8 ff ff       	call   c0107dcf <cli>
c01085bd:	84 c0                	test   %al,%al
c01085bf:	74 2b                	je     c01085ec <thread_switch+0x46>
c01085c1:	83 ec 0c             	sub    $0xc,%esp
c01085c4:	68 dc 1a 11 c0       	push   $0xc0111adc
c01085c9:	68 9d 00 00 00       	push   $0x9d
c01085ce:	68 11 18 11 c0       	push   $0xc0111811
c01085d3:	68 a3 18 11 c0       	push   $0xc01118a3
c01085d8:	68 2b ff 10 c0       	push   $0xc010ff2b
c01085dd:	e8 86 bc ff ff       	call   c0104268 <print>
c01085e2:	83 c4 20             	add    $0x20,%esp
c01085e5:	e8 99 89 ff ff       	call   c0100f83 <backtrace>
c01085ea:	fa                   	cli    
c01085eb:	f4                   	hlt    
    assert(thiscpu->thread == thisthread);
c01085ec:	e8 c5 a2 ff ff       	call   c01028b6 <cpunum>
c01085f1:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01085f8:	8b 50 08             	mov    0x8(%eax),%edx
c01085fb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01085fe:	e8 b3 a2 ff ff       	call   c01028b6 <cpunum>
c0108603:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010860a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010860d:	3b 50 08             	cmp    0x8(%eax),%edx
c0108610:	74 2b                	je     c010863d <thread_switch+0x97>
c0108612:	83 ec 0c             	sub    $0xc,%esp
c0108615:	68 dc 1a 11 c0       	push   $0xc0111adc
c010861a:	68 9e 00 00 00       	push   $0x9e
c010861f:	68 11 18 11 c0       	push   $0xc0111811
c0108624:	68 6f 19 11 c0       	push   $0xc011196f
c0108629:	68 2b ff 10 c0       	push   $0xc010ff2b
c010862e:	e8 35 bc ff ff       	call   c0104268 <print>
c0108633:	83 c4 20             	add    $0x20,%esp
c0108636:	e8 48 89 ff ff       	call   c0100f83 <backtrace>
c010863b:	fa                   	cli    
c010863c:	f4                   	hlt    
    assert(thisthread->cpu == thiscpu->self);
c010863d:	e8 74 a2 ff ff       	call   c01028b6 <cpunum>
c0108642:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108649:	8b 40 08             	mov    0x8(%eax),%eax
c010864c:	8b 50 1c             	mov    0x1c(%eax),%edx
c010864f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0108652:	e8 5f a2 ff ff       	call   c01028b6 <cpunum>
c0108657:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010865e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108661:	3b 10                	cmp    (%eax),%edx
c0108663:	74 2b                	je     c0108690 <thread_switch+0xea>
c0108665:	83 ec 0c             	sub    $0xc,%esp
c0108668:	68 dc 1a 11 c0       	push   $0xc0111adc
c010866d:	68 9f 00 00 00       	push   $0x9f
c0108672:	68 11 18 11 c0       	push   $0xc0111811
c0108677:	68 8d 19 11 c0       	push   $0xc011198d
c010867c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108681:	e8 e2 bb ff ff       	call   c0104268 <print>
c0108686:	83 c4 20             	add    $0x20,%esp
c0108689:	e8 f5 88 ff ff       	call   c0100f83 <backtrace>
c010868e:	fa                   	cli    
c010868f:	f4                   	hlt    

    // TODO: revise the following comment because I no longer use stackreg:
    // // we may already have stackreg's spinlock and we can't reacquire it so skip
    // // exorcising if going to sleep
    if (newstate != S_SLEEP)
c0108690:	83 fb 02             	cmp    $0x2,%ebx
c0108693:	74 05                	je     c010869a <thread_switch+0xf4>
        thread_exorcise();
c0108695:	e8 a4 fa ff ff       	call   c010813e <thread_exorcise>

    /*
     * If we're idle, return without doing anything. this happens
     * when the timer interrupt interrupts the idle loop.
     */
    if (thiscpu->status == CPU_IDLE)
c010869a:	e8 17 a2 ff ff       	call   c01028b6 <cpunum>
c010869f:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01086a6:	8a 40 05             	mov    0x5(%eax),%al
c01086a9:	3c 03                	cmp    $0x3,%al
c01086ab:	0f 84 7c 02 00 00    	je     c010892d <thread_switch+0x387>
        return;

    thread_checkstack(thisthread);
c01086b1:	e8 00 a2 ff ff       	call   c01028b6 <cpunum>
c01086b6:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01086bd:	8b 40 08             	mov    0x8(%eax),%eax
c01086c0:	83 c0 24             	add    $0x24,%eax
c01086c3:	e8 15 f7 ff ff       	call   c0107ddd <thread_checkstack.isra.0>

    // asm volatile ("mfence" ::: "memory");  // uncomment?

    spinlock_acquire(&thiscpu->active_threads_lock);
c01086c8:	e8 e9 a1 ff ff       	call   c01028b6 <cpunum>
c01086cd:	83 ec 0c             	sub    $0xc,%esp
c01086d0:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01086d7:	83 c0 48             	add    $0x48,%eax
c01086da:	50                   	push   %eax
c01086db:	e8 53 af ff ff       	call   c0103633 <spinlock_acquire>

    switch (newstate) {
c01086e0:	83 c4 10             	add    $0x10,%esp
c01086e3:	83 fb 01             	cmp    $0x1,%ebx
c01086e6:	74 72                	je     c010875a <thread_switch+0x1b4>
c01086e8:	72 54                	jb     c010873e <thread_switch+0x198>
c01086ea:	83 fb 02             	cmp    $0x2,%ebx
c01086ed:	0f 84 be 00 00 00    	je     c01087b1 <thread_switch+0x20b>
c01086f3:	83 fb 03             	cmp    $0x3,%ebx
c01086f6:	0f 85 f0 00 00 00    	jne    c01087ec <thread_switch+0x246>
            thisthread->wchan_name = wc->wc_name;
            threadlist_addtail(&wc->wc_threads, thisthread);
            spinlock_release(lk);
            break;
        case S_ZOMBIE:
            thisthread->wchan_name = "ZOMBIE";
c01086fc:	e8 b5 a1 ff ff       	call   c01028b6 <cpunum>
c0108701:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108708:	8b 40 08             	mov    0x8(%eax),%eax
c010870b:	c7 40 14 fb 18 11 c0 	movl   $0xc01118fb,0x14(%eax)
            threadlist_addtail(&thiscpu->zombie_threads, thisthread);
c0108712:	e8 9f a1 ff ff       	call   c01028b6 <cpunum>
c0108717:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010871e:	8b 70 08             	mov    0x8(%eax),%esi
c0108721:	e8 90 a1 ff ff       	call   c01028b6 <cpunum>
c0108726:	51                   	push   %ecx
c0108727:	51                   	push   %ecx
c0108728:	56                   	push   %esi
c0108729:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108730:	83 c0 10             	add    $0x10,%eax
c0108733:	50                   	push   %eax
c0108734:	e8 d2 0a 00 00       	call   c010920b <threadlist_addtail>
c0108739:	e9 a9 00 00 00       	jmp    c01087e7 <thread_switch+0x241>

    spinlock_acquire(&thiscpu->active_threads_lock);

    switch (newstate) {
        case S_RUN:
            panic("Illegal S_RUN in thread_switch\n");
c010873e:	68 ae 19 11 c0       	push   $0xc01119ae
c0108743:	68 dc 1a 11 c0       	push   $0xc0111adc
c0108748:	68 b6 00 00 00       	push   $0xb6
c010874d:	68 11 18 11 c0       	push   $0xc0111811
c0108752:	e8 1e b5 ff ff       	call   c0103c75 <_panic>
c0108757:	83 c4 10             	add    $0x10,%esp
        case S_READY: {
            // if thisthread is the only thread, just return
            if (threadlist_isempty(&thiscpu->active_threads)) {
c010875a:	e8 57 a1 ff ff       	call   c01028b6 <cpunum>
c010875f:	83 ec 0c             	sub    $0xc,%esp
c0108762:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108769:	83 c0 2c             	add    $0x2c,%eax
c010876c:	50                   	push   %eax
c010876d:	e8 30 08 00 00       	call   c0108fa2 <threadlist_isempty>
c0108772:	83 c4 10             	add    $0x10,%esp
c0108775:	84 c0                	test   %al,%al
c0108777:	74 1e                	je     c0108797 <thread_switch+0x1f1>
                spinlock_release(&thiscpu->active_threads_lock);
c0108779:	e8 38 a1 ff ff       	call   c01028b6 <cpunum>
c010877e:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108785:	83 c0 48             	add    $0x48,%eax
c0108788:	89 45 08             	mov    %eax,0x8(%ebp)
    spinlock_release(&thiscpu->active_threads_lock);

    switchframe_switch((thisthread = next)->context);

    panic("switchframe_switch returned");
}
c010878b:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010878e:	5b                   	pop    %ebx
c010878f:	5e                   	pop    %esi
c0108790:	5f                   	pop    %edi
c0108791:	5d                   	pop    %ebp
        case S_RUN:
            panic("Illegal S_RUN in thread_switch\n");
        case S_READY: {
            // if thisthread is the only thread, just return
            if (threadlist_isempty(&thiscpu->active_threads)) {
                spinlock_release(&thiscpu->active_threads_lock);
c0108792:	e9 52 af ff ff       	jmp    c01036e9 <spinlock_release>
                return;
            }
            thread_make_runnable(thisthread, true /* holding_lock */);
c0108797:	e8 1a a1 ff ff       	call   c01028b6 <cpunum>
c010879c:	51                   	push   %ecx
c010879d:	51                   	push   %ecx
c010879e:	6a 01                	push   $0x1
c01087a0:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01087a7:	ff 70 08             	pushl  0x8(%eax)
c01087aa:	e8 fe fb ff ff       	call   c01083ad <thread_make_runnable>
c01087af:	eb 36                	jmp    c01087e7 <thread_switch+0x241>
            break;
        }
        case S_SLEEP:
            thisthread->wchan_name = wc->wc_name;
c01087b1:	e8 00 a1 ff ff       	call   c01028b6 <cpunum>
c01087b6:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01087bd:	8b 40 08             	mov    0x8(%eax),%eax
c01087c0:	8b 16                	mov    (%esi),%edx
c01087c2:	89 50 14             	mov    %edx,0x14(%eax)
            threadlist_addtail(&wc->wc_threads, thisthread);
c01087c5:	e8 ec a0 ff ff       	call   c01028b6 <cpunum>
c01087ca:	52                   	push   %edx
c01087cb:	52                   	push   %edx
c01087cc:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01087d3:	ff 70 08             	pushl  0x8(%eax)
c01087d6:	83 c6 04             	add    $0x4,%esi
c01087d9:	56                   	push   %esi
c01087da:	e8 2c 0a 00 00       	call   c010920b <threadlist_addtail>
            spinlock_release(lk);
c01087df:	89 3c 24             	mov    %edi,(%esp)
c01087e2:	e8 02 af ff ff       	call   c01036e9 <spinlock_release>
            break;
c01087e7:	83 c4 10             	add    $0x10,%esp
c01087ea:	eb 20                	jmp    c010880c <thread_switch+0x266>
        case S_ZOMBIE:
            thisthread->wchan_name = "ZOMBIE";
            threadlist_addtail(&thiscpu->zombie_threads, thisthread);
            break;
        default:
            panic("unknown thread state in thread_switch: %u\n", newstate);
c01087ec:	83 ec 0c             	sub    $0xc,%esp
c01087ef:	53                   	push   %ebx
c01087f0:	68 ce 19 11 c0       	push   $0xc01119ce
c01087f5:	68 dc 1a 11 c0       	push   $0xc0111adc
c01087fa:	68 ca 00 00 00       	push   $0xca
c01087ff:	68 11 18 11 c0       	push   $0xc0111811
c0108804:	e8 6c b4 ff ff       	call   c0103c75 <_panic>
c0108809:	83 c4 20             	add    $0x20,%esp
    }
    thisthread->state = newstate;
c010880c:	e8 a5 a0 ff ff       	call   c01028b6 <cpunum>
c0108811:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108818:	8b 40 08             	mov    0x8(%eax),%eax
c010881b:	89 58 18             	mov    %ebx,0x18(%eax)

    thiscpu->status = CPU_IDLE;
c010881e:	e8 93 a0 ff ff       	call   c01028b6 <cpunum>
c0108823:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010882a:	c6 40 05 03          	movb   $0x3,0x5(%eax)
    struct thread* next = NULL;
    do
        if ((next = threadlist_remhead(&thiscpu->active_threads)) == NULL) {
c010882e:	e8 83 a0 ff ff       	call   c01028b6 <cpunum>
c0108833:	83 ec 0c             	sub    $0xc,%esp
c0108836:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010883d:	83 c0 2c             	add    $0x2c,%eax
c0108840:	50                   	push   %eax
c0108841:	e8 42 0a 00 00       	call   c0109288 <threadlist_remhead>
c0108846:	89 c3                	mov    %eax,%ebx
c0108848:	83 c4 10             	add    $0x10,%esp
c010884b:	85 c0                	test   %eax,%eax
c010884d:	75 39                	jne    c0108888 <thread_switch+0x2e2>
            spinlock_release(&thiscpu->active_threads_lock);
c010884f:	e8 62 a0 ff ff       	call   c01028b6 <cpunum>
c0108854:	83 ec 0c             	sub    $0xc,%esp
c0108857:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010885e:	83 c0 48             	add    $0x48,%eax
c0108861:	50                   	push   %eax
c0108862:	e8 82 ae ff ff       	call   c01036e9 <spinlock_release>
            cpu_idle();
c0108867:	e8 7a 0e 00 00       	call   c01096e6 <cpu_idle>
            spinlock_acquire(&thiscpu->active_threads_lock);
c010886c:	e8 45 a0 ff ff       	call   c01028b6 <cpunum>
c0108871:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108878:	83 c0 48             	add    $0x48,%eax
c010887b:	89 04 24             	mov    %eax,(%esp)
c010887e:	e8 b0 ad ff ff       	call   c0103633 <spinlock_acquire>
c0108883:	83 c4 10             	add    $0x10,%esp
c0108886:	eb a6                	jmp    c010882e <thread_switch+0x288>
        }
    while (next == NULL);
    thiscpu->status = CPU_STARTED;
c0108888:	e8 29 a0 ff ff       	call   c01028b6 <cpunum>
c010888d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108894:	c6 40 05 01          	movb   $0x1,0x5(%eax)

    next->wchan_name = NULL;
c0108898:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
    next->state = S_RUN;
c010889f:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)

    lcr3(PADDR(next->proc->page_directory));
c01088a6:	8b 43 20             	mov    0x20(%ebx),%eax
c01088a9:	8b 70 18             	mov    0x18(%eax),%esi

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c01088ac:	81 fe ff ff ff bf    	cmp    $0xbfffffff,%esi
c01088b2:	77 25                	ja     c01088d9 <thread_switch+0x333>
        panic(file, line, "PADDR called with invalid va %08x", va);
c01088b4:	52                   	push   %edx
c01088b5:	56                   	push   %esi
c01088b6:	68 61 05 11 c0       	push   $0xc0110561
c01088bb:	68 dc 00 00 00       	push   $0xdc
c01088c0:	68 11 18 11 c0       	push   $0xc0111811
c01088c5:	68 d4 1a 11 c0       	push   $0xc0111ad4
c01088ca:	6a 65                	push   $0x65
c01088cc:	68 83 05 11 c0       	push   $0xc0110583
c01088d1:	e8 9f b3 ff ff       	call   c0103c75 <_panic>
c01088d6:	83 c4 20             	add    $0x20,%esp
    return val;
}

static inline void
lcr3(uint32_t val) {
    asm volatile("movl %0,%%cr3" : : "r" (val));
c01088d9:	81 c6 00 00 00 40    	add    $0x40000000,%esi
c01088df:	0f 22 de             	mov    %esi,%cr3

    spinlock_release(&thiscpu->active_threads_lock);
c01088e2:	e8 cf 9f ff ff       	call   c01028b6 <cpunum>
c01088e7:	83 ec 0c             	sub    $0xc,%esp
c01088ea:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01088f1:	83 c0 48             	add    $0x48,%eax
c01088f4:	50                   	push   %eax
c01088f5:	e8 ef ad ff ff       	call   c01036e9 <spinlock_release>

    switchframe_switch((thisthread = next)->context);
c01088fa:	e8 b7 9f ff ff       	call   c01028b6 <cpunum>
c01088ff:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108906:	89 58 08             	mov    %ebx,0x8(%eax)
c0108909:	58                   	pop    %eax
c010890a:	ff 33                	pushl  (%ebx)
c010890c:	e8 33 0b 00 00       	call   c0109444 <switchframe_switch>

    panic("switchframe_switch returned");
c0108911:	68 f9 19 11 c0       	push   $0xc01119f9
c0108916:	68 dc 1a 11 c0       	push   $0xc0111adc
c010891b:	68 e2 00 00 00       	push   $0xe2
c0108920:	68 11 18 11 c0       	push   $0xc0111811
c0108925:	e8 4b b3 ff ff       	call   c0103c75 <_panic>
c010892a:	83 c4 20             	add    $0x20,%esp
}
c010892d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108930:	5b                   	pop    %ebx
c0108931:	5e                   	pop    %esi
c0108932:	5f                   	pop    %edi
c0108933:	5d                   	pop    %ebp
c0108934:	c3                   	ret    

c0108935 <thread_schedule>:

void
thread_schedule(void) {
c0108935:	55                   	push   %ebp
c0108936:	89 e5                	mov    %esp,%ebp
c0108938:	83 ec 08             	sub    $0x8,%esp
    assert(cli() == false);  // interrupts are off
c010893b:	e8 8f f4 ff ff       	call   c0107dcf <cli>
c0108940:	84 c0                	test   %al,%al
c0108942:	74 2b                	je     c010896f <thread_schedule+0x3a>
c0108944:	83 ec 0c             	sub    $0xc,%esp
c0108947:	68 c4 1a 11 c0       	push   $0xc0111ac4
c010894c:	68 e7 00 00 00       	push   $0xe7
c0108951:	68 11 18 11 c0       	push   $0xc0111811
c0108956:	68 a3 18 11 c0       	push   $0xc01118a3
c010895b:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108960:	e8 03 b9 ff ff       	call   c0104268 <print>
c0108965:	83 c4 20             	add    $0x20,%esp
c0108968:	e8 16 86 ff ff       	call   c0100f83 <backtrace>
c010896d:	fa                   	cli    
c010896e:	f4                   	hlt    
    thread_switch(S_READY, NULL, NULL);
c010896f:	50                   	push   %eax
c0108970:	6a 00                	push   $0x0
c0108972:	6a 00                	push   $0x0
c0108974:	6a 01                	push   $0x1
c0108976:	e8 2b fc ff ff       	call   c01085a6 <thread_switch>
}
c010897b:	83 c4 10             	add    $0x10,%esp
c010897e:	c9                   	leave  
c010897f:	c3                   	ret    

c0108980 <thread_exit>:
    thread_exit(ret);

}

void
thread_exit(int ret) {
c0108980:	55                   	push   %ebp
c0108981:	89 e5                	mov    %esp,%ebp
c0108983:	83 ec 08             	sub    $0x8,%esp
    assert(cli() == false);  // interrupts are off
c0108986:	e8 44 f4 ff ff       	call   c0107dcf <cli>
c010898b:	84 c0                	test   %al,%al
c010898d:	74 2b                	je     c01089ba <thread_exit+0x3a>
c010898f:	83 ec 0c             	sub    $0xc,%esp
c0108992:	68 a8 1a 11 c0       	push   $0xc0111aa8
c0108997:	68 08 01 00 00       	push   $0x108
c010899c:	68 11 18 11 c0       	push   $0xc0111811
c01089a1:	68 a3 18 11 c0       	push   $0xc01118a3
c01089a6:	68 2b ff 10 c0       	push   $0xc010ff2b
c01089ab:	e8 b8 b8 ff ff       	call   c0104268 <print>
c01089b0:	83 c4 20             	add    $0x20,%esp
c01089b3:	e8 cb 85 ff ff       	call   c0100f83 <backtrace>
c01089b8:	fa                   	cli    
c01089b9:	f4                   	hlt    
    thisthread->rval = ret;
c01089ba:	e8 f7 9e ff ff       	call   c01028b6 <cpunum>
c01089bf:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01089c6:	8b 40 08             	mov    0x8(%eax),%eax
c01089c9:	8b 55 08             	mov    0x8(%ebp),%edx
c01089cc:	89 50 2c             	mov    %edx,0x2c(%eax)

    if (thisthread->parent != NULL) {
c01089cf:	e8 e2 9e ff ff       	call   c01028b6 <cpunum>
c01089d4:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01089db:	8b 40 08             	mov    0x8(%eax),%eax
c01089de:	83 78 30 00          	cmpl   $0x0,0x30(%eax)
c01089e2:	0f 84 a7 00 00 00    	je     c0108a8f <thread_exit+0x10f>
        V(thisthread->psem);
c01089e8:	e8 c9 9e ff ff       	call   c01028b6 <cpunum>
c01089ed:	83 ec 0c             	sub    $0xc,%esp
c01089f0:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01089f7:	8b 40 08             	mov    0x8(%eax),%eax
c01089fa:	ff 70 34             	pushl  0x34(%eax)
c01089fd:	e8 fa aa ff ff       	call   c01034fc <V>
        P(thisthread->csem);
c0108a02:	e8 af 9e ff ff       	call   c01028b6 <cpunum>
c0108a07:	5a                   	pop    %edx
c0108a08:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a0f:	8b 40 08             	mov    0x8(%eax),%eax
c0108a12:	ff 70 38             	pushl  0x38(%eax)
c0108a15:	e8 0a aa ff ff       	call   c0103424 <P>

        semaphore_destroy(thisthread->psem);
c0108a1a:	e8 97 9e ff ff       	call   c01028b6 <cpunum>
c0108a1f:	59                   	pop    %ecx
c0108a20:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a27:	8b 40 08             	mov    0x8(%eax),%eax
c0108a2a:	ff 70 34             	pushl  0x34(%eax)
c0108a2d:	e8 92 a9 ff ff       	call   c01033c4 <semaphore_destroy>
        semaphore_destroy(thisthread->csem);
c0108a32:	e8 7f 9e ff ff       	call   c01028b6 <cpunum>
c0108a37:	5a                   	pop    %edx
c0108a38:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a3f:	8b 40 08             	mov    0x8(%eax),%eax
c0108a42:	ff 70 38             	pushl  0x38(%eax)
c0108a45:	e8 7a a9 ff ff       	call   c01033c4 <semaphore_destroy>

        thisthread->psem = NULL;
c0108a4a:	e8 67 9e ff ff       	call   c01028b6 <cpunum>
c0108a4f:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a56:	8b 40 08             	mov    0x8(%eax),%eax
c0108a59:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        thisthread->csem = NULL;
c0108a60:	e8 51 9e ff ff       	call   c01028b6 <cpunum>
c0108a65:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a6c:	8b 40 08             	mov    0x8(%eax),%eax
c0108a6f:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

        thisthread->parent = NULL;
c0108a76:	e8 3b 9e ff ff       	call   c01028b6 <cpunum>
c0108a7b:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a82:	8b 40 08             	mov    0x8(%eax),%eax
c0108a85:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
c0108a8c:	83 c4 10             	add    $0x10,%esp
    }

    proc_remthread(thisthread);
c0108a8f:	e8 22 9e ff ff       	call   c01028b6 <cpunum>
c0108a94:	83 ec 0c             	sub    $0xc,%esp
c0108a97:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108a9e:	ff 70 08             	pushl  0x8(%eax)
c0108aa1:	e8 f7 17 00 00       	call   c010a29d <proc_remthread>
    assert(thisthread->proc == NULL);
c0108aa6:	e8 0b 9e ff ff       	call   c01028b6 <cpunum>
c0108aab:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108ab2:	8b 40 08             	mov    0x8(%eax),%eax
c0108ab5:	83 c4 10             	add    $0x10,%esp
c0108ab8:	83 78 20 00          	cmpl   $0x0,0x20(%eax)
c0108abc:	74 2b                	je     c0108ae9 <thread_exit+0x169>
c0108abe:	83 ec 0c             	sub    $0xc,%esp
c0108ac1:	68 a8 1a 11 c0       	push   $0xc0111aa8
c0108ac6:	68 19 01 00 00       	push   $0x119
c0108acb:	68 11 18 11 c0       	push   $0xc0111811
c0108ad0:	68 15 1a 11 c0       	push   $0xc0111a15
c0108ad5:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108ada:	e8 89 b7 ff ff       	call   c0104268 <print>
c0108adf:	83 c4 20             	add    $0x20,%esp
c0108ae2:	e8 9c 84 ff ff       	call   c0100f83 <backtrace>
c0108ae7:	fa                   	cli    
c0108ae8:	f4                   	hlt    

    thread_checkstack(thisthread);
c0108ae9:	e8 c8 9d ff ff       	call   c01028b6 <cpunum>
c0108aee:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108af5:	8b 40 08             	mov    0x8(%eax),%eax
c0108af8:	83 c0 24             	add    $0x24,%eax
c0108afb:	e8 dd f2 ff ff       	call   c0107ddd <thread_checkstack.isra.0>

    assert(thiscpu->status != CPU_IDLE);
c0108b00:	e8 b1 9d ff ff       	call   c01028b6 <cpunum>
c0108b05:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108b0c:	8a 40 05             	mov    0x5(%eax),%al
c0108b0f:	3c 03                	cmp    $0x3,%al
c0108b11:	75 2b                	jne    c0108b3e <thread_exit+0x1be>
c0108b13:	83 ec 0c             	sub    $0xc,%esp
c0108b16:	68 a8 1a 11 c0       	push   $0xc0111aa8
c0108b1b:	68 1d 01 00 00       	push   $0x11d
c0108b20:	68 11 18 11 c0       	push   $0xc0111811
c0108b25:	68 2e 1a 11 c0       	push   $0xc0111a2e
c0108b2a:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108b2f:	e8 34 b7 ff ff       	call   c0104268 <print>
c0108b34:	83 c4 20             	add    $0x20,%esp
c0108b37:	e8 47 84 ff ff       	call   c0100f83 <backtrace>
c0108b3c:	fa                   	cli    
c0108b3d:	f4                   	hlt    

    thread_switch(S_ZOMBIE, NULL, NULL);
c0108b3e:	50                   	push   %eax
c0108b3f:	6a 00                	push   $0x0
c0108b41:	6a 00                	push   $0x0
c0108b43:	6a 03                	push   $0x3
c0108b45:	e8 5c fa ff ff       	call   c01085a6 <thread_switch>

    panic("thread_switch returned\n");
c0108b4a:	68 4a 1a 11 c0       	push   $0xc0111a4a
c0108b4f:	68 a8 1a 11 c0       	push   $0xc0111aa8
c0108b54:	68 21 01 00 00       	push   $0x121
c0108b59:	68 11 18 11 c0       	push   $0xc0111811
c0108b5e:	e8 12 b1 ff ff       	call   c0103c75 <_panic>
}
c0108b63:	83 c4 20             	add    $0x20,%esp
c0108b66:	c9                   	leave  
c0108b67:	c3                   	ret    

c0108b68 <thread_start>:
    thread_switch(S_READY, NULL, NULL);
}

void
thread_start(int (*entrypoint)(void* data1, unsigned long data2),
               void* data1, unsigned long data2) {
c0108b68:	55                   	push   %ebp
c0108b69:	89 e5                	mov    %esp,%ebp
c0108b6b:	57                   	push   %edi
c0108b6c:	56                   	push   %esi
c0108b6d:	53                   	push   %ebx
c0108b6e:	83 ec 0c             	sub    $0xc,%esp
c0108b71:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0108b74:	8b 75 0c             	mov    0xc(%ebp),%esi
c0108b77:	8b 7d 10             	mov    0x10(%ebp),%edi
    assert(cli() == false);  // interrupts are off
c0108b7a:	e8 50 f2 ff ff       	call   c0107dcf <cli>
c0108b7f:	84 c0                	test   %al,%al
c0108b81:	74 2b                	je     c0108bae <thread_start+0x46>
c0108b83:	83 ec 0c             	sub    $0xc,%esp
c0108b86:	68 b4 1a 11 c0       	push   $0xc0111ab4
c0108b8b:	68 ee 00 00 00       	push   $0xee
c0108b90:	68 11 18 11 c0       	push   $0xc0111811
c0108b95:	68 a3 18 11 c0       	push   $0xc01118a3
c0108b9a:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108b9f:	e8 c4 b6 ff ff       	call   c0104268 <print>
c0108ba4:	83 c4 20             	add    $0x20,%esp
c0108ba7:	e8 d7 83 ff ff       	call   c0100f83 <backtrace>
c0108bac:	fa                   	cli    
c0108bad:	f4                   	hlt    
    assert(thisthread != NULL);
c0108bae:	e8 03 9d ff ff       	call   c01028b6 <cpunum>
c0108bb3:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108bba:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
c0108bbe:	75 2b                	jne    c0108beb <thread_start+0x83>
c0108bc0:	83 ec 0c             	sub    $0xc,%esp
c0108bc3:	68 b4 1a 11 c0       	push   $0xc0111ab4
c0108bc8:	68 ef 00 00 00       	push   $0xef
c0108bcd:	68 11 18 11 c0       	push   $0xc0111811
c0108bd2:	68 01 0c 11 c0       	push   $0xc0110c01
c0108bd7:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108bdc:	e8 87 b6 ff ff       	call   c0104268 <print>
c0108be1:	83 c4 20             	add    $0x20,%esp
c0108be4:	e8 9a 83 ff ff       	call   c0100f83 <backtrace>
c0108be9:	fa                   	cli    
c0108bea:	f4                   	hlt    

    /* Clear the wait channel and set the thread state. */
    thisthread->wchan_name = NULL;
c0108beb:	e8 c6 9c ff ff       	call   c01028b6 <cpunum>
c0108bf0:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108bf7:	8b 40 08             	mov    0x8(%eax),%eax
c0108bfa:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    thisthread->state = S_RUN;
c0108c01:	e8 b0 9c ff ff       	call   c01028b6 <cpunum>
c0108c06:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0108c0d:	8b 40 08             	mov    0x8(%eax),%eax
c0108c10:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)

    thread_exorcise();
c0108c17:	e8 22 f5 ff ff       	call   c010813e <thread_exorcise>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c0108c1c:	fb                   	sti    
    /* Activate our address space in the MMU. */
    // lcr3(PADDR(thisthread->page_directory));

    sti();

    while (random() & 0x3)
c0108c1d:	e8 ee be ff ff       	call   c0104b10 <random>
c0108c22:	a8 03                	test   $0x3,%al
c0108c24:	74 07                	je     c0108c2d <thread_start+0xc5>
        thread_yield();
c0108c26:	e8 62 7e ff ff       	call   c0100a8d <thread_yield>
c0108c2b:	eb f0                	jmp    c0108c1d <thread_start+0xb5>

    int ret = entrypoint(data1, data2);
c0108c2d:	50                   	push   %eax
c0108c2e:	50                   	push   %eax
c0108c2f:	57                   	push   %edi
c0108c30:	56                   	push   %esi
c0108c31:	ff d3                	call   *%ebx
c0108c33:	89 c2                	mov    %eax,%edx

    cli();
c0108c35:	e8 95 f1 ff ff       	call   c0107dcf <cli>
    thread_exit(ret);
c0108c3a:	83 c4 10             	add    $0x10,%esp
c0108c3d:	89 55 08             	mov    %edx,0x8(%ebp)

}
c0108c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108c43:	5b                   	pop    %ebx
c0108c44:	5e                   	pop    %esi
c0108c45:	5f                   	pop    %edi
c0108c46:	5d                   	pop    %ebp
        thread_yield();

    int ret = entrypoint(data1, data2);

    cli();
    thread_exit(ret);
c0108c47:	e9 34 fd ff ff       	jmp    c0108980 <thread_exit>

c0108c4c <threadlist_insertafternode>:
/*
 * Do insertion. Doesn't update tl_count.
 */
static
void
threadlist_insertafternode(struct threadlistnode* onlist, struct thread* t) {
c0108c4c:	55                   	push   %ebp
c0108c4d:	89 e5                	mov    %esp,%ebp
c0108c4f:	57                   	push   %edi
c0108c50:	56                   	push   %esi
c0108c51:	53                   	push   %ebx
c0108c52:	83 ec 0c             	sub    $0xc,%esp
c0108c55:	89 c6                	mov    %eax,%esi
c0108c57:	89 d3                	mov    %edx,%ebx
    struct threadlistnode* addee;

    addee = &t->listnode;
c0108c59:	8d 7a 04             	lea    0x4(%edx),%edi

    assert(addee->tln_prev == NULL);
c0108c5c:	83 7a 04 00          	cmpl   $0x0,0x4(%edx)
c0108c60:	74 28                	je     c0108c8a <threadlist_insertafternode+0x3e>
c0108c62:	83 ec 0c             	sub    $0xc,%esp
c0108c65:	68 7c 1d 11 c0       	push   $0xc0111d7c
c0108c6a:	6a 49                	push   $0x49
c0108c6c:	68 34 1b 11 c0       	push   $0xc0111b34
c0108c71:	68 48 1b 11 c0       	push   $0xc0111b48
c0108c76:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108c7b:	e8 e8 b5 ff ff       	call   c0104268 <print>
c0108c80:	83 c4 20             	add    $0x20,%esp
c0108c83:	e8 fb 82 ff ff       	call   c0100f83 <backtrace>
c0108c88:	fa                   	cli    
c0108c89:	f4                   	hlt    
    assert(addee->tln_next == NULL);
c0108c8a:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c0108c8e:	74 28                	je     c0108cb8 <threadlist_insertafternode+0x6c>
c0108c90:	83 ec 0c             	sub    $0xc,%esp
c0108c93:	68 7c 1d 11 c0       	push   $0xc0111d7c
c0108c98:	6a 4a                	push   $0x4a
c0108c9a:	68 34 1b 11 c0       	push   $0xc0111b34
c0108c9f:	68 60 1b 11 c0       	push   $0xc0111b60
c0108ca4:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108ca9:	e8 ba b5 ff ff       	call   c0104268 <print>
c0108cae:	83 c4 20             	add    $0x20,%esp
c0108cb1:	e8 cd 82 ff ff       	call   c0100f83 <backtrace>
c0108cb6:	fa                   	cli    
c0108cb7:	f4                   	hlt    

    addee->tln_prev = onlist;
c0108cb8:	89 73 04             	mov    %esi,0x4(%ebx)
    addee->tln_next = onlist->tln_next;
c0108cbb:	8b 46 04             	mov    0x4(%esi),%eax
c0108cbe:	89 43 08             	mov    %eax,0x8(%ebx)
    addee->tln_prev->tln_next = addee;
c0108cc1:	89 7e 04             	mov    %edi,0x4(%esi)
    addee->tln_next->tln_prev = addee;
c0108cc4:	8b 43 08             	mov    0x8(%ebx),%eax
c0108cc7:	89 38                	mov    %edi,(%eax)
}
c0108cc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108ccc:	5b                   	pop    %ebx
c0108ccd:	5e                   	pop    %esi
c0108cce:	5f                   	pop    %edi
c0108ccf:	5d                   	pop    %ebp
c0108cd0:	c3                   	ret    

c0108cd1 <threadlist_insertbeforenode>:
/*
 * Do insertion. Doesn't update tl_count.
 */
static
void
threadlist_insertbeforenode(struct thread* t, struct threadlistnode* onlist) {
c0108cd1:	55                   	push   %ebp
c0108cd2:	89 e5                	mov    %esp,%ebp
c0108cd4:	57                   	push   %edi
c0108cd5:	56                   	push   %esi
c0108cd6:	53                   	push   %ebx
c0108cd7:	83 ec 0c             	sub    $0xc,%esp
c0108cda:	89 c3                	mov    %eax,%ebx
c0108cdc:	89 d7                	mov    %edx,%edi
    struct threadlistnode* addee;

    addee = &t->listnode;
c0108cde:	8d 70 04             	lea    0x4(%eax),%esi

    assert(addee->tln_prev == NULL);
c0108ce1:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
c0108ce5:	74 28                	je     c0108d0f <threadlist_insertbeforenode+0x3e>
c0108ce7:	83 ec 0c             	sub    $0xc,%esp
c0108cea:	68 4c 1d 11 c0       	push   $0xc0111d4c
c0108cef:	6a 5c                	push   $0x5c
c0108cf1:	68 34 1b 11 c0       	push   $0xc0111b34
c0108cf6:	68 48 1b 11 c0       	push   $0xc0111b48
c0108cfb:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108d00:	e8 63 b5 ff ff       	call   c0104268 <print>
c0108d05:	83 c4 20             	add    $0x20,%esp
c0108d08:	e8 76 82 ff ff       	call   c0100f83 <backtrace>
c0108d0d:	fa                   	cli    
c0108d0e:	f4                   	hlt    
    assert(addee->tln_next == NULL);
c0108d0f:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c0108d13:	74 28                	je     c0108d3d <threadlist_insertbeforenode+0x6c>
c0108d15:	83 ec 0c             	sub    $0xc,%esp
c0108d18:	68 4c 1d 11 c0       	push   $0xc0111d4c
c0108d1d:	6a 5d                	push   $0x5d
c0108d1f:	68 34 1b 11 c0       	push   $0xc0111b34
c0108d24:	68 60 1b 11 c0       	push   $0xc0111b60
c0108d29:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108d2e:	e8 35 b5 ff ff       	call   c0104268 <print>
c0108d33:	83 c4 20             	add    $0x20,%esp
c0108d36:	e8 48 82 ff ff       	call   c0100f83 <backtrace>
c0108d3b:	fa                   	cli    
c0108d3c:	f4                   	hlt    

    addee->tln_prev = onlist->tln_prev;
c0108d3d:	8b 07                	mov    (%edi),%eax
c0108d3f:	89 43 04             	mov    %eax,0x4(%ebx)
    addee->tln_next = onlist;
c0108d42:	89 7b 08             	mov    %edi,0x8(%ebx)
    addee->tln_prev->tln_next = addee;
c0108d45:	89 70 04             	mov    %esi,0x4(%eax)
    addee->tln_next->tln_prev = addee;
c0108d48:	8b 43 08             	mov    0x8(%ebx),%eax
c0108d4b:	89 30                	mov    %esi,(%eax)
}
c0108d4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108d50:	5b                   	pop    %ebx
c0108d51:	5e                   	pop    %esi
c0108d52:	5f                   	pop    %edi
c0108d53:	5d                   	pop    %ebp
c0108d54:	c3                   	ret    

c0108d55 <threadlist_removenode>:
/*
 * Do removal. Doesn't update tl_count.
 */
static
void
threadlist_removenode(struct threadlistnode* tln) {
c0108d55:	55                   	push   %ebp
c0108d56:	89 e5                	mov    %esp,%ebp
c0108d58:	53                   	push   %ebx
c0108d59:	52                   	push   %edx
c0108d5a:	89 c3                	mov    %eax,%ebx
    assert(tln != NULL);
c0108d5c:	85 c0                	test   %eax,%eax
c0108d5e:	75 28                	jne    c0108d88 <threadlist_removenode+0x33>
c0108d60:	83 ec 0c             	sub    $0xc,%esp
c0108d63:	68 20 1d 11 c0       	push   $0xc0111d20
c0108d68:	6a 6b                	push   $0x6b
c0108d6a:	68 34 1b 11 c0       	push   $0xc0111b34
c0108d6f:	68 78 1b 11 c0       	push   $0xc0111b78
c0108d74:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108d79:	e8 ea b4 ff ff       	call   c0104268 <print>
c0108d7e:	83 c4 20             	add    $0x20,%esp
c0108d81:	e8 fd 81 ff ff       	call   c0100f83 <backtrace>
c0108d86:	fa                   	cli    
c0108d87:	f4                   	hlt    
    assert(tln->tln_prev != NULL);
c0108d88:	83 3b 00             	cmpl   $0x0,(%ebx)
c0108d8b:	75 28                	jne    c0108db5 <threadlist_removenode+0x60>
c0108d8d:	83 ec 0c             	sub    $0xc,%esp
c0108d90:	68 20 1d 11 c0       	push   $0xc0111d20
c0108d95:	6a 6c                	push   $0x6c
c0108d97:	68 34 1b 11 c0       	push   $0xc0111b34
c0108d9c:	68 84 1b 11 c0       	push   $0xc0111b84
c0108da1:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108da6:	e8 bd b4 ff ff       	call   c0104268 <print>
c0108dab:	83 c4 20             	add    $0x20,%esp
c0108dae:	e8 d0 81 ff ff       	call   c0100f83 <backtrace>
c0108db3:	fa                   	cli    
c0108db4:	f4                   	hlt    
    assert(tln->tln_next != NULL);
c0108db5:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c0108db9:	75 28                	jne    c0108de3 <threadlist_removenode+0x8e>
c0108dbb:	83 ec 0c             	sub    $0xc,%esp
c0108dbe:	68 20 1d 11 c0       	push   $0xc0111d20
c0108dc3:	6a 6d                	push   $0x6d
c0108dc5:	68 34 1b 11 c0       	push   $0xc0111b34
c0108dca:	68 9a 1b 11 c0       	push   $0xc0111b9a
c0108dcf:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108dd4:	e8 8f b4 ff ff       	call   c0104268 <print>
c0108dd9:	83 c4 20             	add    $0x20,%esp
c0108ddc:	e8 a2 81 ff ff       	call   c0100f83 <backtrace>
c0108de1:	fa                   	cli    
c0108de2:	f4                   	hlt    

    tln->tln_prev->tln_next = tln->tln_next;
c0108de3:	8b 03                	mov    (%ebx),%eax
c0108de5:	8b 53 04             	mov    0x4(%ebx),%edx
c0108de8:	89 50 04             	mov    %edx,0x4(%eax)
    tln->tln_next->tln_prev = tln->tln_prev;
c0108deb:	8b 53 04             	mov    0x4(%ebx),%edx
c0108dee:	89 02                	mov    %eax,(%edx)
    tln->tln_prev = NULL;
c0108df0:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    tln->tln_next = NULL;
c0108df6:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
}
c0108dfd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108e00:	c9                   	leave  
c0108e01:	c3                   	ret    

c0108e02 <threadlistnode_init>:
#include <lib.h>
#include <thread.h>
#include <threadlist.h>

void
threadlistnode_init(struct threadlistnode* tln, struct thread* t) {
c0108e02:	55                   	push   %ebp
c0108e03:	89 e5                	mov    %esp,%ebp
c0108e05:	56                   	push   %esi
c0108e06:	53                   	push   %ebx
c0108e07:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0108e0a:	8b 75 0c             	mov    0xc(%ebp),%esi
    assert(tln != NULL);
c0108e0d:	85 db                	test   %ebx,%ebx
c0108e0f:	75 28                	jne    c0108e39 <threadlistnode_init+0x37>
c0108e11:	83 ec 0c             	sub    $0xc,%esp
c0108e14:	68 fc 1d 11 c0       	push   $0xc0111dfc
c0108e19:	6a 07                	push   $0x7
c0108e1b:	68 34 1b 11 c0       	push   $0xc0111b34
c0108e20:	68 78 1b 11 c0       	push   $0xc0111b78
c0108e25:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108e2a:	e8 39 b4 ff ff       	call   c0104268 <print>
c0108e2f:	83 c4 20             	add    $0x20,%esp
c0108e32:	e8 4c 81 ff ff       	call   c0100f83 <backtrace>
c0108e37:	fa                   	cli    
c0108e38:	f4                   	hlt    
    assert(t != NULL);
c0108e39:	85 f6                	test   %esi,%esi
c0108e3b:	75 28                	jne    c0108e65 <threadlistnode_init+0x63>
c0108e3d:	83 ec 0c             	sub    $0xc,%esp
c0108e40:	68 fc 1d 11 c0       	push   $0xc0111dfc
c0108e45:	6a 08                	push   $0x8
c0108e47:	68 34 1b 11 c0       	push   $0xc0111b34
c0108e4c:	68 1f 19 11 c0       	push   $0xc011191f
c0108e51:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108e56:	e8 0d b4 ff ff       	call   c0104268 <print>
c0108e5b:	83 c4 20             	add    $0x20,%esp
c0108e5e:	e8 20 81 ff ff       	call   c0100f83 <backtrace>
c0108e63:	fa                   	cli    
c0108e64:	f4                   	hlt    

    tln->tln_next = NULL;
c0108e65:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    tln->tln_prev = NULL;
c0108e6c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    tln->tln_self = t;
c0108e72:	89 73 08             	mov    %esi,0x8(%ebx)
}
c0108e75:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0108e78:	5b                   	pop    %ebx
c0108e79:	5e                   	pop    %esi
c0108e7a:	5d                   	pop    %ebp
c0108e7b:	c3                   	ret    

c0108e7c <threadlistnode_cleanup>:

void
threadlistnode_cleanup(struct threadlistnode* tln) {
c0108e7c:	55                   	push   %ebp
c0108e7d:	89 e5                	mov    %esp,%ebp
c0108e7f:	53                   	push   %ebx
c0108e80:	50                   	push   %eax
c0108e81:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(tln != NULL);
c0108e84:	85 db                	test   %ebx,%ebx
c0108e86:	75 28                	jne    c0108eb0 <threadlistnode_cleanup+0x34>
c0108e88:	83 ec 0c             	sub    $0xc,%esp
c0108e8b:	68 e4 1d 11 c0       	push   $0xc0111de4
c0108e90:	6a 11                	push   $0x11
c0108e92:	68 34 1b 11 c0       	push   $0xc0111b34
c0108e97:	68 78 1b 11 c0       	push   $0xc0111b78
c0108e9c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108ea1:	e8 c2 b3 ff ff       	call   c0104268 <print>
c0108ea6:	83 c4 20             	add    $0x20,%esp
c0108ea9:	e8 d5 80 ff ff       	call   c0100f83 <backtrace>
c0108eae:	fa                   	cli    
c0108eaf:	f4                   	hlt    

    assert(tln->tln_next == NULL);
c0108eb0:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
c0108eb4:	74 28                	je     c0108ede <threadlistnode_cleanup+0x62>
c0108eb6:	83 ec 0c             	sub    $0xc,%esp
c0108eb9:	68 e4 1d 11 c0       	push   $0xc0111de4
c0108ebe:	6a 13                	push   $0x13
c0108ec0:	68 34 1b 11 c0       	push   $0xc0111b34
c0108ec5:	68 b0 1b 11 c0       	push   $0xc0111bb0
c0108eca:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108ecf:	e8 94 b3 ff ff       	call   c0104268 <print>
c0108ed4:	83 c4 20             	add    $0x20,%esp
c0108ed7:	e8 a7 80 ff ff       	call   c0100f83 <backtrace>
c0108edc:	fa                   	cli    
c0108edd:	f4                   	hlt    
    assert(tln->tln_prev == NULL);
c0108ede:	83 3b 00             	cmpl   $0x0,(%ebx)
c0108ee1:	74 28                	je     c0108f0b <threadlistnode_cleanup+0x8f>
c0108ee3:	83 ec 0c             	sub    $0xc,%esp
c0108ee6:	68 e4 1d 11 c0       	push   $0xc0111de4
c0108eeb:	6a 14                	push   $0x14
c0108eed:	68 34 1b 11 c0       	push   $0xc0111b34
c0108ef2:	68 c6 1b 11 c0       	push   $0xc0111bc6
c0108ef7:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108efc:	e8 67 b3 ff ff       	call   c0104268 <print>
c0108f01:	83 c4 20             	add    $0x20,%esp
c0108f04:	e8 7a 80 ff ff       	call   c0100f83 <backtrace>
c0108f09:	fa                   	cli    
c0108f0a:	f4                   	hlt    
    assert(tln->tln_self != NULL);
c0108f0b:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c0108f0f:	75 28                	jne    c0108f39 <threadlistnode_cleanup+0xbd>
c0108f11:	83 ec 0c             	sub    $0xc,%esp
c0108f14:	68 e4 1d 11 c0       	push   $0xc0111de4
c0108f19:	6a 15                	push   $0x15
c0108f1b:	68 34 1b 11 c0       	push   $0xc0111b34
c0108f20:	68 dc 1b 11 c0       	push   $0xc0111bdc
c0108f25:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108f2a:	e8 39 b3 ff ff       	call   c0104268 <print>
c0108f2f:	83 c4 20             	add    $0x20,%esp
c0108f32:	e8 4c 80 ff ff       	call   c0100f83 <backtrace>
c0108f37:	fa                   	cli    
c0108f38:	f4                   	hlt    
}
c0108f39:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108f3c:	c9                   	leave  
c0108f3d:	c3                   	ret    

c0108f3e <threadlist_init>:

void
threadlist_init(struct threadlist* tl) {
c0108f3e:	55                   	push   %ebp
c0108f3f:	89 e5                	mov    %esp,%ebp
c0108f41:	53                   	push   %ebx
c0108f42:	50                   	push   %eax
c0108f43:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(tl != NULL);
c0108f46:	85 db                	test   %ebx,%ebx
c0108f48:	75 28                	jne    c0108f72 <threadlist_init+0x34>
c0108f4a:	83 ec 0c             	sub    $0xc,%esp
c0108f4d:	68 d4 1d 11 c0       	push   $0xc0111dd4
c0108f52:	6a 1a                	push   $0x1a
c0108f54:	68 34 1b 11 c0       	push   $0xc0111b34
c0108f59:	68 f2 1b 11 c0       	push   $0xc0111bf2
c0108f5e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108f63:	e8 00 b3 ff ff       	call   c0104268 <print>
c0108f68:	83 c4 20             	add    $0x20,%esp
c0108f6b:	e8 13 80 ff ff       	call   c0100f83 <backtrace>
c0108f70:	fa                   	cli    
c0108f71:	f4                   	hlt    

    tl->tl_head.tln_next = &tl->tl_tail;
c0108f72:	8d 43 0c             	lea    0xc(%ebx),%eax
c0108f75:	89 43 04             	mov    %eax,0x4(%ebx)
    tl->tl_head.tln_prev = NULL;
c0108f78:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    tl->tl_tail.tln_next = NULL;
c0108f7e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
    tl->tl_tail.tln_prev = &tl->tl_head;
c0108f85:	89 5b 0c             	mov    %ebx,0xc(%ebx)
    tl->tl_head.tln_self = NULL;
c0108f88:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    tl->tl_tail.tln_self = NULL;
c0108f8f:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
    tl->tl_count = 0;
c0108f96:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
}
c0108f9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108fa0:	c9                   	leave  
c0108fa1:	c3                   	ret    

c0108fa2 <threadlist_isempty>:

    /* nothing (else) to do */
}

bool
threadlist_isempty(struct threadlist* tl) {
c0108fa2:	55                   	push   %ebp
c0108fa3:	89 e5                	mov    %esp,%ebp
c0108fa5:	53                   	push   %ebx
c0108fa6:	50                   	push   %eax
c0108fa7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(tl != NULL);
c0108faa:	85 db                	test   %ebx,%ebx
c0108fac:	75 28                	jne    c0108fd6 <threadlist_isempty+0x34>
c0108fae:	83 ec 0c             	sub    $0xc,%esp
c0108fb1:	68 ac 1d 11 c0       	push   $0xc0111dac
c0108fb6:	6a 37                	push   $0x37
c0108fb8:	68 34 1b 11 c0       	push   $0xc0111b34
c0108fbd:	68 f2 1b 11 c0       	push   $0xc0111bf2
c0108fc2:	68 2b ff 10 c0       	push   $0xc010ff2b
c0108fc7:	e8 9c b2 ff ff       	call   c0104268 <print>
c0108fcc:	83 c4 20             	add    $0x20,%esp
c0108fcf:	e8 af 7f ff ff       	call   c0100f83 <backtrace>
c0108fd4:	fa                   	cli    
c0108fd5:	f4                   	hlt    

    return (tl->tl_count == 0);
c0108fd6:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c0108fda:	0f 94 c0             	sete   %al
}
c0108fdd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0108fe0:	c9                   	leave  
c0108fe1:	c3                   	ret    

c0108fe2 <threadlist_cleanup>:
    tl->tl_tail.tln_self = NULL;
    tl->tl_count = 0;
}

void
threadlist_cleanup(struct threadlist* tl) {
c0108fe2:	55                   	push   %ebp
c0108fe3:	89 e5                	mov    %esp,%ebp
c0108fe5:	53                   	push   %ebx
c0108fe6:	50                   	push   %eax
c0108fe7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(tl != NULL);
c0108fea:	85 db                	test   %ebx,%ebx
c0108fec:	75 28                	jne    c0109016 <threadlist_cleanup+0x34>
c0108fee:	83 ec 0c             	sub    $0xc,%esp
c0108ff1:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0108ff6:	6a 27                	push   $0x27
c0108ff8:	68 34 1b 11 c0       	push   $0xc0111b34
c0108ffd:	68 f2 1b 11 c0       	push   $0xc0111bf2
c0109002:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109007:	e8 5c b2 ff ff       	call   c0104268 <print>
c010900c:	83 c4 20             	add    $0x20,%esp
c010900f:	e8 6f 7f ff ff       	call   c0100f83 <backtrace>
c0109014:	fa                   	cli    
c0109015:	f4                   	hlt    
    assert(tl->tl_head.tln_next == &tl->tl_tail);
c0109016:	8d 43 0c             	lea    0xc(%ebx),%eax
c0109019:	39 43 04             	cmp    %eax,0x4(%ebx)
c010901c:	74 28                	je     c0109046 <threadlist_cleanup+0x64>
c010901e:	83 ec 0c             	sub    $0xc,%esp
c0109021:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0109026:	6a 28                	push   $0x28
c0109028:	68 34 1b 11 c0       	push   $0xc0111b34
c010902d:	68 fd 1b 11 c0       	push   $0xc0111bfd
c0109032:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109037:	e8 2c b2 ff ff       	call   c0104268 <print>
c010903c:	83 c4 20             	add    $0x20,%esp
c010903f:	e8 3f 7f ff ff       	call   c0100f83 <backtrace>
c0109044:	fa                   	cli    
c0109045:	f4                   	hlt    
    assert(tl->tl_head.tln_prev == NULL);
c0109046:	83 3b 00             	cmpl   $0x0,(%ebx)
c0109049:	74 28                	je     c0109073 <threadlist_cleanup+0x91>
c010904b:	83 ec 0c             	sub    $0xc,%esp
c010904e:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0109053:	6a 29                	push   $0x29
c0109055:	68 34 1b 11 c0       	push   $0xc0111b34
c010905a:	68 22 1c 11 c0       	push   $0xc0111c22
c010905f:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109064:	e8 ff b1 ff ff       	call   c0104268 <print>
c0109069:	83 c4 20             	add    $0x20,%esp
c010906c:	e8 12 7f ff ff       	call   c0100f83 <backtrace>
c0109071:	fa                   	cli    
c0109072:	f4                   	hlt    
    assert(tl->tl_tail.tln_next == NULL);
c0109073:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
c0109077:	74 28                	je     c01090a1 <threadlist_cleanup+0xbf>
c0109079:	83 ec 0c             	sub    $0xc,%esp
c010907c:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0109081:	6a 2a                	push   $0x2a
c0109083:	68 34 1b 11 c0       	push   $0xc0111b34
c0109088:	68 3f 1c 11 c0       	push   $0xc0111c3f
c010908d:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109092:	e8 d1 b1 ff ff       	call   c0104268 <print>
c0109097:	83 c4 20             	add    $0x20,%esp
c010909a:	e8 e4 7e ff ff       	call   c0100f83 <backtrace>
c010909f:	fa                   	cli    
c01090a0:	f4                   	hlt    
    assert(tl->tl_tail.tln_prev == &tl->tl_head);
c01090a1:	39 5b 0c             	cmp    %ebx,0xc(%ebx)
c01090a4:	74 28                	je     c01090ce <threadlist_cleanup+0xec>
c01090a6:	83 ec 0c             	sub    $0xc,%esp
c01090a9:	68 c0 1d 11 c0       	push   $0xc0111dc0
c01090ae:	6a 2b                	push   $0x2b
c01090b0:	68 34 1b 11 c0       	push   $0xc0111b34
c01090b5:	68 5c 1c 11 c0       	push   $0xc0111c5c
c01090ba:	68 2b ff 10 c0       	push   $0xc010ff2b
c01090bf:	e8 a4 b1 ff ff       	call   c0104268 <print>
c01090c4:	83 c4 20             	add    $0x20,%esp
c01090c7:	e8 b7 7e ff ff       	call   c0100f83 <backtrace>
c01090cc:	fa                   	cli    
c01090cd:	f4                   	hlt    
    assert(tl->tl_head.tln_self == NULL);
c01090ce:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
c01090d2:	74 28                	je     c01090fc <threadlist_cleanup+0x11a>
c01090d4:	83 ec 0c             	sub    $0xc,%esp
c01090d7:	68 c0 1d 11 c0       	push   $0xc0111dc0
c01090dc:	6a 2c                	push   $0x2c
c01090de:	68 34 1b 11 c0       	push   $0xc0111b34
c01090e3:	68 81 1c 11 c0       	push   $0xc0111c81
c01090e8:	68 2b ff 10 c0       	push   $0xc010ff2b
c01090ed:	e8 76 b1 ff ff       	call   c0104268 <print>
c01090f2:	83 c4 20             	add    $0x20,%esp
c01090f5:	e8 89 7e ff ff       	call   c0100f83 <backtrace>
c01090fa:	fa                   	cli    
c01090fb:	f4                   	hlt    
    assert(tl->tl_tail.tln_self == NULL);
c01090fc:	83 7b 14 00          	cmpl   $0x0,0x14(%ebx)
c0109100:	74 28                	je     c010912a <threadlist_cleanup+0x148>
c0109102:	83 ec 0c             	sub    $0xc,%esp
c0109105:	68 c0 1d 11 c0       	push   $0xc0111dc0
c010910a:	6a 2d                	push   $0x2d
c010910c:	68 34 1b 11 c0       	push   $0xc0111b34
c0109111:	68 9e 1c 11 c0       	push   $0xc0111c9e
c0109116:	68 2b ff 10 c0       	push   $0xc010ff2b
c010911b:	e8 48 b1 ff ff       	call   c0104268 <print>
c0109120:	83 c4 20             	add    $0x20,%esp
c0109123:	e8 5b 7e ff ff       	call   c0100f83 <backtrace>
c0109128:	fa                   	cli    
c0109129:	f4                   	hlt    

    assert(threadlist_isempty(tl));
c010912a:	83 ec 0c             	sub    $0xc,%esp
c010912d:	53                   	push   %ebx
c010912e:	e8 6f fe ff ff       	call   c0108fa2 <threadlist_isempty>
c0109133:	83 c4 10             	add    $0x10,%esp
c0109136:	84 c0                	test   %al,%al
c0109138:	75 28                	jne    c0109162 <threadlist_cleanup+0x180>
c010913a:	83 ec 0c             	sub    $0xc,%esp
c010913d:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0109142:	6a 2f                	push   $0x2f
c0109144:	68 34 1b 11 c0       	push   $0xc0111b34
c0109149:	68 bb 1c 11 c0       	push   $0xc0111cbb
c010914e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109153:	e8 10 b1 ff ff       	call   c0104268 <print>
c0109158:	83 c4 20             	add    $0x20,%esp
c010915b:	e8 23 7e ff ff       	call   c0100f83 <backtrace>
c0109160:	fa                   	cli    
c0109161:	f4                   	hlt    
    assert(tl->tl_count == 0);
c0109162:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c0109166:	74 28                	je     c0109190 <threadlist_cleanup+0x1ae>
c0109168:	83 ec 0c             	sub    $0xc,%esp
c010916b:	68 c0 1d 11 c0       	push   $0xc0111dc0
c0109170:	6a 30                	push   $0x30
c0109172:	68 34 1b 11 c0       	push   $0xc0111b34
c0109177:	68 d2 1c 11 c0       	push   $0xc0111cd2
c010917c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109181:	e8 e2 b0 ff ff       	call   c0104268 <print>
c0109186:	83 c4 20             	add    $0x20,%esp
c0109189:	e8 f5 7d ff ff       	call   c0100f83 <backtrace>
c010918e:	fa                   	cli    
c010918f:	f4                   	hlt    

    /* nothing (else) to do */
}
c0109190:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109193:	c9                   	leave  
c0109194:	c3                   	ret    

c0109195 <threadlist_addhead>:

////////////////////////////////////////////////////////////
// public

void
threadlist_addhead(struct threadlist* tl, struct thread* t) {
c0109195:	55                   	push   %ebp
c0109196:	89 e5                	mov    %esp,%ebp
c0109198:	56                   	push   %esi
c0109199:	53                   	push   %ebx
c010919a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010919d:	8b 75 0c             	mov    0xc(%ebp),%esi
    assert(tl != NULL);
c01091a0:	85 db                	test   %ebx,%ebx
c01091a2:	75 28                	jne    c01091cc <threadlist_addhead+0x37>
c01091a4:	83 ec 0c             	sub    $0xc,%esp
c01091a7:	68 98 1d 11 c0       	push   $0xc0111d98
c01091ac:	6a 7a                	push   $0x7a
c01091ae:	68 34 1b 11 c0       	push   $0xc0111b34
c01091b3:	68 f2 1b 11 c0       	push   $0xc0111bf2
c01091b8:	68 2b ff 10 c0       	push   $0xc010ff2b
c01091bd:	e8 a6 b0 ff ff       	call   c0104268 <print>
c01091c2:	83 c4 20             	add    $0x20,%esp
c01091c5:	e8 b9 7d ff ff       	call   c0100f83 <backtrace>
c01091ca:	fa                   	cli    
c01091cb:	f4                   	hlt    
    assert(t != NULL);
c01091cc:	85 f6                	test   %esi,%esi
c01091ce:	75 28                	jne    c01091f8 <threadlist_addhead+0x63>
c01091d0:	83 ec 0c             	sub    $0xc,%esp
c01091d3:	68 98 1d 11 c0       	push   $0xc0111d98
c01091d8:	6a 7b                	push   $0x7b
c01091da:	68 34 1b 11 c0       	push   $0xc0111b34
c01091df:	68 1f 19 11 c0       	push   $0xc011191f
c01091e4:	68 2b ff 10 c0       	push   $0xc010ff2b
c01091e9:	e8 7a b0 ff ff       	call   c0104268 <print>
c01091ee:	83 c4 20             	add    $0x20,%esp
c01091f1:	e8 8d 7d ff ff       	call   c0100f83 <backtrace>
c01091f6:	fa                   	cli    
c01091f7:	f4                   	hlt    

    threadlist_insertafternode(&tl->tl_head, t);
c01091f8:	89 f2                	mov    %esi,%edx
c01091fa:	89 d8                	mov    %ebx,%eax
c01091fc:	e8 4b fa ff ff       	call   c0108c4c <threadlist_insertafternode>
    tl->tl_count++;
c0109201:	ff 43 18             	incl   0x18(%ebx)
}
c0109204:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109207:	5b                   	pop    %ebx
c0109208:	5e                   	pop    %esi
c0109209:	5d                   	pop    %ebp
c010920a:	c3                   	ret    

c010920b <threadlist_addtail>:

void
threadlist_addtail(struct threadlist* tl, struct thread* t) {
c010920b:	55                   	push   %ebp
c010920c:	89 e5                	mov    %esp,%ebp
c010920e:	56                   	push   %esi
c010920f:	53                   	push   %ebx
c0109210:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0109213:	8b 75 0c             	mov    0xc(%ebp),%esi
    assert(tl != NULL);
c0109216:	85 db                	test   %ebx,%ebx
c0109218:	75 2b                	jne    c0109245 <threadlist_addtail+0x3a>
c010921a:	83 ec 0c             	sub    $0xc,%esp
c010921d:	68 68 1d 11 c0       	push   $0xc0111d68
c0109222:	68 83 00 00 00       	push   $0x83
c0109227:	68 34 1b 11 c0       	push   $0xc0111b34
c010922c:	68 f2 1b 11 c0       	push   $0xc0111bf2
c0109231:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109236:	e8 2d b0 ff ff       	call   c0104268 <print>
c010923b:	83 c4 20             	add    $0x20,%esp
c010923e:	e8 40 7d ff ff       	call   c0100f83 <backtrace>
c0109243:	fa                   	cli    
c0109244:	f4                   	hlt    
    assert(t != NULL);
c0109245:	85 f6                	test   %esi,%esi
c0109247:	75 2b                	jne    c0109274 <threadlist_addtail+0x69>
c0109249:	83 ec 0c             	sub    $0xc,%esp
c010924c:	68 68 1d 11 c0       	push   $0xc0111d68
c0109251:	68 84 00 00 00       	push   $0x84
c0109256:	68 34 1b 11 c0       	push   $0xc0111b34
c010925b:	68 1f 19 11 c0       	push   $0xc011191f
c0109260:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109265:	e8 fe af ff ff       	call   c0104268 <print>
c010926a:	83 c4 20             	add    $0x20,%esp
c010926d:	e8 11 7d ff ff       	call   c0100f83 <backtrace>
c0109272:	fa                   	cli    
c0109273:	f4                   	hlt    

    threadlist_insertbeforenode(t, &tl->tl_tail);
c0109274:	8d 53 0c             	lea    0xc(%ebx),%edx
c0109277:	89 f0                	mov    %esi,%eax
c0109279:	e8 53 fa ff ff       	call   c0108cd1 <threadlist_insertbeforenode>
    tl->tl_count++;
c010927e:	ff 43 18             	incl   0x18(%ebx)
}
c0109281:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109284:	5b                   	pop    %ebx
c0109285:	5e                   	pop    %esi
c0109286:	5d                   	pop    %ebp
c0109287:	c3                   	ret    

c0109288 <threadlist_remhead>:

struct thread*
threadlist_remhead(struct threadlist* tl) {
c0109288:	55                   	push   %ebp
c0109289:	89 e5                	mov    %esp,%ebp
c010928b:	56                   	push   %esi
c010928c:	53                   	push   %ebx
c010928d:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct threadlistnode* tln;

    assert(tl != NULL);
c0109290:	85 db                	test   %ebx,%ebx
c0109292:	75 2b                	jne    c01092bf <threadlist_remhead+0x37>
c0109294:	83 ec 0c             	sub    $0xc,%esp
c0109297:	68 38 1d 11 c0       	push   $0xc0111d38
c010929c:	68 8e 00 00 00       	push   $0x8e
c01092a1:	68 34 1b 11 c0       	push   $0xc0111b34
c01092a6:	68 f2 1b 11 c0       	push   $0xc0111bf2
c01092ab:	68 2b ff 10 c0       	push   $0xc010ff2b
c01092b0:	e8 b3 af ff ff       	call   c0104268 <print>
c01092b5:	83 c4 20             	add    $0x20,%esp
c01092b8:	e8 c6 7c ff ff       	call   c0100f83 <backtrace>
c01092bd:	fa                   	cli    
c01092be:	f4                   	hlt    

    tln = tl->tl_head.tln_next;
c01092bf:	8b 73 04             	mov    0x4(%ebx),%esi
    if (tln->tln_next == NULL)
        return NULL;
c01092c2:	31 c0                	xor    %eax,%eax
    struct threadlistnode* tln;

    assert(tl != NULL);

    tln = tl->tl_head.tln_next;
    if (tln->tln_next == NULL)
c01092c4:	83 7e 04 00          	cmpl   $0x0,0x4(%esi)
c01092c8:	74 3e                	je     c0109308 <threadlist_remhead+0x80>
        return NULL;

    threadlist_removenode(tln);
c01092ca:	89 f0                	mov    %esi,%eax
c01092cc:	e8 84 fa ff ff       	call   c0108d55 <threadlist_removenode>
    assert(tl->tl_count > 0);
c01092d1:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c01092d5:	75 2b                	jne    c0109302 <threadlist_remhead+0x7a>
c01092d7:	83 ec 0c             	sub    $0xc,%esp
c01092da:	68 38 1d 11 c0       	push   $0xc0111d38
c01092df:	68 95 00 00 00       	push   $0x95
c01092e4:	68 34 1b 11 c0       	push   $0xc0111b34
c01092e9:	68 e4 1c 11 c0       	push   $0xc0111ce4
c01092ee:	68 2b ff 10 c0       	push   $0xc010ff2b
c01092f3:	e8 70 af ff ff       	call   c0104268 <print>
c01092f8:	83 c4 20             	add    $0x20,%esp
c01092fb:	e8 83 7c ff ff       	call   c0100f83 <backtrace>
c0109300:	fa                   	cli    
c0109301:	f4                   	hlt    
    tl->tl_count--;
c0109302:	ff 4b 18             	decl   0x18(%ebx)
    return tln->tln_self;
c0109305:	8b 46 08             	mov    0x8(%esi),%eax
}
c0109308:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010930b:	5b                   	pop    %ebx
c010930c:	5e                   	pop    %esi
c010930d:	5d                   	pop    %ebp
c010930e:	c3                   	ret    

c010930f <threadlist_remtail>:

struct thread*
threadlist_remtail(struct threadlist* tl) {
c010930f:	55                   	push   %ebp
c0109310:	89 e5                	mov    %esp,%ebp
c0109312:	56                   	push   %esi
c0109313:	53                   	push   %ebx
c0109314:	8b 5d 08             	mov    0x8(%ebp),%ebx
    struct threadlistnode* tln;

    assert(tl != NULL);
c0109317:	85 db                	test   %ebx,%ebx
c0109319:	75 2b                	jne    c0109346 <threadlist_remtail+0x37>
c010931b:	83 ec 0c             	sub    $0xc,%esp
c010931e:	68 0c 1d 11 c0       	push   $0xc0111d0c
c0109323:	68 9e 00 00 00       	push   $0x9e
c0109328:	68 34 1b 11 c0       	push   $0xc0111b34
c010932d:	68 f2 1b 11 c0       	push   $0xc0111bf2
c0109332:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109337:	e8 2c af ff ff       	call   c0104268 <print>
c010933c:	83 c4 20             	add    $0x20,%esp
c010933f:	e8 3f 7c ff ff       	call   c0100f83 <backtrace>
c0109344:	fa                   	cli    
c0109345:	f4                   	hlt    

    tln = tl->tl_tail.tln_prev;
c0109346:	8b 73 0c             	mov    0xc(%ebx),%esi
    if (tln->tln_prev == NULL)
        return NULL;
c0109349:	31 c0                	xor    %eax,%eax
    struct threadlistnode* tln;

    assert(tl != NULL);

    tln = tl->tl_tail.tln_prev;
    if (tln->tln_prev == NULL)
c010934b:	83 3e 00             	cmpl   $0x0,(%esi)
c010934e:	74 3e                	je     c010938e <threadlist_remtail+0x7f>
        return NULL;

    threadlist_removenode(tln);
c0109350:	89 f0                	mov    %esi,%eax
c0109352:	e8 fe f9 ff ff       	call   c0108d55 <threadlist_removenode>
    assert(tl->tl_count > 0);
c0109357:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c010935b:	75 2b                	jne    c0109388 <threadlist_remtail+0x79>
c010935d:	83 ec 0c             	sub    $0xc,%esp
c0109360:	68 0c 1d 11 c0       	push   $0xc0111d0c
c0109365:	68 a5 00 00 00       	push   $0xa5
c010936a:	68 34 1b 11 c0       	push   $0xc0111b34
c010936f:	68 e4 1c 11 c0       	push   $0xc0111ce4
c0109374:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109379:	e8 ea ae ff ff       	call   c0104268 <print>
c010937e:	83 c4 20             	add    $0x20,%esp
c0109381:	e8 fd 7b ff ff       	call   c0100f83 <backtrace>
c0109386:	fa                   	cli    
c0109387:	f4                   	hlt    
    tl->tl_count--;
c0109388:	ff 4b 18             	decl   0x18(%ebx)
    return tln->tln_self;
c010938b:	8b 46 08             	mov    0x8(%esi),%eax
}
c010938e:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109391:	5b                   	pop    %ebx
c0109392:	5e                   	pop    %esi
c0109393:	5d                   	pop    %ebp
c0109394:	c3                   	ret    

c0109395 <threadlist_insertafter>:

void
threadlist_insertafter(struct threadlist* tl,
                       struct thread* onlist, struct thread* addee) {
c0109395:	55                   	push   %ebp
c0109396:	89 e5                	mov    %esp,%ebp
c0109398:	53                   	push   %ebx
c0109399:	50                   	push   %eax
c010939a:	8b 5d 08             	mov    0x8(%ebp),%ebx
    threadlist_insertafternode(&onlist->listnode, addee);
c010939d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093a0:	83 c0 04             	add    $0x4,%eax
c01093a3:	8b 55 10             	mov    0x10(%ebp),%edx
c01093a6:	e8 a1 f8 ff ff       	call   c0108c4c <threadlist_insertafternode>
    tl->tl_count++;
c01093ab:	ff 43 18             	incl   0x18(%ebx)
}
c01093ae:	5a                   	pop    %edx
c01093af:	5b                   	pop    %ebx
c01093b0:	5d                   	pop    %ebp
c01093b1:	c3                   	ret    

c01093b2 <threadlist_insertbefore>:

void
threadlist_insertbefore(struct threadlist* tl,
                        struct thread* addee, struct thread* onlist) {
c01093b2:	55                   	push   %ebp
c01093b3:	89 e5                	mov    %esp,%ebp
c01093b5:	53                   	push   %ebx
c01093b6:	50                   	push   %eax
c01093b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    threadlist_insertbeforenode(addee, &onlist->listnode);
c01093ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01093bd:	8d 50 04             	lea    0x4(%eax),%edx
c01093c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093c3:	e8 09 f9 ff ff       	call   c0108cd1 <threadlist_insertbeforenode>
    tl->tl_count++;
c01093c8:	ff 43 18             	incl   0x18(%ebx)
}
c01093cb:	5a                   	pop    %edx
c01093cc:	5b                   	pop    %ebx
c01093cd:	5d                   	pop    %ebp
c01093ce:	c3                   	ret    

c01093cf <threadlist_remove>:

void
threadlist_remove(struct threadlist* tl, struct thread* t) {
c01093cf:	55                   	push   %ebp
c01093d0:	89 e5                	mov    %esp,%ebp
c01093d2:	53                   	push   %ebx
c01093d3:	50                   	push   %eax
c01093d4:	8b 5d 08             	mov    0x8(%ebp),%ebx
    threadlist_removenode(&t->listnode);
c01093d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093da:	83 c0 04             	add    $0x4,%eax
c01093dd:	e8 73 f9 ff ff       	call   c0108d55 <threadlist_removenode>
    assert(tl->tl_count > 0);
c01093e2:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
c01093e6:	75 2b                	jne    c0109413 <threadlist_remove+0x44>
c01093e8:	83 ec 0c             	sub    $0xc,%esp
c01093eb:	68 f8 1c 11 c0       	push   $0xc0111cf8
c01093f0:	68 bb 00 00 00       	push   $0xbb
c01093f5:	68 34 1b 11 c0       	push   $0xc0111b34
c01093fa:	68 e4 1c 11 c0       	push   $0xc0111ce4
c01093ff:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109404:	e8 5f ae ff ff       	call   c0104268 <print>
c0109409:	83 c4 20             	add    $0x20,%esp
c010940c:	e8 72 7b ff ff       	call   c0100f83 <backtrace>
c0109411:	fa                   	cli    
c0109412:	f4                   	hlt    
    tl->tl_count--;
c0109413:	ff 4b 18             	decl   0x18(%ebx)
}
c0109416:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109419:	c9                   	leave  
c010941a:	c3                   	ret    

c010941b <switchframe_start>:

    panic("returned to switchframe_switch");
}

static void
switchframe_start(void) {
c010941b:	55                   	push   %ebp
c010941c:	89 e5                	mov    %esp,%ebp
c010941e:	83 ec 08             	sub    $0x8,%esp
    asm volatile(
c0109421:	52                   	push   %edx
c0109422:	51                   	push   %ecx
c0109423:	50                   	push   %eax
c0109424:	e8 3f f7 ff ff       	call   c0108b68 <thread_start>
        "\tpushl    %%eax\n"
        "\tcall     thread_start\n"
        : : : "memory"
    );

    panic("returned to switchframe_start");
c0109429:	68 10 1e 11 c0       	push   $0xc0111e10
c010942e:	68 70 1e 11 c0       	push   $0xc0111e70
c0109433:	6a 24                	push   $0x24
c0109435:	68 2e 1e 11 c0       	push   $0xc0111e2e
c010943a:	e8 36 a8 ff ff       	call   c0103c75 <_panic>
}
c010943f:	83 c4 10             	add    $0x10,%esp
c0109442:	c9                   	leave  
c0109443:	c3                   	ret    

c0109444 <switchframe_switch>:
#include <thread.h>
#include <debug.h>
#include <gdt.h>

void
switchframe_switch(struct trapframe* tf) {
c0109444:	55                   	push   %ebp
c0109445:	89 e5                	mov    %esp,%ebp
c0109447:	53                   	push   %ebx
c0109448:	50                   	push   %eax
c0109449:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(tf != NULL);
c010944c:	85 db                	test   %ebx,%ebx
c010944e:	75 28                	jne    c0109478 <switchframe_switch+0x34>
c0109450:	83 ec 0c             	sub    $0xc,%esp
c0109453:	68 84 1e 11 c0       	push   $0xc0111e84
c0109458:	6a 0b                	push   $0xb
c010945a:	68 2e 1e 11 c0       	push   $0xc0111e2e
c010945f:	68 43 1e 11 c0       	push   $0xc0111e43
c0109464:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109469:	e8 fa ad ff ff       	call   c0104268 <print>
c010946e:	83 c4 20             	add    $0x20,%esp
c0109471:	e8 0d 7b ff ff       	call   c0100f83 <backtrace>
c0109476:	fa                   	cli    
c0109477:	f4                   	hlt    

    asm volatile(
c0109478:	89 dc                	mov    %ebx,%esp
c010947a:	1f                   	pop    %ds
c010947b:	07                   	pop    %es
c010947c:	61                   	popa   
c010947d:	83 c4 08             	add    $0x8,%esp
c0109480:	cf                   	iret   
        "\taddl     $0x8,%%esp\n"
        "\tiret\n"
        : : "g" (tf) : "memory"
    );

    panic("returned to switchframe_switch");
c0109481:	68 4e 1e 11 c0       	push   $0xc0111e4e
c0109486:	68 84 1e 11 c0       	push   $0xc0111e84
c010948b:	6a 17                	push   $0x17
c010948d:	68 2e 1e 11 c0       	push   $0xc0111e2e
c0109492:	e8 de a7 ff ff       	call   c0103c75 <_panic>
}
c0109497:	83 c4 10             	add    $0x10,%esp
c010949a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010949d:	c9                   	leave  
c010949e:	c3                   	ret    

c010949f <switchframe_init>:
}

void
switchframe_init(struct thread* thread,
                 int (*entrypoint)(void* data1, unsigned long data2),
                 void* data1, unsigned long data2) {
c010949f:	55                   	push   %ebp
c01094a0:	89 e5                	mov    %esp,%ebp
c01094a2:	53                   	push   %ebx
c01094a3:	83 ec 08             	sub    $0x8,%esp
c01094a6:	8b 5d 08             	mov    0x8(%ebp),%ebx
    uint32_t stacktop = (uint32_t) thread->stack + STACK_SIZE;

    thread->context = (struct trapframe*) stacktop - 1;
c01094a9:	8b 43 24             	mov    0x24(%ebx),%eax
c01094ac:	05 bc 0f 00 00       	add    $0xfbc,%eax
c01094b1:	89 03                	mov    %eax,(%ebx)
    memset(thread->context, 0, sizeof(struct trapframe));
c01094b3:	6a 44                	push   $0x44
c01094b5:	6a 00                	push   $0x0
c01094b7:	50                   	push   %eax
c01094b8:	e8 6d b4 ff ff       	call   c010492a <memset>

    thread->context->cs = GD_KT;
c01094bd:	8b 03                	mov    (%ebx),%eax
c01094bf:	c7 40 34 08 00 00 00 	movl   $0x8,0x34(%eax)
    thread->context->ds = GD_KD;
c01094c6:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
    thread->context->es = GD_KD;
c01094cd:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    thread->context->ss = GD_KD;
c01094d3:	c7 40 40 10 00 00 00 	movl   $0x10,0x40(%eax)
    // thread->context->eflags = FL_IF;

    thread->context->eax = (uint32_t) entrypoint;
c01094da:	8b 55 0c             	mov    0xc(%ebp),%edx
c01094dd:	89 50 24             	mov    %edx,0x24(%eax)
    thread->context->ecx = (uint32_t) data1;
c01094e0:	8b 55 10             	mov    0x10(%ebp),%edx
c01094e3:	89 50 20             	mov    %edx,0x20(%eax)
    thread->context->edx = (uint32_t) data2;
c01094e6:	8b 55 14             	mov    0x14(%ebp),%edx
c01094e9:	89 50 1c             	mov    %edx,0x1c(%eax)
    thread->context->eip = (uint32_t) switchframe_start;
c01094ec:	c7 40 30 1b 94 10 c0 	movl   $0xc010941b,0x30(%eax)

    thread->context->ebp = (uint32_t) thread->context;
c01094f3:	89 40 10             	mov    %eax,0x10(%eax)
    thread->context->esp = (uint32_t) thread->context;
c01094f6:	89 40 3c             	mov    %eax,0x3c(%eax)
}
c01094f9:	83 c4 10             	add    $0x10,%esp
c01094fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01094ff:	c9                   	leave  
c0109500:	c3                   	ret    

c0109501 <cpu_create>:
#include <proc.h>
#include <cpuid.h>
#include <mp.h>

struct cpu*
cpu_create(uint8_t id) {
c0109501:	55                   	push   %ebp
c0109502:	89 e5                	mov    %esp,%ebp
c0109504:	57                   	push   %edi
c0109505:	56                   	push   %esi
c0109506:	53                   	push   %ebx
c0109507:	83 ec 38             	sub    $0x38,%esp
c010950a:	8b 75 08             	mov    0x8(%ebp),%esi
    struct cpu* cpu = kmalloc(sizeof(struct cpu));
c010950d:	68 c8 00 00 00       	push   $0xc8
c0109512:	e8 55 88 ff ff       	call   c0101d6c <kmalloc>
c0109517:	89 c3                	mov    %eax,%ebx
    if (cpu == NULL)
c0109519:	83 c4 10             	add    $0x10,%esp
c010951c:	85 c0                	test   %eax,%eax
c010951e:	75 19                	jne    c0109539 <cpu_create+0x38>
        panic("kmalloc returned NULL\n");
c0109520:	68 e0 34 11 c0       	push   $0xc01134e0
c0109525:	68 80 1f 11 c0       	push   $0xc0111f80
c010952a:	6a 11                	push   $0x11
c010952c:	68 97 1e 11 c0       	push   $0xc0111e97
c0109531:	e8 3f a7 ff ff       	call   c0103c75 <_panic>
c0109536:	83 c4 10             	add    $0x10,%esp

    cpu->self = cpu;
c0109539:	89 1b                	mov    %ebx,(%ebx)
    cpu->apicid = id;
c010953b:	89 f0                	mov    %esi,%eax
c010953d:	88 43 04             	mov    %al,0x4(%ebx)

    cpu->thread = NULL;
c0109540:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    threadlist_init(&cpu->zombie_threads);
c0109547:	83 ec 0c             	sub    $0xc,%esp
c010954a:	8d 43 10             	lea    0x10(%ebx),%eax
c010954d:	50                   	push   %eax
c010954e:	e8 eb f9 ff ff       	call   c0108f3e <threadlist_init>

    cpu->status = CPU_STARTED;
c0109553:	c6 43 05 01          	movb   $0x1,0x5(%ebx)
    threadlist_init(&cpu->active_threads);
c0109557:	8d 43 2c             	lea    0x2c(%ebx),%eax
c010955a:	89 04 24             	mov    %eax,(%esp)
c010955d:	e8 dc f9 ff ff       	call   c0108f3e <threadlist_init>
    spinlock_init(&cpu->active_threads_lock);
c0109562:	8d 43 48             	lea    0x48(%ebx),%eax
c0109565:	89 04 24             	mov    %eax,(%esp)
c0109568:	e8 80 a0 ff ff       	call   c01035ed <spinlock_init>

    // cpu->ipi_pending = 0;
    // cpu->numshootdown = 0;
    // spinlock_init(&cpu->ipi_lock);

    char namebuf[24] = {0};
c010956d:	8d 7d d0             	lea    -0x30(%ebp),%edi
c0109570:	b9 06 00 00 00       	mov    $0x6,%ecx
c0109575:	31 c0                	xor    %eax,%eax
c0109577:	f3 ab                	rep stos %eax,%es:(%edi)
    snprintf(namebuf, sizeof(namebuf), "boot thread %d", cpu->apicid);
c0109579:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
c010957d:	50                   	push   %eax
c010957e:	68 a1 1e 11 c0       	push   $0xc0111ea1
c0109583:	6a 18                	push   $0x18
c0109585:	8d 7d d0             	lea    -0x30(%ebp),%edi
c0109588:	57                   	push   %edi
c0109589:	e8 d7 b1 ff ff       	call   c0104765 <snprintf>
    cpu->thread = thread_create(namebuf);
c010958e:	83 c4 14             	add    $0x14,%esp
c0109591:	57                   	push   %edi
c0109592:	e8 cd e9 ff ff       	call   c0107f64 <thread_create>
c0109597:	89 43 08             	mov    %eax,0x8(%ebx)
    if (cpu->thread == NULL)
c010959a:	83 c4 10             	add    $0x10,%esp
c010959d:	85 c0                	test   %eax,%eax
c010959f:	75 19                	jne    c01095ba <cpu_create+0xb9>
        panic("thread_create failed\n");
c01095a1:	68 b0 1e 11 c0       	push   $0xc0111eb0
c01095a6:	68 80 1f 11 c0       	push   $0xc0111f80
c01095ab:	6a 25                	push   $0x25
c01095ad:	68 97 1e 11 c0       	push   $0xc0111e97
c01095b2:	e8 be a6 ff ff       	call   c0103c75 <_panic>
c01095b7:	83 c4 10             	add    $0x10,%esp

    if (id != 0) {
c01095ba:	89 f0                	mov    %esi,%eax
c01095bc:	84 c0                	test   %al,%al
c01095be:	74 30                	je     c01095f0 <cpu_create+0xef>
        int result = proc_addthread(kproc, cpu->thread);
c01095c0:	50                   	push   %eax
c01095c1:	50                   	push   %eax
c01095c2:	ff 73 08             	pushl  0x8(%ebx)
c01095c5:	ff 35 00 f0 18 c0    	pushl  0xc018f000
c01095cb:	e8 4b 0b 00 00       	call   c010a11b <proc_addthread>
        if (result)
c01095d0:	83 c4 10             	add    $0x10,%esp
c01095d3:	85 c0                	test   %eax,%eax
c01095d5:	74 19                	je     c01095f0 <cpu_create+0xef>
            panic("proc_addthread\n");
c01095d7:	68 c6 1e 11 c0       	push   $0xc0111ec6
c01095dc:	68 80 1f 11 c0       	push   $0xc0111f80
c01095e1:	6a 2a                	push   $0x2a
c01095e3:	68 97 1e 11 c0       	push   $0xc0111e97
c01095e8:	e8 88 a6 ff ff       	call   c0103c75 <_panic>
c01095ed:	83 c4 10             	add    $0x10,%esp
    }

    return cpu;
}
c01095f0:	89 d8                	mov    %ebx,%eax
c01095f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01095f5:	5b                   	pop    %ebx
c01095f6:	5e                   	pop    %esi
c01095f7:	5f                   	pop    %edi
c01095f8:	5d                   	pop    %ebp
c01095f9:	c3                   	ret    

c01095fa <init_smp>:

uint8_t apicids[NCPU] = {0};

void
init_smp(void) {
c01095fa:	55                   	push   %ebp
c01095fb:	89 e5                	mov    %esp,%ebp
c01095fd:	57                   	push   %edi
c01095fe:	56                   	push   %esi
c01095ff:	53                   	push   %ebx
c0109600:	83 ec 1c             	sub    $0x1c,%esp
    extern size_t lapic_addr;
    extern size_t ioapic_addr;

    assert(ncpu == 0);
c0109603:	80 3d a6 d2 14 c0 00 	cmpb   $0x0,0xc014d2a6
c010960a:	74 28                	je     c0109634 <init_smp+0x3a>
c010960c:	83 ec 0c             	sub    $0xc,%esp
c010960f:	68 74 1f 11 c0       	push   $0xc0111f74
c0109614:	6a 37                	push   $0x37
c0109616:	68 97 1e 11 c0       	push   $0xc0111e97
c010961b:	68 d6 1e 11 c0       	push   $0xc0111ed6
c0109620:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109625:	e8 3e ac ff ff       	call   c0104268 <print>
c010962a:	83 c4 20             	add    $0x20,%esp
c010962d:	e8 51 79 ff ff       	call   c0100f83 <backtrace>
c0109632:	fa                   	cli    
c0109633:	f4                   	hlt    

    // 5.2.12.1 MADT Processor Local APIC / SAPIC Structure Entry Order
    // * initialize processors in the order that they appear in MADT;
    // * the boot processor is the first processor entry.
    struct acpi_table_madt* madt = acpi_get_table(ACPI_SIG_MADT);
c0109634:	83 ec 0c             	sub    $0xc,%esp
c0109637:	68 e0 1e 11 c0       	push   $0xc0111ee0
c010963c:	e8 15 8d ff ff       	call   c0102356 <acpi_get_table>
c0109641:	89 c3                	mov    %eax,%ebx
    if (!madt)
c0109643:	83 c4 10             	add    $0x10,%esp
c0109646:	85 c0                	test   %eax,%eax
c0109648:	75 19                	jne    c0109663 <init_smp+0x69>
        panic("ACPI: No MADT found");
c010964a:	68 e5 1e 11 c0       	push   $0xc0111ee5
c010964f:	68 74 1f 11 c0       	push   $0xc0111f74
c0109654:	6a 3e                	push   $0x3e
c0109656:	68 97 1e 11 c0       	push   $0xc0111e97
c010965b:	e8 15 a6 ff ff       	call   c0103c75 <_panic>
c0109660:	83 c4 10             	add    $0x10,%esp

    lapic_addr = madt->address;
c0109663:	8b 43 24             	mov    0x24(%ebx),%eax
c0109666:	a3 e8 df 14 c0       	mov    %eax,0xc014dfe8

    struct acpi_subtable_header* hdr = (void*) madt + sizeof(*madt);
c010966b:	8d 53 2c             	lea    0x2c(%ebx),%edx
    struct acpi_subtable_header* end = (void*) madt + madt->header.length;
c010966e:	8b 43 04             	mov    0x4(%ebx),%eax
c0109671:	01 d8                	add    %ebx,%eax
c0109673:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109676:	a0 a6 d2 14 c0       	mov    0xc014d2a6,%al
c010967b:	8b 3d e4 df 14 c0    	mov    0xc014dfe4,%edi
    for (; hdr < end; hdr = (void*) hdr + hdr->length) {
c0109681:	31 db                	xor    %ebx,%ebx
c0109683:	31 f6                	xor    %esi,%esi
c0109685:	3b 55 e4             	cmp    -0x1c(%ebp),%edx
c0109688:	73 3f                	jae    c01096c9 <init_smp+0xcf>
        switch (hdr->type) {
c010968a:	8a 0a                	mov    (%edx),%cl
c010968c:	84 c9                	test   %cl,%cl
c010968e:	74 06                	je     c0109696 <init_smp+0x9c>
c0109690:	fe c9                	dec    %cl
c0109692:	74 22                	je     c01096b6 <init_smp+0xbc>
c0109694:	eb 2b                	jmp    c01096c1 <init_smp+0xc7>
            case ACPI_MADT_TYPE_LOCAL_APIC: {
                struct acpi_madt_local_apic* p = (void*) hdr;
                bool enabled = p->lapic_flags & BIT(0);
                if (ncpu < NCPU && enabled)
c0109696:	3c 07                	cmp    $0x7,%al
c0109698:	0f 96 c1             	setbe  %cl
c010969b:	22 4a 04             	and    0x4(%edx),%cl
c010969e:	88 4d e3             	mov    %cl,-0x1d(%ebp)
c01096a1:	74 1e                	je     c01096c1 <init_smp+0xc7>
                    apicids[ncpu++] = p->id;
c01096a3:	0f b6 f0             	movzbl %al,%esi
c01096a6:	8a 4a 03             	mov    0x3(%edx),%cl
c01096a9:	88 8e 60 cc 14 c0    	mov    %cl,-0x3feb33a0(%esi)
c01096af:	0f b6 75 e3          	movzbl -0x1d(%ebp),%esi
c01096b3:	40                   	inc    %eax
c01096b4:	eb 0b                	jmp    c01096c1 <init_smp+0xc7>
                break;
            }
            case ACPI_MADT_TYPE_IO_APIC: {
                struct acpi_madt_io_apic* p = (void*) hdr;
                if (p->global_irq_base == 0)
c01096b6:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
c01096ba:	75 05                	jne    c01096c1 <init_smp+0xc7>
                    ioapic_addr = p->address;
c01096bc:	8b 7a 04             	mov    0x4(%edx),%edi
c01096bf:	b3 01                	mov    $0x1,%bl

    lapic_addr = madt->address;

    struct acpi_subtable_header* hdr = (void*) madt + sizeof(*madt);
    struct acpi_subtable_header* end = (void*) madt + madt->header.length;
    for (; hdr < end; hdr = (void*) hdr + hdr->length) {
c01096c1:	0f b6 4a 01          	movzbl 0x1(%edx),%ecx
c01096c5:	01 ca                	add    %ecx,%edx
c01096c7:	eb bc                	jmp    c0109685 <init_smp+0x8b>
c01096c9:	89 f2                	mov    %esi,%edx
c01096cb:	84 d2                	test   %dl,%dl
c01096cd:	74 05                	je     c01096d4 <init_smp+0xda>
c01096cf:	a2 a6 d2 14 c0       	mov    %al,0xc014d2a6
c01096d4:	84 db                	test   %bl,%bl
c01096d6:	74 06                	je     c01096de <init_smp+0xe4>
c01096d8:	89 3d e4 df 14 c0    	mov    %edi,0xc014dfe4
                break;
        }
    }

    // print("SMP: %d CPU(s)\n", ncpu);
}
c01096de:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01096e1:	5b                   	pop    %ebx
c01096e2:	5e                   	pop    %esi
c01096e3:	5f                   	pop    %edi
c01096e4:	5d                   	pop    %ebp
c01096e5:	c3                   	ret    

c01096e6 <cpu_idle>:

void
cpu_idle(void) {
c01096e6:	55                   	push   %ebp
c01096e7:	89 e5                	mov    %esp,%ebp
c01096e9:	53                   	push   %ebx
c01096ea:	52                   	push   %edx
    print("thisthread: %08p\n", thisthread);
c01096eb:	e8 c6 91 ff ff       	call   c01028b6 <cpunum>
c01096f0:	51                   	push   %ecx
c01096f1:	51                   	push   %ecx
c01096f2:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01096f9:	ff 70 08             	pushl  0x8(%eax)
c01096fc:	68 f9 1e 11 c0       	push   $0xc0111ef9
c0109701:	e8 62 ab ff ff       	call   c0104268 <print>
    panic("cpu_idle on cpunum %u", cpunum());
c0109706:	e8 ab 91 ff ff       	call   c01028b6 <cpunum>
c010970b:	89 04 24             	mov    %eax,(%esp)
c010970e:	68 0b 1f 11 c0       	push   $0xc0111f0b
c0109713:	68 68 1f 11 c0       	push   $0xc0111f68
c0109718:	6a 5e                	push   $0x5e
c010971a:	68 97 1e 11 c0       	push   $0xc0111e97
c010971f:	e8 51 a5 ff ff       	call   c0103c75 <_panic>
    thisproc = NULL;
c0109724:	83 c4 20             	add    $0x20,%esp
c0109727:	e8 8a 91 ff ff       	call   c01028b6 <cpunum>
c010972c:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109733:	8b 40 08             	mov    0x8(%eax),%eax
c0109736:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

    lcr3(PADDR(kpd));
c010973d:	8b 1d a8 d2 14 c0    	mov    0xc014d2a8,%ebx

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c0109743:	81 fb ff ff ff bf    	cmp    $0xbfffffff,%ebx
c0109749:	77 22                	ja     c010976d <cpu_idle+0x87>
        panic(file, line, "PADDR called with invalid va %08x", va);
c010974b:	50                   	push   %eax
c010974c:	53                   	push   %ebx
c010974d:	68 61 05 11 c0       	push   $0xc0110561
c0109752:	6a 61                	push   $0x61
c0109754:	68 97 1e 11 c0       	push   $0xc0111e97
c0109759:	68 60 1f 11 c0       	push   $0xc0111f60
c010975e:	6a 65                	push   $0x65
c0109760:	68 83 05 11 c0       	push   $0xc0110583
c0109765:	e8 0b a5 ff ff       	call   c0103c75 <_panic>
c010976a:	83 c4 20             	add    $0x20,%esp
    return val;
}

static inline void
lcr3(uint32_t val) {
    asm volatile("movl %0,%%cr3" : : "r" (val));
c010976d:	81 c3 00 00 00 40    	add    $0x40000000,%ebx
c0109773:	0f 22 db             	mov    %ebx,%cr3

    // Mark that this CPU is in the HALT state, so that when
    // timer interupts come in, we know we should re-acquire the
    // big kernel lock
    xchg((uint32_t*) &thiscpu->status, CPU_IDLE);
c0109776:	e8 3b 91 ff ff       	call   c01028b6 <cpunum>
c010977b:	8b 14 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%edx
static inline uint32_t
xchg(volatile uint32_t* addr, uint32_t newval) {
    uint32_t result;

    // The + in "+m" denotes a read-modify-write operand.
    asm volatile("lock; xchgl %0, %1"
c0109782:	b8 03 00 00 00       	mov    $0x3,%eax
c0109787:	f0 87 42 05          	lock xchg %eax,0x5(%edx)
    spinlock_acquire(&kernel_spinlock);
}

static inline void
unlock_kernel(void) {
    spinlock_release(&kernel_spinlock);
c010978b:	83 ec 0c             	sub    $0xc,%esp
c010978e:	68 7c c9 14 c0       	push   $0xc014c97c
c0109793:	e8 51 9f ff ff       	call   c01036e9 <spinlock_release>
    asm volatile("pause");
c0109798:	f3 90                	pause  

    // Release the big kernel lock as if we were "leaving" the kernel
    unlock_kernel();

    panic("cpu_idle not implemented");
c010979a:	68 21 1f 11 c0       	push   $0xc0111f21
c010979f:	68 68 1f 11 c0       	push   $0xc0111f68
c01097a4:	6a 6b                	push   $0x6b
c01097a6:	68 97 1e 11 c0       	push   $0xc0111e97
c01097ab:	e8 c5 a4 ff ff       	call   c0103c75 <_panic>
    //     "1:\n"
    //     "hlt\n"
    //     "jmp 1b\n"
    //     : : "a" (ebstack)
    // );
}
c01097b0:	83 c4 20             	add    $0x20,%esp
c01097b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01097b6:	c9                   	leave  
c01097b7:	c3                   	ret    

c01097b8 <init_cpu>:

void
init_cpu(void) {
c01097b8:	55                   	push   %ebp
c01097b9:	89 e5                	mov    %esp,%ebp
c01097bb:	83 ec 08             	sub    $0x8,%esp
    cpuid_info();
c01097be:	e8 66 03 00 00       	call   c0109b29 <cpuid_info>

    assert(ncpu > 0);
c01097c3:	80 3d a6 d2 14 c0 00 	cmpb   $0x0,0xc014d2a6
c01097ca:	75 28                	jne    c01097f4 <init_cpu+0x3c>
c01097cc:	83 ec 0c             	sub    $0xc,%esp
c01097cf:	68 54 1f 11 c0       	push   $0xc0111f54
c01097d4:	6a 7f                	push   $0x7f
c01097d6:	68 97 1e 11 c0       	push   $0xc0111e97
c01097db:	68 3a 1f 11 c0       	push   $0xc0111f3a
c01097e0:	68 2b ff 10 c0       	push   $0xc010ff2b
c01097e5:	e8 7e aa ff ff       	call   c0104268 <print>
c01097ea:	83 c4 20             	add    $0x20,%esp
c01097ed:	e8 91 77 ff ff       	call   c0100f83 <backtrace>
c01097f2:	fa                   	cli    
c01097f3:	f4                   	hlt    

    bootcpu = cpu_create(apicids[0]);
c01097f4:	83 ec 0c             	sub    $0xc,%esp
c01097f7:	0f b6 05 60 cc 14 c0 	movzbl 0xc014cc60,%eax
c01097fe:	50                   	push   %eax
c01097ff:	e8 fd fc ff ff       	call   c0109501 <cpu_create>
c0109804:	a3 80 d2 14 c0       	mov    %eax,0xc014d280
    assert(cpus[0] != NULL);
c0109809:	83 c4 10             	add    $0x10,%esp
c010980c:	85 c0                	test   %eax,%eax
c010980e:	75 2b                	jne    c010983b <init_cpu+0x83>
c0109810:	83 ec 0c             	sub    $0xc,%esp
c0109813:	68 54 1f 11 c0       	push   $0xc0111f54
c0109818:	68 82 00 00 00       	push   $0x82
c010981d:	68 97 1e 11 c0       	push   $0xc0111e97
c0109822:	68 43 1f 11 c0       	push   $0xc0111f43
c0109827:	68 2b ff 10 c0       	push   $0xc010ff2b
c010982c:	e8 37 aa ff ff       	call   c0104268 <print>
c0109831:	83 c4 20             	add    $0x20,%esp
c0109834:	e8 4a 77 ff ff       	call   c0100f83 <backtrace>
c0109839:	fa                   	cli    
c010983a:	f4                   	hlt    

    thisthread = bootthread = bootcpu->thread;
c010983b:	e8 76 90 ff ff       	call   c01028b6 <cpunum>
c0109840:	8b 14 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%edx
c0109847:	a1 80 d2 14 c0       	mov    0xc014d280,%eax
c010984c:	8b 40 08             	mov    0x8(%eax),%eax
c010984f:	a3 e0 d1 14 c0       	mov    %eax,0xc014d1e0
c0109854:	89 42 08             	mov    %eax,0x8(%edx)

    thisthread->cpu = bootcpu;
c0109857:	e8 5a 90 ff ff       	call   c01028b6 <cpunum>
c010985c:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109863:	8b 40 08             	mov    0x8(%eax),%eax
c0109866:	8b 15 80 d2 14 c0    	mov    0xc014d280,%edx
c010986c:	89 50 1c             	mov    %edx,0x1c(%eax)
    // thisthread->page_directory = kpd;
    // thisthread->stack = stackreg_get();

    mp_lgdt();
c010986f:	e8 eb 01 00 00       	call   c0109a5f <mp_lgdt>
    mp_ltr();
c0109874:	e8 13 02 00 00       	call   c0109a8c <mp_ltr>
    mp_lidt();
}
c0109879:	c9                   	leave  
    // thisthread->page_directory = kpd;
    // thisthread->stack = stackreg_get();

    mp_lgdt();
    mp_ltr();
    mp_lidt();
c010987a:	e9 9d 02 00 00       	jmp    c0109b1c <mp_lidt>

c010987f <ipi_send>:
     */
    int ts_placeholder;
};

void
ipi_send(struct cpu* target, int code) {
c010987f:	55                   	push   %ebp
c0109880:	89 e5                	mov    %esp,%ebp
c0109882:	57                   	push   %edi
c0109883:	56                   	push   %esi
c0109884:	53                   	push   %ebx
c0109885:	83 ec 0c             	sub    $0xc,%esp
c0109888:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010988b:	8b 75 0c             	mov    0xc(%ebp),%esi
    assert(code >= 0 && code < 32);
c010988e:	83 fe 1f             	cmp    $0x1f,%esi
c0109891:	76 28                	jbe    c01098bb <ipi_send+0x3c>
c0109893:	83 ec 0c             	sub    $0xc,%esp
c0109896:	68 e0 1f 11 c0       	push   $0xc0111fe0
c010989b:	6a 12                	push   $0x12
c010989d:	68 8b 1f 11 c0       	push   $0xc0111f8b
c01098a2:	68 95 1f 11 c0       	push   $0xc0111f95
c01098a7:	68 2b ff 10 c0       	push   $0xc010ff2b
c01098ac:	e8 b7 a9 ff ff       	call   c0104268 <print>
c01098b1:	83 c4 20             	add    $0x20,%esp
c01098b4:	e8 ca 76 ff ff       	call   c0100f83 <backtrace>
c01098b9:	fa                   	cli    
c01098ba:	f4                   	hlt    

    spinlock_acquire(&target->ipi_lock);
c01098bb:	8d 7b 58             	lea    0x58(%ebx),%edi
c01098be:	83 ec 0c             	sub    $0xc,%esp
c01098c1:	57                   	push   %edi
c01098c2:	e8 6c 9d ff ff       	call   c0103633 <spinlock_acquire>
    target->ipi_pending |= (uint32_t)1 << code;
c01098c7:	b8 01 00 00 00       	mov    $0x1,%eax
c01098cc:	89 f1                	mov    %esi,%ecx
c01098ce:	d3 e0                	shl    %cl,%eax
c01098d0:	09 43 50             	or     %eax,0x50(%ebx)
    // mainbus_send_ipi(target);
    spinlock_release(&target->ipi_lock);
c01098d3:	83 c4 10             	add    $0x10,%esp
c01098d6:	89 7d 08             	mov    %edi,0x8(%ebp)
}
c01098d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01098dc:	5b                   	pop    %ebx
c01098dd:	5e                   	pop    %esi
c01098de:	5f                   	pop    %edi
c01098df:	5d                   	pop    %ebp
    assert(code >= 0 && code < 32);

    spinlock_acquire(&target->ipi_lock);
    target->ipi_pending |= (uint32_t)1 << code;
    // mainbus_send_ipi(target);
    spinlock_release(&target->ipi_lock);
c01098e0:	e9 04 9e ff ff       	jmp    c01036e9 <spinlock_release>

c01098e5 <ipi_broadcast>:
}

void
ipi_broadcast(int code) {
c01098e5:	55                   	push   %ebp
c01098e6:	89 e5                	mov    %esp,%ebp
c01098e8:	56                   	push   %esi
c01098e9:	53                   	push   %ebx
    for (size_t i = 0; i < ncpu; i++)
c01098ea:	31 db                	xor    %ebx,%ebx
c01098ec:	0f b6 05 a6 d2 14 c0 	movzbl 0xc014d2a6,%eax
c01098f3:	39 c3                	cmp    %eax,%ebx
c01098f5:	73 2e                	jae    c0109925 <ipi_broadcast+0x40>
        if (cpus[i] != thiscpu->self)
c01098f7:	8b 34 9d 80 d2 14 c0 	mov    -0x3feb2d80(,%ebx,4),%esi
c01098fe:	e8 b3 8f ff ff       	call   c01028b6 <cpunum>
c0109903:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010990a:	3b 30                	cmp    (%eax),%esi
c010990c:	74 14                	je     c0109922 <ipi_broadcast+0x3d>
            ipi_send(cpus[i], code);
c010990e:	50                   	push   %eax
c010990f:	50                   	push   %eax
c0109910:	ff 75 08             	pushl  0x8(%ebp)
c0109913:	ff 34 9d 80 d2 14 c0 	pushl  -0x3feb2d80(,%ebx,4)
c010991a:	e8 60 ff ff ff       	call   c010987f <ipi_send>
c010991f:	83 c4 10             	add    $0x10,%esp
    spinlock_release(&target->ipi_lock);
}

void
ipi_broadcast(int code) {
    for (size_t i = 0; i < ncpu; i++)
c0109922:	43                   	inc    %ebx
c0109923:	eb c7                	jmp    c01098ec <ipi_broadcast+0x7>
        if (cpus[i] != thiscpu->self)
            ipi_send(cpus[i], code);
}
c0109925:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109928:	5b                   	pop    %ebx
c0109929:	5e                   	pop    %esi
c010992a:	5d                   	pop    %ebp
c010992b:	c3                   	ret    

c010992c <interprocessor_interrupt>:

//     spinlock_release(&target->ipi_lock);
// }

void
interprocessor_interrupt(void) {
c010992c:	55                   	push   %ebp
c010992d:	89 e5                	mov    %esp,%ebp
c010992f:	53                   	push   %ebx
c0109930:	51                   	push   %ecx
    spinlock_acquire(&thiscpu->ipi_lock);
c0109931:	e8 80 8f ff ff       	call   c01028b6 <cpunum>
c0109936:	83 ec 0c             	sub    $0xc,%esp
c0109939:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109940:	83 c0 58             	add    $0x58,%eax
c0109943:	50                   	push   %eax
c0109944:	e8 ea 9c ff ff       	call   c0103633 <spinlock_acquire>
    uint32_t bits = thiscpu->ipi_pending;
c0109949:	e8 68 8f ff ff       	call   c01028b6 <cpunum>
c010994e:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109955:	8b 58 50             	mov    0x50(%eax),%ebx

    if (bits & BIT(IPI_PANIC)) {
c0109958:	83 c4 10             	add    $0x10,%esp
c010995b:	f6 c3 01             	test   $0x1,%bl
c010995e:	74 1b                	je     c010997b <interprocessor_interrupt+0x4f>
        /* panic on another cpu - just stop dead */
        spinlock_release(&thiscpu->ipi_lock);
c0109960:	e8 51 8f ff ff       	call   c01028b6 <cpunum>
c0109965:	83 ec 0c             	sub    $0xc,%esp
c0109968:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010996f:	83 c0 58             	add    $0x58,%eax
c0109972:	50                   	push   %eax
c0109973:	e8 71 9d ff ff       	call   c01036e9 <spinlock_release>
c0109978:	83 c4 10             	add    $0x10,%esp
        // cpu_halt();
    }
    if (bits & BIT(IPI_OFFLINE)) {
c010997b:	f6 c3 02             	test   $0x2,%bl
c010997e:	0f 84 9d 00 00 00    	je     c0109a21 <interprocessor_interrupt+0xf5>
        /* offline request */
        spinlock_release(&thiscpu->ipi_lock);
c0109984:	e8 2d 8f ff ff       	call   c01028b6 <cpunum>
c0109989:	83 ec 0c             	sub    $0xc,%esp
c010998c:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109993:	83 c0 58             	add    $0x58,%eax
c0109996:	50                   	push   %eax
c0109997:	e8 4d 9d ff ff       	call   c01036e9 <spinlock_release>
        spinlock_acquire(&thiscpu->active_threads_lock);
c010999c:	e8 15 8f ff ff       	call   c01028b6 <cpunum>
c01099a1:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01099a8:	83 c0 48             	add    $0x48,%eax
c01099ab:	89 04 24             	mov    %eax,(%esp)
c01099ae:	e8 80 9c ff ff       	call   c0103633 <spinlock_acquire>
        if (thiscpu->status != CPU_IDLE)
c01099b3:	e8 fe 8e ff ff       	call   c01028b6 <cpunum>
c01099b8:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01099bf:	8a 40 05             	mov    0x5(%eax),%al
c01099c2:	83 c4 10             	add    $0x10,%esp
c01099c5:	3c 03                	cmp    $0x3,%al
c01099c7:	74 20                	je     c01099e9 <interprocessor_interrupt+0xbd>
            print("cpu%d: offline: warning: not idle\n", thiscpu->apicid);
c01099c9:	e8 e8 8e ff ff       	call   c01028b6 <cpunum>
c01099ce:	52                   	push   %edx
c01099cf:	52                   	push   %edx
c01099d0:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01099d7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01099db:	50                   	push   %eax
c01099dc:	68 ac 1f 11 c0       	push   $0xc0111fac
c01099e1:	e8 82 a8 ff ff       	call   c0104268 <print>
c01099e6:	83 c4 10             	add    $0x10,%esp
        spinlock_release(&thiscpu->active_threads_lock);
c01099e9:	e8 c8 8e ff ff       	call   c01028b6 <cpunum>
c01099ee:	83 ec 0c             	sub    $0xc,%esp
c01099f1:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c01099f8:	83 c0 48             	add    $0x48,%eax
c01099fb:	50                   	push   %eax
c01099fc:	e8 e8 9c ff ff       	call   c01036e9 <spinlock_release>
        print("cpu%d: offline.\n", thiscpu->apicid);
c0109a01:	e8 b0 8e ff ff       	call   c01028b6 <cpunum>
c0109a06:	5a                   	pop    %edx
c0109a07:	59                   	pop    %ecx
c0109a08:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109a0f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0109a13:	50                   	push   %eax
c0109a14:	68 cf 1f 11 c0       	push   $0xc0111fcf
c0109a19:	e8 4a a8 ff ff       	call   c0104268 <print>
c0109a1e:	83 c4 10             	add    $0x10,%esp
        /*
         * The cpu has already unidled itself to take the
         * interrupt; don't need to do anything else.
         */
    }
    if (bits & BIT(IPI_TLBSHOOTDOWN))
c0109a21:	80 e3 08             	and    $0x8,%bl
c0109a24:	74 06                	je     c0109a2c <interprocessor_interrupt+0x100>
}

static inline void
tlbflush(void) {
    uint32_t cr3;
    asm volatile("movl %%cr3,%0" : "=r" (cr3));
c0109a26:	0f 20 d8             	mov    %cr3,%eax
    asm volatile("movl %0,%%cr3" : : "r" (cr3));
c0109a29:	0f 22 d8             	mov    %eax,%cr3
        tlbflush();

    thiscpu->ipi_pending = 0;
c0109a2c:	e8 85 8e ff ff       	call   c01028b6 <cpunum>
c0109a31:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109a38:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
    spinlock_release(&thiscpu->ipi_lock);
c0109a3f:	e8 72 8e ff ff       	call   c01028b6 <cpunum>
c0109a44:	83 ec 0c             	sub    $0xc,%esp
c0109a47:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109a4e:	83 c0 58             	add    $0x58,%eax
c0109a51:	50                   	push   %eax
c0109a52:	e8 92 9c ff ff       	call   c01036e9 <spinlock_release>
}
c0109a57:	83 c4 10             	add    $0x10,%esp
c0109a5a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109a5d:	c9                   	leave  
c0109a5e:	c3                   	ret    

c0109a5f <mp_lgdt>:
    mp_lidt();

}

void
mp_lgdt(void) {
c0109a5f:	55                   	push   %ebp
c0109a60:	89 e5                	mov    %esp,%ebp
    asm volatile("lidt (%0)" : : "r" (p));
}

static inline void
lgdt(void* p) {
    asm volatile("lgdt (%0)" : : "r" (p));
c0109a62:	b8 a0 d2 14 c0       	mov    $0xc014d2a0,%eax
c0109a67:	0f 01 10             	lgdtl  (%eax)
    lgdt(&gdt_addr);

    asm volatile("movw %%ax,%%gs" : : "a" (GD_UD | DPL_USER));
c0109a6a:	b8 23 00 00 00       	mov    $0x23,%eax
c0109a6f:	8e e8                	mov    %eax,%gs
    asm volatile("movw %%ax,%%fs" : : "a" (GD_UD | DPL_USER));
c0109a71:	8e e0                	mov    %eax,%fs

    asm volatile("movw %%ax,%%es" : : "a" (GD_KD | DPL_KERN));
c0109a73:	b8 10 00 00 00       	mov    $0x10,%eax
c0109a78:	8e c0                	mov    %eax,%es
    asm volatile("movw %%ax,%%ds" : : "a" (GD_KD | DPL_KERN));
c0109a7a:	8e d8                	mov    %eax,%ds
    asm volatile("movw %%ax,%%ss" : : "a" (GD_KD | DPL_KERN));
c0109a7c:	8e d0                	mov    %eax,%ss

    asm volatile("ljmp %0,$1f\n 1:\n" : : "i" (GD_KT));
c0109a7e:	ea 85 9a 10 c0 08 00 	ljmp   $0x8,$0xc0109a85
}

static inline void
lldt(uint16_t sel) {
    asm volatile("lldt %0" : : "r" (sel));
c0109a85:	31 c0                	xor    %eax,%eax
c0109a87:	0f 00 d0             	lldt   %ax

    lldt(0);
}
c0109a8a:	5d                   	pop    %ebp
c0109a8b:	c3                   	ret    

c0109a8c <mp_ltr>:

// Initialize and load the per-CPU TSS and IDT
void
mp_ltr(void) {
c0109a8c:	55                   	push   %ebp
c0109a8d:	89 e5                	mov    %esp,%ebp
c0109a8f:	53                   	push   %ebx
c0109a90:	50                   	push   %eax
    // LAB 4: Your code here:

    // Setup a TSS so that we get the right stack
    // when we trap to the kernel.
    int i = cpunum();
c0109a91:	e8 20 8e ff ff       	call   c01028b6 <cpunum>
c0109a96:	89 c3                	mov    %eax,%ebx
    // thiscpu->ts.ts_esp0 = (uint32_t) KSTACKTOP;
    thiscpu->ts.ts_esp0 = (uint32_t) percpu_kstacks[i];
c0109a98:	e8 19 8e ff ff       	call   c01028b6 <cpunum>
c0109a9d:	8b 14 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%edx
c0109aa4:	89 d8                	mov    %ebx,%eax
c0109aa6:	c1 e0 0f             	shl    $0xf,%eax
c0109aa9:	05 00 e0 14 c0       	add    $0xc014e000,%eax
c0109aae:	89 42 64             	mov    %eax,0x64(%edx)
    thiscpu->ts.ts_ss0 = GD_KD;
c0109ab1:	e8 00 8e ff ff       	call   c01028b6 <cpunum>
c0109ab6:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109abd:	66 c7 40 68 10 00    	movw   $0x10,0x68(%eax)

    // Initialize the TSS slot of the gdt.

    gdt_set_gate16(GDT_TSS + i, (uint32_t) &thiscpu->ts, sizeof(struct taskstate) - 1, DPL_KERN, STS_T32A);
c0109ac3:	e8 ee 8d ff ff       	call   c01028b6 <cpunum>
c0109ac8:	83 ec 0c             	sub    $0xc,%esp
c0109acb:	6a 09                	push   $0x9
c0109acd:	6a 00                	push   $0x0
c0109acf:	6a 67                	push   $0x67
c0109ad1:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c0109ad8:	83 c0 60             	add    $0x60,%eax
c0109adb:	50                   	push   %eax
c0109adc:	8d 43 05             	lea    0x5(%ebx),%eax
c0109adf:	0f b6 c0             	movzbl %al,%eax
c0109ae2:	50                   	push   %eax
c0109ae3:	e8 28 67 ff ff       	call   c0100210 <gdt_set_gate16>
    gdt[GDT_TSS + i].app = 0;   // system not application
c0109ae8:	80 24 dd 2d d2 14 c0 	andb   $0xef,-0x3feb2dd3(,%ebx,8)
c0109aef:	ef 
}

static inline void
ltr(uint16_t sel) {
    asm volatile("ltr %0" : : "r" (sel));
c0109af0:	8d 1c dd 28 00 00 00 	lea    0x28(,%ebx,8),%ebx
c0109af7:	0f 00 db             	ltr    %bx

    // Load the TSS selector (like other segment selectors, the
    // bottom three bits are special; we leave them 0)
    ltr((GDT_TSS + i) << 3);

}
c0109afa:	83 c4 20             	add    $0x20,%esp
c0109afd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109b00:	c9                   	leave  
c0109b01:	c3                   	ret    

c0109b02 <mp_main>:
#include <mp.h>
#include <gdt.h>
#include <x86.h>

void
mp_main(void) {
c0109b02:	55                   	push   %ebp
c0109b03:	89 e5                	mov    %esp,%ebp
c0109b05:	83 ec 08             	sub    $0x8,%esp
    mp_lgdt();
c0109b08:	e8 52 ff ff ff       	call   c0109a5f <mp_lgdt>
    mp_ltr();
c0109b0d:	e8 7a ff ff ff       	call   c0109a8c <mp_ltr>
    asm volatile("invlpg (%0)" : : "r" (addr) : "memory");
}

static inline void
lidt(void* p) {
    asm volatile("lidt (%0)" : : "r" (p));
c0109b12:	b8 b0 d2 14 c0       	mov    $0xc014d2b0,%eax
c0109b17:	0f 01 18             	lidtl  (%eax)
    mp_lidt();

}
c0109b1a:	c9                   	leave  
c0109b1b:	c3                   	ret    

c0109b1c <mp_lidt>:
    ltr((GDT_TSS + i) << 3);

}

void
mp_lidt(void) {
c0109b1c:	55                   	push   %ebp
c0109b1d:	89 e5                	mov    %esp,%ebp
c0109b1f:	b8 b0 d2 14 c0       	mov    $0xc014d2b0,%eax
c0109b24:	0f 01 18             	lidtl  (%eax)
    extern struct idt_ptr idtp;
    lidt(&idtp);
}
c0109b27:	5d                   	pop    %ebp
c0109b28:	c3                   	ret    

c0109b29 <cpuid_info>:
cpuid_has(uint32_t* feature, unsigned int bit) {
    return feature[bit / 32] & BIT(bit % 32);
}

void
cpuid_info(void) {
c0109b29:	55                   	push   %ebp
c0109b2a:	89 e5                	mov    %esp,%ebp
c0109b2c:	56                   	push   %esi
c0109b2d:	53                   	push   %ebx
}

static inline void
cpuid(uint32_t info, uint32_t* eaxp, uint32_t* ebxp, uint32_t* ecxp, uint32_t* edxp) {
    uint32_t eax, ebx, ecx, edx;
    asm volatile("cpuid"
c0109b2e:	b8 00 00 00 80       	mov    $0x80000000,%eax
c0109b33:	0f a2                	cpuid  
    uint32_t eax, brand[12], feature[CPUID_NFLAGS] = {0};

    cpuid(0x80000000, &eax, NULL, NULL, NULL);
    if (eax < 0x80000004)
c0109b35:	3d 03 00 00 80       	cmp    $0x80000003,%eax
c0109b3a:	77 1c                	ja     c0109b58 <cpuid_info+0x2f>
        panic("CPU too old!");
c0109b3c:	68 e9 1f 11 c0       	push   $0xc0111fe9
c0109b41:	68 60 20 11 c0       	push   $0xc0112060
c0109b46:	68 0d 01 00 00       	push   $0x10d
c0109b4b:	68 f6 1f 11 c0       	push   $0xc0111ff6
c0109b50:	e8 20 a1 ff ff       	call   c0103c75 <_panic>
c0109b55:	83 c4 10             	add    $0x10,%esp
c0109b58:	b8 02 00 00 80       	mov    $0x80000002,%eax
c0109b5d:	0f a2                	cpuid  
c0109b5f:	b8 03 00 00 80       	mov    $0x80000003,%eax
c0109b64:	0f a2                	cpuid  
c0109b66:	b8 04 00 00 80       	mov    $0x80000004,%eax
c0109b6b:	0f a2                	cpuid  
c0109b6d:	b8 01 00 00 00       	mov    $0x1,%eax
c0109b72:	0f a2                	cpuid  
c0109b74:	89 d6                	mov    %edx,%esi
c0109b76:	b8 01 00 00 80       	mov    $0x80000001,%eax
c0109b7b:	0f a2                	cpuid  
          &feature[CPUID_1_ECX], &feature[CPUID_1_EDX]);
    cpuid(0x80000001, NULL, NULL,
          &feature[CPUID_80000001_ECX], &feature[CPUID_80000001_EDX]);
    // print_feature(feature);
    // Check feature bits.
    assert(cpuid_has(feature, CPUID_PSE));
c0109b7d:	f7 c6 08 00 00 00    	test   $0x8,%esi
c0109b83:	75 2b                	jne    c0109bb0 <cpuid_info+0x87>
c0109b85:	83 ec 0c             	sub    $0xc,%esp
c0109b88:	68 60 20 11 c0       	push   $0xc0112060
c0109b8d:	68 1a 01 00 00       	push   $0x11a
c0109b92:	68 f6 1f 11 c0       	push   $0xc0111ff6
c0109b97:	68 02 20 11 c0       	push   $0xc0112002
c0109b9c:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109ba1:	e8 c2 a6 ff ff       	call   c0104268 <print>
c0109ba6:	83 c4 20             	add    $0x20,%esp
c0109ba9:	e8 d5 73 ff ff       	call   c0100f83 <backtrace>
c0109bae:	fa                   	cli    
c0109baf:	f4                   	hlt    
    assert(cpuid_has(feature, CPUID_APIC));
c0109bb0:	f7 c6 00 02 00 00    	test   $0x200,%esi
c0109bb6:	75 2b                	jne    c0109be3 <cpuid_info+0xba>
c0109bb8:	83 ec 0c             	sub    $0xc,%esp
c0109bbb:	68 60 20 11 c0       	push   $0xc0112060
c0109bc0:	68 1b 01 00 00       	push   $0x11b
c0109bc5:	68 f6 1f 11 c0       	push   $0xc0111ff6
c0109bca:	68 20 20 11 c0       	push   $0xc0112020
c0109bcf:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109bd4:	e8 8f a6 ff ff       	call   c0104268 <print>
c0109bd9:	83 c4 20             	add    $0x20,%esp
c0109bdc:	e8 a2 73 ff ff       	call   c0100f83 <backtrace>
c0109be1:	fa                   	cli    
c0109be2:	f4                   	hlt    
    assert(cpuid_has(feature, CPUID_TSC));
c0109be3:	83 e6 10             	and    $0x10,%esi
c0109be6:	75 2b                	jne    c0109c13 <cpuid_info+0xea>
c0109be8:	83 ec 0c             	sub    $0xc,%esp
c0109beb:	68 60 20 11 c0       	push   $0xc0112060
c0109bf0:	68 1c 01 00 00       	push   $0x11c
c0109bf5:	68 f6 1f 11 c0       	push   $0xc0111ff6
c0109bfa:	68 3f 20 11 c0       	push   $0xc011203f
c0109bff:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109c04:	e8 5f a6 ff ff       	call   c0104268 <print>
c0109c09:	83 c4 20             	add    $0x20,%esp
c0109c0c:	e8 72 73 ff ff       	call   c0100f83 <backtrace>
c0109c11:	fa                   	cli    
c0109c12:	f4                   	hlt    
}
c0109c13:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109c16:	5b                   	pop    %ebx
c0109c17:	5e                   	pop    %esi
c0109c18:	5d                   	pop    %ebp
c0109c19:	c3                   	ret    

c0109c1a <region_alloc>:
    kfree(proc->name);
    kfree(proc);
}

static void
region_alloc(struct proc* proc, void* va, size_t len) {
c0109c1a:	55                   	push   %ebp
c0109c1b:	89 e5                	mov    %esp,%ebp
c0109c1d:	57                   	push   %edi
c0109c1e:	56                   	push   %esi
c0109c1f:	53                   	push   %ebx
c0109c20:	83 ec 1c             	sub    $0x1c,%esp
c0109c23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109c26:	89 d6                	mov    %edx,%esi
c0109c28:	89 cf                	mov    %ecx,%edi
    assert(proc != NULL);
c0109c2a:	85 c0                	test   %eax,%eax
c0109c2c:	75 28                	jne    c0109c56 <region_alloc+0x3c>
c0109c2e:	83 ec 0c             	sub    $0xc,%esp
c0109c31:	68 c4 21 11 c0       	push   $0xc01121c4
c0109c36:	6a 59                	push   $0x59
c0109c38:	68 6b 20 11 c0       	push   $0xc011206b
c0109c3d:	68 66 21 11 c0       	push   $0xc0112166
c0109c42:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109c47:	e8 1c a6 ff ff       	call   c0104268 <print>
c0109c4c:	83 c4 20             	add    $0x20,%esp
c0109c4f:	e8 2f 73 ff ff       	call   c0100f83 <backtrace>
c0109c54:	fa                   	cli    
c0109c55:	f4                   	hlt    
    assert(va != NULL);
c0109c56:	85 f6                	test   %esi,%esi
c0109c58:	75 28                	jne    c0109c82 <region_alloc+0x68>
c0109c5a:	83 ec 0c             	sub    $0xc,%esp
c0109c5d:	68 c4 21 11 c0       	push   $0xc01121c4
c0109c62:	6a 5a                	push   $0x5a
c0109c64:	68 6b 20 11 c0       	push   $0xc011206b
c0109c69:	68 77 20 11 c0       	push   $0xc0112077
c0109c6e:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109c73:	e8 f0 a5 ff ff       	call   c0104268 <print>
c0109c78:	83 c4 20             	add    $0x20,%esp
c0109c7b:	e8 03 73 ff ff       	call   c0100f83 <backtrace>
c0109c80:	fa                   	cli    
c0109c81:	f4                   	hlt    
    assert(va < va + len);
c0109c82:	85 ff                	test   %edi,%edi
c0109c84:	7f 28                	jg     c0109cae <region_alloc+0x94>
c0109c86:	83 ec 0c             	sub    $0xc,%esp
c0109c89:	68 c4 21 11 c0       	push   $0xc01121c4
c0109c8e:	6a 5b                	push   $0x5b
c0109c90:	68 6b 20 11 c0       	push   $0xc011206b
c0109c95:	68 82 20 11 c0       	push   $0xc0112082
c0109c9a:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109c9f:	e8 c4 a5 ff ff       	call   c0104268 <print>
c0109ca4:	83 c4 20             	add    $0x20,%esp
c0109ca7:	e8 d7 72 ff ff       	call   c0100f83 <backtrace>
c0109cac:	fa                   	cli    
c0109cad:	f4                   	hlt    

    void* beg = ROUNDDOWN(va, PG_SIZE);
c0109cae:	89 f3                	mov    %esi,%ebx
c0109cb0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
    void* end = ROUNDUP(va + len, PG_SIZE);
c0109cb6:	8d b4 3e ff 0f 00 00 	lea    0xfff(%esi,%edi,1),%esi
c0109cbd:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi

    assert(beg < end);
c0109cc3:	39 f3                	cmp    %esi,%ebx
c0109cc5:	72 34                	jb     c0109cfb <region_alloc+0xe1>
c0109cc7:	83 ec 0c             	sub    $0xc,%esp
c0109cca:	68 c4 21 11 c0       	push   $0xc01121c4
c0109ccf:	6a 60                	push   $0x60
c0109cd1:	68 6b 20 11 c0       	push   $0xc011206b
c0109cd6:	68 90 20 11 c0       	push   $0xc0112090
c0109cdb:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109ce0:	e8 83 a5 ff ff       	call   c0104268 <print>
c0109ce5:	83 c4 20             	add    $0x20,%esp
c0109ce8:	e8 96 72 ff ff       	call   c0100f83 <backtrace>
c0109ced:	fa                   	cli    
c0109cee:	f4                   	hlt    
c0109cef:	eb 46                	jmp    c0109d37 <region_alloc+0x11d>

    for (void* i = beg; i < end; i += PG_SIZE) {
c0109cf1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
c0109cf7:	39 de                	cmp    %ebx,%esi
c0109cf9:	76 3c                	jbe    c0109d37 <region_alloc+0x11d>
        size_t pno = pp_alloc();
c0109cfb:	e8 9d 75 ff ff       	call   c010129d <pp_alloc>

        if (page_insert(proc->page_directory, pno, i, true, true) == ENOMEM)
c0109d00:	83 ec 0c             	sub    $0xc,%esp
c0109d03:	6a 01                	push   $0x1
c0109d05:	6a 01                	push   $0x1
c0109d07:	53                   	push   %ebx
c0109d08:	50                   	push   %eax
c0109d09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d0c:	ff 70 18             	pushl  0x18(%eax)
c0109d0f:	e8 b8 7a ff ff       	call   c01017cc <page_insert>
c0109d14:	83 c4 20             	add    $0x20,%esp
c0109d17:	83 f8 02             	cmp    $0x2,%eax
c0109d1a:	75 d5                	jne    c0109cf1 <region_alloc+0xd7>
            panic("allocation attempt failed");
c0109d1c:	68 9a 20 11 c0       	push   $0xc011209a
c0109d21:	68 c4 21 11 c0       	push   $0xc01121c4
c0109d26:	6a 66                	push   $0x66
c0109d28:	68 6b 20 11 c0       	push   $0xc011206b
c0109d2d:	e8 43 9f ff ff       	call   c0103c75 <_panic>
c0109d32:	83 c4 10             	add    $0x10,%esp
c0109d35:	eb ba                	jmp    c0109cf1 <region_alloc+0xd7>
    }
}
c0109d37:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0109d3a:	5b                   	pop    %ebx
c0109d3b:	5e                   	pop    %esi
c0109d3c:	5f                   	pop    %edi
c0109d3d:	5d                   	pop    %ebp
c0109d3e:	c3                   	ret    

c0109d3f <proc_create>:

    kproc = proc;
}

struct proc*
proc_create(const char* name) {
c0109d3f:	55                   	push   %ebp
c0109d40:	89 e5                	mov    %esp,%ebp
c0109d42:	56                   	push   %esi
c0109d43:	53                   	push   %ebx
c0109d44:	8b 75 08             	mov    0x8(%ebp),%esi
    struct proc* proc;

    proc = kmalloc(sizeof(*proc));
c0109d47:	83 ec 0c             	sub    $0xc,%esp
c0109d4a:	6a 38                	push   $0x38
c0109d4c:	e8 1b 80 ff ff       	call   c0101d6c <kmalloc>
c0109d51:	89 c3                	mov    %eax,%ebx
    if (proc == NULL)
c0109d53:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0109d56:	31 c0                	xor    %eax,%eax
struct proc*
proc_create(const char* name) {
    struct proc* proc;

    proc = kmalloc(sizeof(*proc));
    if (proc == NULL)
c0109d58:	85 db                	test   %ebx,%ebx
c0109d5a:	0f 84 89 00 00 00    	je     c0109de9 <proc_create+0xaa>
        return NULL;
    proc->name = strdup(name);
c0109d60:	83 ec 0c             	sub    $0xc,%esp
c0109d63:	56                   	push   %esi
c0109d64:	e8 21 ac ff ff       	call   c010498a <strdup>
c0109d69:	89 03                	mov    %eax,(%ebx)
    if (proc->name == NULL) {
c0109d6b:	83 c4 10             	add    $0x10,%esp
c0109d6e:	85 c0                	test   %eax,%eax
c0109d70:	75 10                	jne    c0109d82 <proc_create+0x43>
        kfree(proc);
c0109d72:	83 ec 0c             	sub    $0xc,%esp
c0109d75:	53                   	push   %ebx
c0109d76:	e8 f1 80 ff ff       	call   c0101e6c <kfree>
        return NULL;
c0109d7b:	83 c4 10             	add    $0x10,%esp
c0109d7e:	31 c0                	xor    %eax,%eax
c0109d80:	eb 67                	jmp    c0109de9 <proc_create+0xaa>
    }

    spinlock_init(&proc->lock);
c0109d82:	83 ec 0c             	sub    $0xc,%esp
c0109d85:	8d 43 04             	lea    0x4(%ebx),%eax
c0109d88:	50                   	push   %eax
c0109d89:	e8 5f 98 ff ff       	call   c01035ed <spinlock_init>
    threadarray_init(&proc->threads);
c0109d8e:	8d 43 0c             	lea    0xc(%ebx),%eax
c0109d91:	89 04 24             	mov    %eax,(%esp)
c0109d94:	e8 f8 e0 ff ff       	call   c0107e91 <threadarray_init>

    proc->pid = pidreg_getpid();
c0109d99:	e8 91 07 00 00       	call   c010a52f <pidreg_getpid>
c0109d9e:	89 43 1c             	mov    %eax,0x1c(%ebx)

    proc->child_procs = list_create();
c0109da1:	e8 b1 bd ff ff       	call   c0105b57 <list_create>
c0109da6:	89 43 20             	mov    %eax,0x20(%ebx)
    proc->child_lock = lock_create(name);
c0109da9:	89 34 24             	mov    %esi,(%esp)
c0109dac:	e8 c2 91 ff ff       	call   c0102f73 <lock_create>
c0109db1:	89 43 24             	mov    %eax,0x24(%ebx)

    proc->parent = NULL;
c0109db4:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
    proc->rval = 0;
c0109dbb:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
    proc->psem = semaphore_create("waitpid_psem", 0);
c0109dc2:	58                   	pop    %eax
c0109dc3:	5a                   	pop    %edx
c0109dc4:	6a 00                	push   $0x0
c0109dc6:	68 b4 20 11 c0       	push   $0xc01120b4
c0109dcb:	e8 79 95 ff ff       	call   c0103349 <semaphore_create>
c0109dd0:	89 43 30             	mov    %eax,0x30(%ebx)
    proc->csem = semaphore_create("waitpid_csem", 0);
c0109dd3:	59                   	pop    %ecx
c0109dd4:	5e                   	pop    %esi
c0109dd5:	6a 00                	push   $0x0
c0109dd7:	68 c1 20 11 c0       	push   $0xc01120c1
c0109ddc:	e8 68 95 ff ff       	call   c0103349 <semaphore_create>
c0109de1:	89 43 34             	mov    %eax,0x34(%ebx)

    return proc;
c0109de4:	83 c4 10             	add    $0x10,%esp
c0109de7:	89 d8                	mov    %ebx,%eax
}
c0109de9:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0109dec:	5b                   	pop    %ebx
c0109ded:	5e                   	pop    %esi
c0109dee:	5d                   	pop    %ebp
c0109def:	c3                   	ret    

c0109df0 <proc_destroy>:

void
proc_destroy(struct proc* proc) {
c0109df0:	55                   	push   %ebp
c0109df1:	89 e5                	mov    %esp,%ebp
c0109df3:	53                   	push   %ebx
c0109df4:	50                   	push   %eax
c0109df5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(proc != NULL);
c0109df8:	85 db                	test   %ebx,%ebx
c0109dfa:	75 28                	jne    c0109e24 <proc_destroy+0x34>
c0109dfc:	83 ec 0c             	sub    $0xc,%esp
c0109dff:	68 f8 21 11 c0       	push   $0xc01121f8
c0109e04:	6a 43                	push   $0x43
c0109e06:	68 6b 20 11 c0       	push   $0xc011206b
c0109e0b:	68 66 21 11 c0       	push   $0xc0112166
c0109e10:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109e15:	e8 4e a4 ff ff       	call   c0104268 <print>
c0109e1a:	83 c4 20             	add    $0x20,%esp
c0109e1d:	e8 61 71 ff ff       	call   c0100f83 <backtrace>
c0109e22:	fa                   	cli    
c0109e23:	f4                   	hlt    
    assert(proc != kproc);
c0109e24:	3b 1d 00 f0 18 c0    	cmp    0xc018f000,%ebx
c0109e2a:	75 28                	jne    c0109e54 <proc_destroy+0x64>
c0109e2c:	83 ec 0c             	sub    $0xc,%esp
c0109e2f:	68 f8 21 11 c0       	push   $0xc01121f8
c0109e34:	6a 44                	push   $0x44
c0109e36:	68 6b 20 11 c0       	push   $0xc011206b
c0109e3b:	68 ce 20 11 c0       	push   $0xc01120ce
c0109e40:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109e45:	e8 1e a4 ff ff       	call   c0104268 <print>
c0109e4a:	83 c4 20             	add    $0x20,%esp
c0109e4d:	e8 31 71 ff ff       	call   c0100f83 <backtrace>
c0109e52:	fa                   	cli    
c0109e53:	f4                   	hlt    

    // page directory!

    threadarray_cleanup(&proc->threads);
c0109e54:	83 ec 0c             	sub    $0xc,%esp
c0109e57:	8d 43 0c             	lea    0xc(%ebx),%eax
c0109e5a:	50                   	push   %eax
c0109e5b:	e8 3a e0 ff ff       	call   c0107e9a <threadarray_cleanup>
    spinlock_cleanup(&proc->lock);
c0109e60:	8d 43 04             	lea    0x4(%ebx),%eax
c0109e63:	89 04 24             	mov    %eax,(%esp)
c0109e66:	e8 1a 99 ff ff       	call   c0103785 <spinlock_cleanup>

    pidreg_returnpid(proc->pid);
c0109e6b:	58                   	pop    %eax
c0109e6c:	ff 73 1c             	pushl  0x1c(%ebx)
c0109e6f:	e8 be 08 00 00       	call   c010a732 <pidreg_returnpid>

    list_destroy(proc->child_procs);
c0109e74:	5a                   	pop    %edx
c0109e75:	ff 73 20             	pushl  0x20(%ebx)
c0109e78:	e8 58 c2 ff ff       	call   c01060d5 <list_destroy>
    lock_destroy(proc->child_lock);
c0109e7d:	59                   	pop    %ecx
c0109e7e:	ff 73 24             	pushl  0x24(%ebx)
c0109e81:	e8 70 91 ff ff       	call   c0102ff6 <lock_destroy>

    semaphore_destroy(proc->psem);
c0109e86:	58                   	pop    %eax
c0109e87:	ff 73 30             	pushl  0x30(%ebx)
c0109e8a:	e8 35 95 ff ff       	call   c01033c4 <semaphore_destroy>
    semaphore_destroy(proc->csem);
c0109e8f:	58                   	pop    %eax
c0109e90:	ff 73 34             	pushl  0x34(%ebx)
c0109e93:	e8 2c 95 ff ff       	call   c01033c4 <semaphore_destroy>

    kfree(proc->name);
c0109e98:	58                   	pop    %eax
c0109e99:	ff 33                	pushl  (%ebx)
c0109e9b:	e8 cc 7f ff ff       	call   c0101e6c <kfree>
    kfree(proc);
c0109ea0:	83 c4 10             	add    $0x10,%esp
c0109ea3:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c0109ea6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109ea9:	c9                   	leave  

    semaphore_destroy(proc->psem);
    semaphore_destroy(proc->csem);

    kfree(proc->name);
    kfree(proc);
c0109eaa:	e9 bd 7f ff ff       	jmp    c0101e6c <kfree>

c0109eaf <proc_program>:

    region_alloc(proc, (void*) (USTACKTOP - PG_SIZE), PG_SIZE);
}

struct proc *
proc_program(const char* name, uint8_t* binary) {
c0109eaf:	55                   	push   %ebp
c0109eb0:	89 e5                	mov    %esp,%ebp
c0109eb2:	57                   	push   %edi
c0109eb3:	56                   	push   %esi
c0109eb4:	53                   	push   %ebx
c0109eb5:	83 ec 2c             	sub    $0x2c,%esp
c0109eb8:	8b 7d 0c             	mov    0xc(%ebp),%edi
    assert(name != NULL);
c0109ebb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ebf:	75 2b                	jne    c0109eec <proc_program+0x3d>
c0109ec1:	83 ec 0c             	sub    $0xc,%esp
c0109ec4:	68 e8 21 11 c0       	push   $0xc01121e8
c0109ec9:	68 95 00 00 00       	push   $0x95
c0109ece:	68 6b 20 11 c0       	push   $0xc011206b
c0109ed3:	68 92 18 11 c0       	push   $0xc0111892
c0109ed8:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109edd:	e8 86 a3 ff ff       	call   c0104268 <print>
c0109ee2:	83 c4 20             	add    $0x20,%esp
c0109ee5:	e8 99 70 ff ff       	call   c0100f83 <backtrace>
c0109eea:	fa                   	cli    
c0109eeb:	f4                   	hlt    
    assert(binary != NULL);
c0109eec:	85 ff                	test   %edi,%edi
c0109eee:	75 2b                	jne    c0109f1b <proc_program+0x6c>
c0109ef0:	83 ec 0c             	sub    $0xc,%esp
c0109ef3:	68 e8 21 11 c0       	push   $0xc01121e8
c0109ef8:	68 96 00 00 00       	push   $0x96
c0109efd:	68 6b 20 11 c0       	push   $0xc011206b
c0109f02:	68 dc 20 11 c0       	push   $0xc01120dc
c0109f07:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109f0c:	e8 57 a3 ff ff       	call   c0104268 <print>
c0109f11:	83 c4 20             	add    $0x20,%esp
c0109f14:	e8 6a 70 ff ff       	call   c0100f83 <backtrace>
c0109f19:	fa                   	cli    
c0109f1a:	f4                   	hlt    

    struct proc *proc = proc_create(name);
c0109f1b:	83 ec 0c             	sub    $0xc,%esp
c0109f1e:	ff 75 08             	pushl  0x8(%ebp)
c0109f21:	e8 19 fe ff ff       	call   c0109d3f <proc_create>
c0109f26:	89 c6                	mov    %eax,%esi
    if (proc == NULL)
c0109f28:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0109f2b:	31 c0                	xor    %eax,%eax
proc_program(const char* name, uint8_t* binary) {
    assert(name != NULL);
    assert(binary != NULL);

    struct proc *proc = proc_create(name);
    if (proc == NULL)
c0109f2d:	85 f6                	test   %esi,%esi
c0109f2f:	0f 84 de 01 00 00    	je     c010a113 <proc_program+0x264>
        return NULL;

    if((proc->page_directory = pgdir_create()) == NULL) {
c0109f35:	e8 66 7b ff ff       	call   c0101aa0 <pgdir_create>
c0109f3a:	89 46 18             	mov    %eax,0x18(%esi)
c0109f3d:	85 c0                	test   %eax,%eax
c0109f3f:	75 13                	jne    c0109f54 <proc_program+0xa5>
        proc_destroy(proc);
c0109f41:	83 ec 0c             	sub    $0xc,%esp
c0109f44:	56                   	push   %esi
c0109f45:	e8 a6 fe ff ff       	call   c0109df0 <proc_destroy>
        return NULL;
c0109f4a:	83 c4 10             	add    $0x10,%esp
c0109f4d:	31 c0                	xor    %eax,%eax
c0109f4f:	e9 bf 01 00 00       	jmp    c010a113 <proc_program+0x264>
    }

    proc->pid = pidreg_getpid();
c0109f54:	e8 d6 05 00 00       	call   c010a52f <pidreg_getpid>
c0109f59:	89 46 1c             	mov    %eax,0x1c(%esi)
}

static void
load_icode(struct proc* proc, uint8_t* binary, const char* name) {
    assert(proc != NULL);
    assert(binary != NULL);
c0109f5c:	85 ff                	test   %edi,%edi
c0109f5e:	75 28                	jne    c0109f88 <proc_program+0xd9>
c0109f60:	83 ec 0c             	sub    $0xc,%esp
c0109f63:	68 dc 21 11 c0       	push   $0xc01121dc
c0109f68:	6a 6d                	push   $0x6d
c0109f6a:	68 6b 20 11 c0       	push   $0xc011206b
c0109f6f:	68 dc 20 11 c0       	push   $0xc01120dc
c0109f74:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109f79:	e8 ea a2 ff ff       	call   c0104268 <print>
c0109f7e:	83 c4 20             	add    $0x20,%esp
c0109f81:	e8 fd 6f ff ff       	call   c0100f83 <backtrace>
c0109f86:	fa                   	cli    
c0109f87:	f4                   	hlt    

    struct elf* elf = (struct elf*) binary;
    assert(elf->magic == ELF_MAGIC);
c0109f88:	81 3f 7f 45 4c 46    	cmpl   $0x464c457f,(%edi)
c0109f8e:	74 28                	je     c0109fb8 <proc_program+0x109>
c0109f90:	83 ec 0c             	sub    $0xc,%esp
c0109f93:	68 dc 21 11 c0       	push   $0xc01121dc
c0109f98:	6a 70                	push   $0x70
c0109f9a:	68 6b 20 11 c0       	push   $0xc011206b
c0109f9f:	68 eb 20 11 c0       	push   $0xc01120eb
c0109fa4:	68 2b ff 10 c0       	push   $0xc010ff2b
c0109fa9:	e8 ba a2 ff ff       	call   c0104268 <print>
c0109fae:	83 c4 20             	add    $0x20,%esp
c0109fb1:	e8 cd 6f ff ff       	call   c0100f83 <backtrace>
c0109fb6:	fa                   	cli    
c0109fb7:	f4                   	hlt    

    lcr3(PADDR(proc->page_directory));
c0109fb8:	8b 5e 18             	mov    0x18(%esi),%ebx

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c0109fbb:	81 fb ff ff ff bf    	cmp    $0xbfffffff,%ebx
c0109fc1:	77 22                	ja     c0109fe5 <proc_program+0x136>
        panic(file, line, "PADDR called with invalid va %08x", va);
c0109fc3:	50                   	push   %eax
c0109fc4:	53                   	push   %ebx
c0109fc5:	68 61 05 11 c0       	push   $0xc0110561
c0109fca:	6a 72                	push   $0x72
c0109fcc:	68 6b 20 11 c0       	push   $0xc011206b
c0109fd1:	68 d4 21 11 c0       	push   $0xc01121d4
c0109fd6:	6a 65                	push   $0x65
c0109fd8:	68 83 05 11 c0       	push   $0xc0110583
c0109fdd:	e8 93 9c ff ff       	call   c0103c75 <_panic>
c0109fe2:	83 c4 20             	add    $0x20,%esp
    return val;
}

static inline void
lcr3(uint32_t val) {
    asm volatile("movl %0,%%cr3" : : "r" (val));
c0109fe5:	81 c3 00 00 00 40    	add    $0x40000000,%ebx
c0109feb:	0f 22 db             	mov    %ebx,%cr3

    struct prog* ph = (struct prog*) ((uint8_t*) elf + elf->phoff);
c0109fee:	8b 5f 1c             	mov    0x1c(%edi),%ebx
c0109ff1:	01 fb                	add    %edi,%ebx
    struct prog* eph = ph + elf->phnum;
c0109ff3:	0f b7 47 2c          	movzwl 0x2c(%edi),%eax
c0109ff7:	c1 e0 05             	shl    $0x5,%eax
c0109ffa:	01 d8                	add    %ebx,%eax
c0109ffc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    for (; ph < eph; ++ph) {
c0109fff:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
c010a002:	76 73                	jbe    c010a077 <proc_program+0x1c8>
        if (ph->type != PT_LOAD)
c010a004:	83 3b 01             	cmpl   $0x1,(%ebx)
c010a007:	75 69                	jne    c010a072 <proc_program+0x1c3>
            continue;

        assert(ph->filesz <= ph->memsz);
c010a009:	8b 43 14             	mov    0x14(%ebx),%eax
c010a00c:	39 43 10             	cmp    %eax,0x10(%ebx)
c010a00f:	76 28                	jbe    c010a039 <proc_program+0x18a>
c010a011:	83 ec 0c             	sub    $0xc,%esp
c010a014:	68 dc 21 11 c0       	push   $0xc01121dc
c010a019:	6a 7a                	push   $0x7a
c010a01b:	68 6b 20 11 c0       	push   $0xc011206b
c010a020:	68 03 21 11 c0       	push   $0xc0112103
c010a025:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a02a:	e8 39 a2 ff ff       	call   c0104268 <print>
c010a02f:	83 c4 20             	add    $0x20,%esp
c010a032:	e8 4c 6f ff ff       	call   c0100f83 <backtrace>
c010a037:	fa                   	cli    
c010a038:	f4                   	hlt    

        region_alloc(proc, (void*) ph->vaddr, ph->memsz);
c010a039:	8b 4b 14             	mov    0x14(%ebx),%ecx
c010a03c:	8b 53 08             	mov    0x8(%ebx),%edx
c010a03f:	89 f0                	mov    %esi,%eax
c010a041:	e8 d4 fb ff ff       	call   c0109c1a <region_alloc>
        memcpy((void*) ph->vaddr, binary + ph->offset, ph->filesz);
c010a046:	51                   	push   %ecx
c010a047:	ff 73 10             	pushl  0x10(%ebx)
c010a04a:	8b 43 04             	mov    0x4(%ebx),%eax
c010a04d:	01 f8                	add    %edi,%eax
c010a04f:	50                   	push   %eax
c010a050:	ff 73 08             	pushl  0x8(%ebx)
c010a053:	e8 ac a8 ff ff       	call   c0104904 <memcpy>
        memset((void*) ph->vaddr + ph->filesz, 0, ph->memsz - ph->filesz);
c010a058:	8b 43 10             	mov    0x10(%ebx),%eax
c010a05b:	83 c4 0c             	add    $0xc,%esp
c010a05e:	8b 53 14             	mov    0x14(%ebx),%edx
c010a061:	29 c2                	sub    %eax,%edx
c010a063:	52                   	push   %edx
c010a064:	6a 00                	push   $0x0
c010a066:	03 43 08             	add    0x8(%ebx),%eax
c010a069:	50                   	push   %eax
c010a06a:	e8 bb a8 ff ff       	call   c010492a <memset>
c010a06f:	83 c4 10             	add    $0x10,%esp

    lcr3(PADDR(proc->page_directory));

    struct prog* ph = (struct prog*) ((uint8_t*) elf + elf->phoff);
    struct prog* eph = ph + elf->phnum;
    for (; ph < eph; ++ph) {
c010a072:	83 c3 20             	add    $0x20,%ebx
c010a075:	eb 88                	jmp    c0109fff <proc_program+0x150>
        region_alloc(proc, (void*) ph->vaddr, ph->memsz);
        memcpy((void*) ph->vaddr, binary + ph->offset, ph->filesz);
        memset((void*) ph->vaddr + ph->filesz, 0, ph->memsz - ph->filesz);
    }

    lcr3(PADDR(kpd));
c010a077:	8b 1d a8 d2 14 c0    	mov    0xc014d2a8,%ebx

#define PADDR(va) _paddr(__FILE__, __LINE__, (void*) va)

static inline size_t
_paddr(const char* file, int line, void* va) {
    if ((uint32_t) va < KADDR)
c010a07d:	81 fb ff ff ff bf    	cmp    $0xbfffffff,%ebx
c010a083:	77 25                	ja     c010a0aa <proc_program+0x1fb>
        panic(file, line, "PADDR called with invalid va %08x", va);
c010a085:	52                   	push   %edx
c010a086:	53                   	push   %ebx
c010a087:	68 61 05 11 c0       	push   $0xc0110561
c010a08c:	68 81 00 00 00       	push   $0x81
c010a091:	68 6b 20 11 c0       	push   $0xc011206b
c010a096:	68 d4 21 11 c0       	push   $0xc01121d4
c010a09b:	6a 65                	push   $0x65
c010a09d:	68 83 05 11 c0       	push   $0xc0110583
c010a0a2:	e8 ce 9b ff ff       	call   c0103c75 <_panic>
c010a0a7:	83 c4 20             	add    $0x20,%esp
c010a0aa:	81 c3 00 00 00 40    	add    $0x40000000,%ebx
c010a0b0:	0f 22 db             	mov    %ebx,%cr3

    struct thread* thread;
    thread_fork(name, &thread, proc, (int (*)(void*, unsigned long)) elf->entry, NULL, 0);
c010a0b3:	50                   	push   %eax
c010a0b4:	50                   	push   %eax
c010a0b5:	6a 00                	push   $0x0
c010a0b7:	6a 00                	push   $0x0
c010a0b9:	ff 77 18             	pushl  0x18(%edi)
c010a0bc:	56                   	push   %esi
c010a0bd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a0c0:	50                   	push   %eax
c010a0c1:	ff 75 08             	pushl  0x8(%ebp)
c010a0c4:	e8 ad e3 ff ff       	call   c0108476 <thread_fork>

    thread->context->cs = GD_UT | DPL_USER;
c010a0c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0cc:	8b 00                	mov    (%eax),%eax
c010a0ce:	c7 40 34 1b 00 00 00 	movl   $0x1b,0x34(%eax)
    thread->context->ds = GD_UD | DPL_USER;
c010a0d5:	c7 40 04 23 00 00 00 	movl   $0x23,0x4(%eax)
    thread->context->es = GD_UD | DPL_USER;
c010a0dc:	c7 00 23 00 00 00    	movl   $0x23,(%eax)
    thread->context->ss = GD_UD | DPL_USER;
c010a0e2:	c7 40 40 23 00 00 00 	movl   $0x23,0x40(%eax)
    thread->context->esp = (uint32_t) USTACKTOP;
c010a0e9:	c7 40 3c 00 e0 bf be 	movl   $0xbebfe000,0x3c(%eax)
    thread->context->ebp = 0;
c010a0f0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    // thread->context->eflags = FL_IF;

    thread->context->eip = (uint32_t) elf->entry;
c010a0f7:	8b 57 18             	mov    0x18(%edi),%edx
c010a0fa:	89 50 30             	mov    %edx,0x30(%eax)

    region_alloc(proc, (void*) (USTACKTOP - PG_SIZE), PG_SIZE);
c010a0fd:	83 c4 20             	add    $0x20,%esp
c010a100:	b9 00 10 00 00       	mov    $0x1000,%ecx
c010a105:	ba 00 d0 bf be       	mov    $0xbebfd000,%edx
c010a10a:	89 f0                	mov    %esi,%eax
c010a10c:	e8 09 fb ff ff       	call   c0109c1a <region_alloc>
c010a111:	89 f0                	mov    %esi,%eax
    proc->pid = pidreg_getpid();

    load_icode(proc, binary, name);

    return proc;
}
c010a113:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a116:	5b                   	pop    %ebx
c010a117:	5e                   	pop    %esi
c010a118:	5f                   	pop    %edi
c010a119:	5d                   	pop    %ebp
c010a11a:	c3                   	ret    

c010a11b <proc_addthread>:

int
proc_addthread(struct proc* proc, struct thread* t) {
c010a11b:	55                   	push   %ebp
c010a11c:	89 e5                	mov    %esp,%ebp
c010a11e:	57                   	push   %edi
c010a11f:	56                   	push   %esi
c010a120:	53                   	push   %ebx
c010a121:	83 ec 1c             	sub    $0x1c,%esp
c010a124:	8b 75 08             	mov    0x8(%ebp),%esi
c010a127:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    int result;

    assert(t->proc == NULL);
c010a12a:	83 7b 20 00          	cmpl   $0x0,0x20(%ebx)
c010a12e:	74 2b                	je     c010a15b <proc_addthread+0x40>
c010a130:	83 ec 0c             	sub    $0xc,%esp
c010a133:	68 b4 21 11 c0       	push   $0xc01121b4
c010a138:	68 ac 00 00 00       	push   $0xac
c010a13d:	68 6b 20 11 c0       	push   $0xc011206b
c010a142:	68 1b 21 11 c0       	push   $0xc011211b
c010a147:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a14c:	e8 17 a1 ff ff       	call   c0104268 <print>
c010a151:	83 c4 20             	add    $0x20,%esp
c010a154:	e8 2a 6e ff ff       	call   c0100f83 <backtrace>
c010a159:	fa                   	cli    
c010a15a:	f4                   	hlt    

    spinlock_acquire(&proc->lock);
c010a15b:	8d 7e 04             	lea    0x4(%esi),%edi
c010a15e:	83 ec 0c             	sub    $0xc,%esp
c010a161:	57                   	push   %edi
c010a162:	e8 cc 94 ff ff       	call   c0103633 <spinlock_acquire>
    result = threadarray_add(&proc->threads, t, NULL);
c010a167:	83 c4 0c             	add    $0xc,%esp
c010a16a:	6a 00                	push   $0x0
c010a16c:	53                   	push   %ebx
c010a16d:	8d 46 0c             	lea    0xc(%esi),%eax
c010a170:	50                   	push   %eax
c010a171:	e8 51 dd ff ff       	call   c0107ec7 <threadarray_add>
c010a176:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    spinlock_release(&proc->lock);
c010a179:	89 3c 24             	mov    %edi,(%esp)
c010a17c:	e8 68 95 ff ff       	call   c01036e9 <spinlock_release>
    if (result)
c010a181:	83 c4 10             	add    $0x10,%esp
c010a184:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a187:	85 c0                	test   %eax,%eax
c010a189:	75 0c                	jne    c010a197 <proc_addthread+0x7c>
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c010a18b:	9c                   	pushf  
c010a18c:	5a                   	pop    %edx
static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
    asm volatile ("cli" : : : "memory");
c010a18d:	fa                   	cli    
        return result;
    bool on = cli();
    t->proc = proc;
c010a18e:	89 73 20             	mov    %esi,0x20(%ebx)
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c010a191:	80 e6 02             	and    $0x2,%dh
c010a194:	74 01                	je     c010a197 <proc_addthread+0x7c>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010a196:	fb                   	sti    
    ifx(on);
    return 0;
}
c010a197:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a19a:	5b                   	pop    %ebx
c010a19b:	5e                   	pop    %esi
c010a19c:	5f                   	pop    %edi
c010a19d:	5d                   	pop    %ebp
c010a19e:	c3                   	ret    

c010a19f <init_proc>:
#include <gdt.h>

struct proc* procs[NPROC];
struct proc* kproc;

void init_proc(void) {
c010a19f:	55                   	push   %ebp
c010a1a0:	89 e5                	mov    %esp,%ebp
c010a1a2:	53                   	push   %ebx
c010a1a3:	52                   	push   %edx
    assert(thisproc == NULL);
c010a1a4:	e8 0d 87 ff ff       	call   c01028b6 <cpunum>
c010a1a9:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010a1b0:	8b 40 08             	mov    0x8(%eax),%eax
c010a1b3:	83 78 20 00          	cmpl   $0x0,0x20(%eax)
c010a1b7:	74 28                	je     c010a1e1 <init_proc+0x42>
c010a1b9:	83 ec 0c             	sub    $0xc,%esp
c010a1bc:	68 08 22 11 c0       	push   $0xc0112208
c010a1c1:	6a 11                	push   $0x11
c010a1c3:	68 6b 20 11 c0       	push   $0xc011206b
c010a1c8:	68 2b 21 11 c0       	push   $0xc011212b
c010a1cd:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a1d2:	e8 91 a0 ff ff       	call   c0104268 <print>
c010a1d7:	83 c4 20             	add    $0x20,%esp
c010a1da:	e8 a4 6d ff ff       	call   c0100f83 <backtrace>
c010a1df:	fa                   	cli    
c010a1e0:	f4                   	hlt    

    struct proc* proc = proc_create("[kproc]");
c010a1e1:	83 ec 0c             	sub    $0xc,%esp
c010a1e4:	68 3c 21 11 c0       	push   $0xc011213c
c010a1e9:	e8 51 fb ff ff       	call   c0109d3f <proc_create>
c010a1ee:	89 c3                	mov    %eax,%ebx
    if (proc == NULL)
c010a1f0:	83 c4 10             	add    $0x10,%esp
c010a1f3:	85 c0                	test   %eax,%eax
c010a1f5:	75 19                	jne    c010a210 <init_proc+0x71>
        panic("proc_create for kproc failed\n");
c010a1f7:	68 44 21 11 c0       	push   $0xc0112144
c010a1fc:	68 08 22 11 c0       	push   $0xc0112208
c010a201:	6a 15                	push   $0x15
c010a203:	68 6b 20 11 c0       	push   $0xc011206b
c010a208:	e8 68 9a ff ff       	call   c0103c75 <_panic>
c010a20d:	83 c4 10             	add    $0x10,%esp
    proc->page_directory = kpd;
c010a210:	a1 a8 d2 14 c0       	mov    0xc014d2a8,%eax
c010a215:	89 43 18             	mov    %eax,0x18(%ebx)

    int result = proc_addthread(proc, bootcpu->thread);
c010a218:	50                   	push   %eax
c010a219:	50                   	push   %eax
c010a21a:	a1 80 d2 14 c0       	mov    0xc014d280,%eax
c010a21f:	ff 70 08             	pushl  0x8(%eax)
c010a222:	53                   	push   %ebx
c010a223:	e8 f3 fe ff ff       	call   c010a11b <proc_addthread>
    if (result)
c010a228:	83 c4 10             	add    $0x10,%esp
c010a22b:	85 c0                	test   %eax,%eax
c010a22d:	74 19                	je     c010a248 <init_proc+0xa9>
        panic("proc_addthread\n");
c010a22f:	68 c6 1e 11 c0       	push   $0xc0111ec6
c010a234:	68 08 22 11 c0       	push   $0xc0112208
c010a239:	6a 1a                	push   $0x1a
c010a23b:	68 6b 20 11 c0       	push   $0xc011206b
c010a240:	e8 30 9a ff ff       	call   c0103c75 <_panic>
c010a245:	83 c4 10             	add    $0x10,%esp

    assert(thisproc != NULL);
c010a248:	e8 69 86 ff ff       	call   c01028b6 <cpunum>
c010a24d:	8b 04 85 80 d2 14 c0 	mov    -0x3feb2d80(,%eax,4),%eax
c010a254:	8b 40 08             	mov    0x8(%eax),%eax
c010a257:	83 78 20 00          	cmpl   $0x0,0x20(%eax)
c010a25b:	75 28                	jne    c010a285 <init_proc+0xe6>
c010a25d:	83 ec 0c             	sub    $0xc,%esp
c010a260:	68 08 22 11 c0       	push   $0xc0112208
c010a265:	6a 1c                	push   $0x1c
c010a267:	68 6b 20 11 c0       	push   $0xc011206b
c010a26c:	68 62 21 11 c0       	push   $0xc0112162
c010a271:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a276:	e8 ed 9f ff ff       	call   c0104268 <print>
c010a27b:	83 c4 20             	add    $0x20,%esp
c010a27e:	e8 00 6d ff ff       	call   c0100f83 <backtrace>
c010a283:	fa                   	cli    
c010a284:	f4                   	hlt    

    proc->pid = 0;
c010a285:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    procs[proc->pid] = proc;
c010a28c:	89 1d 00 e0 18 c0    	mov    %ebx,0xc018e000

    kproc = proc;
c010a292:	89 1d 00 f0 18 c0    	mov    %ebx,0xc018f000
}
c010a298:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a29b:	c9                   	leave  
c010a29c:	c3                   	ret    

c010a29d <proc_remthread>:
    ifx(on);
    return 0;
}

void
proc_remthread(struct thread* t) {
c010a29d:	55                   	push   %ebp
c010a29e:	89 e5                	mov    %esp,%ebp
c010a2a0:	57                   	push   %edi
c010a2a1:	56                   	push   %esi
c010a2a2:	53                   	push   %ebx
c010a2a3:	83 ec 1c             	sub    $0x1c,%esp
    assert(t != NULL);
c010a2a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a2aa:	75 2b                	jne    c010a2d7 <proc_remthread+0x3a>
c010a2ac:	83 ec 0c             	sub    $0xc,%esp
c010a2af:	68 a4 21 11 c0       	push   $0xc01121a4
c010a2b4:	68 bb 00 00 00       	push   $0xbb
c010a2b9:	68 6b 20 11 c0       	push   $0xc011206b
c010a2be:	68 1f 19 11 c0       	push   $0xc011191f
c010a2c3:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a2c8:	e8 9b 9f ff ff       	call   c0104268 <print>
c010a2cd:	83 c4 20             	add    $0x20,%esp
c010a2d0:	e8 ae 6c ff ff       	call   c0100f83 <backtrace>
c010a2d5:	fa                   	cli    
c010a2d6:	f4                   	hlt    

    struct proc* proc = t->proc;
c010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2da:	8b 70 20             	mov    0x20(%eax),%esi
    assert(proc != NULL);
c010a2dd:	85 f6                	test   %esi,%esi
c010a2df:	75 2b                	jne    c010a30c <proc_remthread+0x6f>
c010a2e1:	83 ec 0c             	sub    $0xc,%esp
c010a2e4:	68 a4 21 11 c0       	push   $0xc01121a4
c010a2e9:	68 be 00 00 00       	push   $0xbe
c010a2ee:	68 6b 20 11 c0       	push   $0xc011206b
c010a2f3:	68 66 21 11 c0       	push   $0xc0112166
c010a2f8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a2fd:	e8 66 9f ff ff       	call   c0104268 <print>
c010a302:	83 c4 20             	add    $0x20,%esp
c010a305:	e8 79 6c ff ff       	call   c0100f83 <backtrace>
c010a30a:	fa                   	cli    
c010a30b:	f4                   	hlt    

    spinlock_acquire(&proc->lock);
c010a30c:	8d 7e 04             	lea    0x4(%esi),%edi
c010a30f:	83 ec 0c             	sub    $0xc,%esp
c010a312:	57                   	push   %edi
c010a313:	e8 1b 93 ff ff       	call   c0103633 <spinlock_acquire>

    unsigned num = threadarray_num(&proc->threads);
c010a318:	8d 5e 0c             	lea    0xc(%esi),%ebx
c010a31b:	89 1c 24             	mov    %ebx,(%esp)
c010a31e:	e8 80 db ff ff       	call   c0107ea3 <threadarray_num>
c010a323:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for (unsigned i = 0; i < num; i++) {
c010a326:	83 c4 10             	add    $0x10,%esp
c010a329:	31 d2                	xor    %edx,%edx
c010a32b:	3b 55 e4             	cmp    -0x1c(%ebp),%edx
c010a32e:	74 43                	je     c010a373 <proc_remthread+0xd6>
        if (threadarray_get(&proc->threads, i) == t) {
c010a330:	50                   	push   %eax
c010a331:	50                   	push   %eax
c010a332:	52                   	push   %edx
c010a333:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a336:	53                   	push   %ebx
c010a337:	e8 70 db ff ff       	call   c0107eac <threadarray_get>
c010a33c:	83 c4 10             	add    $0x10,%esp
c010a33f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a342:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a345:	75 29                	jne    c010a370 <proc_remthread+0xd3>
            threadarray_remove(&proc->threads, i);
c010a347:	51                   	push   %ecx
c010a348:	51                   	push   %ecx
c010a349:	52                   	push   %edx
c010a34a:	53                   	push   %ebx
c010a34b:	e8 80 db ff ff       	call   c0107ed0 <threadarray_remove>
            spinlock_release(&proc->lock);
c010a350:	89 3c 24             	mov    %edi,(%esp)
c010a353:	e8 91 93 ff ff       	call   c01036e9 <spinlock_release>
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile("pushfl; popl %0" : "=r" (eflags));
c010a358:	9c                   	pushf  
c010a359:	58                   	pop    %eax
static inline uint32_t read_eflags(void);

static inline bool
cli(void) {
    bool on = (read_eflags() >> 9) & 1;
    asm volatile ("cli" : : : "memory");
c010a35a:	fa                   	cli    
            bool on = cli();
            t->proc = NULL;
c010a35b:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010a35e:	c7 41 20 00 00 00 00 	movl   $0x0,0x20(%ecx)
    asm volatile ("sti" : : : "memory");
}

static inline void
ifx(bool set) {
    if (set)
c010a365:	83 c4 10             	add    $0x10,%esp
c010a368:	f6 c4 02             	test   $0x2,%ah
c010a36b:	74 31                	je     c010a39e <proc_remthread+0x101>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010a36d:	fb                   	sti    
c010a36e:	eb 2e                	jmp    c010a39e <proc_remthread+0x101>
    assert(proc != NULL);

    spinlock_acquire(&proc->lock);

    unsigned num = threadarray_num(&proc->threads);
    for (unsigned i = 0; i < num; i++) {
c010a370:	42                   	inc    %edx
c010a371:	eb b8                	jmp    c010a32b <proc_remthread+0x8e>
            ifx(on);
            return;
        }
    }

    spinlock_release(&proc->lock);
c010a373:	83 ec 0c             	sub    $0xc,%esp
c010a376:	57                   	push   %edi
c010a377:	e8 6d 93 ff ff       	call   c01036e9 <spinlock_release>
    panic("Thread (%p) has escaped from its process (%p)\n", t, proc);
c010a37c:	58                   	pop    %eax
c010a37d:	5a                   	pop    %edx
c010a37e:	56                   	push   %esi
c010a37f:	ff 75 08             	pushl  0x8(%ebp)
c010a382:	68 73 21 11 c0       	push   $0xc0112173
c010a387:	68 a4 21 11 c0       	push   $0xc01121a4
c010a38c:	68 cf 00 00 00       	push   $0xcf
c010a391:	68 6b 20 11 c0       	push   $0xc011206b
c010a396:	e8 da 98 ff ff       	call   c0103c75 <_panic>
c010a39b:	83 c4 20             	add    $0x20,%esp
}
c010a39e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a3a1:	5b                   	pop    %ebx
c010a3a2:	5e                   	pop    %esi
c010a3a3:	5f                   	pop    %edi
c010a3a4:	5d                   	pop    %ebp
c010a3a5:	c3                   	ret    

c010a3a6 <pidreg_create>:
    int pcounter;
};

struct pid_registrar* kpidreg;

void pidreg_create(void) {
c010a3a6:	55                   	push   %ebp
c010a3a7:	89 e5                	mov    %esp,%ebp
c010a3a9:	53                   	push   %ebx
c010a3aa:	83 ec 10             	sub    $0x10,%esp
    struct pid_registrar* pidreg = kmalloc(sizeof(struct pid_registrar));
c010a3ad:	6a 10                	push   $0x10
c010a3af:	e8 b8 79 ff ff       	call   c0101d6c <kmalloc>
c010a3b4:	89 c3                	mov    %eax,%ebx
    if (pidreg == NULL)
c010a3b6:	83 c4 10             	add    $0x10,%esp
c010a3b9:	85 c0                	test   %eax,%eax
c010a3bb:	75 19                	jne    c010a3d6 <pidreg_create+0x30>
        panic("kmalloc failed");
c010a3bd:	68 f5 05 11 c0       	push   $0xc01105f5
c010a3c2:	68 08 23 11 c0       	push   $0xc0112308
c010a3c7:	6a 19                	push   $0x19
c010a3c9:	68 12 22 11 c0       	push   $0xc0112212
c010a3ce:	e8 a2 98 ff ff       	call   c0103c75 <_panic>
c010a3d3:	83 c4 10             	add    $0x10,%esp


    pidreg->lk = lock_create("pidreg_lock");
c010a3d6:	83 ec 0c             	sub    $0xc,%esp
c010a3d9:	68 20 22 11 c0       	push   $0xc0112220
c010a3de:	e8 90 8b ff ff       	call   c0102f73 <lock_create>
c010a3e3:	89 03                	mov    %eax,(%ebx)
    if (pidreg->lk == NULL) {
c010a3e5:	83 c4 10             	add    $0x10,%esp
c010a3e8:	85 c0                	test   %eax,%eax
c010a3ea:	75 22                	jne    c010a40e <pidreg_create+0x68>
        kfree(pidreg);
c010a3ec:	83 ec 0c             	sub    $0xc,%esp
c010a3ef:	53                   	push   %ebx
c010a3f0:	e8 77 7a ff ff       	call   c0101e6c <kfree>
        panic("lock_create failed");
c010a3f5:	68 11 06 11 c0       	push   $0xc0110611
c010a3fa:	68 08 23 11 c0       	push   $0xc0112308
c010a3ff:	6a 1f                	push   $0x1f
c010a401:	68 12 22 11 c0       	push   $0xc0112212
c010a406:	e8 6a 98 ff ff       	call   c0103c75 <_panic>
c010a40b:	83 c4 20             	add    $0x20,%esp
    }

    // marks which pids are in use
    pidreg->pmap = bitmap_ts_create(NPID);
c010a40e:	83 ec 0c             	sub    $0xc,%esp
c010a411:	68 00 04 00 00       	push   $0x400
c010a416:	e8 a9 d0 ff ff       	call   c01074c4 <bitmap_ts_create>
c010a41b:	89 43 04             	mov    %eax,0x4(%ebx)
    if (pidreg->pmap == NULL) {
c010a41e:	83 c4 10             	add    $0x10,%esp
c010a421:	85 c0                	test   %eax,%eax
c010a423:	75 2b                	jne    c010a450 <pidreg_create+0xaa>
        lock_destroy(pidreg->lk);
c010a425:	83 ec 0c             	sub    $0xc,%esp
c010a428:	ff 33                	pushl  (%ebx)
c010a42a:	e8 c7 8b ff ff       	call   c0102ff6 <lock_destroy>
        kfree(pidreg);
c010a42f:	89 1c 24             	mov    %ebx,(%esp)
c010a432:	e8 35 7a ff ff       	call   c0101e6c <kfree>
        panic("create pidreg->pmap failed");
c010a437:	68 2c 22 11 c0       	push   $0xc011222c
c010a43c:	68 08 23 11 c0       	push   $0xc0112308
c010a441:	6a 27                	push   $0x27
c010a443:	68 12 22 11 c0       	push   $0xc0112212
c010a448:	e8 28 98 ff ff       	call   c0103c75 <_panic>
c010a44d:	83 c4 20             	add    $0x20,%esp
    }

    // queue for reusing pids
    pidreg->pid_reuse = queue_ts_create();
c010a450:	e8 1b d4 ff ff       	call   c0107870 <queue_ts_create>
c010a455:	89 43 08             	mov    %eax,0x8(%ebx)
    if (pidreg->pid_reuse == NULL) {
c010a458:	85 c0                	test   %eax,%eax
c010a45a:	75 34                	jne    c010a490 <pidreg_create+0xea>
        bitmap_ts_destroy(pidreg->pmap);
c010a45c:	83 ec 0c             	sub    $0xc,%esp
c010a45f:	ff 73 04             	pushl  0x4(%ebx)
c010a462:	e8 98 d3 ff ff       	call   c01077ff <bitmap_ts_destroy>
        lock_destroy(pidreg->lk);
c010a467:	58                   	pop    %eax
c010a468:	ff 33                	pushl  (%ebx)
c010a46a:	e8 87 8b ff ff       	call   c0102ff6 <lock_destroy>
        kfree(pidreg);
c010a46f:	89 1c 24             	mov    %ebx,(%esp)
c010a472:	e8 f5 79 ff ff       	call   c0101e6c <kfree>
        panic("create pidreg->pid_reuse failed");
c010a477:	68 47 22 11 c0       	push   $0xc0112247
c010a47c:	68 08 23 11 c0       	push   $0xc0112308
c010a481:	6a 30                	push   $0x30
c010a483:	68 12 22 11 c0       	push   $0xc0112212
c010a488:	e8 e8 97 ff ff       	call   c0103c75 <_panic>
c010a48d:	83 c4 20             	add    $0x20,%esp
    }

    pidreg->pcounter = PID_MIN;
c010a490:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)

    kpidreg = pidreg;
c010a497:	89 1d 04 f0 18 c0    	mov    %ebx,0xc018f004
}
c010a49d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a4a0:	c9                   	leave  
c010a4a1:	c3                   	ret    

c010a4a2 <pidreg_destroy>:


/*
 * Destroy the pid_registrar.
 */
void pidreg_destroy(void) {
c010a4a2:	55                   	push   %ebp
c010a4a3:	89 e5                	mov    %esp,%ebp
c010a4a5:	83 ec 08             	sub    $0x8,%esp
    assert(kpidreg != NULL);
c010a4a8:	83 3d 04 f0 18 c0 00 	cmpl   $0x0,0xc018f004
c010a4af:	75 28                	jne    c010a4d9 <pidreg_destroy+0x37>
c010a4b1:	83 ec 0c             	sub    $0xc,%esp
c010a4b4:	68 f8 22 11 c0       	push   $0xc01122f8
c010a4b9:	6a 3d                	push   $0x3d
c010a4bb:	68 12 22 11 c0       	push   $0xc0112212
c010a4c0:	68 67 22 11 c0       	push   $0xc0112267
c010a4c5:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a4ca:	e8 99 9d ff ff       	call   c0104268 <print>
c010a4cf:	83 c4 20             	add    $0x20,%esp
c010a4d2:	e8 ac 6a ff ff       	call   c0100f83 <backtrace>
c010a4d7:	fa                   	cli    
c010a4d8:	f4                   	hlt    

    lock_acquire(kpidreg->lk);
c010a4d9:	83 ec 0c             	sub    $0xc,%esp
c010a4dc:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a4e1:	ff 30                	pushl  (%eax)
c010a4e3:	e8 0b 8c ff ff       	call   c01030f3 <lock_acquire>

    bitmap_ts_destroy(kpidreg->pmap);
c010a4e8:	58                   	pop    %eax
c010a4e9:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a4ee:	ff 70 04             	pushl  0x4(%eax)
c010a4f1:	e8 09 d3 ff ff       	call   c01077ff <bitmap_ts_destroy>
    queue_ts_destroy(kpidreg->pid_reuse);
c010a4f6:	5a                   	pop    %edx
c010a4f7:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a4fc:	ff 70 08             	pushl  0x8(%eax)
c010a4ff:	e8 40 d6 ff ff       	call   c0107b44 <queue_ts_destroy>

    lock_release(kpidreg->lk);
c010a504:	59                   	pop    %ecx
c010a505:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a50a:	ff 30                	pushl  (%eax)
c010a50c:	e8 53 8d ff ff       	call   c0103264 <lock_release>

    lock_destroy(kpidreg->lk);
c010a511:	58                   	pop    %eax
c010a512:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a517:	ff 30                	pushl  (%eax)
c010a519:	e8 d8 8a ff ff       	call   c0102ff6 <lock_destroy>
    kfree(kpidreg);
c010a51e:	58                   	pop    %eax
c010a51f:	ff 35 04 f0 18 c0    	pushl  0xc018f004
c010a525:	e8 42 79 ff ff       	call   c0101e6c <kfree>
}
c010a52a:	83 c4 10             	add    $0x10,%esp
c010a52d:	c9                   	leave  
c010a52e:	c3                   	ret    

c010a52f <pidreg_getpid>:

/*
 * Marks next avaialble pid in registrar's bitmap as in use.
 * Returns this pid.
 */
int pidreg_getpid(void) {
c010a52f:	55                   	push   %ebp
c010a530:	89 e5                	mov    %esp,%ebp
c010a532:	53                   	push   %ebx
c010a533:	53                   	push   %ebx
    if (kpidreg == NULL)
c010a534:	83 3d 04 f0 18 c0 00 	cmpl   $0x0,0xc018f004
c010a53b:	75 05                	jne    c010a542 <pidreg_getpid+0x13>
        pidreg_create();
c010a53d:	e8 64 fe ff ff       	call   c010a3a6 <pidreg_create>

    lock_acquire(kpidreg->lk);
c010a542:	83 ec 0c             	sub    $0xc,%esp
c010a545:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a54a:	ff 30                	pushl  (%eax)
c010a54c:	e8 a2 8b ff ff       	call   c01030f3 <lock_acquire>
}

// this checks if a pid is available for use
static bool
pid_available(void) {
    assert(kpidreg != NULL);
c010a551:	83 c4 10             	add    $0x10,%esp
c010a554:	83 3d 04 f0 18 c0 00 	cmpl   $0x0,0xc018f004
c010a55b:	75 28                	jne    c010a585 <pidreg_getpid+0x56>
c010a55d:	83 ec 0c             	sub    $0xc,%esp
c010a560:	68 d8 22 11 c0       	push   $0xc01122d8
c010a565:	6a 4d                	push   $0x4d
c010a567:	68 12 22 11 c0       	push   $0xc0112212
c010a56c:	68 67 22 11 c0       	push   $0xc0112267
c010a571:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a576:	e8 ed 9c ff ff       	call   c0104268 <print>
c010a57b:	83 c4 20             	add    $0x20,%esp
c010a57e:	e8 00 6a ff ff       	call   c0100f83 <backtrace>
c010a583:	fa                   	cli    
c010a584:	f4                   	hlt    

    lock_acquire(kpidreg->lk);
c010a585:	83 ec 0c             	sub    $0xc,%esp
c010a588:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a58d:	ff 30                	pushl  (%eax)
c010a58f:	e8 5f 8b ff ff       	call   c01030f3 <lock_acquire>
    bool res = kpidreg->pcounter < NPID || !queue_ts_isempty(kpidreg->pid_reuse);
c010a594:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a599:	83 c4 10             	add    $0x10,%esp
c010a59c:	bb 01 00 00 00       	mov    $0x1,%ebx
c010a5a1:	81 78 0c ff 03 00 00 	cmpl   $0x3ff,0xc(%eax)
c010a5a8:	7e 15                	jle    c010a5bf <pidreg_getpid+0x90>
c010a5aa:	83 ec 0c             	sub    $0xc,%esp
c010a5ad:	ff 70 08             	pushl  0x8(%eax)
c010a5b0:	e8 d5 d4 ff ff       	call   c0107a8a <queue_ts_isempty>
c010a5b5:	83 c4 10             	add    $0x10,%esp
c010a5b8:	31 db                	xor    %ebx,%ebx
c010a5ba:	85 c0                	test   %eax,%eax
c010a5bc:	0f 94 c3             	sete   %bl
    lock_release(kpidreg->lk);
c010a5bf:	83 ec 0c             	sub    $0xc,%esp
c010a5c2:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a5c7:	ff 30                	pushl  (%eax)
c010a5c9:	e8 96 8c ff ff       	call   c0103264 <lock_release>
    if (kpidreg == NULL)
        pidreg_create();

    lock_acquire(kpidreg->lk);

    if (!pid_available())
c010a5ce:	83 c4 10             	add    $0x10,%esp
        return EMPROC;
c010a5d1:	b8 06 00 00 00       	mov    $0x6,%eax
    if (kpidreg == NULL)
        pidreg_create();

    lock_acquire(kpidreg->lk);

    if (!pid_available())
c010a5d6:	85 db                	test   %ebx,%ebx
c010a5d8:	0f 84 98 00 00 00    	je     c010a676 <pidreg_getpid+0x147>
        return EMPROC;

    int pid = !queue_ts_isempty(kpidreg->pid_reuse)
c010a5de:	83 ec 0c             	sub    $0xc,%esp
c010a5e1:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a5e6:	ff 70 08             	pushl  0x8(%eax)
c010a5e9:	e8 9c d4 ff ff       	call   c0107a8a <queue_ts_isempty>
              ? (int) queue_ts_pop(kpidreg->pid_reuse)
              : kpidreg->pcounter++;
c010a5ee:	83 c4 10             	add    $0x10,%esp
c010a5f1:	85 c0                	test   %eax,%eax
c010a5f3:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a5f8:	75 12                	jne    c010a60c <pidreg_getpid+0xdd>

    if (!pid_available())
        return EMPROC;

    int pid = !queue_ts_isempty(kpidreg->pid_reuse)
              ? (int) queue_ts_pop(kpidreg->pid_reuse)
c010a5fa:	83 ec 0c             	sub    $0xc,%esp
c010a5fd:	ff 70 08             	pushl  0x8(%eax)
c010a600:	e8 74 d3 ff ff       	call   c0107979 <queue_ts_pop>
c010a605:	89 c3                	mov    %eax,%ebx
c010a607:	83 c4 10             	add    $0x10,%esp
c010a60a:	eb 09                	jmp    c010a615 <pidreg_getpid+0xe6>
              : kpidreg->pcounter++;
c010a60c:	8b 58 0c             	mov    0xc(%eax),%ebx
c010a60f:	8d 53 01             	lea    0x1(%ebx),%edx
c010a612:	89 50 0c             	mov    %edx,0xc(%eax)
    assert(!bitmap_ts_isset(kpidreg->pmap, pid));
c010a615:	51                   	push   %ecx
c010a616:	51                   	push   %ecx
c010a617:	53                   	push   %ebx
c010a618:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a61d:	ff 70 04             	pushl  0x4(%eax)
c010a620:	e8 02 d1 ff ff       	call   c0107727 <bitmap_ts_isset>
c010a625:	83 c4 10             	add    $0x10,%esp
c010a628:	85 c0                	test   %eax,%eax
c010a62a:	74 28                	je     c010a654 <pidreg_getpid+0x125>
c010a62c:	83 ec 0c             	sub    $0xc,%esp
c010a62f:	68 e8 22 11 c0       	push   $0xc01122e8
c010a634:	6a 66                	push   $0x66
c010a636:	68 12 22 11 c0       	push   $0xc0112212
c010a63b:	68 77 22 11 c0       	push   $0xc0112277
c010a640:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a645:	e8 1e 9c ff ff       	call   c0104268 <print>
c010a64a:	83 c4 20             	add    $0x20,%esp
c010a64d:	e8 31 69 ff ff       	call   c0100f83 <backtrace>
c010a652:	fa                   	cli    
c010a653:	f4                   	hlt    
    bitmap_ts_mark(kpidreg->pmap, pid);
c010a654:	50                   	push   %eax
c010a655:	50                   	push   %eax
c010a656:	53                   	push   %ebx
c010a657:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a65c:	ff 70 04             	pushl  0x4(%eax)
c010a65f:	e8 f6 cf ff ff       	call   c010765a <bitmap_ts_mark>

    lock_release(kpidreg->lk);
c010a664:	5a                   	pop    %edx
c010a665:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a66a:	ff 30                	pushl  (%eax)
c010a66c:	e8 f3 8b ff ff       	call   c0103264 <lock_release>

    return pid;
c010a671:	83 c4 10             	add    $0x10,%esp
c010a674:	89 d8                	mov    %ebx,%eax
}
c010a676:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a679:	c9                   	leave  
c010a67a:	c3                   	ret    

c010a67b <pid_used>:

// this checks that a pid is in bounds and is in use
bool
pid_used(int pid) {
c010a67b:	55                   	push   %ebp
c010a67c:	89 e5                	mov    %esp,%ebp
c010a67e:	56                   	push   %esi
c010a67f:	53                   	push   %ebx
c010a680:	8b 75 08             	mov    0x8(%ebp),%esi
    assert(kpidreg != NULL);
c010a683:	83 3d 04 f0 18 c0 00 	cmpl   $0x0,0xc018f004
c010a68a:	75 28                	jne    c010a6b4 <pid_used+0x39>
c010a68c:	83 ec 0c             	sub    $0xc,%esp
c010a68f:	68 cc 22 11 c0       	push   $0xc01122cc
c010a694:	6a 71                	push   $0x71
c010a696:	68 12 22 11 c0       	push   $0xc0112212
c010a69b:	68 67 22 11 c0       	push   $0xc0112267
c010a6a0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a6a5:	e8 be 9b ff ff       	call   c0104268 <print>
c010a6aa:	83 c4 20             	add    $0x20,%esp
c010a6ad:	e8 d1 68 ff ff       	call   c0100f83 <backtrace>
c010a6b2:	fa                   	cli    
c010a6b3:	f4                   	hlt    
    assert(pid < NPID);
c010a6b4:	81 fe ff 03 00 00    	cmp    $0x3ff,%esi
c010a6ba:	7e 28                	jle    c010a6e4 <pid_used+0x69>
c010a6bc:	83 ec 0c             	sub    $0xc,%esp
c010a6bf:	68 cc 22 11 c0       	push   $0xc01122cc
c010a6c4:	6a 72                	push   $0x72
c010a6c6:	68 12 22 11 c0       	push   $0xc0112212
c010a6cb:	68 9c 22 11 c0       	push   $0xc011229c
c010a6d0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a6d5:	e8 8e 9b ff ff       	call   c0104268 <print>
c010a6da:	83 c4 20             	add    $0x20,%esp
c010a6dd:	e8 a1 68 ff ff       	call   c0100f83 <backtrace>
c010a6e2:	fa                   	cli    
c010a6e3:	f4                   	hlt    

    lock_acquire(kpidreg->lk);
c010a6e4:	83 ec 0c             	sub    $0xc,%esp
c010a6e7:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a6ec:	ff 30                	pushl  (%eax)
c010a6ee:	e8 00 8a ff ff       	call   c01030f3 <lock_acquire>
    // int res = fd >= PID_MIN && fd < NPID && bitmap_ts_isset(kpidreg->pmap, pid);
    // changed the above line to the below line... pid instead of fd... is that right? :)
    bool res = pid < kpidreg->pcounter && bitmap_ts_isset(kpidreg->pmap, pid);
c010a6f3:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a6f8:	83 c4 10             	add    $0x10,%esp
c010a6fb:	31 db                	xor    %ebx,%ebx
c010a6fd:	3b 70 0c             	cmp    0xc(%eax),%esi
c010a700:	7d 15                	jge    c010a717 <pid_used+0x9c>
c010a702:	52                   	push   %edx
c010a703:	52                   	push   %edx
c010a704:	56                   	push   %esi
c010a705:	ff 70 04             	pushl  0x4(%eax)
c010a708:	e8 1a d0 ff ff       	call   c0107727 <bitmap_ts_isset>
c010a70d:	83 c4 10             	add    $0x10,%esp
c010a710:	31 db                	xor    %ebx,%ebx
c010a712:	85 c0                	test   %eax,%eax
c010a714:	0f 95 c3             	setne  %bl

    lock_release(kpidreg->lk);
c010a717:	83 ec 0c             	sub    $0xc,%esp
c010a71a:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a71f:	ff 30                	pushl  (%eax)
c010a721:	e8 3e 8b ff ff       	call   c0103264 <lock_release>

    return res;
c010a726:	88 d8                	mov    %bl,%al
c010a728:	83 e0 01             	and    $0x1,%eax
}
c010a72b:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010a72e:	5b                   	pop    %ebx
c010a72f:	5e                   	pop    %esi
c010a730:	5d                   	pop    %ebp
c010a731:	c3                   	ret    

c010a732 <pidreg_returnpid>:

// this makes a pid available again to the system
void pidreg_returnpid(int pid) {
c010a732:	55                   	push   %ebp
c010a733:	89 e5                	mov    %esp,%ebp
c010a735:	53                   	push   %ebx
c010a736:	50                   	push   %eax
c010a737:	8b 5d 08             	mov    0x8(%ebp),%ebx
    assert(kpidreg != NULL);
c010a73a:	83 3d 04 f0 18 c0 00 	cmpl   $0x0,0xc018f004
c010a741:	75 2b                	jne    c010a76e <pidreg_returnpid+0x3c>
c010a743:	83 ec 0c             	sub    $0xc,%esp
c010a746:	68 b8 22 11 c0       	push   $0xc01122b8
c010a74b:	68 80 00 00 00       	push   $0x80
c010a750:	68 12 22 11 c0       	push   $0xc0112212
c010a755:	68 67 22 11 c0       	push   $0xc0112267
c010a75a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a75f:	e8 04 9b ff ff       	call   c0104268 <print>
c010a764:	83 c4 20             	add    $0x20,%esp
c010a767:	e8 17 68 ff ff       	call   c0100f83 <backtrace>
c010a76c:	fa                   	cli    
c010a76d:	f4                   	hlt    
    assert(pid_used(pid));
c010a76e:	83 ec 0c             	sub    $0xc,%esp
c010a771:	53                   	push   %ebx
c010a772:	e8 04 ff ff ff       	call   c010a67b <pid_used>
c010a777:	83 c4 10             	add    $0x10,%esp
c010a77a:	84 c0                	test   %al,%al
c010a77c:	75 2b                	jne    c010a7a9 <pidreg_returnpid+0x77>
c010a77e:	83 ec 0c             	sub    $0xc,%esp
c010a781:	68 b8 22 11 c0       	push   $0xc01122b8
c010a786:	68 81 00 00 00       	push   $0x81
c010a78b:	68 12 22 11 c0       	push   $0xc0112212
c010a790:	68 a7 22 11 c0       	push   $0xc01122a7
c010a795:	68 2b ff 10 c0       	push   $0xc010ff2b
c010a79a:	e8 c9 9a ff ff       	call   c0104268 <print>
c010a79f:	83 c4 20             	add    $0x20,%esp
c010a7a2:	e8 dc 67 ff ff       	call   c0100f83 <backtrace>
c010a7a7:	fa                   	cli    
c010a7a8:	f4                   	hlt    

    lock_acquire(kpidreg->lk);
c010a7a9:	83 ec 0c             	sub    $0xc,%esp
c010a7ac:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a7b1:	ff 30                	pushl  (%eax)
c010a7b3:	e8 3b 89 ff ff       	call   c01030f3 <lock_acquire>

    bitmap_ts_unmark(kpidreg->pmap, pid);
c010a7b8:	58                   	pop    %eax
c010a7b9:	5a                   	pop    %edx
c010a7ba:	53                   	push   %ebx
c010a7bb:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a7c0:	ff 70 04             	pushl  0x4(%eax)
c010a7c3:	e8 ff ce ff ff       	call   c01076c7 <bitmap_ts_unmark>
    queue_ts_push(kpidreg->pid_reuse, (void*) pid);
c010a7c8:	59                   	pop    %ecx
c010a7c9:	58                   	pop    %eax
c010a7ca:	53                   	push   %ebx
c010a7cb:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a7d0:	ff 70 08             	pushl  0x8(%eax)
c010a7d3:	e8 33 d1 ff ff       	call   c010790b <queue_ts_push>

    lock_release(kpidreg->lk);
c010a7d8:	83 c4 10             	add    $0x10,%esp
c010a7db:	a1 04 f0 18 c0       	mov    0xc018f004,%eax
c010a7e0:	8b 00                	mov    (%eax),%eax
c010a7e2:	89 45 08             	mov    %eax,0x8(%ebp)
}
c010a7e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a7e8:	c9                   	leave  
    lock_acquire(kpidreg->lk);

    bitmap_ts_unmark(kpidreg->pmap, pid);
    queue_ts_push(kpidreg->pid_reuse, (void*) pid);

    lock_release(kpidreg->lk);
c010a7e9:	e9 76 8a ff ff       	jmp    c0103264 <lock_release>

c010a7ee <cmd_reboot>:
    print("%lu\n", pit_ticks());
    return 0;
}

static int
cmd_reboot(int argc, char* argv[]) {
c010a7ee:	55                   	push   %ebp
c010a7ef:	89 e5                	mov    %esp,%ebp
                 : "memory", "cc");
}

static inline void
outb(int port, uint8_t data) {
    asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
c010a7f1:	ba 64 00 00 00       	mov    $0x64,%edx
c010a7f6:	b0 fe                	mov    $0xfe,%al
c010a7f8:	ee                   	out    %al,(%dx)

    // 0x64 : the keyboard io and data interface port
    // 0xFE : reset cpu command
    outb(0x64, 0xFE);
    return 0;
}
c010a7f9:	31 c0                	xor    %eax,%eax
c010a7fb:	5d                   	pop    %ebp
c010a7fc:	c3                   	ret    

c010a7fd <cmd_info>:
    for (size_t i = 1; i < ARRAY_SIZE(cmds); i++)
        print("\t%s  %s\n", cmds[i].name, cmds[i].desc);
    return 0;
}

static int cmd_info(int argc, char* argv[]) {
c010a7fd:	55                   	push   %ebp
c010a7fe:	89 e5                	mov    %esp,%ebp
c010a800:	83 ec 0c             	sub    $0xc,%esp
    (void) argc;
    (void) argv;

    print("\tCompiled on %s at %s\n", __DATE__, __TIME__);
c010a803:	68 16 23 11 c0       	push   $0xc0112316
c010a808:	68 1f 23 11 c0       	push   $0xc011231f
c010a80d:	68 2b 23 11 c0       	push   $0xc011232b
c010a812:	e8 51 9a ff ff       	call   c0104268 <print>
    return 0;
}
c010a817:	31 c0                	xor    %eax,%eax
c010a819:	c9                   	leave  
c010a81a:	c3                   	ret    

c010a81b <cmd_help>:
    sti();
    return 0;
}

static int
cmd_help(int argc, char* argv[]) {
c010a81b:	55                   	push   %ebp
c010a81c:	89 e5                	mov    %esp,%ebp
c010a81e:	53                   	push   %ebx
c010a81f:	52                   	push   %edx
c010a820:	bb 80 24 11 c0       	mov    $0xc0112480,%ebx
    (void) argc;
    (void) argv;

    for (size_t i = 1; i < ARRAY_SIZE(cmds); i++)
        print("\t%s  %s\n", cmds[i].name, cmds[i].desc);
c010a825:	50                   	push   %eax
c010a826:	ff 73 10             	pushl  0x10(%ebx)
c010a829:	ff 73 0c             	pushl  0xc(%ebx)
c010a82c:	68 42 23 11 c0       	push   $0xc0112342
c010a831:	e8 32 9a ff ff       	call   c0104268 <print>
c010a836:	83 c3 0c             	add    $0xc,%ebx
static int
cmd_help(int argc, char* argv[]) {
    (void) argc;
    (void) argv;

    for (size_t i = 1; i < ARRAY_SIZE(cmds); i++)
c010a839:	83 c4 10             	add    $0x10,%esp
c010a83c:	81 fb bc 24 11 c0    	cmp    $0xc01124bc,%ebx
c010a842:	75 e1                	jne    c010a825 <cmd_help+0xa>
        print("\t%s  %s\n", cmds[i].name, cmds[i].desc);
    return 0;
}
c010a844:	31 c0                	xor    %eax,%eax
c010a846:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a849:	c9                   	leave  
c010a84a:	c3                   	ret    

c010a84b <cmd_test>:
    {"test", "  -  Run system tests", cmd_test}
};

extern int test_suite(int argc, char* argv[]);
int
cmd_test(int argc, char* argv[]) {
c010a84b:	55                   	push   %ebp
c010a84c:	89 e5                	mov    %esp,%ebp
c010a84e:	83 ec 10             	sub    $0x10,%esp
    test_suite(argc, argv);
c010a851:	ff 75 0c             	pushl  0xc(%ebp)
c010a854:	ff 75 08             	pushl  0x8(%ebp)
c010a857:	e8 c7 02 00 00       	call   c010ab23 <test_suite>
    return on;
}

static inline void
sti(void) {
    asm volatile ("sti" : : : "memory");
c010a85c:	fb                   	sti    
    sti();
    return 0;
}
c010a85d:	31 c0                	xor    %eax,%eax
c010a85f:	c9                   	leave  
c010a860:	c3                   	ret    

c010a861 <cmd_ticks>:
    cls();
    return 0;
}

static int
cmd_ticks(int argc, char* argv[]) {
c010a861:	55                   	push   %ebp
c010a862:	89 e5                	mov    %esp,%ebp
c010a864:	83 ec 08             	sub    $0x8,%esp
    (void) argc;
    (void) argv;

    print("%lu\n", pit_ticks());
c010a867:	e8 35 83 ff ff       	call   c0102ba1 <pit_ticks>
c010a86c:	52                   	push   %edx
c010a86d:	52                   	push   %edx
c010a86e:	50                   	push   %eax
c010a86f:	68 4b 23 11 c0       	push   $0xc011234b
c010a874:	e8 ef 99 ff ff       	call   c0104268 <print>
    return 0;
}
c010a879:	31 c0                	xor    %eax,%eax
c010a87b:	c9                   	leave  
c010a87c:	c3                   	ret    

c010a87d <cmd_clear>:
    print("\tCompiled on %s at %s\n", __DATE__, __TIME__);
    return 0;
}

static int
cmd_clear(int argc, char* argv[]) {
c010a87d:	55                   	push   %ebp
c010a87e:	89 e5                	mov    %esp,%ebp
c010a880:	83 ec 08             	sub    $0x8,%esp
    (void) argc;
    (void) argv;

    cls();
c010a883:	e8 82 7b ff ff       	call   c010240a <cls>
    return 0;
}
c010a888:	31 c0                	xor    %eax,%eax
c010a88a:	c9                   	leave  
c010a88b:	c3                   	ret    

c010a88c <putc>:
    outb(0x64, 0xFE);
    return 0;
}

void
putc(const char c) {
c010a88c:	55                   	push   %ebp
c010a88d:	89 e5                	mov    %esp,%ebp
c010a88f:	53                   	push   %ebx
c010a890:	83 ec 10             	sub    $0x10,%esp
    putc_serial(c);
c010a893:	0f be 5d 08          	movsbl 0x8(%ebp),%ebx
c010a897:	53                   	push   %ebx
c010a898:	e8 e8 83 ff ff       	call   c0102c85 <putc_serial>
    // putc_lpt(c);
    putc_cga(c);
c010a89d:	83 c4 10             	add    $0x10,%esp
c010a8a0:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
c010a8a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a8a6:	c9                   	leave  

void
putc(const char c) {
    putc_serial(c);
    // putc_lpt(c);
    putc_cga(c);
c010a8a7:	e9 a1 7b ff ff       	jmp    c010244d <putc_cga>

c010a8ac <getc>:
}

char
getc(void) {
c010a8ac:	55                   	push   %ebp
c010a8ad:	89 e5                	mov    %esp,%ebp
    if (console.rpos != console.wpos) {
c010a8af:	8b 15 90 da 14 c0    	mov    0xc014da90,%edx
        char c = console.buf[console.rpos++];
        if (console.rpos == CONSBUFSIZE)
            console.rpos = 0;
        return c;
    }
    return 0;
c010a8b5:	31 c0                	xor    %eax,%eax
    putc_cga(c);
}

char
getc(void) {
    if (console.rpos != console.wpos) {
c010a8b7:	3b 15 94 da 14 c0    	cmp    0xc014da94,%edx
c010a8bd:	74 21                	je     c010a8e0 <getc+0x34>
        char c = console.buf[console.rpos++];
c010a8bf:	8d 4a 01             	lea    0x1(%edx),%ecx
c010a8c2:	89 0d 90 da 14 c0    	mov    %ecx,0xc014da90
c010a8c8:	8a 82 c0 d2 14 c0    	mov    -0x3feb2d40(%edx),%al
        if (console.rpos == CONSBUFSIZE)
c010a8ce:	81 f9 d0 07 00 00    	cmp    $0x7d0,%ecx
c010a8d4:	75 0a                	jne    c010a8e0 <getc+0x34>
            console.rpos = 0;
c010a8d6:	c7 05 90 da 14 c0 00 	movl   $0x0,0xc014da90
c010a8dd:	00 00 00 
        return c;
    }
    return 0;
}
c010a8e0:	5d                   	pop    %ebp
c010a8e1:	c3                   	ret    

c010a8e2 <readline>:

#define BUFLEN 1024

char*
readline(void) {
c010a8e2:	55                   	push   %ebp
c010a8e3:	89 e5                	mov    %esp,%ebp
c010a8e5:	56                   	push   %esi
c010a8e6:	53                   	push   %ebx
    static char buf[BUFLEN];

    int i = 0;
c010a8e7:	31 f6                	xor    %esi,%esi
    while (1) {
        char c = getc();
c010a8e9:	e8 be ff ff ff       	call   c010a8ac <getc>
c010a8ee:	88 c3                	mov    %al,%bl
        if (c < 0)
c010a8f0:	84 c0                	test   %al,%al
c010a8f2:	78 6c                	js     c010a960 <readline+0x7e>
            return NULL;
        else if ((c == '\b' || c == '\x7f') && i > 0) {
c010a8f4:	3c 7f                	cmp    $0x7f,%al
c010a8f6:	74 04                	je     c010a8fc <readline+0x1a>
c010a8f8:	3c 08                	cmp    $0x8,%al
c010a8fa:	75 14                	jne    c010a910 <readline+0x2e>
c010a8fc:	85 f6                	test   %esi,%esi
c010a8fe:	74 34                	je     c010a934 <readline+0x52>
            putc('\b');
c010a900:	83 ec 0c             	sub    $0xc,%esp
c010a903:	6a 08                	push   $0x8
c010a905:	e8 82 ff ff ff       	call   c010a88c <putc>
            i--;
c010a90a:	4e                   	dec    %esi
c010a90b:	83 c4 10             	add    $0x10,%esp
c010a90e:	eb d9                	jmp    c010a8e9 <readline+0x7>
        } else if (c >= ' ' && i < BUFLEN - 1) {
c010a910:	3c 1f                	cmp    $0x1f,%al
c010a912:	7e 25                	jle    c010a939 <readline+0x57>
c010a914:	81 fe fe 03 00 00    	cmp    $0x3fe,%esi
c010a91a:	7f 3d                	jg     c010a959 <readline+0x77>
            putc(c);
c010a91c:	83 ec 0c             	sub    $0xc,%esp
c010a91f:	0f be c3             	movsbl %bl,%eax
c010a922:	50                   	push   %eax
c010a923:	e8 64 ff ff ff       	call   c010a88c <putc>
            buf[i++] = c;
c010a928:	88 9e 80 cc 14 c0    	mov    %bl,-0x3feb3380(%esi)
c010a92e:	83 c4 10             	add    $0x10,%esp
c010a931:	46                   	inc    %esi
c010a932:	eb b5                	jmp    c010a8e9 <readline+0x7>
        if (c < 0)
            return NULL;
        else if ((c == '\b' || c == '\x7f') && i > 0) {
            putc('\b');
            i--;
        } else if (c >= ' ' && i < BUFLEN - 1) {
c010a934:	80 fb 1f             	cmp    $0x1f,%bl
c010a937:	7f e3                	jg     c010a91c <readline+0x3a>
            putc(c);
            buf[i++] = c;
        } else if (c == '\n' || c == '\r') {
c010a939:	80 fb 0a             	cmp    $0xa,%bl
c010a93c:	75 1b                	jne    c010a959 <readline+0x77>
            putc('\n');
c010a93e:	83 ec 0c             	sub    $0xc,%esp
c010a941:	6a 0a                	push   $0xa
c010a943:	e8 44 ff ff ff       	call   c010a88c <putc>
            buf[i] = 0;
c010a948:	c6 86 80 cc 14 c0 00 	movb   $0x0,-0x3feb3380(%esi)
            return buf;
c010a94f:	83 c4 10             	add    $0x10,%esp
c010a952:	b8 80 cc 14 c0       	mov    $0xc014cc80,%eax
c010a957:	eb 09                	jmp    c010a962 <readline+0x80>
            putc('\b');
            i--;
        } else if (c >= ' ' && i < BUFLEN - 1) {
            putc(c);
            buf[i++] = c;
        } else if (c == '\n' || c == '\r') {
c010a959:	80 fb 0d             	cmp    $0xd,%bl
c010a95c:	75 8b                	jne    c010a8e9 <readline+0x7>
c010a95e:	eb de                	jmp    c010a93e <readline+0x5c>

    int i = 0;
    while (1) {
        char c = getc();
        if (c < 0)
            return NULL;
c010a960:	31 c0                	xor    %eax,%eax
            putc('\n');
            buf[i] = 0;
            return buf;
        }
    }
}
c010a962:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010a965:	5b                   	pop    %ebx
c010a966:	5e                   	pop    %esi
c010a967:	5d                   	pop    %ebp
c010a968:	c3                   	ret    

c010a969 <prompt>:
    print("Unknown command '%s'\n", argv[0]);
    return 0;
}

void
prompt(void) {
c010a969:	55                   	push   %ebp
c010a96a:	89 e5                	mov    %esp,%ebp
c010a96c:	57                   	push   %edi
c010a96d:	56                   	push   %esi
c010a96e:	53                   	push   %ebx
c010a96f:	83 ec 4c             	sub    $0x4c,%esp
    if (crt.pos != 0)
c010a972:	66 83 3d 9c da 14 c0 	cmpw   $0x0,0xc014da9c
c010a979:	00 
c010a97a:	74 10                	je     c010a98c <prompt+0x23>
        print("\n");
c010a97c:	83 ec 0c             	sub    $0xc,%esp
c010a97f:	68 35 04 11 c0       	push   $0xc0110435
c010a984:	e8 df 98 ff ff       	call   c0104268 <print>
c010a989:	83 c4 10             	add    $0x10,%esp
    print("<j> ");
c010a98c:	83 ec 0c             	sub    $0xc,%esp
c010a98f:	68 50 23 11 c0       	push   $0xc0112350
c010a994:	e8 cf 98 ff ff       	call   c0104268 <print>
    char* buf = readline();
c010a999:	e8 44 ff ff ff       	call   c010a8e2 <readline>
c010a99e:	89 c3                	mov    %eax,%ebx
    if (buf != NULL)
c010a9a0:	83 c4 10             	add    $0x10,%esp
c010a9a3:	85 c0                	test   %eax,%eax
c010a9a5:	0f 84 be 00 00 00    	je     c010aa69 <prompt+0x100>

static int
runcmd(char* buf) {
    // Parse the command buffer into whitespace-separated arguments
    int argc = 0;
    char* argv[MAXARGS] = {0};
c010a9ab:	8d 7d a8             	lea    -0x58(%ebp),%edi
c010a9ae:	b9 10 00 00 00       	mov    $0x10,%ecx
c010a9b3:	31 c0                	xor    %eax,%eax
c010a9b5:	f3 ab                	rep stos %eax,%es:(%edi)
#define MAXARGS 16

static int
runcmd(char* buf) {
    // Parse the command buffer into whitespace-separated arguments
    int argc = 0;
c010a9b7:	31 f6                	xor    %esi,%esi
    char* argv[MAXARGS] = {0};

    for (;;) {
        // gobble whitespace
        while (*buf && strchr(WHITESPACE, *buf))
c010a9b9:	0f be 03             	movsbl (%ebx),%eax
c010a9bc:	84 c0                	test   %al,%al
c010a9be:	75 07                	jne    c010a9c7 <prompt+0x5e>
            *buf++ = 0;
        if (*buf == 0)
c010a9c0:	80 3b 00             	cmpb   $0x0,(%ebx)
c010a9c3:	75 20                	jne    c010a9e5 <prompt+0x7c>
c010a9c5:	eb 53                	jmp    c010aa1a <prompt+0xb1>
    int argc = 0;
    char* argv[MAXARGS] = {0};

    for (;;) {
        // gobble whitespace
        while (*buf && strchr(WHITESPACE, *buf))
c010a9c7:	52                   	push   %edx
c010a9c8:	52                   	push   %edx
c010a9c9:	50                   	push   %eax
c010a9ca:	68 55 23 11 c0       	push   $0xc0112355
c010a9cf:	e8 da 9d ff ff       	call   c01047ae <strchr>
c010a9d4:	83 c4 10             	add    $0x10,%esp
c010a9d7:	85 c0                	test   %eax,%eax
c010a9d9:	74 e5                	je     c010a9c0 <prompt+0x57>
            *buf++ = 0;
c010a9db:	c6 03 00             	movb   $0x0,(%ebx)
c010a9de:	89 f7                	mov    %esi,%edi
c010a9e0:	43                   	inc    %ebx
c010a9e1:	89 fe                	mov    %edi,%esi
c010a9e3:	eb d4                	jmp    c010a9b9 <prompt+0x50>
        if (*buf == 0)
            break;

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c010a9e5:	83 fe 0f             	cmp    $0xf,%esi
c010a9e8:	75 0b                	jne    c010a9f5 <prompt+0x8c>
            print("Too many arguments (max %d)\n", MAXARGS);
c010a9ea:	57                   	push   %edi
c010a9eb:	57                   	push   %edi
c010a9ec:	6a 10                	push   $0x10
c010a9ee:	68 5a 23 11 c0       	push   $0xc011235a
c010a9f3:	eb 6c                	jmp    c010aa61 <prompt+0xf8>
            return 0;
        }
        argv[argc++] = buf;
c010a9f5:	8d 7e 01             	lea    0x1(%esi),%edi
c010a9f8:	89 5c b5 a8          	mov    %ebx,-0x58(%ebp,%esi,4)
        while (*buf && !strchr(WHITESPACE, *buf))
c010a9fc:	0f be 03             	movsbl (%ebx),%eax
c010a9ff:	84 c0                	test   %al,%al
c010aa01:	74 de                	je     c010a9e1 <prompt+0x78>
c010aa03:	56                   	push   %esi
c010aa04:	56                   	push   %esi
c010aa05:	50                   	push   %eax
c010aa06:	68 55 23 11 c0       	push   $0xc0112355
c010aa0b:	e8 9e 9d ff ff       	call   c01047ae <strchr>
c010aa10:	83 c4 10             	add    $0x10,%esp
c010aa13:	85 c0                	test   %eax,%eax
c010aa15:	75 ca                	jne    c010a9e1 <prompt+0x78>
            buf++;
c010aa17:	43                   	inc    %ebx
c010aa18:	eb e2                	jmp    c010a9fc <prompt+0x93>
    }
    argv[argc] = 0;
c010aa1a:	c7 44 b5 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%esi,4)
c010aa21:	00 

    // Lookup and invoke the command
    if (argc == 0)
c010aa22:	85 f6                	test   %esi,%esi
c010aa24:	74 43                	je     c010aa69 <prompt+0x100>
c010aa26:	31 db                	xor    %ebx,%ebx
        return 0;

    static const size_t ncmds = ARRAY_SIZE(cmds);
    for (size_t i = 0; i < ncmds; i++)
        if (strcmp(argv[0], cmds[i].name) == 0)
c010aa28:	51                   	push   %ecx
c010aa29:	51                   	push   %ecx
c010aa2a:	6b fb 0c             	imul   $0xc,%ebx,%edi
c010aa2d:	ff b7 80 24 11 c0    	pushl  -0x3feedb80(%edi)
c010aa33:	ff 75 a8             	pushl  -0x58(%ebp)
c010aa36:	e8 c8 9d ff ff       	call   c0104803 <strcmp>
c010aa3b:	83 c4 10             	add    $0x10,%esp
c010aa3e:	85 c0                	test   %eax,%eax
c010aa40:	75 0f                	jne    c010aa51 <prompt+0xe8>
            return cmds[i].func(argc, argv);
c010aa42:	52                   	push   %edx
c010aa43:	52                   	push   %edx
c010aa44:	8d 45 a8             	lea    -0x58(%ebp),%eax
c010aa47:	50                   	push   %eax
c010aa48:	56                   	push   %esi
c010aa49:	ff 97 88 24 11 c0    	call   *-0x3feedb78(%edi)
c010aa4f:	eb 15                	jmp    c010aa66 <prompt+0xfd>
    // Lookup and invoke the command
    if (argc == 0)
        return 0;

    static const size_t ncmds = ARRAY_SIZE(cmds);
    for (size_t i = 0; i < ncmds; i++)
c010aa51:	43                   	inc    %ebx
c010aa52:	83 fb 06             	cmp    $0x6,%ebx
c010aa55:	75 d1                	jne    c010aa28 <prompt+0xbf>
        if (strcmp(argv[0], cmds[i].name) == 0)
            return cmds[i].func(argc, argv);

    print("Unknown command '%s'\n", argv[0]);
c010aa57:	50                   	push   %eax
c010aa58:	50                   	push   %eax
c010aa59:	ff 75 a8             	pushl  -0x58(%ebp)
c010aa5c:	68 77 23 11 c0       	push   $0xc0112377
c010aa61:	e8 02 98 ff ff       	call   c0104268 <print>
c010aa66:	83 c4 10             	add    $0x10,%esp
    print("<j> ");
    char* buf = readline();
    if (buf != NULL)
        if (runcmd(buf) < 0)
            return;
}
c010aa69:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010aa6c:	5b                   	pop    %ebx
c010aa6d:	5e                   	pop    %esi
c010aa6e:	5f                   	pop    %edi
c010aa6f:	5d                   	pop    %ebp
c010aa70:	c3                   	ret    

c010aa71 <alltests>:

    return 0;
}

int
alltests(int argc, char* argv[]) {
c010aa71:	55                   	push   %ebp
c010aa72:	89 e5                	mov    %esp,%ebp
c010aa74:	53                   	push   %ebx
c010aa75:	51                   	push   %ecx
c010aa76:	bb c0 25 11 c0       	mov    $0xc01125c0,%ebx
    for (size_t i = 1; i < ntests - 1; i++) {  // no extreme()
        print("\n");
c010aa7b:	83 ec 0c             	sub    $0xc,%esp
c010aa7e:	68 35 04 11 c0       	push   $0xc0110435
c010aa83:	e8 e0 97 ff ff       	call   c0104268 <print>
        tests[i].func(argc, argv);
c010aa88:	58                   	pop    %eax
c010aa89:	5a                   	pop    %edx
c010aa8a:	ff 75 0c             	pushl  0xc(%ebp)
c010aa8d:	ff 75 08             	pushl  0x8(%ebp)
c010aa90:	ff 53 0c             	call   *0xc(%ebx)
c010aa93:	83 c3 08             	add    $0x8,%ebx
    return 0;
}

int
alltests(int argc, char* argv[]) {
    for (size_t i = 1; i < ntests - 1; i++) {  // no extreme()
c010aa96:	83 c4 10             	add    $0x10,%esp
c010aa99:	81 fb 60 26 11 c0    	cmp    $0xc0112660,%ebx
c010aa9f:	75 da                	jne    c010aa7b <alltests+0xa>
        print("\n");
        tests[i].func(argc, argv);
    }

    return 0;
}
c010aaa1:	31 c0                	xor    %eax,%eax
c010aaa3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010aaa6:	c9                   	leave  
c010aaa7:	c3                   	ret    

c010aaa8 <extreme>:

int
extreme(int argc, char* argv[]) {
c010aaa8:	55                   	push   %ebp
c010aaa9:	89 e5                	mov    %esp,%ebp
c010aaab:	53                   	push   %ebx
c010aaac:	83 ec 20             	sub    $0x20,%esp
    print("\nStarting randomized testing...\n\n");
c010aaaf:	68 c8 24 11 c0       	push   $0xc01124c8
c010aab4:	e8 af 97 ff ff       	call   c0104268 <print>
c010aab9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 1024; ++i) {
c010aabc:	31 db                	xor    %ebx,%ebx
        size_t test = (random() % (ntests - 2)) + 1;
c010aabe:	e8 4d a0 ff ff       	call   c0104b10 <random>
c010aac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aac6:	89 55 f4             	mov    %edx,-0xc(%ebp)
        print("%d: \n", i);
c010aac9:	50                   	push   %eax
c010aaca:	50                   	push   %eax
c010aacb:	53                   	push   %ebx
c010aacc:	68 ea 24 11 c0       	push   $0xc01124ea
c010aad1:	e8 92 97 ff ff       	call   c0104268 <print>
        tests[test].func(argc, argv);
c010aad6:	6a 00                	push   $0x0
c010aad8:	6a 14                	push   $0x14
c010aada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aadd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aae0:	52                   	push   %edx
c010aae1:	50                   	push   %eax
c010aae2:	e8 a1 52 00 00       	call   c010fd88 <__umoddi3>
c010aae7:	83 c4 18             	add    $0x18,%esp
c010aaea:	ff 75 0c             	pushl  0xc(%ebp)
c010aaed:	ff 75 08             	pushl  0x8(%ebp)
c010aaf0:	ff 14 c5 cc 25 11 c0 	call   *-0x3feeda34(,%eax,8)
        print("\n");
c010aaf7:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010aafe:	e8 65 97 ff ff       	call   c0104268 <print>
}

int
extreme(int argc, char* argv[]) {
    print("\nStarting randomized testing...\n\n");
    for (int i = 0; i < 1024; ++i) {
c010ab03:	43                   	inc    %ebx
c010ab04:	83 c4 10             	add    $0x10,%esp
c010ab07:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
c010ab0d:	75 af                	jne    c010aabe <extreme+0x16>
        size_t test = (random() % (ntests - 2)) + 1;
        print("%d: \n", i);
        tests[test].func(argc, argv);
        print("\n");
    }
    print("Finished randomized testing...\n");
c010ab0f:	83 ec 0c             	sub    $0xc,%esp
c010ab12:	68 f0 24 11 c0       	push   $0xc01124f0
c010ab17:	e8 4c 97 ff ff       	call   c0104268 <print>
    return 0;
}
c010ab1c:	31 c0                	xor    %eax,%eax
c010ab1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010ab21:	c9                   	leave  
c010ab22:	c3                   	ret    

c010ab23 <test_suite>:
    { "x", extreme }
};

static const size_t ntests = ARRAY_SIZE(tests);

int test_suite(int argc, char* argv[]) {
c010ab23:	55                   	push   %ebp
c010ab24:	89 e5                	mov    %esp,%ebp
c010ab26:	57                   	push   %edi
c010ab27:	56                   	push   %esi
c010ab28:	53                   	push   %ebx
c010ab29:	83 ec 0c             	sub    $0xc,%esp
c010ab2c:	8b 7d 08             	mov    0x8(%ebp),%edi
c010ab2f:	8b 75 0c             	mov    0xc(%ebp),%esi
    if (argc == 1) {
c010ab32:	83 ff 01             	cmp    $0x1,%edi
c010ab35:	75 34                	jne    c010ab6b <test_suite+0x48>
        print("test options:\n");
c010ab37:	83 ec 0c             	sub    $0xc,%esp
c010ab3a:	68 10 25 11 c0       	push   $0xc0112510
c010ab3f:	e8 24 97 ff ff       	call   c0104268 <print>
c010ab44:	83 c4 10             	add    $0x10,%esp
c010ab47:	31 db                	xor    %ebx,%ebx
        for (size_t i = 0; i < ntests - 1; i++)
            print("\t > %s\n", tests[i].name);
c010ab49:	51                   	push   %ecx
c010ab4a:	51                   	push   %ecx
c010ab4b:	ff b3 c0 25 11 c0    	pushl  -0x3feeda40(%ebx)
c010ab51:	68 1f 25 11 c0       	push   $0xc011251f
c010ab56:	e8 0d 97 ff ff       	call   c0104268 <print>
c010ab5b:	83 c3 08             	add    $0x8,%ebx
static const size_t ntests = ARRAY_SIZE(tests);

int test_suite(int argc, char* argv[]) {
    if (argc == 1) {
        print("test options:\n");
        for (size_t i = 0; i < ntests - 1; i++)
c010ab5e:	83 c4 10             	add    $0x10,%esp
c010ab61:	81 fb a8 00 00 00    	cmp    $0xa8,%ebx
c010ab67:	75 e0                	jne    c010ab49 <test_suite+0x26>
c010ab69:	eb 58                	jmp    c010abc3 <test_suite+0xa0>
            print("\t > %s\n", tests[i].name);
        return 0;
    }

    print("\n");
c010ab6b:	83 ec 0c             	sub    $0xc,%esp
c010ab6e:	68 35 04 11 c0       	push   $0xc0110435
c010ab73:	e8 f0 96 ff ff       	call   c0104268 <print>
c010ab78:	83 c4 10             	add    $0x10,%esp
    for (size_t i = 0; i < ntests; i++)
c010ab7b:	31 db                	xor    %ebx,%ebx
        if (strcmp(argv[1], tests[i].name) == 0)
c010ab7d:	52                   	push   %edx
c010ab7e:	52                   	push   %edx
c010ab7f:	ff 34 dd c0 25 11 c0 	pushl  -0x3feeda40(,%ebx,8)
c010ab86:	ff 76 04             	pushl  0x4(%esi)
c010ab89:	e8 75 9c ff ff       	call   c0104803 <strcmp>
c010ab8e:	83 c4 10             	add    $0x10,%esp
c010ab91:	85 c0                	test   %eax,%eax
c010ab93:	75 16                	jne    c010abab <test_suite+0x88>
            return tests[i].func(argc, argv);
c010ab95:	89 75 0c             	mov    %esi,0xc(%ebp)
c010ab98:	89 7d 08             	mov    %edi,0x8(%ebp)
c010ab9b:	8b 04 dd c4 25 11 c0 	mov    -0x3feeda3c(,%ebx,8),%eax

    print("Invalid test: %s\n", argv[1]);

    return 0;
}
c010aba2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010aba5:	5b                   	pop    %ebx
c010aba6:	5e                   	pop    %esi
c010aba7:	5f                   	pop    %edi
c010aba8:	5d                   	pop    %ebp
    }

    print("\n");
    for (size_t i = 0; i < ntests; i++)
        if (strcmp(argv[1], tests[i].name) == 0)
            return tests[i].func(argc, argv);
c010aba9:	ff e0                	jmp    *%eax
            print("\t > %s\n", tests[i].name);
        return 0;
    }

    print("\n");
    for (size_t i = 0; i < ntests; i++)
c010abab:	43                   	inc    %ebx
c010abac:	83 fb 16             	cmp    $0x16,%ebx
c010abaf:	75 cc                	jne    c010ab7d <test_suite+0x5a>
        if (strcmp(argv[1], tests[i].name) == 0)
            return tests[i].func(argc, argv);

    print("Invalid test: %s\n", argv[1]);
c010abb1:	50                   	push   %eax
c010abb2:	50                   	push   %eax
c010abb3:	ff 76 04             	pushl  0x4(%esi)
c010abb6:	68 27 25 11 c0       	push   $0xc0112527
c010abbb:	e8 a8 96 ff ff       	call   c0104268 <print>

    return 0;
c010abc0:	83 c4 10             	add    $0x10,%esp
}
c010abc3:	31 c0                	xor    %eax,%eax
c010abc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010abc8:	5b                   	pop    %ebx
c010abc9:	5e                   	pop    %esi
c010abca:	5f                   	pop    %edi
c010abcb:	5d                   	pop    %ebp
c010abcc:	c3                   	ret    

c010abcd <testa>:

#define TESTSIZE 73

static
void
testa(struct array* a) {
c010abcd:	55                   	push   %ebp
c010abce:	89 e5                	mov    %esp,%ebp
c010abd0:	57                   	push   %edi
c010abd1:	56                   	push   %esi
c010abd2:	53                   	push   %ebx
c010abd3:	81 ec 3c 01 00 00    	sub    $0x13c,%esp
c010abd9:	89 c3                	mov    %eax,%ebx
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010abdb:	31 c0                	xor    %eax,%eax
        testarray[i] = i;
c010abdd:	89 84 85 c4 fe ff ff 	mov    %eax,-0x13c(%ebp,%eax,4)
void
testa(struct array* a) {
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010abe4:	40                   	inc    %eax
c010abe5:	83 f8 49             	cmp    $0x49,%eax
c010abe8:	75 f3                	jne    c010abdd <testa+0x10>
        testarray[i] = i;

    n = array_num(a);
c010abea:	83 ec 0c             	sub    $0xc,%esp
c010abed:	53                   	push   %ebx
c010abee:	e8 c3 a4 ff ff       	call   c01050b6 <array_num>
    assert(n == 0);
c010abf3:	83 c4 10             	add    $0x10,%esp
c010abf6:	85 c0                	test   %eax,%eax
c010abf8:	74 28                	je     c010ac22 <testa+0x55>
c010abfa:	83 ec 0c             	sub    $0xc,%esp
c010abfd:	68 3c 27 11 c0       	push   $0xc011273c
c010ac02:	6a 11                	push   $0x11
c010ac04:	68 70 26 11 c0       	push   $0xc0112670
c010ac09:	68 81 26 11 c0       	push   $0xc0112681
c010ac0e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ac13:	e8 50 96 ff ff       	call   c0104268 <print>
c010ac18:	83 c4 20             	add    $0x20,%esp
c010ac1b:	e8 63 63 ff ff       	call   c0100f83 <backtrace>
c010ac20:	fa                   	cli    
c010ac21:	f4                   	hlt    
c010ac22:	8d b5 c4 fe ff ff    	lea    -0x13c(%ebp),%esi
void
testa(struct array* a) {
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010ac28:	31 ff                	xor    %edi,%edi

    n = array_num(a);
    assert(n == 0);

    for (i = 0; i < TESTSIZE; i++) {
        r = array_add(a, &testarray[i], NULL);
c010ac2a:	50                   	push   %eax
c010ac2b:	6a 00                	push   $0x0
c010ac2d:	56                   	push   %esi
c010ac2e:	53                   	push   %ebx
c010ac2f:	e8 41 a6 ff ff       	call   c0105275 <array_add>
        assert(r == 0);
c010ac34:	83 c4 10             	add    $0x10,%esp
c010ac37:	85 c0                	test   %eax,%eax
c010ac39:	74 28                	je     c010ac63 <testa+0x96>
c010ac3b:	83 ec 0c             	sub    $0xc,%esp
c010ac3e:	68 3c 27 11 c0       	push   $0xc011273c
c010ac43:	6a 15                	push   $0x15
c010ac45:	68 70 26 11 c0       	push   $0xc0112670
c010ac4a:	68 88 26 11 c0       	push   $0xc0112688
c010ac4f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ac54:	e8 0f 96 ff ff       	call   c0104268 <print>
c010ac59:	83 c4 20             	add    $0x20,%esp
c010ac5c:	e8 22 63 ff ff       	call   c0100f83 <backtrace>
c010ac61:	fa                   	cli    
c010ac62:	f4                   	hlt    
        n = array_num(a);
c010ac63:	83 ec 0c             	sub    $0xc,%esp
c010ac66:	53                   	push   %ebx
c010ac67:	e8 4a a4 ff ff       	call   c01050b6 <array_num>
        assert(n == i + 1);
c010ac6c:	47                   	inc    %edi
c010ac6d:	83 c4 10             	add    $0x10,%esp
c010ac70:	39 f8                	cmp    %edi,%eax
c010ac72:	74 28                	je     c010ac9c <testa+0xcf>
c010ac74:	83 ec 0c             	sub    $0xc,%esp
c010ac77:	68 3c 27 11 c0       	push   $0xc011273c
c010ac7c:	6a 17                	push   $0x17
c010ac7e:	68 70 26 11 c0       	push   $0xc0112670
c010ac83:	68 8f 26 11 c0       	push   $0xc011268f
c010ac88:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ac8d:	e8 d6 95 ff ff       	call   c0104268 <print>
c010ac92:	83 c4 20             	add    $0x20,%esp
c010ac95:	e8 e9 62 ff ff       	call   c0100f83 <backtrace>
c010ac9a:	fa                   	cli    
c010ac9b:	f4                   	hlt    
c010ac9c:	83 c6 04             	add    $0x4,%esi
        testarray[i] = i;

    n = array_num(a);
    assert(n == 0);

    for (i = 0; i < TESTSIZE; i++) {
c010ac9f:	83 ff 49             	cmp    $0x49,%edi
c010aca2:	75 86                	jne    c010ac2a <testa+0x5d>
        r = array_add(a, &testarray[i], NULL);
        assert(r == 0);
        n = array_num(a);
        assert(n == i + 1);
    }
    n = array_num(a);
c010aca4:	83 ec 0c             	sub    $0xc,%esp
c010aca7:	53                   	push   %ebx
c010aca8:	e8 09 a4 ff ff       	call   c01050b6 <array_num>
    assert(n == TESTSIZE);
c010acad:	83 c4 10             	add    $0x10,%esp
c010acb0:	83 f8 49             	cmp    $0x49,%eax
c010acb3:	74 28                	je     c010acdd <testa+0x110>
c010acb5:	83 ec 0c             	sub    $0xc,%esp
c010acb8:	68 3c 27 11 c0       	push   $0xc011273c
c010acbd:	6a 1a                	push   $0x1a
c010acbf:	68 70 26 11 c0       	push   $0xc0112670
c010acc4:	68 9a 26 11 c0       	push   $0xc011269a
c010acc9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010acce:	e8 95 95 ff ff       	call   c0104268 <print>
c010acd3:	83 c4 20             	add    $0x20,%esp
c010acd6:	e8 a8 62 ff ff       	call   c0100f83 <backtrace>
c010acdb:	fa                   	cli    
c010acdc:	f4                   	hlt    
void
testa(struct array* a) {
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010acdd:	31 f6                	xor    %esi,%esi
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (i = 0; i < TESTSIZE; i++) {
        p = array_get(a, i);
c010acdf:	57                   	push   %edi
c010ace0:	57                   	push   %edi
c010ace1:	56                   	push   %esi
c010ace2:	53                   	push   %ebx
c010ace3:	e8 d9 a3 ff ff       	call   c01050c1 <array_get>
        assert(*p == i);
c010ace8:	83 c4 10             	add    $0x10,%esp
c010aceb:	39 30                	cmp    %esi,(%eax)
c010aced:	74 28                	je     c010ad17 <testa+0x14a>
c010acef:	83 ec 0c             	sub    $0xc,%esp
c010acf2:	68 3c 27 11 c0       	push   $0xc011273c
c010acf7:	6a 1e                	push   $0x1e
c010acf9:	68 70 26 11 c0       	push   $0xc0112670
c010acfe:	68 a8 26 11 c0       	push   $0xc01126a8
c010ad03:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ad08:	e8 5b 95 ff ff       	call   c0104268 <print>
c010ad0d:	83 c4 20             	add    $0x20,%esp
c010ad10:	e8 6e 62 ff ff       	call   c0100f83 <backtrace>
c010ad15:	fa                   	cli    
c010ad16:	f4                   	hlt    
        assert(n == i + 1);
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (i = 0; i < TESTSIZE; i++) {
c010ad17:	46                   	inc    %esi
c010ad18:	83 fe 49             	cmp    $0x49,%esi
c010ad1b:	75 c2                	jne    c010acdf <testa+0x112>
        p = array_get(a, i);
        assert(*p == i);
    }
    n = array_num(a);
c010ad1d:	83 ec 0c             	sub    $0xc,%esp
c010ad20:	53                   	push   %ebx
c010ad21:	e8 90 a3 ff ff       	call   c01050b6 <array_num>
    assert(n == TESTSIZE);
c010ad26:	83 c4 10             	add    $0x10,%esp
c010ad29:	83 f8 49             	cmp    $0x49,%eax
c010ad2c:	74 28                	je     c010ad56 <testa+0x189>
c010ad2e:	83 ec 0c             	sub    $0xc,%esp
c010ad31:	68 3c 27 11 c0       	push   $0xc011273c
c010ad36:	6a 21                	push   $0x21
c010ad38:	68 70 26 11 c0       	push   $0xc0112670
c010ad3d:	68 9a 26 11 c0       	push   $0xc011269a
c010ad42:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ad47:	e8 1c 95 ff ff       	call   c0104268 <print>
c010ad4c:	83 c4 20             	add    $0x20,%esp
c010ad4f:	e8 2f 62 ff ff       	call   c0100f83 <backtrace>
c010ad54:	fa                   	cli    
c010ad55:	f4                   	hlt    
void
testa(struct array* a) {
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010ad56:	be 24 01 00 00       	mov    $0x124,%esi
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (j = 0; j < TESTSIZE * 4; j++) {
        i = random() % TESTSIZE;
c010ad5b:	e8 b0 9d ff ff       	call   c0104b10 <random>
c010ad60:	6a 00                	push   $0x0
c010ad62:	6a 49                	push   $0x49
c010ad64:	52                   	push   %edx
c010ad65:	50                   	push   %eax
c010ad66:	e8 1d 50 00 00       	call   c010fd88 <__umoddi3>
c010ad6b:	5a                   	pop    %edx
c010ad6c:	59                   	pop    %ecx
c010ad6d:	89 c7                	mov    %eax,%edi
        p = array_get(a, i);
c010ad6f:	50                   	push   %eax
c010ad70:	53                   	push   %ebx
c010ad71:	e8 4b a3 ff ff       	call   c01050c1 <array_get>
        assert(*p == i);
c010ad76:	83 c4 10             	add    $0x10,%esp
c010ad79:	39 38                	cmp    %edi,(%eax)
c010ad7b:	74 28                	je     c010ada5 <testa+0x1d8>
c010ad7d:	83 ec 0c             	sub    $0xc,%esp
c010ad80:	68 3c 27 11 c0       	push   $0xc011273c
c010ad85:	6a 26                	push   $0x26
c010ad87:	68 70 26 11 c0       	push   $0xc0112670
c010ad8c:	68 a8 26 11 c0       	push   $0xc01126a8
c010ad91:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ad96:	e8 cd 94 ff ff       	call   c0104268 <print>
c010ad9b:	83 c4 20             	add    $0x20,%esp
c010ad9e:	e8 e0 61 ff ff       	call   c0100f83 <backtrace>
c010ada3:	fa                   	cli    
c010ada4:	f4                   	hlt    
        assert(*p == i);
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (j = 0; j < TESTSIZE * 4; j++) {
c010ada5:	4e                   	dec    %esi
c010ada6:	75 b3                	jne    c010ad5b <testa+0x18e>
        i = random() % TESTSIZE;
        p = array_get(a, i);
        assert(*p == i);
    }
    n = array_num(a);
c010ada8:	83 ec 0c             	sub    $0xc,%esp
c010adab:	53                   	push   %ebx
c010adac:	e8 05 a3 ff ff       	call   c01050b6 <array_num>
    assert(n == TESTSIZE);
c010adb1:	83 c4 10             	add    $0x10,%esp
c010adb4:	83 f8 49             	cmp    $0x49,%eax
c010adb7:	74 28                	je     c010ade1 <testa+0x214>
c010adb9:	83 ec 0c             	sub    $0xc,%esp
c010adbc:	68 3c 27 11 c0       	push   $0xc011273c
c010adc1:	6a 29                	push   $0x29
c010adc3:	68 70 26 11 c0       	push   $0xc0112670
c010adc8:	68 9a 26 11 c0       	push   $0xc011269a
c010adcd:	68 2b ff 10 c0       	push   $0xc010ff2b
c010add2:	e8 91 94 ff ff       	call   c0104268 <print>
c010add7:	83 c4 20             	add    $0x20,%esp
c010adda:	e8 a4 61 ff ff       	call   c0100f83 <backtrace>
c010addf:	fa                   	cli    
c010ade0:	f4                   	hlt    
c010ade1:	8d 7d e4             	lea    -0x1c(%ebp),%edi
void
testa(struct array* a) {
    int testarray[TESTSIZE];
    int i, j, n, r, *p;

    for (i = 0; i < TESTSIZE; i++)
c010ade4:	31 f6                	xor    %esi,%esi
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (i = 0; i < TESTSIZE; i++)
        array_set(a, i, &testarray[TESTSIZE - i - 1]);
c010ade6:	50                   	push   %eax
c010ade7:	57                   	push   %edi
c010ade8:	56                   	push   %esi
c010ade9:	53                   	push   %ebx
c010adea:	e8 16 a3 ff ff       	call   c0105105 <array_set>
        assert(*p == i);
    }
    n = array_num(a);
    assert(n == TESTSIZE);

    for (i = 0; i < TESTSIZE; i++)
c010adef:	46                   	inc    %esi
c010adf0:	83 ef 04             	sub    $0x4,%edi
c010adf3:	83 c4 10             	add    $0x10,%esp
c010adf6:	83 fe 49             	cmp    $0x49,%esi
c010adf9:	75 eb                	jne    c010ade6 <testa+0x219>
c010adfb:	31 f6                	xor    %esi,%esi
        array_set(a, i, &testarray[TESTSIZE - i - 1]);

    for (i = 0; i < TESTSIZE; i++) {
        p = array_get(a, i);
c010adfd:	50                   	push   %eax
c010adfe:	50                   	push   %eax
c010adff:	56                   	push   %esi
c010ae00:	53                   	push   %ebx
c010ae01:	e8 bb a2 ff ff       	call   c01050c1 <array_get>
        assert(*p == TESTSIZE - i - 1);
c010ae06:	ba 48 00 00 00       	mov    $0x48,%edx
c010ae0b:	29 f2                	sub    %esi,%edx
c010ae0d:	83 c4 10             	add    $0x10,%esp
c010ae10:	39 10                	cmp    %edx,(%eax)
c010ae12:	74 28                	je     c010ae3c <testa+0x26f>
c010ae14:	83 ec 0c             	sub    $0xc,%esp
c010ae17:	68 3c 27 11 c0       	push   $0xc011273c
c010ae1c:	6a 30                	push   $0x30
c010ae1e:	68 70 26 11 c0       	push   $0xc0112670
c010ae23:	68 b0 26 11 c0       	push   $0xc01126b0
c010ae28:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ae2d:	e8 36 94 ff ff       	call   c0104268 <print>
c010ae32:	83 c4 20             	add    $0x20,%esp
c010ae35:	e8 49 61 ff ff       	call   c0100f83 <backtrace>
c010ae3a:	fa                   	cli    
c010ae3b:	f4                   	hlt    
    assert(n == TESTSIZE);

    for (i = 0; i < TESTSIZE; i++)
        array_set(a, i, &testarray[TESTSIZE - i - 1]);

    for (i = 0; i < TESTSIZE; i++) {
c010ae3c:	46                   	inc    %esi
c010ae3d:	83 fe 49             	cmp    $0x49,%esi
c010ae40:	75 bb                	jne    c010adfd <testa+0x230>
        p = array_get(a, i);
        assert(*p == TESTSIZE - i - 1);
    }

    r = array_setsize(a, TESTSIZE / 2);
c010ae42:	50                   	push   %eax
c010ae43:	50                   	push   %eax
c010ae44:	6a 24                	push   $0x24
c010ae46:	53                   	push   %ebx
c010ae47:	e8 b3 a3 ff ff       	call   c01051ff <array_setsize>
    assert(r == 0);
c010ae4c:	83 c4 10             	add    $0x10,%esp
c010ae4f:	85 c0                	test   %eax,%eax
c010ae51:	74 28                	je     c010ae7b <testa+0x2ae>
c010ae53:	83 ec 0c             	sub    $0xc,%esp
c010ae56:	68 3c 27 11 c0       	push   $0xc011273c
c010ae5b:	6a 34                	push   $0x34
c010ae5d:	68 70 26 11 c0       	push   $0xc0112670
c010ae62:	68 88 26 11 c0       	push   $0xc0112688
c010ae67:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ae6c:	e8 f7 93 ff ff       	call   c0104268 <print>
c010ae71:	83 c4 20             	add    $0x20,%esp
c010ae74:	e8 0a 61 ff ff       	call   c0100f83 <backtrace>
c010ae79:	fa                   	cli    
c010ae7a:	f4                   	hlt    
c010ae7b:	31 f6                	xor    %esi,%esi

    for (i = 0; i < TESTSIZE / 2; i++) {
        p = array_get(a, i);
c010ae7d:	50                   	push   %eax
c010ae7e:	50                   	push   %eax
c010ae7f:	56                   	push   %esi
c010ae80:	53                   	push   %ebx
c010ae81:	e8 3b a2 ff ff       	call   c01050c1 <array_get>
        assert(*p == TESTSIZE - i - 1);
c010ae86:	ba 48 00 00 00       	mov    $0x48,%edx
c010ae8b:	29 f2                	sub    %esi,%edx
c010ae8d:	83 c4 10             	add    $0x10,%esp
c010ae90:	39 10                	cmp    %edx,(%eax)
c010ae92:	74 28                	je     c010aebc <testa+0x2ef>
c010ae94:	83 ec 0c             	sub    $0xc,%esp
c010ae97:	68 3c 27 11 c0       	push   $0xc011273c
c010ae9c:	6a 38                	push   $0x38
c010ae9e:	68 70 26 11 c0       	push   $0xc0112670
c010aea3:	68 b0 26 11 c0       	push   $0xc01126b0
c010aea8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010aead:	e8 b6 93 ff ff       	call   c0104268 <print>
c010aeb2:	83 c4 20             	add    $0x20,%esp
c010aeb5:	e8 c9 60 ff ff       	call   c0100f83 <backtrace>
c010aeba:	fa                   	cli    
c010aebb:	f4                   	hlt    
    }

    r = array_setsize(a, TESTSIZE / 2);
    assert(r == 0);

    for (i = 0; i < TESTSIZE / 2; i++) {
c010aebc:	46                   	inc    %esi
c010aebd:	83 fe 24             	cmp    $0x24,%esi
c010aec0:	75 bb                	jne    c010ae7d <testa+0x2b0>
        p = array_get(a, i);
        assert(*p == TESTSIZE - i - 1);
    }

    array_remove(a, 1);
c010aec2:	50                   	push   %eax
c010aec3:	50                   	push   %eax
c010aec4:	6a 01                	push   $0x1
c010aec6:	53                   	push   %ebx
c010aec7:	e8 e2 a3 ff ff       	call   c01052ae <array_remove>
c010aecc:	83 c4 10             	add    $0x10,%esp

    for (i = 1; i < TESTSIZE / 2 - 1; i++) {
c010aecf:	be 01 00 00 00       	mov    $0x1,%esi
        p = array_get(a, i);
c010aed4:	57                   	push   %edi
c010aed5:	57                   	push   %edi
c010aed6:	56                   	push   %esi
c010aed7:	53                   	push   %ebx
c010aed8:	e8 e4 a1 ff ff       	call   c01050c1 <array_get>
        assert(*p == TESTSIZE - i - 2);
c010aedd:	ba 47 00 00 00       	mov    $0x47,%edx
c010aee2:	29 f2                	sub    %esi,%edx
c010aee4:	83 c4 10             	add    $0x10,%esp
c010aee7:	39 10                	cmp    %edx,(%eax)
c010aee9:	74 28                	je     c010af13 <testa+0x346>
c010aeeb:	83 ec 0c             	sub    $0xc,%esp
c010aeee:	68 3c 27 11 c0       	push   $0xc011273c
c010aef3:	6a 3f                	push   $0x3f
c010aef5:	68 70 26 11 c0       	push   $0xc0112670
c010aefa:	68 c7 26 11 c0       	push   $0xc01126c7
c010aeff:	68 2b ff 10 c0       	push   $0xc010ff2b
c010af04:	e8 5f 93 ff ff       	call   c0104268 <print>
c010af09:	83 c4 20             	add    $0x20,%esp
c010af0c:	e8 72 60 ff ff       	call   c0100f83 <backtrace>
c010af11:	fa                   	cli    
c010af12:	f4                   	hlt    
        assert(*p == TESTSIZE - i - 1);
    }

    array_remove(a, 1);

    for (i = 1; i < TESTSIZE / 2 - 1; i++) {
c010af13:	46                   	inc    %esi
c010af14:	83 fe 23             	cmp    $0x23,%esi
c010af17:	75 bb                	jne    c010aed4 <testa+0x307>
        p = array_get(a, i);
        assert(*p == TESTSIZE - i - 2);
    }
    p = array_get(a, 0);
c010af19:	51                   	push   %ecx
c010af1a:	51                   	push   %ecx
c010af1b:	6a 00                	push   $0x0
c010af1d:	53                   	push   %ebx
c010af1e:	e8 9e a1 ff ff       	call   c01050c1 <array_get>
    assert(*p == TESTSIZE - 1);
c010af23:	83 c4 10             	add    $0x10,%esp
c010af26:	83 38 48             	cmpl   $0x48,(%eax)
c010af29:	74 28                	je     c010af53 <testa+0x386>
c010af2b:	83 ec 0c             	sub    $0xc,%esp
c010af2e:	68 3c 27 11 c0       	push   $0xc011273c
c010af33:	6a 42                	push   $0x42
c010af35:	68 70 26 11 c0       	push   $0xc0112670
c010af3a:	68 de 26 11 c0       	push   $0xc01126de
c010af3f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010af44:	e8 1f 93 ff ff       	call   c0104268 <print>
c010af49:	83 c4 20             	add    $0x20,%esp
c010af4c:	e8 32 60 ff ff       	call   c0100f83 <backtrace>
c010af51:	fa                   	cli    
c010af52:	f4                   	hlt    

    array_setsize(a, 2);
c010af53:	50                   	push   %eax
c010af54:	50                   	push   %eax
c010af55:	6a 02                	push   $0x2
c010af57:	53                   	push   %ebx
c010af58:	e8 a2 a2 ff ff       	call   c01051ff <array_setsize>
    p = array_get(a, 0);
c010af5d:	58                   	pop    %eax
c010af5e:	5a                   	pop    %edx
c010af5f:	6a 00                	push   $0x0
c010af61:	53                   	push   %ebx
c010af62:	e8 5a a1 ff ff       	call   c01050c1 <array_get>
    assert(*p == TESTSIZE - 1);
c010af67:	83 c4 10             	add    $0x10,%esp
c010af6a:	83 38 48             	cmpl   $0x48,(%eax)
c010af6d:	74 28                	je     c010af97 <testa+0x3ca>
c010af6f:	83 ec 0c             	sub    $0xc,%esp
c010af72:	68 3c 27 11 c0       	push   $0xc011273c
c010af77:	6a 46                	push   $0x46
c010af79:	68 70 26 11 c0       	push   $0xc0112670
c010af7e:	68 de 26 11 c0       	push   $0xc01126de
c010af83:	68 2b ff 10 c0       	push   $0xc010ff2b
c010af88:	e8 db 92 ff ff       	call   c0104268 <print>
c010af8d:	83 c4 20             	add    $0x20,%esp
c010af90:	e8 ee 5f ff ff       	call   c0100f83 <backtrace>
c010af95:	fa                   	cli    
c010af96:	f4                   	hlt    
    p = array_get(a, 1);
c010af97:	57                   	push   %edi
c010af98:	57                   	push   %edi
c010af99:	6a 01                	push   $0x1
c010af9b:	53                   	push   %ebx
c010af9c:	e8 20 a1 ff ff       	call   c01050c1 <array_get>
    assert(*p == TESTSIZE - 3);
c010afa1:	83 c4 10             	add    $0x10,%esp
c010afa4:	83 38 46             	cmpl   $0x46,(%eax)
c010afa7:	74 28                	je     c010afd1 <testa+0x404>
c010afa9:	83 ec 0c             	sub    $0xc,%esp
c010afac:	68 3c 27 11 c0       	push   $0xc011273c
c010afb1:	6a 48                	push   $0x48
c010afb3:	68 70 26 11 c0       	push   $0xc0112670
c010afb8:	68 f1 26 11 c0       	push   $0xc01126f1
c010afbd:	68 2b ff 10 c0       	push   $0xc010ff2b
c010afc2:	e8 a1 92 ff ff       	call   c0104268 <print>
c010afc7:	83 c4 20             	add    $0x20,%esp
c010afca:	e8 b4 5f ff ff       	call   c0100f83 <backtrace>
c010afcf:	fa                   	cli    
c010afd0:	f4                   	hlt    

    array_set(a, 1, NULL);
c010afd1:	50                   	push   %eax
c010afd2:	6a 00                	push   $0x0
c010afd4:	6a 01                	push   $0x1
c010afd6:	53                   	push   %ebx
c010afd7:	e8 29 a1 ff ff       	call   c0105105 <array_set>
    array_setsize(a, 2);
c010afdc:	58                   	pop    %eax
c010afdd:	5a                   	pop    %edx
c010afde:	6a 02                	push   $0x2
c010afe0:	53                   	push   %ebx
c010afe1:	e8 19 a2 ff ff       	call   c01051ff <array_setsize>
    p = array_get(a, 0);
c010afe6:	59                   	pop    %ecx
c010afe7:	5e                   	pop    %esi
c010afe8:	6a 00                	push   $0x0
c010afea:	53                   	push   %ebx
c010afeb:	e8 d1 a0 ff ff       	call   c01050c1 <array_get>
    assert(*p == TESTSIZE - 1);
c010aff0:	83 c4 10             	add    $0x10,%esp
c010aff3:	83 38 48             	cmpl   $0x48,(%eax)
c010aff6:	74 28                	je     c010b020 <testa+0x453>
c010aff8:	83 ec 0c             	sub    $0xc,%esp
c010affb:	68 3c 27 11 c0       	push   $0xc011273c
c010b000:	6a 4d                	push   $0x4d
c010b002:	68 70 26 11 c0       	push   $0xc0112670
c010b007:	68 de 26 11 c0       	push   $0xc01126de
c010b00c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b011:	e8 52 92 ff ff       	call   c0104268 <print>
c010b016:	83 c4 20             	add    $0x20,%esp
c010b019:	e8 65 5f ff ff       	call   c0100f83 <backtrace>
c010b01e:	fa                   	cli    
c010b01f:	f4                   	hlt    
    p = array_get(a, 1);
c010b020:	57                   	push   %edi
c010b021:	57                   	push   %edi
c010b022:	6a 01                	push   $0x1
c010b024:	53                   	push   %ebx
c010b025:	e8 97 a0 ff ff       	call   c01050c1 <array_get>
    assert(p == NULL);
c010b02a:	83 c4 10             	add    $0x10,%esp
c010b02d:	85 c0                	test   %eax,%eax
c010b02f:	74 28                	je     c010b059 <testa+0x48c>
c010b031:	83 ec 0c             	sub    $0xc,%esp
c010b034:	68 3c 27 11 c0       	push   $0xc011273c
c010b039:	6a 4f                	push   $0x4f
c010b03b:	68 70 26 11 c0       	push   $0xc0112670
c010b040:	68 04 27 11 c0       	push   $0xc0112704
c010b045:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b04a:	e8 19 92 ff ff       	call   c0104268 <print>
c010b04f:	83 c4 20             	add    $0x20,%esp
c010b052:	e8 2c 5f ff ff       	call   c0100f83 <backtrace>
c010b057:	fa                   	cli    
c010b058:	f4                   	hlt    

    array_setsize(a, TESTSIZE * 10);
c010b059:	52                   	push   %edx
c010b05a:	52                   	push   %edx
c010b05b:	68 da 02 00 00       	push   $0x2da
c010b060:	53                   	push   %ebx
c010b061:	e8 99 a1 ff ff       	call   c01051ff <array_setsize>
    p = array_get(a, 0);
c010b066:	59                   	pop    %ecx
c010b067:	5e                   	pop    %esi
c010b068:	6a 00                	push   $0x0
c010b06a:	53                   	push   %ebx
c010b06b:	e8 51 a0 ff ff       	call   c01050c1 <array_get>
    assert(*p == TESTSIZE - 1);
c010b070:	83 c4 10             	add    $0x10,%esp
c010b073:	83 38 48             	cmpl   $0x48,(%eax)
c010b076:	74 28                	je     c010b0a0 <testa+0x4d3>
c010b078:	83 ec 0c             	sub    $0xc,%esp
c010b07b:	68 3c 27 11 c0       	push   $0xc011273c
c010b080:	6a 53                	push   $0x53
c010b082:	68 70 26 11 c0       	push   $0xc0112670
c010b087:	68 de 26 11 c0       	push   $0xc01126de
c010b08c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b091:	e8 d2 91 ff ff       	call   c0104268 <print>
c010b096:	83 c4 20             	add    $0x20,%esp
c010b099:	e8 e5 5e ff ff       	call   c0100f83 <backtrace>
c010b09e:	fa                   	cli    
c010b09f:	f4                   	hlt    
    p = array_get(a, 1);
c010b0a0:	50                   	push   %eax
c010b0a1:	50                   	push   %eax
c010b0a2:	6a 01                	push   $0x1
c010b0a4:	53                   	push   %ebx
c010b0a5:	e8 17 a0 ff ff       	call   c01050c1 <array_get>
    assert(p == NULL);
c010b0aa:	83 c4 10             	add    $0x10,%esp
c010b0ad:	85 c0                	test   %eax,%eax
c010b0af:	74 28                	je     c010b0d9 <testa+0x50c>
c010b0b1:	83 ec 0c             	sub    $0xc,%esp
c010b0b4:	68 3c 27 11 c0       	push   $0xc011273c
c010b0b9:	6a 55                	push   $0x55
c010b0bb:	68 70 26 11 c0       	push   $0xc0112670
c010b0c0:	68 04 27 11 c0       	push   $0xc0112704
c010b0c5:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b0ca:	e8 99 91 ff ff       	call   c0104268 <print>
c010b0cf:	83 c4 20             	add    $0x20,%esp
c010b0d2:	e8 ac 5e ff ff       	call   c0100f83 <backtrace>
c010b0d7:	fa                   	cli    
c010b0d8:	f4                   	hlt    
}
c010b0d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010b0dc:	5b                   	pop    %ebx
c010b0dd:	5e                   	pop    %esi
c010b0de:	5f                   	pop    %edi
c010b0df:	5d                   	pop    %ebp
c010b0e0:	c3                   	ret    

c010b0e1 <arraytest>:

int
arraytest(int nargs, char** args) {
c010b0e1:	55                   	push   %ebp
c010b0e2:	89 e5                	mov    %esp,%ebp
c010b0e4:	53                   	push   %ebx
c010b0e5:	83 ec 10             	sub    $0x10,%esp
    struct array* a;

    (void)nargs;
    (void)args;

    print("Beginning array test...\n");
c010b0e8:	68 0e 27 11 c0       	push   $0xc011270e
c010b0ed:	e8 76 91 ff ff       	call   c0104268 <print>
    a = array_create();
c010b0f2:	e8 55 a0 ff ff       	call   c010514c <array_create>
c010b0f7:	89 c3                	mov    %eax,%ebx
    assert(a != NULL);
c010b0f9:	83 c4 10             	add    $0x10,%esp
c010b0fc:	85 c0                	test   %eax,%eax
c010b0fe:	75 28                	jne    c010b128 <arraytest+0x47>
c010b100:	83 ec 0c             	sub    $0xc,%esp
c010b103:	68 44 27 11 c0       	push   $0xc0112744
c010b108:	6a 61                	push   $0x61
c010b10a:	68 70 26 11 c0       	push   $0xc0112670
c010b10f:	68 78 20 11 c0       	push   $0xc0112078
c010b114:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b119:	e8 4a 91 ff ff       	call   c0104268 <print>
c010b11e:	83 c4 20             	add    $0x20,%esp
c010b121:	e8 5d 5e ff ff       	call   c0100f83 <backtrace>
c010b126:	fa                   	cli    
c010b127:	f4                   	hlt    

    testa(a);
c010b128:	89 d8                	mov    %ebx,%eax
c010b12a:	e8 9e fa ff ff       	call   c010abcd <testa>

    array_setsize(a, 0);
c010b12f:	50                   	push   %eax
c010b130:	50                   	push   %eax
c010b131:	6a 00                	push   $0x0
c010b133:	53                   	push   %ebx
c010b134:	e8 c6 a0 ff ff       	call   c01051ff <array_setsize>

    testa(a);
c010b139:	89 d8                	mov    %ebx,%eax
c010b13b:	e8 8d fa ff ff       	call   c010abcd <testa>

    array_setsize(a, 0);
c010b140:	5a                   	pop    %edx
c010b141:	59                   	pop    %ecx
c010b142:	6a 00                	push   $0x0
c010b144:	53                   	push   %ebx
c010b145:	e8 b5 a0 ff ff       	call   c01051ff <array_setsize>
    array_destroy(a);
c010b14a:	89 1c 24             	mov    %ebx,(%esp)
c010b14d:	e8 8e a0 ff ff       	call   c01051e0 <array_destroy>

    print("Array test complete\n");
c010b152:	c7 04 24 27 27 11 c0 	movl   $0xc0112727,(%esp)
c010b159:	e8 0a 91 ff ff       	call   c0104268 <print>
    return 0;
}
c010b15e:	31 c0                	xor    %eax,%eax
c010b160:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b163:	c9                   	leave  
c010b164:	c3                   	ret    

c010b165 <bitmaptest>:
#include <bitmap.h>

#define TESTSIZE 533

int
bitmaptest(int nargs, char** args) {
c010b165:	55                   	push   %ebp
c010b166:	89 e5                	mov    %esp,%ebp
c010b168:	56                   	push   %esi
c010b169:	53                   	push   %ebx
c010b16a:	81 ec 2c 02 00 00    	sub    $0x22c,%esp
    int i;

    (void)nargs;
    (void)args;

    print("Starting bitmap test...\n");
c010b170:	68 4e 27 11 c0       	push   $0xc011274e
c010b175:	e8 ee 90 ff ff       	call   c0104268 <print>
c010b17a:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < TESTSIZE; i++)
c010b17d:	31 db                	xor    %ebx,%ebx
        data[i] = random() % 2;
c010b17f:	e8 8c 99 ff ff       	call   c0104b10 <random>
c010b184:	83 e0 01             	and    $0x1,%eax
c010b187:	88 84 2b e3 fd ff ff 	mov    %al,-0x21d(%ebx,%ebp,1)
    (void)nargs;
    (void)args;

    print("Starting bitmap test...\n");

    for (i = 0; i < TESTSIZE; i++)
c010b18e:	43                   	inc    %ebx
c010b18f:	81 fb 15 02 00 00    	cmp    $0x215,%ebx
c010b195:	75 e8                	jne    c010b17f <bitmaptest+0x1a>
        data[i] = random() % 2;

    b = bitmap_create(TESTSIZE);
c010b197:	83 ec 0c             	sub    $0xc,%esp
c010b19a:	68 15 02 00 00       	push   $0x215
c010b19f:	e8 61 b4 ff ff       	call   c0106605 <bitmap_create>
c010b1a4:	89 c3                	mov    %eax,%ebx
    assert(b != NULL);
c010b1a6:	83 c4 10             	add    $0x10,%esp
c010b1a9:	85 c0                	test   %eax,%eax
c010b1ab:	75 28                	jne    c010b1d5 <bitmaptest+0x70>
c010b1ad:	83 ec 0c             	sub    $0xc,%esp
c010b1b0:	68 f4 27 11 c0       	push   $0xc01127f4
c010b1b5:	6a 17                	push   $0x17
c010b1b7:	68 67 27 11 c0       	push   $0xc0112767
c010b1bc:	68 b0 16 11 c0       	push   $0xc01116b0
c010b1c1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b1c6:	e8 9d 90 ff ff       	call   c0104268 <print>
c010b1cb:	83 c4 20             	add    $0x20,%esp
c010b1ce:	e8 b0 5d ff ff       	call   c0100f83 <backtrace>
c010b1d3:	fa                   	cli    
c010b1d4:	f4                   	hlt    
    (void)nargs;
    (void)args;

    print("Starting bitmap test...\n");

    for (i = 0; i < TESTSIZE; i++)
c010b1d5:	31 f6                	xor    %esi,%esi

    b = bitmap_create(TESTSIZE);
    assert(b != NULL);

    for (i = 0; i < TESTSIZE; i++)
        assert(bitmap_isset(b, i) == 0);
c010b1d7:	51                   	push   %ecx
c010b1d8:	51                   	push   %ecx
c010b1d9:	56                   	push   %esi
c010b1da:	53                   	push   %ebx
c010b1db:	e8 f4 b6 ff ff       	call   c01068d4 <bitmap_isset>
c010b1e0:	83 c4 10             	add    $0x10,%esp
c010b1e3:	84 c0                	test   %al,%al
c010b1e5:	74 28                	je     c010b20f <bitmaptest+0xaa>
c010b1e7:	83 ec 0c             	sub    $0xc,%esp
c010b1ea:	68 f4 27 11 c0       	push   $0xc01127f4
c010b1ef:	6a 1a                	push   $0x1a
c010b1f1:	68 67 27 11 c0       	push   $0xc0112767
c010b1f6:	68 79 27 11 c0       	push   $0xc0112779
c010b1fb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b200:	e8 63 90 ff ff       	call   c0104268 <print>
c010b205:	83 c4 20             	add    $0x20,%esp
c010b208:	e8 76 5d ff ff       	call   c0100f83 <backtrace>
c010b20d:	fa                   	cli    
c010b20e:	f4                   	hlt    
        data[i] = random() % 2;

    b = bitmap_create(TESTSIZE);
    assert(b != NULL);

    for (i = 0; i < TESTSIZE; i++)
c010b20f:	46                   	inc    %esi
c010b210:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b216:	75 bf                	jne    c010b1d7 <bitmaptest+0x72>
c010b218:	31 f6                	xor    %esi,%esi
        assert(bitmap_isset(b, i) == 0);

    for (i = 0; i < TESTSIZE; i++) {
        if (data[i])
c010b21a:	80 bc 35 e3 fd ff ff 	cmpb   $0x0,-0x21d(%ebp,%esi,1)
c010b221:	00 
c010b222:	74 0c                	je     c010b230 <bitmaptest+0xcb>
            bitmap_mark(b, i);
c010b224:	52                   	push   %edx
c010b225:	52                   	push   %edx
c010b226:	56                   	push   %esi
c010b227:	53                   	push   %ebx
c010b228:	e8 8d b5 ff ff       	call   c01067ba <bitmap_mark>
c010b22d:	83 c4 10             	add    $0x10,%esp
    assert(b != NULL);

    for (i = 0; i < TESTSIZE; i++)
        assert(bitmap_isset(b, i) == 0);

    for (i = 0; i < TESTSIZE; i++) {
c010b230:	46                   	inc    %esi
c010b231:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b237:	75 e1                	jne    c010b21a <bitmaptest+0xb5>
c010b239:	31 f6                	xor    %esi,%esi
        if (data[i])
            bitmap_mark(b, i);
    }
    for (i = 0; i < TESTSIZE; i++) {
        if (data[i])
c010b23b:	80 bc 35 e3 fd ff ff 	cmpb   $0x0,-0x21d(%ebp,%esi,1)
c010b242:	00 
c010b243:	74 26                	je     c010b26b <bitmaptest+0x106>
            assert(bitmap_isset(b, i));
c010b245:	50                   	push   %eax
c010b246:	50                   	push   %eax
c010b247:	56                   	push   %esi
c010b248:	53                   	push   %ebx
c010b249:	e8 86 b6 ff ff       	call   c01068d4 <bitmap_isset>
c010b24e:	83 c4 10             	add    $0x10,%esp
c010b251:	84 c0                	test   %al,%al
c010b253:	75 4e                	jne    c010b2a3 <bitmaptest+0x13e>
c010b255:	83 ec 0c             	sub    $0xc,%esp
c010b258:	68 f4 27 11 c0       	push   $0xc01127f4
c010b25d:	6a 22                	push   $0x22
c010b25f:	68 67 27 11 c0       	push   $0xc0112767
c010b264:	68 91 27 11 c0       	push   $0xc0112791
c010b269:	eb 24                	jmp    c010b28f <bitmaptest+0x12a>
        else
            assert(bitmap_isset(b, i) == 0);
c010b26b:	50                   	push   %eax
c010b26c:	50                   	push   %eax
c010b26d:	56                   	push   %esi
c010b26e:	53                   	push   %ebx
c010b26f:	e8 60 b6 ff ff       	call   c01068d4 <bitmap_isset>
c010b274:	83 c4 10             	add    $0x10,%esp
c010b277:	84 c0                	test   %al,%al
c010b279:	74 28                	je     c010b2a3 <bitmaptest+0x13e>
c010b27b:	83 ec 0c             	sub    $0xc,%esp
c010b27e:	68 f4 27 11 c0       	push   $0xc01127f4
c010b283:	6a 24                	push   $0x24
c010b285:	68 67 27 11 c0       	push   $0xc0112767
c010b28a:	68 79 27 11 c0       	push   $0xc0112779
c010b28f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b294:	e8 cf 8f ff ff       	call   c0104268 <print>
c010b299:	83 c4 20             	add    $0x20,%esp
c010b29c:	e8 e2 5c ff ff       	call   c0100f83 <backtrace>
c010b2a1:	fa                   	cli    
c010b2a2:	f4                   	hlt    

    for (i = 0; i < TESTSIZE; i++) {
        if (data[i])
            bitmap_mark(b, i);
    }
    for (i = 0; i < TESTSIZE; i++) {
c010b2a3:	46                   	inc    %esi
c010b2a4:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b2aa:	75 8f                	jne    c010b23b <bitmaptest+0xd6>
c010b2ac:	31 f6                	xor    %esi,%esi
        else
            assert(bitmap_isset(b, i) == 0);
    }

    for (i = 0; i < TESTSIZE; i++) {
        if (data[i])
c010b2ae:	80 bc 35 e3 fd ff ff 	cmpb   $0x0,-0x21d(%ebp,%esi,1)
c010b2b5:	00 
c010b2b6:	74 0b                	je     c010b2c3 <bitmaptest+0x15e>
            bitmap_unmark(b, i);
c010b2b8:	50                   	push   %eax
c010b2b9:	50                   	push   %eax
c010b2ba:	56                   	push   %esi
c010b2bb:	53                   	push   %ebx
c010b2bc:	e8 88 b5 ff ff       	call   c0106849 <bitmap_unmark>
c010b2c1:	eb 09                	jmp    c010b2cc <bitmaptest+0x167>
        else
            bitmap_mark(b, i);
c010b2c3:	50                   	push   %eax
c010b2c4:	50                   	push   %eax
c010b2c5:	56                   	push   %esi
c010b2c6:	53                   	push   %ebx
c010b2c7:	e8 ee b4 ff ff       	call   c01067ba <bitmap_mark>
c010b2cc:	83 c4 10             	add    $0x10,%esp
            assert(bitmap_isset(b, i));
        else
            assert(bitmap_isset(b, i) == 0);
    }

    for (i = 0; i < TESTSIZE; i++) {
c010b2cf:	46                   	inc    %esi
c010b2d0:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b2d6:	75 d6                	jne    c010b2ae <bitmaptest+0x149>
c010b2d8:	31 f6                	xor    %esi,%esi
            bitmap_unmark(b, i);
        else
            bitmap_mark(b, i);
    }
    for (i = 0; i < TESTSIZE; i++) {
        if (data[i])
c010b2da:	80 bc 35 e3 fd ff ff 	cmpb   $0x0,-0x21d(%ebp,%esi,1)
c010b2e1:	00 
c010b2e2:	74 26                	je     c010b30a <bitmaptest+0x1a5>
            assert(bitmap_isset(b, i) == 0);
c010b2e4:	50                   	push   %eax
c010b2e5:	50                   	push   %eax
c010b2e6:	56                   	push   %esi
c010b2e7:	53                   	push   %ebx
c010b2e8:	e8 e7 b5 ff ff       	call   c01068d4 <bitmap_isset>
c010b2ed:	83 c4 10             	add    $0x10,%esp
c010b2f0:	84 c0                	test   %al,%al
c010b2f2:	74 4e                	je     c010b342 <bitmaptest+0x1dd>
c010b2f4:	83 ec 0c             	sub    $0xc,%esp
c010b2f7:	68 f4 27 11 c0       	push   $0xc01127f4
c010b2fc:	6a 2f                	push   $0x2f
c010b2fe:	68 67 27 11 c0       	push   $0xc0112767
c010b303:	68 79 27 11 c0       	push   $0xc0112779
c010b308:	eb 24                	jmp    c010b32e <bitmaptest+0x1c9>
        else
            assert(bitmap_isset(b, i));
c010b30a:	50                   	push   %eax
c010b30b:	50                   	push   %eax
c010b30c:	56                   	push   %esi
c010b30d:	53                   	push   %ebx
c010b30e:	e8 c1 b5 ff ff       	call   c01068d4 <bitmap_isset>
c010b313:	83 c4 10             	add    $0x10,%esp
c010b316:	84 c0                	test   %al,%al
c010b318:	75 28                	jne    c010b342 <bitmaptest+0x1dd>
c010b31a:	83 ec 0c             	sub    $0xc,%esp
c010b31d:	68 f4 27 11 c0       	push   $0xc01127f4
c010b322:	6a 31                	push   $0x31
c010b324:	68 67 27 11 c0       	push   $0xc0112767
c010b329:	68 91 27 11 c0       	push   $0xc0112791
c010b32e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b333:	e8 30 8f ff ff       	call   c0104268 <print>
c010b338:	83 c4 20             	add    $0x20,%esp
c010b33b:	e8 43 5c ff ff       	call   c0100f83 <backtrace>
c010b340:	fa                   	cli    
c010b341:	f4                   	hlt    
        if (data[i])
            bitmap_unmark(b, i);
        else
            bitmap_mark(b, i);
    }
    for (i = 0; i < TESTSIZE; i++) {
c010b342:	46                   	inc    %esi
c010b343:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b349:	75 8f                	jne    c010b2da <bitmaptest+0x175>
            assert(bitmap_isset(b, i) == 0);
        else
            assert(bitmap_isset(b, i));
    }

    while (bitmap_alloc(b, &x) == 0) {
c010b34b:	8d b5 dc fd ff ff    	lea    -0x224(%ebp),%esi
c010b351:	52                   	push   %edx
c010b352:	52                   	push   %edx
c010b353:	56                   	push   %esi
c010b354:	53                   	push   %ebx
c010b355:	e8 b4 b3 ff ff       	call   c010670e <bitmap_alloc>
c010b35a:	83 c4 10             	add    $0x10,%esp
c010b35d:	85 c0                	test   %eax,%eax
c010b35f:	0f 85 bc 00 00 00    	jne    c010b421 <bitmaptest+0x2bc>
        assert(x < TESTSIZE);
c010b365:	81 bd dc fd ff ff 14 	cmpl   $0x214,-0x224(%ebp)
c010b36c:	02 00 00 
c010b36f:	76 28                	jbe    c010b399 <bitmaptest+0x234>
c010b371:	83 ec 0c             	sub    $0xc,%esp
c010b374:	68 f4 27 11 c0       	push   $0xc01127f4
c010b379:	6a 35                	push   $0x35
c010b37b:	68 67 27 11 c0       	push   $0xc0112767
c010b380:	68 a4 27 11 c0       	push   $0xc01127a4
c010b385:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b38a:	e8 d9 8e ff ff       	call   c0104268 <print>
c010b38f:	83 c4 20             	add    $0x20,%esp
c010b392:	e8 ec 5b ff ff       	call   c0100f83 <backtrace>
c010b397:	fa                   	cli    
c010b398:	f4                   	hlt    
        assert(bitmap_isset(b, x));
c010b399:	51                   	push   %ecx
c010b39a:	51                   	push   %ecx
c010b39b:	ff b5 dc fd ff ff    	pushl  -0x224(%ebp)
c010b3a1:	53                   	push   %ebx
c010b3a2:	e8 2d b5 ff ff       	call   c01068d4 <bitmap_isset>
c010b3a7:	83 c4 10             	add    $0x10,%esp
c010b3aa:	84 c0                	test   %al,%al
c010b3ac:	75 28                	jne    c010b3d6 <bitmaptest+0x271>
c010b3ae:	83 ec 0c             	sub    $0xc,%esp
c010b3b1:	68 f4 27 11 c0       	push   $0xc01127f4
c010b3b6:	6a 36                	push   $0x36
c010b3b8:	68 67 27 11 c0       	push   $0xc0112767
c010b3bd:	68 b1 27 11 c0       	push   $0xc01127b1
c010b3c2:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b3c7:	e8 9c 8e ff ff       	call   c0104268 <print>
c010b3cc:	83 c4 20             	add    $0x20,%esp
c010b3cf:	e8 af 5b ff ff       	call   c0100f83 <backtrace>
c010b3d4:	fa                   	cli    
c010b3d5:	f4                   	hlt    
        assert(data[x] == 1);
c010b3d6:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
c010b3dc:	80 bc 05 e3 fd ff ff 	cmpb   $0x1,-0x21d(%ebp,%eax,1)
c010b3e3:	01 
c010b3e4:	74 28                	je     c010b40e <bitmaptest+0x2a9>
c010b3e6:	83 ec 0c             	sub    $0xc,%esp
c010b3e9:	68 f4 27 11 c0       	push   $0xc01127f4
c010b3ee:	6a 37                	push   $0x37
c010b3f0:	68 67 27 11 c0       	push   $0xc0112767
c010b3f5:	68 c4 27 11 c0       	push   $0xc01127c4
c010b3fa:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b3ff:	e8 64 8e ff ff       	call   c0104268 <print>
c010b404:	83 c4 20             	add    $0x20,%esp
c010b407:	e8 77 5b ff ff       	call   c0100f83 <backtrace>
c010b40c:	fa                   	cli    
c010b40d:	f4                   	hlt    
        data[x] = 0;
c010b40e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
c010b414:	c6 84 05 e3 fd ff ff 	movb   $0x0,-0x21d(%ebp,%eax,1)
c010b41b:	00 
c010b41c:	e9 30 ff ff ff       	jmp    c010b351 <bitmaptest+0x1ec>
c010b421:	31 f6                	xor    %esi,%esi
    }

    for (i = 0; i < TESTSIZE; i++) {
        assert(bitmap_isset(b, i));
c010b423:	50                   	push   %eax
c010b424:	50                   	push   %eax
c010b425:	56                   	push   %esi
c010b426:	53                   	push   %ebx
c010b427:	e8 a8 b4 ff ff       	call   c01068d4 <bitmap_isset>
c010b42c:	83 c4 10             	add    $0x10,%esp
c010b42f:	84 c0                	test   %al,%al
c010b431:	75 28                	jne    c010b45b <bitmaptest+0x2f6>
c010b433:	83 ec 0c             	sub    $0xc,%esp
c010b436:	68 f4 27 11 c0       	push   $0xc01127f4
c010b43b:	6a 3c                	push   $0x3c
c010b43d:	68 67 27 11 c0       	push   $0xc0112767
c010b442:	68 91 27 11 c0       	push   $0xc0112791
c010b447:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b44c:	e8 17 8e ff ff       	call   c0104268 <print>
c010b451:	83 c4 20             	add    $0x20,%esp
c010b454:	e8 2a 5b ff ff       	call   c0100f83 <backtrace>
c010b459:	fa                   	cli    
c010b45a:	f4                   	hlt    
        assert(data[i] == 0);
c010b45b:	80 bc 35 e3 fd ff ff 	cmpb   $0x0,-0x21d(%ebp,%esi,1)
c010b462:	00 
c010b463:	74 28                	je     c010b48d <bitmaptest+0x328>
c010b465:	83 ec 0c             	sub    $0xc,%esp
c010b468:	68 f4 27 11 c0       	push   $0xc01127f4
c010b46d:	6a 3d                	push   $0x3d
c010b46f:	68 67 27 11 c0       	push   $0xc0112767
c010b474:	68 d1 27 11 c0       	push   $0xc01127d1
c010b479:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b47e:	e8 e5 8d ff ff       	call   c0104268 <print>
c010b483:	83 c4 20             	add    $0x20,%esp
c010b486:	e8 f8 5a ff ff       	call   c0100f83 <backtrace>
c010b48b:	fa                   	cli    
c010b48c:	f4                   	hlt    
        assert(bitmap_isset(b, x));
        assert(data[x] == 1);
        data[x] = 0;
    }

    for (i = 0; i < TESTSIZE; i++) {
c010b48d:	46                   	inc    %esi
c010b48e:	81 fe 15 02 00 00    	cmp    $0x215,%esi
c010b494:	75 8d                	jne    c010b423 <bitmaptest+0x2be>
        assert(bitmap_isset(b, i));
        assert(data[i] == 0);
    }

    print("Bitmap test complete\n");
c010b496:	83 ec 0c             	sub    $0xc,%esp
c010b499:	68 de 27 11 c0       	push   $0xc01127de
c010b49e:	e8 c5 8d ff ff       	call   c0104268 <print>
    return 0;
}
c010b4a3:	31 c0                	xor    %eax,%eax
c010b4a5:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010b4a8:	5b                   	pop    %ebx
c010b4a9:	5e                   	pop    %esi
c010b4aa:	5d                   	pop    %ebp
c010b4ab:	c3                   	ret    

c010b4ac <hashtabletest>:
#include <hashtable.h>

#define TESTSIZE 1333

int
hashtabletest(int nargs, char** args) {
c010b4ac:	55                   	push   %ebp
c010b4ad:	89 e5                	mov    %esp,%ebp
c010b4af:	57                   	push   %edi
c010b4b0:	56                   	push   %esi
c010b4b1:	53                   	push   %ebx
c010b4b2:	83 ec 48             	sub    $0x48,%esp
    (void)nargs;
    (void)args;

    print("Beginning hashtable test...\n");
c010b4b5:	68 ff 27 11 c0       	push   $0xc01127ff
c010b4ba:	e8 a9 8d ff ff       	call   c0104268 <print>

    struct hashtable* newhashtable;
    newhashtable = hashtable_create();
c010b4bf:	e8 05 b6 ff ff       	call   c0106ac9 <hashtable_create>
c010b4c4:	89 c3                	mov    %eax,%ebx
    assert(newhashtable != NULL);
c010b4c6:	83 c4 10             	add    $0x10,%esp
c010b4c9:	85 c0                	test   %eax,%eax
c010b4cb:	75 28                	jne    c010b4f5 <hashtabletest+0x49>
c010b4cd:	83 ec 0c             	sub    $0xc,%esp
c010b4d0:	68 84 2a 11 c0       	push   $0xc0112a84
c010b4d5:	6a 10                	push   $0x10
c010b4d7:	68 1c 28 11 c0       	push   $0xc011281c
c010b4dc:	68 31 28 11 c0       	push   $0xc0112831
c010b4e1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b4e6:	e8 7d 8d ff ff       	call   c0104268 <print>
c010b4eb:	83 c4 20             	add    $0x20,%esp
c010b4ee:	e8 90 5a ff ff       	call   c0100f83 <backtrace>
c010b4f3:	fa                   	cli    
c010b4f4:	f4                   	hlt    
    assert(hashtable_getsize(newhashtable) == 0);
c010b4f5:	83 ec 0c             	sub    $0xc,%esp
c010b4f8:	53                   	push   %ebx
c010b4f9:	e8 22 bd ff ff       	call   c0107220 <hashtable_getsize>
c010b4fe:	83 c4 10             	add    $0x10,%esp
c010b501:	85 c0                	test   %eax,%eax
c010b503:	74 28                	je     c010b52d <hashtabletest+0x81>
c010b505:	83 ec 0c             	sub    $0xc,%esp
c010b508:	68 84 2a 11 c0       	push   $0xc0112a84
c010b50d:	6a 11                	push   $0x11
c010b50f:	68 1c 28 11 c0       	push   $0xc011281c
c010b514:	68 46 28 11 c0       	push   $0xc0112846
c010b519:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b51e:	e8 45 8d ff ff       	call   c0104268 <print>
c010b523:	83 c4 20             	add    $0x20,%esp
c010b526:	e8 58 5a ff ff       	call   c0100f83 <backtrace>
c010b52b:	fa                   	cli    
c010b52c:	f4                   	hlt    
    assert(hashtable_isempty(newhashtable));
c010b52d:	83 ec 0c             	sub    $0xc,%esp
c010b530:	53                   	push   %ebx
c010b531:	e8 72 bc ff ff       	call   c01071a8 <hashtable_isempty>
c010b536:	83 c4 10             	add    $0x10,%esp
c010b539:	85 c0                	test   %eax,%eax
c010b53b:	75 28                	jne    c010b565 <hashtabletest+0xb9>
c010b53d:	83 ec 0c             	sub    $0xc,%esp
c010b540:	68 84 2a 11 c0       	push   $0xc0112a84
c010b545:	6a 12                	push   $0x12
c010b547:	68 1c 28 11 c0       	push   $0xc011281c
c010b54c:	68 55 29 11 c0       	push   $0xc0112955
c010b551:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b556:	e8 0d 8d ff ff       	call   c0104268 <print>
c010b55b:	83 c4 20             	add    $0x20,%esp
c010b55e:	e8 20 5a ff ff       	call   c0100f83 <backtrace>
c010b563:	fa                   	cli    
c010b564:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010b565:	83 ec 0c             	sub    $0xc,%esp
c010b568:	53                   	push   %ebx
c010b569:	e8 88 bd ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Add key value pairs to hashtable. */
    char key1[] = "a";
c010b56e:	66 c7 45 c7 61 00    	movw   $0x61,-0x39(%ebp)
    char key2[] = "aa";
c010b574:	66 c7 45 c9 61 61    	movw   $0x6161,-0x37(%ebp)
c010b57a:	c6 45 cb 00          	movb   $0x0,-0x35(%ebp)
    char key3[] = "aaa";
c010b57e:	c7 45 df 61 61 61 00 	movl   $0x616161,-0x21(%ebp)
    char key4[] = "aaaa";
c010b585:	c7 45 e3 61 61 61 61 	movl   $0x61616161,-0x1d(%ebp)
c010b58c:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
    int val1 = 111;
c010b590:	c7 45 cc 6f 00 00 00 	movl   $0x6f,-0x34(%ebp)
    int val2 = 222;
c010b597:	c7 45 d0 de 00 00 00 	movl   $0xde,-0x30(%ebp)
    int val3 = 333;
c010b59e:	c7 45 d4 4d 01 00 00 	movl   $0x14d,-0x2c(%ebp)
    int val4 = 444;
c010b5a5:	c7 45 d8 bc 01 00 00 	movl   $0x1bc,-0x28(%ebp)
    assert(hashtable_add(newhashtable, key1, 1, &val1) == 0);
c010b5ac:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010b5af:	50                   	push   %eax
c010b5b0:	6a 01                	push   $0x1
c010b5b2:	8d 7d c7             	lea    -0x39(%ebp),%edi
c010b5b5:	57                   	push   %edi
c010b5b6:	53                   	push   %ebx
c010b5b7:	e8 82 b5 ff ff       	call   c0106b3e <hashtable_add>
c010b5bc:	83 c4 20             	add    $0x20,%esp
c010b5bf:	85 c0                	test   %eax,%eax
c010b5c1:	74 28                	je     c010b5eb <hashtabletest+0x13f>
c010b5c3:	83 ec 0c             	sub    $0xc,%esp
c010b5c6:	68 84 2a 11 c0       	push   $0xc0112a84
c010b5cb:	6a 1e                	push   $0x1e
c010b5cd:	68 1c 28 11 c0       	push   $0xc011281c
c010b5d2:	68 6b 28 11 c0       	push   $0xc011286b
c010b5d7:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b5dc:	e8 87 8c ff ff       	call   c0104268 <print>
c010b5e1:	83 c4 20             	add    $0x20,%esp
c010b5e4:	e8 9a 59 ff ff       	call   c0100f83 <backtrace>
c010b5e9:	fa                   	cli    
c010b5ea:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key2, 2, &val2) == 0);
c010b5eb:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010b5ee:	50                   	push   %eax
c010b5ef:	6a 02                	push   $0x2
c010b5f1:	8d 75 c9             	lea    -0x37(%ebp),%esi
c010b5f4:	56                   	push   %esi
c010b5f5:	53                   	push   %ebx
c010b5f6:	e8 43 b5 ff ff       	call   c0106b3e <hashtable_add>
c010b5fb:	83 c4 10             	add    $0x10,%esp
c010b5fe:	85 c0                	test   %eax,%eax
c010b600:	74 28                	je     c010b62a <hashtabletest+0x17e>
c010b602:	83 ec 0c             	sub    $0xc,%esp
c010b605:	68 84 2a 11 c0       	push   $0xc0112a84
c010b60a:	6a 1f                	push   $0x1f
c010b60c:	68 1c 28 11 c0       	push   $0xc011281c
c010b611:	68 9c 28 11 c0       	push   $0xc011289c
c010b616:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b61b:	e8 48 8c ff ff       	call   c0104268 <print>
c010b620:	83 c4 20             	add    $0x20,%esp
c010b623:	e8 5b 59 ff ff       	call   c0100f83 <backtrace>
c010b628:	fa                   	cli    
c010b629:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key3, 3, &val3) == 0);
c010b62a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010b62d:	50                   	push   %eax
c010b62e:	6a 03                	push   $0x3
c010b630:	8d 45 df             	lea    -0x21(%ebp),%eax
c010b633:	50                   	push   %eax
c010b634:	53                   	push   %ebx
c010b635:	e8 04 b5 ff ff       	call   c0106b3e <hashtable_add>
c010b63a:	83 c4 10             	add    $0x10,%esp
c010b63d:	85 c0                	test   %eax,%eax
c010b63f:	74 28                	je     c010b669 <hashtabletest+0x1bd>
c010b641:	83 ec 0c             	sub    $0xc,%esp
c010b644:	68 84 2a 11 c0       	push   $0xc0112a84
c010b649:	6a 20                	push   $0x20
c010b64b:	68 1c 28 11 c0       	push   $0xc011281c
c010b650:	68 cd 28 11 c0       	push   $0xc01128cd
c010b655:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b65a:	e8 09 8c ff ff       	call   c0104268 <print>
c010b65f:	83 c4 20             	add    $0x20,%esp
c010b662:	e8 1c 59 ff ff       	call   c0100f83 <backtrace>
c010b667:	fa                   	cli    
c010b668:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key4, 4, &val4) == 0);
c010b669:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b66c:	50                   	push   %eax
c010b66d:	6a 04                	push   $0x4
c010b66f:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010b672:	50                   	push   %eax
c010b673:	53                   	push   %ebx
c010b674:	e8 c5 b4 ff ff       	call   c0106b3e <hashtable_add>
c010b679:	83 c4 10             	add    $0x10,%esp
c010b67c:	85 c0                	test   %eax,%eax
c010b67e:	74 28                	je     c010b6a8 <hashtabletest+0x1fc>
c010b680:	83 ec 0c             	sub    $0xc,%esp
c010b683:	68 84 2a 11 c0       	push   $0xc0112a84
c010b688:	6a 21                	push   $0x21
c010b68a:	68 1c 28 11 c0       	push   $0xc011281c
c010b68f:	68 fe 28 11 c0       	push   $0xc01128fe
c010b694:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b699:	e8 ca 8b ff ff       	call   c0104268 <print>
c010b69e:	83 c4 20             	add    $0x20,%esp
c010b6a1:	e8 dd 58 ff ff       	call   c0100f83 <backtrace>
c010b6a6:	fa                   	cli    
c010b6a7:	f4                   	hlt    
    assert(hashtable_getsize(newhashtable) == 4);
c010b6a8:	83 ec 0c             	sub    $0xc,%esp
c010b6ab:	53                   	push   %ebx
c010b6ac:	e8 6f bb ff ff       	call   c0107220 <hashtable_getsize>
c010b6b1:	83 c4 10             	add    $0x10,%esp
c010b6b4:	83 f8 04             	cmp    $0x4,%eax
c010b6b7:	74 28                	je     c010b6e1 <hashtabletest+0x235>
c010b6b9:	83 ec 0c             	sub    $0xc,%esp
c010b6bc:	68 84 2a 11 c0       	push   $0xc0112a84
c010b6c1:	6a 22                	push   $0x22
c010b6c3:	68 1c 28 11 c0       	push   $0xc011281c
c010b6c8:	68 2f 29 11 c0       	push   $0xc011292f
c010b6cd:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b6d2:	e8 91 8b ff ff       	call   c0104268 <print>
c010b6d7:	83 c4 20             	add    $0x20,%esp
c010b6da:	e8 a4 58 ff ff       	call   c0100f83 <backtrace>
c010b6df:	fa                   	cli    
c010b6e0:	f4                   	hlt    
    assert(!hashtable_isempty(newhashtable));
c010b6e1:	83 ec 0c             	sub    $0xc,%esp
c010b6e4:	53                   	push   %ebx
c010b6e5:	e8 be ba ff ff       	call   c01071a8 <hashtable_isempty>
c010b6ea:	83 c4 10             	add    $0x10,%esp
c010b6ed:	85 c0                	test   %eax,%eax
c010b6ef:	74 28                	je     c010b719 <hashtabletest+0x26d>
c010b6f1:	83 ec 0c             	sub    $0xc,%esp
c010b6f4:	68 84 2a 11 c0       	push   $0xc0112a84
c010b6f9:	6a 23                	push   $0x23
c010b6fb:	68 1c 28 11 c0       	push   $0xc011281c
c010b700:	68 54 29 11 c0       	push   $0xc0112954
c010b705:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b70a:	e8 59 8b ff ff       	call   c0104268 <print>
c010b70f:	83 c4 20             	add    $0x20,%esp
c010b712:	e8 6c 58 ff ff       	call   c0100f83 <backtrace>
c010b717:	fa                   	cli    
c010b718:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010b719:	83 ec 0c             	sub    $0xc,%esp
c010b71c:	53                   	push   %ebx
c010b71d:	e8 d4 bb ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Lookup keys from hashtable. */
    int found_val1 = *(int*)hashtable_find(newhashtable, key1, 1);
c010b722:	83 c4 0c             	add    $0xc,%esp
c010b725:	6a 01                	push   $0x1
c010b727:	57                   	push   %edi
c010b728:	53                   	push   %ebx
c010b729:	e8 6d b7 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val1 == val1);
c010b72e:	83 c4 10             	add    $0x10,%esp
c010b731:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b734:	39 10                	cmp    %edx,(%eax)
c010b736:	74 28                	je     c010b760 <hashtabletest+0x2b4>
c010b738:	83 ec 0c             	sub    $0xc,%esp
c010b73b:	68 84 2a 11 c0       	push   $0xc0112a84
c010b740:	6a 28                	push   $0x28
c010b742:	68 1c 28 11 c0       	push   $0xc011281c
c010b747:	68 75 29 11 c0       	push   $0xc0112975
c010b74c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b751:	e8 12 8b ff ff       	call   c0104268 <print>
c010b756:	83 c4 20             	add    $0x20,%esp
c010b759:	e8 25 58 ff ff       	call   c0100f83 <backtrace>
c010b75e:	fa                   	cli    
c010b75f:	f4                   	hlt    

    int found_val2 = *(int*)hashtable_find(newhashtable, key2, 2);
c010b760:	50                   	push   %eax
c010b761:	6a 02                	push   $0x2
c010b763:	56                   	push   %esi
c010b764:	53                   	push   %ebx
c010b765:	e8 31 b7 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val2 == val2);
c010b76a:	83 c4 10             	add    $0x10,%esp
c010b76d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010b770:	39 08                	cmp    %ecx,(%eax)
c010b772:	74 28                	je     c010b79c <hashtabletest+0x2f0>
c010b774:	83 ec 0c             	sub    $0xc,%esp
c010b777:	68 84 2a 11 c0       	push   $0xc0112a84
c010b77c:	6a 2b                	push   $0x2b
c010b77e:	68 1c 28 11 c0       	push   $0xc011281c
c010b783:	68 88 29 11 c0       	push   $0xc0112988
c010b788:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b78d:	e8 d6 8a ff ff       	call   c0104268 <print>
c010b792:	83 c4 20             	add    $0x20,%esp
c010b795:	e8 e9 57 ff ff       	call   c0100f83 <backtrace>
c010b79a:	fa                   	cli    
c010b79b:	f4                   	hlt    

    int found_val3 = *(int*)hashtable_find(newhashtable, key3, 3);
c010b79c:	51                   	push   %ecx
c010b79d:	6a 03                	push   $0x3
c010b79f:	8d 45 df             	lea    -0x21(%ebp),%eax
c010b7a2:	50                   	push   %eax
c010b7a3:	53                   	push   %ebx
c010b7a4:	e8 f2 b6 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val3 == val3);
c010b7a9:	83 c4 10             	add    $0x10,%esp
c010b7ac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b7af:	39 10                	cmp    %edx,(%eax)
c010b7b1:	74 28                	je     c010b7db <hashtabletest+0x32f>
c010b7b3:	83 ec 0c             	sub    $0xc,%esp
c010b7b6:	68 84 2a 11 c0       	push   $0xc0112a84
c010b7bb:	6a 2e                	push   $0x2e
c010b7bd:	68 1c 28 11 c0       	push   $0xc011281c
c010b7c2:	68 9b 29 11 c0       	push   $0xc011299b
c010b7c7:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b7cc:	e8 97 8a ff ff       	call   c0104268 <print>
c010b7d1:	83 c4 20             	add    $0x20,%esp
c010b7d4:	e8 aa 57 ff ff       	call   c0100f83 <backtrace>
c010b7d9:	fa                   	cli    
c010b7da:	f4                   	hlt    

    int found_val4 = *(int*)hashtable_find(newhashtable, key4, 4);
c010b7db:	52                   	push   %edx
c010b7dc:	6a 04                	push   $0x4
c010b7de:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010b7e1:	50                   	push   %eax
c010b7e2:	53                   	push   %ebx
c010b7e3:	e8 b3 b6 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val4 == val4);
c010b7e8:	83 c4 10             	add    $0x10,%esp
c010b7eb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010b7ee:	39 08                	cmp    %ecx,(%eax)
c010b7f0:	74 28                	je     c010b81a <hashtabletest+0x36e>
c010b7f2:	83 ec 0c             	sub    $0xc,%esp
c010b7f5:	68 84 2a 11 c0       	push   $0xc0112a84
c010b7fa:	6a 31                	push   $0x31
c010b7fc:	68 1c 28 11 c0       	push   $0xc011281c
c010b801:	68 ae 29 11 c0       	push   $0xc01129ae
c010b806:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b80b:	e8 58 8a ff ff       	call   c0104268 <print>
c010b810:	83 c4 20             	add    $0x20,%esp
c010b813:	e8 6b 57 ff ff       	call   c0100f83 <backtrace>
c010b818:	fa                   	cli    
c010b819:	f4                   	hlt    

    assert(hashtable_getsize(newhashtable) == 4);
c010b81a:	83 ec 0c             	sub    $0xc,%esp
c010b81d:	53                   	push   %ebx
c010b81e:	e8 fd b9 ff ff       	call   c0107220 <hashtable_getsize>
c010b823:	83 c4 10             	add    $0x10,%esp
c010b826:	83 f8 04             	cmp    $0x4,%eax
c010b829:	74 28                	je     c010b853 <hashtabletest+0x3a7>
c010b82b:	83 ec 0c             	sub    $0xc,%esp
c010b82e:	68 84 2a 11 c0       	push   $0xc0112a84
c010b833:	6a 33                	push   $0x33
c010b835:	68 1c 28 11 c0       	push   $0xc011281c
c010b83a:	68 2f 29 11 c0       	push   $0xc011292f
c010b83f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b844:	e8 1f 8a ff ff       	call   c0104268 <print>
c010b849:	83 c4 20             	add    $0x20,%esp
c010b84c:	e8 32 57 ff ff       	call   c0100f83 <backtrace>
c010b851:	fa                   	cli    
c010b852:	f4                   	hlt    
    assert(!hashtable_isempty(newhashtable));
c010b853:	83 ec 0c             	sub    $0xc,%esp
c010b856:	53                   	push   %ebx
c010b857:	e8 4c b9 ff ff       	call   c01071a8 <hashtable_isempty>
c010b85c:	83 c4 10             	add    $0x10,%esp
c010b85f:	85 c0                	test   %eax,%eax
c010b861:	74 28                	je     c010b88b <hashtabletest+0x3df>
c010b863:	83 ec 0c             	sub    $0xc,%esp
c010b866:	68 84 2a 11 c0       	push   $0xc0112a84
c010b86b:	6a 34                	push   $0x34
c010b86d:	68 1c 28 11 c0       	push   $0xc011281c
c010b872:	68 54 29 11 c0       	push   $0xc0112954
c010b877:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b87c:	e8 e7 89 ff ff       	call   c0104268 <print>
c010b881:	83 c4 20             	add    $0x20,%esp
c010b884:	e8 fa 56 ff ff       	call   c0100f83 <backtrace>
c010b889:	fa                   	cli    
c010b88a:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010b88b:	83 ec 0c             	sub    $0xc,%esp
c010b88e:	53                   	push   %ebx
c010b88f:	e8 62 ba ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Remove keys from hashtable. */
    int removed_val1 = *(int*)hashtable_remove(newhashtable, key1, 1);
c010b894:	83 c4 0c             	add    $0xc,%esp
c010b897:	6a 01                	push   $0x1
c010b899:	57                   	push   %edi
c010b89a:	53                   	push   %ebx
c010b89b:	e8 18 b7 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val1 == val1);
c010b8a0:	83 c4 10             	add    $0x10,%esp
c010b8a3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b8a6:	39 10                	cmp    %edx,(%eax)
c010b8a8:	74 28                	je     c010b8d2 <hashtabletest+0x426>
c010b8aa:	83 ec 0c             	sub    $0xc,%esp
c010b8ad:	68 84 2a 11 c0       	push   $0xc0112a84
c010b8b2:	6a 39                	push   $0x39
c010b8b4:	68 1c 28 11 c0       	push   $0xc011281c
c010b8b9:	68 c1 29 11 c0       	push   $0xc01129c1
c010b8be:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b8c3:	e8 a0 89 ff ff       	call   c0104268 <print>
c010b8c8:	83 c4 20             	add    $0x20,%esp
c010b8cb:	e8 b3 56 ff ff       	call   c0100f83 <backtrace>
c010b8d0:	fa                   	cli    
c010b8d1:	f4                   	hlt    

    int removed_val2 = *(int*)hashtable_remove(newhashtable, key2, 2);
c010b8d2:	50                   	push   %eax
c010b8d3:	6a 02                	push   $0x2
c010b8d5:	56                   	push   %esi
c010b8d6:	53                   	push   %ebx
c010b8d7:	e8 dc b6 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val2 == val2);
c010b8dc:	83 c4 10             	add    $0x10,%esp
c010b8df:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010b8e2:	39 08                	cmp    %ecx,(%eax)
c010b8e4:	74 28                	je     c010b90e <hashtabletest+0x462>
c010b8e6:	83 ec 0c             	sub    $0xc,%esp
c010b8e9:	68 84 2a 11 c0       	push   $0xc0112a84
c010b8ee:	6a 3c                	push   $0x3c
c010b8f0:	68 1c 28 11 c0       	push   $0xc011281c
c010b8f5:	68 d6 29 11 c0       	push   $0xc01129d6
c010b8fa:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b8ff:	e8 64 89 ff ff       	call   c0104268 <print>
c010b904:	83 c4 20             	add    $0x20,%esp
c010b907:	e8 77 56 ff ff       	call   c0100f83 <backtrace>
c010b90c:	fa                   	cli    
c010b90d:	f4                   	hlt    

    int removed_val3 = *(int*)hashtable_remove(newhashtable, key3, 3);
c010b90e:	50                   	push   %eax
c010b90f:	6a 03                	push   $0x3
c010b911:	8d 45 df             	lea    -0x21(%ebp),%eax
c010b914:	50                   	push   %eax
c010b915:	53                   	push   %ebx
c010b916:	e8 9d b6 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val3 == val3);
c010b91b:	83 c4 10             	add    $0x10,%esp
c010b91e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b921:	39 10                	cmp    %edx,(%eax)
c010b923:	74 28                	je     c010b94d <hashtabletest+0x4a1>
c010b925:	83 ec 0c             	sub    $0xc,%esp
c010b928:	68 84 2a 11 c0       	push   $0xc0112a84
c010b92d:	6a 3f                	push   $0x3f
c010b92f:	68 1c 28 11 c0       	push   $0xc011281c
c010b934:	68 eb 29 11 c0       	push   $0xc01129eb
c010b939:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b93e:	e8 25 89 ff ff       	call   c0104268 <print>
c010b943:	83 c4 20             	add    $0x20,%esp
c010b946:	e8 38 56 ff ff       	call   c0100f83 <backtrace>
c010b94b:	fa                   	cli    
c010b94c:	f4                   	hlt    

    int removed_val4 = *(int*)hashtable_remove(newhashtable, key4, 4);
c010b94d:	50                   	push   %eax
c010b94e:	6a 04                	push   $0x4
c010b950:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010b953:	50                   	push   %eax
c010b954:	53                   	push   %ebx
c010b955:	e8 5e b6 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val4 == val4);
c010b95a:	83 c4 10             	add    $0x10,%esp
c010b95d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010b960:	39 08                	cmp    %ecx,(%eax)
c010b962:	74 28                	je     c010b98c <hashtabletest+0x4e0>
c010b964:	83 ec 0c             	sub    $0xc,%esp
c010b967:	68 84 2a 11 c0       	push   $0xc0112a84
c010b96c:	6a 42                	push   $0x42
c010b96e:	68 1c 28 11 c0       	push   $0xc011281c
c010b973:	68 00 2a 11 c0       	push   $0xc0112a00
c010b978:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b97d:	e8 e6 88 ff ff       	call   c0104268 <print>
c010b982:	83 c4 20             	add    $0x20,%esp
c010b985:	e8 f9 55 ff ff       	call   c0100f83 <backtrace>
c010b98a:	fa                   	cli    
c010b98b:	f4                   	hlt    

    assert(hashtable_getsize(newhashtable) == 0);
c010b98c:	83 ec 0c             	sub    $0xc,%esp
c010b98f:	53                   	push   %ebx
c010b990:	e8 8b b8 ff ff       	call   c0107220 <hashtable_getsize>
c010b995:	83 c4 10             	add    $0x10,%esp
c010b998:	85 c0                	test   %eax,%eax
c010b99a:	74 28                	je     c010b9c4 <hashtabletest+0x518>
c010b99c:	83 ec 0c             	sub    $0xc,%esp
c010b99f:	68 84 2a 11 c0       	push   $0xc0112a84
c010b9a4:	6a 44                	push   $0x44
c010b9a6:	68 1c 28 11 c0       	push   $0xc011281c
c010b9ab:	68 46 28 11 c0       	push   $0xc0112846
c010b9b0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b9b5:	e8 ae 88 ff ff       	call   c0104268 <print>
c010b9ba:	83 c4 20             	add    $0x20,%esp
c010b9bd:	e8 c1 55 ff ff       	call   c0100f83 <backtrace>
c010b9c2:	fa                   	cli    
c010b9c3:	f4                   	hlt    
    assert(hashtable_isempty(newhashtable));
c010b9c4:	83 ec 0c             	sub    $0xc,%esp
c010b9c7:	53                   	push   %ebx
c010b9c8:	e8 db b7 ff ff       	call   c01071a8 <hashtable_isempty>
c010b9cd:	83 c4 10             	add    $0x10,%esp
c010b9d0:	85 c0                	test   %eax,%eax
c010b9d2:	75 28                	jne    c010b9fc <hashtabletest+0x550>
c010b9d4:	83 ec 0c             	sub    $0xc,%esp
c010b9d7:	68 84 2a 11 c0       	push   $0xc0112a84
c010b9dc:	6a 45                	push   $0x45
c010b9de:	68 1c 28 11 c0       	push   $0xc011281c
c010b9e3:	68 55 29 11 c0       	push   $0xc0112955
c010b9e8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010b9ed:	e8 76 88 ff ff       	call   c0104268 <print>
c010b9f2:	83 c4 20             	add    $0x20,%esp
c010b9f5:	e8 89 55 ff ff       	call   c0100f83 <backtrace>
c010b9fa:	fa                   	cli    
c010b9fb:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010b9fc:	83 ec 0c             	sub    $0xc,%esp
c010b9ff:	53                   	push   %ebx
c010ba00:	e8 f1 b8 ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* REPEAT to check if hash table is reusable */
    assert(hashtable_add(newhashtable, key1, 1, &val1) == 0);
c010ba05:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010ba08:	50                   	push   %eax
c010ba09:	6a 01                	push   $0x1
c010ba0b:	57                   	push   %edi
c010ba0c:	53                   	push   %ebx
c010ba0d:	e8 2c b1 ff ff       	call   c0106b3e <hashtable_add>
c010ba12:	83 c4 20             	add    $0x20,%esp
c010ba15:	85 c0                	test   %eax,%eax
c010ba17:	74 28                	je     c010ba41 <hashtabletest+0x595>
c010ba19:	83 ec 0c             	sub    $0xc,%esp
c010ba1c:	68 84 2a 11 c0       	push   $0xc0112a84
c010ba21:	6a 49                	push   $0x49
c010ba23:	68 1c 28 11 c0       	push   $0xc011281c
c010ba28:	68 6b 28 11 c0       	push   $0xc011286b
c010ba2d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ba32:	e8 31 88 ff ff       	call   c0104268 <print>
c010ba37:	83 c4 20             	add    $0x20,%esp
c010ba3a:	e8 44 55 ff ff       	call   c0100f83 <backtrace>
c010ba3f:	fa                   	cli    
c010ba40:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key2, 2, &val2) == 0);
c010ba41:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010ba44:	50                   	push   %eax
c010ba45:	6a 02                	push   $0x2
c010ba47:	56                   	push   %esi
c010ba48:	53                   	push   %ebx
c010ba49:	e8 f0 b0 ff ff       	call   c0106b3e <hashtable_add>
c010ba4e:	83 c4 10             	add    $0x10,%esp
c010ba51:	85 c0                	test   %eax,%eax
c010ba53:	74 28                	je     c010ba7d <hashtabletest+0x5d1>
c010ba55:	83 ec 0c             	sub    $0xc,%esp
c010ba58:	68 84 2a 11 c0       	push   $0xc0112a84
c010ba5d:	6a 4a                	push   $0x4a
c010ba5f:	68 1c 28 11 c0       	push   $0xc011281c
c010ba64:	68 9c 28 11 c0       	push   $0xc011289c
c010ba69:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ba6e:	e8 f5 87 ff ff       	call   c0104268 <print>
c010ba73:	83 c4 20             	add    $0x20,%esp
c010ba76:	e8 08 55 ff ff       	call   c0100f83 <backtrace>
c010ba7b:	fa                   	cli    
c010ba7c:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key3, 3, &val3) == 0);
c010ba7d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ba80:	50                   	push   %eax
c010ba81:	6a 03                	push   $0x3
c010ba83:	8d 45 df             	lea    -0x21(%ebp),%eax
c010ba86:	50                   	push   %eax
c010ba87:	53                   	push   %ebx
c010ba88:	e8 b1 b0 ff ff       	call   c0106b3e <hashtable_add>
c010ba8d:	83 c4 10             	add    $0x10,%esp
c010ba90:	85 c0                	test   %eax,%eax
c010ba92:	74 28                	je     c010babc <hashtabletest+0x610>
c010ba94:	83 ec 0c             	sub    $0xc,%esp
c010ba97:	68 84 2a 11 c0       	push   $0xc0112a84
c010ba9c:	6a 4b                	push   $0x4b
c010ba9e:	68 1c 28 11 c0       	push   $0xc011281c
c010baa3:	68 cd 28 11 c0       	push   $0xc01128cd
c010baa8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010baad:	e8 b6 87 ff ff       	call   c0104268 <print>
c010bab2:	83 c4 20             	add    $0x20,%esp
c010bab5:	e8 c9 54 ff ff       	call   c0100f83 <backtrace>
c010baba:	fa                   	cli    
c010babb:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key4, 4, &val4) == 0);
c010babc:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010babf:	50                   	push   %eax
c010bac0:	6a 04                	push   $0x4
c010bac2:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010bac5:	50                   	push   %eax
c010bac6:	53                   	push   %ebx
c010bac7:	e8 72 b0 ff ff       	call   c0106b3e <hashtable_add>
c010bacc:	83 c4 10             	add    $0x10,%esp
c010bacf:	85 c0                	test   %eax,%eax
c010bad1:	74 28                	je     c010bafb <hashtabletest+0x64f>
c010bad3:	83 ec 0c             	sub    $0xc,%esp
c010bad6:	68 84 2a 11 c0       	push   $0xc0112a84
c010badb:	6a 4c                	push   $0x4c
c010badd:	68 1c 28 11 c0       	push   $0xc011281c
c010bae2:	68 fe 28 11 c0       	push   $0xc01128fe
c010bae7:	68 2b ff 10 c0       	push   $0xc010ff2b
c010baec:	e8 77 87 ff ff       	call   c0104268 <print>
c010baf1:	83 c4 20             	add    $0x20,%esp
c010baf4:	e8 8a 54 ff ff       	call   c0100f83 <backtrace>
c010baf9:	fa                   	cli    
c010bafa:	f4                   	hlt    
    assert(hashtable_getsize(newhashtable) == 4);
c010bafb:	83 ec 0c             	sub    $0xc,%esp
c010bafe:	53                   	push   %ebx
c010baff:	e8 1c b7 ff ff       	call   c0107220 <hashtable_getsize>
c010bb04:	83 c4 10             	add    $0x10,%esp
c010bb07:	83 f8 04             	cmp    $0x4,%eax
c010bb0a:	74 28                	je     c010bb34 <hashtabletest+0x688>
c010bb0c:	83 ec 0c             	sub    $0xc,%esp
c010bb0f:	68 84 2a 11 c0       	push   $0xc0112a84
c010bb14:	6a 4d                	push   $0x4d
c010bb16:	68 1c 28 11 c0       	push   $0xc011281c
c010bb1b:	68 2f 29 11 c0       	push   $0xc011292f
c010bb20:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bb25:	e8 3e 87 ff ff       	call   c0104268 <print>
c010bb2a:	83 c4 20             	add    $0x20,%esp
c010bb2d:	e8 51 54 ff ff       	call   c0100f83 <backtrace>
c010bb32:	fa                   	cli    
c010bb33:	f4                   	hlt    
    assert(!hashtable_isempty(newhashtable));
c010bb34:	83 ec 0c             	sub    $0xc,%esp
c010bb37:	53                   	push   %ebx
c010bb38:	e8 6b b6 ff ff       	call   c01071a8 <hashtable_isempty>
c010bb3d:	83 c4 10             	add    $0x10,%esp
c010bb40:	85 c0                	test   %eax,%eax
c010bb42:	74 28                	je     c010bb6c <hashtabletest+0x6c0>
c010bb44:	83 ec 0c             	sub    $0xc,%esp
c010bb47:	68 84 2a 11 c0       	push   $0xc0112a84
c010bb4c:	6a 4e                	push   $0x4e
c010bb4e:	68 1c 28 11 c0       	push   $0xc011281c
c010bb53:	68 54 29 11 c0       	push   $0xc0112954
c010bb58:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bb5d:	e8 06 87 ff ff       	call   c0104268 <print>
c010bb62:	83 c4 20             	add    $0x20,%esp
c010bb65:	e8 19 54 ff ff       	call   c0100f83 <backtrace>
c010bb6a:	fa                   	cli    
c010bb6b:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010bb6c:	83 ec 0c             	sub    $0xc,%esp
c010bb6f:	53                   	push   %ebx
c010bb70:	e8 81 b7 ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Lookup keys from hashtable. */
    found_val1 = *(int*)hashtable_find(newhashtable, key1, 1);
c010bb75:	83 c4 0c             	add    $0xc,%esp
c010bb78:	6a 01                	push   $0x1
c010bb7a:	57                   	push   %edi
c010bb7b:	53                   	push   %ebx
c010bb7c:	e8 1a b3 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val1 == val1);
c010bb81:	83 c4 10             	add    $0x10,%esp
c010bb84:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010bb87:	39 10                	cmp    %edx,(%eax)
c010bb89:	74 28                	je     c010bbb3 <hashtabletest+0x707>
c010bb8b:	83 ec 0c             	sub    $0xc,%esp
c010bb8e:	68 84 2a 11 c0       	push   $0xc0112a84
c010bb93:	6a 53                	push   $0x53
c010bb95:	68 1c 28 11 c0       	push   $0xc011281c
c010bb9a:	68 75 29 11 c0       	push   $0xc0112975
c010bb9f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bba4:	e8 bf 86 ff ff       	call   c0104268 <print>
c010bba9:	83 c4 20             	add    $0x20,%esp
c010bbac:	e8 d2 53 ff ff       	call   c0100f83 <backtrace>
c010bbb1:	fa                   	cli    
c010bbb2:	f4                   	hlt    

    found_val2 = *(int*)hashtable_find(newhashtable, key2, 2);
c010bbb3:	50                   	push   %eax
c010bbb4:	6a 02                	push   $0x2
c010bbb6:	56                   	push   %esi
c010bbb7:	53                   	push   %ebx
c010bbb8:	e8 de b2 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val2 == val2);
c010bbbd:	83 c4 10             	add    $0x10,%esp
c010bbc0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010bbc3:	39 08                	cmp    %ecx,(%eax)
c010bbc5:	74 28                	je     c010bbef <hashtabletest+0x743>
c010bbc7:	83 ec 0c             	sub    $0xc,%esp
c010bbca:	68 84 2a 11 c0       	push   $0xc0112a84
c010bbcf:	6a 56                	push   $0x56
c010bbd1:	68 1c 28 11 c0       	push   $0xc011281c
c010bbd6:	68 88 29 11 c0       	push   $0xc0112988
c010bbdb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bbe0:	e8 83 86 ff ff       	call   c0104268 <print>
c010bbe5:	83 c4 20             	add    $0x20,%esp
c010bbe8:	e8 96 53 ff ff       	call   c0100f83 <backtrace>
c010bbed:	fa                   	cli    
c010bbee:	f4                   	hlt    

    found_val3 = *(int*)hashtable_find(newhashtable, key3, 3);
c010bbef:	50                   	push   %eax
c010bbf0:	6a 03                	push   $0x3
c010bbf2:	8d 45 df             	lea    -0x21(%ebp),%eax
c010bbf5:	50                   	push   %eax
c010bbf6:	53                   	push   %ebx
c010bbf7:	e8 9f b2 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val3 == val3);
c010bbfc:	83 c4 10             	add    $0x10,%esp
c010bbff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010bc02:	39 10                	cmp    %edx,(%eax)
c010bc04:	74 28                	je     c010bc2e <hashtabletest+0x782>
c010bc06:	83 ec 0c             	sub    $0xc,%esp
c010bc09:	68 84 2a 11 c0       	push   $0xc0112a84
c010bc0e:	6a 59                	push   $0x59
c010bc10:	68 1c 28 11 c0       	push   $0xc011281c
c010bc15:	68 9b 29 11 c0       	push   $0xc011299b
c010bc1a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bc1f:	e8 44 86 ff ff       	call   c0104268 <print>
c010bc24:	83 c4 20             	add    $0x20,%esp
c010bc27:	e8 57 53 ff ff       	call   c0100f83 <backtrace>
c010bc2c:	fa                   	cli    
c010bc2d:	f4                   	hlt    

    found_val4 = *(int*)hashtable_find(newhashtable, key4, 4);
c010bc2e:	50                   	push   %eax
c010bc2f:	6a 04                	push   $0x4
c010bc31:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010bc34:	50                   	push   %eax
c010bc35:	53                   	push   %ebx
c010bc36:	e8 60 b2 ff ff       	call   c0106e9b <hashtable_find>
    assert(found_val4 == val4);
c010bc3b:	83 c4 10             	add    $0x10,%esp
c010bc3e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010bc41:	39 08                	cmp    %ecx,(%eax)
c010bc43:	74 28                	je     c010bc6d <hashtabletest+0x7c1>
c010bc45:	83 ec 0c             	sub    $0xc,%esp
c010bc48:	68 84 2a 11 c0       	push   $0xc0112a84
c010bc4d:	6a 5c                	push   $0x5c
c010bc4f:	68 1c 28 11 c0       	push   $0xc011281c
c010bc54:	68 ae 29 11 c0       	push   $0xc01129ae
c010bc59:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bc5e:	e8 05 86 ff ff       	call   c0104268 <print>
c010bc63:	83 c4 20             	add    $0x20,%esp
c010bc66:	e8 18 53 ff ff       	call   c0100f83 <backtrace>
c010bc6b:	fa                   	cli    
c010bc6c:	f4                   	hlt    

    assert(hashtable_getsize(newhashtable) == 4);
c010bc6d:	83 ec 0c             	sub    $0xc,%esp
c010bc70:	53                   	push   %ebx
c010bc71:	e8 aa b5 ff ff       	call   c0107220 <hashtable_getsize>
c010bc76:	83 c4 10             	add    $0x10,%esp
c010bc79:	83 f8 04             	cmp    $0x4,%eax
c010bc7c:	74 28                	je     c010bca6 <hashtabletest+0x7fa>
c010bc7e:	83 ec 0c             	sub    $0xc,%esp
c010bc81:	68 84 2a 11 c0       	push   $0xc0112a84
c010bc86:	6a 5e                	push   $0x5e
c010bc88:	68 1c 28 11 c0       	push   $0xc011281c
c010bc8d:	68 2f 29 11 c0       	push   $0xc011292f
c010bc92:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bc97:	e8 cc 85 ff ff       	call   c0104268 <print>
c010bc9c:	83 c4 20             	add    $0x20,%esp
c010bc9f:	e8 df 52 ff ff       	call   c0100f83 <backtrace>
c010bca4:	fa                   	cli    
c010bca5:	f4                   	hlt    
    assert(!hashtable_isempty(newhashtable));
c010bca6:	83 ec 0c             	sub    $0xc,%esp
c010bca9:	53                   	push   %ebx
c010bcaa:	e8 f9 b4 ff ff       	call   c01071a8 <hashtable_isempty>
c010bcaf:	83 c4 10             	add    $0x10,%esp
c010bcb2:	85 c0                	test   %eax,%eax
c010bcb4:	74 28                	je     c010bcde <hashtabletest+0x832>
c010bcb6:	83 ec 0c             	sub    $0xc,%esp
c010bcb9:	68 84 2a 11 c0       	push   $0xc0112a84
c010bcbe:	6a 5f                	push   $0x5f
c010bcc0:	68 1c 28 11 c0       	push   $0xc011281c
c010bcc5:	68 54 29 11 c0       	push   $0xc0112954
c010bcca:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bccf:	e8 94 85 ff ff       	call   c0104268 <print>
c010bcd4:	83 c4 20             	add    $0x20,%esp
c010bcd7:	e8 a7 52 ff ff       	call   c0100f83 <backtrace>
c010bcdc:	fa                   	cli    
c010bcdd:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010bcde:	83 ec 0c             	sub    $0xc,%esp
c010bce1:	53                   	push   %ebx
c010bce2:	e8 0f b6 ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Remove keys from hashtable. */
    removed_val1 = *(int*)hashtable_remove(newhashtable, key1, 1);
c010bce7:	83 c4 0c             	add    $0xc,%esp
c010bcea:	6a 01                	push   $0x1
c010bcec:	57                   	push   %edi
c010bced:	53                   	push   %ebx
c010bcee:	e8 c5 b2 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val1 == val1);
c010bcf3:	83 c4 10             	add    $0x10,%esp
c010bcf6:	8b 7d cc             	mov    -0x34(%ebp),%edi
c010bcf9:	39 38                	cmp    %edi,(%eax)
c010bcfb:	74 28                	je     c010bd25 <hashtabletest+0x879>
c010bcfd:	83 ec 0c             	sub    $0xc,%esp
c010bd00:	68 84 2a 11 c0       	push   $0xc0112a84
c010bd05:	6a 64                	push   $0x64
c010bd07:	68 1c 28 11 c0       	push   $0xc011281c
c010bd0c:	68 c1 29 11 c0       	push   $0xc01129c1
c010bd11:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bd16:	e8 4d 85 ff ff       	call   c0104268 <print>
c010bd1b:	83 c4 20             	add    $0x20,%esp
c010bd1e:	e8 60 52 ff ff       	call   c0100f83 <backtrace>
c010bd23:	fa                   	cli    
c010bd24:	f4                   	hlt    

    removed_val2 = *(int*)hashtable_remove(newhashtable, key2, 2);
c010bd25:	51                   	push   %ecx
c010bd26:	6a 02                	push   $0x2
c010bd28:	56                   	push   %esi
c010bd29:	53                   	push   %ebx
c010bd2a:	e8 89 b2 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val2 == val2);
c010bd2f:	83 c4 10             	add    $0x10,%esp
c010bd32:	8b 7d d0             	mov    -0x30(%ebp),%edi
c010bd35:	39 38                	cmp    %edi,(%eax)
c010bd37:	74 28                	je     c010bd61 <hashtabletest+0x8b5>
c010bd39:	83 ec 0c             	sub    $0xc,%esp
c010bd3c:	68 84 2a 11 c0       	push   $0xc0112a84
c010bd41:	6a 67                	push   $0x67
c010bd43:	68 1c 28 11 c0       	push   $0xc011281c
c010bd48:	68 d6 29 11 c0       	push   $0xc01129d6
c010bd4d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bd52:	e8 11 85 ff ff       	call   c0104268 <print>
c010bd57:	83 c4 20             	add    $0x20,%esp
c010bd5a:	e8 24 52 ff ff       	call   c0100f83 <backtrace>
c010bd5f:	fa                   	cli    
c010bd60:	f4                   	hlt    

    removed_val3 = *(int*)hashtable_remove(newhashtable, key3, 3);
c010bd61:	52                   	push   %edx
c010bd62:	6a 03                	push   $0x3
c010bd64:	8d 45 df             	lea    -0x21(%ebp),%eax
c010bd67:	50                   	push   %eax
c010bd68:	53                   	push   %ebx
c010bd69:	e8 4a b2 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val3 == val3);
c010bd6e:	83 c4 10             	add    $0x10,%esp
c010bd71:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c010bd74:	39 30                	cmp    %esi,(%eax)
c010bd76:	74 28                	je     c010bda0 <hashtabletest+0x8f4>
c010bd78:	83 ec 0c             	sub    $0xc,%esp
c010bd7b:	68 84 2a 11 c0       	push   $0xc0112a84
c010bd80:	6a 6a                	push   $0x6a
c010bd82:	68 1c 28 11 c0       	push   $0xc011281c
c010bd87:	68 eb 29 11 c0       	push   $0xc01129eb
c010bd8c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bd91:	e8 d2 84 ff ff       	call   c0104268 <print>
c010bd96:	83 c4 20             	add    $0x20,%esp
c010bd99:	e8 e5 51 ff ff       	call   c0100f83 <backtrace>
c010bd9e:	fa                   	cli    
c010bd9f:	f4                   	hlt    

    removed_val4 = *(int*)hashtable_remove(newhashtable, key4, 4);
c010bda0:	50                   	push   %eax
c010bda1:	6a 04                	push   $0x4
c010bda3:	8d 45 e3             	lea    -0x1d(%ebp),%eax
c010bda6:	50                   	push   %eax
c010bda7:	53                   	push   %ebx
c010bda8:	e8 0b b2 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val4 == val4);
c010bdad:	83 c4 10             	add    $0x10,%esp
c010bdb0:	8b 7d d8             	mov    -0x28(%ebp),%edi
c010bdb3:	39 38                	cmp    %edi,(%eax)
c010bdb5:	74 28                	je     c010bddf <hashtabletest+0x933>
c010bdb7:	83 ec 0c             	sub    $0xc,%esp
c010bdba:	68 84 2a 11 c0       	push   $0xc0112a84
c010bdbf:	6a 6d                	push   $0x6d
c010bdc1:	68 1c 28 11 c0       	push   $0xc011281c
c010bdc6:	68 00 2a 11 c0       	push   $0xc0112a00
c010bdcb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bdd0:	e8 93 84 ff ff       	call   c0104268 <print>
c010bdd5:	83 c4 20             	add    $0x20,%esp
c010bdd8:	e8 a6 51 ff ff       	call   c0100f83 <backtrace>
c010bddd:	fa                   	cli    
c010bdde:	f4                   	hlt    

    assert(hashtable_getsize(newhashtable) == 0);
c010bddf:	83 ec 0c             	sub    $0xc,%esp
c010bde2:	53                   	push   %ebx
c010bde3:	e8 38 b4 ff ff       	call   c0107220 <hashtable_getsize>
c010bde8:	83 c4 10             	add    $0x10,%esp
c010bdeb:	85 c0                	test   %eax,%eax
c010bded:	74 28                	je     c010be17 <hashtabletest+0x96b>
c010bdef:	83 ec 0c             	sub    $0xc,%esp
c010bdf2:	68 84 2a 11 c0       	push   $0xc0112a84
c010bdf7:	6a 6f                	push   $0x6f
c010bdf9:	68 1c 28 11 c0       	push   $0xc011281c
c010bdfe:	68 46 28 11 c0       	push   $0xc0112846
c010be03:	68 2b ff 10 c0       	push   $0xc010ff2b
c010be08:	e8 5b 84 ff ff       	call   c0104268 <print>
c010be0d:	83 c4 20             	add    $0x20,%esp
c010be10:	e8 6e 51 ff ff       	call   c0100f83 <backtrace>
c010be15:	fa                   	cli    
c010be16:	f4                   	hlt    
    assert(hashtable_isempty(newhashtable));
c010be17:	83 ec 0c             	sub    $0xc,%esp
c010be1a:	53                   	push   %ebx
c010be1b:	e8 88 b3 ff ff       	call   c01071a8 <hashtable_isempty>
c010be20:	83 c4 10             	add    $0x10,%esp
c010be23:	85 c0                	test   %eax,%eax
c010be25:	75 28                	jne    c010be4f <hashtabletest+0x9a3>
c010be27:	83 ec 0c             	sub    $0xc,%esp
c010be2a:	68 84 2a 11 c0       	push   $0xc0112a84
c010be2f:	6a 70                	push   $0x70
c010be31:	68 1c 28 11 c0       	push   $0xc011281c
c010be36:	68 55 29 11 c0       	push   $0xc0112955
c010be3b:	68 2b ff 10 c0       	push   $0xc010ff2b
c010be40:	e8 23 84 ff ff       	call   c0104268 <print>
c010be45:	83 c4 20             	add    $0x20,%esp
c010be48:	e8 36 51 ff ff       	call   c0100f83 <backtrace>
c010be4d:	fa                   	cli    
c010be4e:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010be4f:	83 ec 0c             	sub    $0xc,%esp
c010be52:	53                   	push   %ebx
c010be53:	e8 9e b4 ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* test for bug -- incorrect behavior when adding multiple
     * values using the same key */
    assert(hashtable_add(newhashtable, key1, 1, &val1) == 0);
c010be58:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010be5b:	50                   	push   %eax
c010be5c:	6a 01                	push   $0x1
c010be5e:	8d 75 c7             	lea    -0x39(%ebp),%esi
c010be61:	56                   	push   %esi
c010be62:	53                   	push   %ebx
c010be63:	e8 d6 ac ff ff       	call   c0106b3e <hashtable_add>
c010be68:	83 c4 20             	add    $0x20,%esp
c010be6b:	85 c0                	test   %eax,%eax
c010be6d:	74 28                	je     c010be97 <hashtabletest+0x9eb>
c010be6f:	83 ec 0c             	sub    $0xc,%esp
c010be72:	68 84 2a 11 c0       	push   $0xc0112a84
c010be77:	6a 75                	push   $0x75
c010be79:	68 1c 28 11 c0       	push   $0xc011281c
c010be7e:	68 6b 28 11 c0       	push   $0xc011286b
c010be83:	68 2b ff 10 c0       	push   $0xc010ff2b
c010be88:	e8 db 83 ff ff       	call   c0104268 <print>
c010be8d:	83 c4 20             	add    $0x20,%esp
c010be90:	e8 ee 50 ff ff       	call   c0100f83 <backtrace>
c010be95:	fa                   	cli    
c010be96:	f4                   	hlt    
    assert(hashtable_add(newhashtable, key1, 1, &val2) == 0);
c010be97:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010be9a:	50                   	push   %eax
c010be9b:	6a 01                	push   $0x1
c010be9d:	56                   	push   %esi
c010be9e:	53                   	push   %ebx
c010be9f:	e8 9a ac ff ff       	call   c0106b3e <hashtable_add>
c010bea4:	83 c4 10             	add    $0x10,%esp
c010bea7:	85 c0                	test   %eax,%eax
c010bea9:	74 28                	je     c010bed3 <hashtabletest+0xa27>
c010beab:	83 ec 0c             	sub    $0xc,%esp
c010beae:	68 84 2a 11 c0       	push   $0xc0112a84
c010beb3:	6a 76                	push   $0x76
c010beb5:	68 1c 28 11 c0       	push   $0xc011281c
c010beba:	68 15 2a 11 c0       	push   $0xc0112a15
c010bebf:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bec4:	e8 9f 83 ff ff       	call   c0104268 <print>
c010bec9:	83 c4 20             	add    $0x20,%esp
c010becc:	e8 b2 50 ff ff       	call   c0100f83 <backtrace>
c010bed1:	fa                   	cli    
c010bed2:	f4                   	hlt    
    assert(hashtable_getsize(newhashtable) == 1);
c010bed3:	83 ec 0c             	sub    $0xc,%esp
c010bed6:	53                   	push   %ebx
c010bed7:	e8 44 b3 ff ff       	call   c0107220 <hashtable_getsize>
c010bedc:	83 c4 10             	add    $0x10,%esp
c010bedf:	48                   	dec    %eax
c010bee0:	74 28                	je     c010bf0a <hashtabletest+0xa5e>
c010bee2:	83 ec 0c             	sub    $0xc,%esp
c010bee5:	68 84 2a 11 c0       	push   $0xc0112a84
c010beea:	6a 77                	push   $0x77
c010beec:	68 1c 28 11 c0       	push   $0xc011281c
c010bef1:	68 46 2a 11 c0       	push   $0xc0112a46
c010bef6:	68 2b ff 10 c0       	push   $0xc010ff2b
c010befb:	e8 68 83 ff ff       	call   c0104268 <print>
c010bf00:	83 c4 20             	add    $0x20,%esp
c010bf03:	e8 7b 50 ff ff       	call   c0100f83 <backtrace>
c010bf08:	fa                   	cli    
c010bf09:	f4                   	hlt    
    assert(!hashtable_isempty(newhashtable));
c010bf0a:	83 ec 0c             	sub    $0xc,%esp
c010bf0d:	53                   	push   %ebx
c010bf0e:	e8 95 b2 ff ff       	call   c01071a8 <hashtable_isempty>
c010bf13:	83 c4 10             	add    $0x10,%esp
c010bf16:	85 c0                	test   %eax,%eax
c010bf18:	74 28                	je     c010bf42 <hashtabletest+0xa96>
c010bf1a:	83 ec 0c             	sub    $0xc,%esp
c010bf1d:	68 84 2a 11 c0       	push   $0xc0112a84
c010bf22:	6a 78                	push   $0x78
c010bf24:	68 1c 28 11 c0       	push   $0xc011281c
c010bf29:	68 54 29 11 c0       	push   $0xc0112954
c010bf2e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bf33:	e8 30 83 ff ff       	call   c0104268 <print>
c010bf38:	83 c4 20             	add    $0x20,%esp
c010bf3b:	e8 43 50 ff ff       	call   c0100f83 <backtrace>
c010bf40:	fa                   	cli    
c010bf41:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010bf42:	83 ec 0c             	sub    $0xc,%esp
c010bf45:	53                   	push   %ebx
c010bf46:	e8 ab b3 ff ff       	call   c01072f6 <hashtable_assertvalid>
    removed_val2 = *(int*)hashtable_remove(newhashtable, key1, 1);
c010bf4b:	83 c4 0c             	add    $0xc,%esp
c010bf4e:	6a 01                	push   $0x1
c010bf50:	56                   	push   %esi
c010bf51:	53                   	push   %ebx
c010bf52:	e8 61 b0 ff ff       	call   c0106fb8 <hashtable_remove>
    assert(removed_val2 == val2);
c010bf57:	83 c4 10             	add    $0x10,%esp
c010bf5a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010bf5d:	39 10                	cmp    %edx,(%eax)
c010bf5f:	74 28                	je     c010bf89 <hashtabletest+0xadd>
c010bf61:	83 ec 0c             	sub    $0xc,%esp
c010bf64:	68 84 2a 11 c0       	push   $0xc0112a84
c010bf69:	6a 7b                	push   $0x7b
c010bf6b:	68 1c 28 11 c0       	push   $0xc011281c
c010bf70:	68 d6 29 11 c0       	push   $0xc01129d6
c010bf75:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bf7a:	e8 e9 82 ff ff       	call   c0104268 <print>
c010bf7f:	83 c4 20             	add    $0x20,%esp
c010bf82:	e8 fc 4f ff ff       	call   c0100f83 <backtrace>
c010bf87:	fa                   	cli    
c010bf88:	f4                   	hlt    
    assert(hashtable_isempty(newhashtable));
c010bf89:	83 ec 0c             	sub    $0xc,%esp
c010bf8c:	53                   	push   %ebx
c010bf8d:	e8 16 b2 ff ff       	call   c01071a8 <hashtable_isempty>
c010bf92:	83 c4 10             	add    $0x10,%esp
c010bf95:	85 c0                	test   %eax,%eax
c010bf97:	75 28                	jne    c010bfc1 <hashtabletest+0xb15>
c010bf99:	83 ec 0c             	sub    $0xc,%esp
c010bf9c:	68 84 2a 11 c0       	push   $0xc0112a84
c010bfa1:	6a 7c                	push   $0x7c
c010bfa3:	68 1c 28 11 c0       	push   $0xc011281c
c010bfa8:	68 55 29 11 c0       	push   $0xc0112955
c010bfad:	68 2b ff 10 c0       	push   $0xc010ff2b
c010bfb2:	e8 b1 82 ff ff       	call   c0104268 <print>
c010bfb7:	83 c4 20             	add    $0x20,%esp
c010bfba:	e8 c4 4f ff ff       	call   c0100f83 <backtrace>
c010bfbf:	fa                   	cli    
c010bfc0:	f4                   	hlt    
    hashtable_assertvalid(newhashtable);
c010bfc1:	83 ec 0c             	sub    $0xc,%esp
c010bfc4:	53                   	push   %ebx
c010bfc5:	e8 2c b3 ff ff       	call   c01072f6 <hashtable_assertvalid>

    /* Destroys hashtable. */
    hashtable_destroy(newhashtable);
c010bfca:	89 1c 24             	mov    %ebx,(%esp)
c010bfcd:	e8 c0 b2 ff ff       	call   c0107292 <hashtable_destroy>

    print("hashtable test complete\n");
c010bfd2:	c7 04 24 6b 2a 11 c0 	movl   $0xc0112a6b,(%esp)
c010bfd9:	e8 8a 82 ff ff       	call   c0104268 <print>

    return 0;
}
c010bfde:	31 c0                	xor    %eax,%eax
c010bfe0:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010bfe3:	5b                   	pop    %ebx
c010bfe4:	5e                   	pop    %esi
c010bfe5:	5f                   	pop    %edi
c010bfe6:	5d                   	pop    %ebp
c010bfe7:	c3                   	ret    

c010bfe8 <int_lessthan>:
#include <kmm.h>

#define TESTSIZE 133

/* less comparator for int */
static int int_lessthan(const void* left, const void* right) {
c010bfe8:	55                   	push   %ebp
c010bfe9:	89 e5                	mov    %esp,%ebp
    int l = *(int*)left;
    int r = *(int*)right;
    return (l < r);
c010bfeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfee:	8b 55 08             	mov    0x8(%ebp),%edx
c010bff1:	8b 00                	mov    (%eax),%eax
c010bff3:	39 02                	cmp    %eax,(%edx)
c010bff5:	0f 9c c0             	setl   %al
c010bff8:	0f b6 c0             	movzbl %al,%eax
}
c010bffb:	5d                   	pop    %ebp
c010bffc:	c3                   	ret    

c010bffd <heaptest>:

int
heaptest(int nargs, char** args) {
c010bffd:	55                   	push   %ebp
c010bffe:	89 e5                	mov    %esp,%ebp
c010c000:	57                   	push   %edi
c010c001:	56                   	push   %esi
c010c002:	53                   	push   %ebx
c010c003:	83 ec 18             	sub    $0x18,%esp
    (void)nargs;
    (void)args;

    print("Beginning heap test...\n");
c010c006:	68 92 2a 11 c0       	push   $0xc0112a92
c010c00b:	e8 58 82 ff ff       	call   c0104268 <print>

    struct heap* newheap;
    newheap = heap_create(&int_lessthan);
c010c010:	c7 04 24 e8 bf 10 c0 	movl   $0xc010bfe8,(%esp)
c010c017:	e8 14 94 ff ff       	call   c0105430 <heap_create>
c010c01c:	89 c3                	mov    %eax,%ebx
    assert(newheap != NULL);
c010c01e:	83 c4 10             	add    $0x10,%esp
c010c021:	85 c0                	test   %eax,%eax
c010c023:	75 28                	jne    c010c04d <heaptest+0x50>
c010c025:	83 ec 0c             	sub    $0xc,%esp
c010c028:	68 90 2b 11 c0       	push   $0xc0112b90
c010c02d:	6a 18                	push   $0x18
c010c02f:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c034:	68 ba 2a 11 c0       	push   $0xc0112aba
c010c039:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c03e:	e8 25 82 ff ff       	call   c0104268 <print>
c010c043:	83 c4 20             	add    $0x20,%esp
c010c046:	e8 38 4f ff ff       	call   c0100f83 <backtrace>
c010c04b:	fa                   	cli    
c010c04c:	f4                   	hlt    
    assert(heap_getsize(newheap) == 0);
c010c04d:	83 ec 0c             	sub    $0xc,%esp
c010c050:	53                   	push   %ebx
c010c051:	e8 16 95 ff ff       	call   c010556c <heap_getsize>
c010c056:	83 c4 10             	add    $0x10,%esp
c010c059:	85 c0                	test   %eax,%eax
c010c05b:	74 28                	je     c010c085 <heaptest+0x88>
c010c05d:	83 ec 0c             	sub    $0xc,%esp
c010c060:	68 90 2b 11 c0       	push   $0xc0112b90
c010c065:	6a 19                	push   $0x19
c010c067:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c06c:	68 ca 2a 11 c0       	push   $0xc0112aca
c010c071:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c076:	e8 ed 81 ff ff       	call   c0104268 <print>
c010c07b:	83 c4 20             	add    $0x20,%esp
c010c07e:	e8 00 4f ff ff       	call   c0100f83 <backtrace>
c010c083:	fa                   	cli    
c010c084:	f4                   	hlt    
    assert(heap_isempty(newheap));
c010c085:	83 ec 0c             	sub    $0xc,%esp
c010c088:	53                   	push   %ebx
c010c089:	e8 5f 94 ff ff       	call   c01054ed <heap_isempty>
c010c08e:	83 c4 10             	add    $0x10,%esp
c010c091:	85 c0                	test   %eax,%eax
c010c093:	75 28                	jne    c010c0bd <heaptest+0xc0>
c010c095:	83 ec 0c             	sub    $0xc,%esp
c010c098:	68 90 2b 11 c0       	push   $0xc0112b90
c010c09d:	6a 1a                	push   $0x1a
c010c09f:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c0a4:	68 3a 2b 11 c0       	push   $0xc0112b3a
c010c0a9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c0ae:	e8 b5 81 ff ff       	call   c0104268 <print>
c010c0b3:	83 c4 20             	add    $0x20,%esp
c010c0b6:	e8 c8 4e ff ff       	call   c0100f83 <backtrace>
c010c0bb:	fa                   	cli    
c010c0bc:	f4                   	hlt    
    int r = *(int*)right;
    return (l < r);
}

int
heaptest(int nargs, char** args) {
c010c0bd:	be 84 00 00 00       	mov    $0x84,%esi

    int i;
    int* elem;
    /* push TESTSIZE number of elements */
    for (i = TESTSIZE - 1; i >= 0; --i) {
        elem = (int*)kmalloc(sizeof(int));
c010c0c2:	83 ec 0c             	sub    $0xc,%esp
c010c0c5:	6a 04                	push   $0x4
c010c0c7:	e8 a0 5c ff ff       	call   c0101d6c <kmalloc>
c010c0cc:	89 c7                	mov    %eax,%edi
        assert(elem != NULL);
c010c0ce:	83 c4 10             	add    $0x10,%esp
c010c0d1:	85 c0                	test   %eax,%eax
c010c0d3:	75 28                	jne    c010c0fd <heaptest+0x100>
c010c0d5:	83 ec 0c             	sub    $0xc,%esp
c010c0d8:	68 90 2b 11 c0       	push   $0xc0112b90
c010c0dd:	6a 21                	push   $0x21
c010c0df:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c0e4:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010c0e9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c0ee:	e8 75 81 ff ff       	call   c0104268 <print>
c010c0f3:	83 c4 20             	add    $0x20,%esp
c010c0f6:	e8 88 4e ff ff       	call   c0100f83 <backtrace>
c010c0fb:	fa                   	cli    
c010c0fc:	f4                   	hlt    
        *elem = i;
c010c0fd:	89 37                	mov    %esi,(%edi)
        /* check for ENOMEM */
        assert(heap_push(newheap, (void*)elem) == 0);
c010c0ff:	52                   	push   %edx
c010c100:	52                   	push   %edx
c010c101:	57                   	push   %edi
c010c102:	53                   	push   %ebx
c010c103:	e8 53 96 ff ff       	call   c010575b <heap_push>
c010c108:	83 c4 10             	add    $0x10,%esp
c010c10b:	85 c0                	test   %eax,%eax
c010c10d:	74 28                	je     c010c137 <heaptest+0x13a>
c010c10f:	83 ec 0c             	sub    $0xc,%esp
c010c112:	68 90 2b 11 c0       	push   $0xc0112b90
c010c117:	6a 24                	push   $0x24
c010c119:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c11e:	68 f2 2a 11 c0       	push   $0xc0112af2
c010c123:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c128:	e8 3b 81 ff ff       	call   c0104268 <print>
c010c12d:	83 c4 20             	add    $0x20,%esp
c010c130:	e8 4e 4e ff ff       	call   c0100f83 <backtrace>
c010c135:	fa                   	cli    
c010c136:	f4                   	hlt    
    assert(heap_isempty(newheap));

    int i;
    int* elem;
    /* push TESTSIZE number of elements */
    for (i = TESTSIZE - 1; i >= 0; --i) {
c010c137:	4e                   	dec    %esi
c010c138:	83 fe ff             	cmp    $0xffffffff,%esi
c010c13b:	75 85                	jne    c010c0c2 <heaptest+0xc5>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(heap_push(newheap, (void*)elem) == 0);
    }
    assert(heap_getsize(newheap) == TESTSIZE);
c010c13d:	83 ec 0c             	sub    $0xc,%esp
c010c140:	53                   	push   %ebx
c010c141:	e8 26 94 ff ff       	call   c010556c <heap_getsize>
c010c146:	83 c4 10             	add    $0x10,%esp
c010c149:	3d 85 00 00 00       	cmp    $0x85,%eax
c010c14e:	74 28                	je     c010c178 <heaptest+0x17b>
c010c150:	83 ec 0c             	sub    $0xc,%esp
c010c153:	68 90 2b 11 c0       	push   $0xc0112b90
c010c158:	6a 26                	push   $0x26
c010c15a:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c15f:	68 17 2b 11 c0       	push   $0xc0112b17
c010c164:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c169:	e8 fa 80 ff ff       	call   c0104268 <print>
c010c16e:	83 c4 20             	add    $0x20,%esp
c010c171:	e8 0d 4e ff ff       	call   c0100f83 <backtrace>
c010c176:	fa                   	cli    
c010c177:	f4                   	hlt    
    assert(!heap_isempty(newheap));
c010c178:	83 ec 0c             	sub    $0xc,%esp
c010c17b:	53                   	push   %ebx
c010c17c:	e8 6c 93 ff ff       	call   c01054ed <heap_isempty>
c010c181:	83 c4 10             	add    $0x10,%esp
c010c184:	85 c0                	test   %eax,%eax
c010c186:	74 28                	je     c010c1b0 <heaptest+0x1b3>
c010c188:	83 ec 0c             	sub    $0xc,%esp
c010c18b:	68 90 2b 11 c0       	push   $0xc0112b90
c010c190:	6a 27                	push   $0x27
c010c192:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c197:	68 39 2b 11 c0       	push   $0xc0112b39
c010c19c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c1a1:	e8 c2 80 ff ff       	call   c0104268 <print>
c010c1a6:	83 c4 20             	add    $0x20,%esp
c010c1a9:	e8 d5 4d ff ff       	call   c0100f83 <backtrace>
c010c1ae:	fa                   	cli    
c010c1af:	f4                   	hlt    
    int r = *(int*)right;
    return (l < r);
}

int
heaptest(int nargs, char** args) {
c010c1b0:	31 f6                	xor    %esi,%esi
    assert(heap_getsize(newheap) == TESTSIZE);
    assert(!heap_isempty(newheap));

    /* pop TESTSIZE number of elements; expect numbers in increasing order */
    for (i = 0; i < TESTSIZE; ++i) {
        assert(*(int*)heap_top(newheap) == i);
c010c1b2:	83 ec 0c             	sub    $0xc,%esp
c010c1b5:	53                   	push   %ebx
c010c1b6:	e8 bd 92 ff ff       	call   c0105478 <heap_top>
c010c1bb:	83 c4 10             	add    $0x10,%esp
c010c1be:	39 30                	cmp    %esi,(%eax)
c010c1c0:	74 28                	je     c010c1ea <heaptest+0x1ed>
c010c1c2:	83 ec 0c             	sub    $0xc,%esp
c010c1c5:	68 90 2b 11 c0       	push   $0xc0112b90
c010c1ca:	6a 2b                	push   $0x2b
c010c1cc:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c1d1:	68 50 2b 11 c0       	push   $0xc0112b50
c010c1d6:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c1db:	e8 88 80 ff ff       	call   c0104268 <print>
c010c1e0:	83 c4 20             	add    $0x20,%esp
c010c1e3:	e8 9b 4d ff ff       	call   c0100f83 <backtrace>
c010c1e8:	fa                   	cli    
c010c1e9:	f4                   	hlt    
        elem = (int*)heap_pop(newheap);
c010c1ea:	83 ec 0c             	sub    $0xc,%esp
c010c1ed:	53                   	push   %ebx
c010c1ee:	e8 f4 97 ff ff       	call   c01059e7 <heap_pop>
c010c1f3:	89 c7                	mov    %eax,%edi
        assert(*elem == i);
c010c1f5:	83 c4 10             	add    $0x10,%esp
c010c1f8:	39 30                	cmp    %esi,(%eax)
c010c1fa:	74 28                	je     c010c224 <heaptest+0x227>
c010c1fc:	83 ec 0c             	sub    $0xc,%esp
c010c1ff:	68 90 2b 11 c0       	push   $0xc0112b90
c010c204:	6a 2d                	push   $0x2d
c010c206:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c20b:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010c210:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c215:	e8 4e 80 ff ff       	call   c0104268 <print>
c010c21a:	83 c4 20             	add    $0x20,%esp
c010c21d:	e8 61 4d ff ff       	call   c0100f83 <backtrace>
c010c222:	fa                   	cli    
c010c223:	f4                   	hlt    
        /* REMEMBER to kfree elements we allocated in the beginning */
        kfree(elem);
c010c224:	83 ec 0c             	sub    $0xc,%esp
c010c227:	57                   	push   %edi
c010c228:	e8 3f 5c ff ff       	call   c0101e6c <kfree>
    }
    assert(heap_getsize(newheap) == TESTSIZE);
    assert(!heap_isempty(newheap));

    /* pop TESTSIZE number of elements; expect numbers in increasing order */
    for (i = 0; i < TESTSIZE; ++i) {
c010c22d:	46                   	inc    %esi
c010c22e:	83 c4 10             	add    $0x10,%esp
c010c231:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010c237:	0f 85 75 ff ff ff    	jne    c010c1b2 <heaptest+0x1b5>
        elem = (int*)heap_pop(newheap);
        assert(*elem == i);
        /* REMEMBER to kfree elements we allocated in the beginning */
        kfree(elem);
    }
    assert(heap_getsize(newheap) == 0);
c010c23d:	83 ec 0c             	sub    $0xc,%esp
c010c240:	53                   	push   %ebx
c010c241:	e8 26 93 ff ff       	call   c010556c <heap_getsize>
c010c246:	83 c4 10             	add    $0x10,%esp
c010c249:	85 c0                	test   %eax,%eax
c010c24b:	74 28                	je     c010c275 <heaptest+0x278>
c010c24d:	83 ec 0c             	sub    $0xc,%esp
c010c250:	68 90 2b 11 c0       	push   $0xc0112b90
c010c255:	6a 31                	push   $0x31
c010c257:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c25c:	68 ca 2a 11 c0       	push   $0xc0112aca
c010c261:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c266:	e8 fd 7f ff ff       	call   c0104268 <print>
c010c26b:	83 c4 20             	add    $0x20,%esp
c010c26e:	e8 10 4d ff ff       	call   c0100f83 <backtrace>
c010c273:	fa                   	cli    
c010c274:	f4                   	hlt    
    assert(heap_isempty(newheap));
c010c275:	83 ec 0c             	sub    $0xc,%esp
c010c278:	53                   	push   %ebx
c010c279:	e8 6f 92 ff ff       	call   c01054ed <heap_isempty>
c010c27e:	83 c4 10             	add    $0x10,%esp
c010c281:	85 c0                	test   %eax,%eax
c010c283:	75 28                	jne    c010c2ad <heaptest+0x2b0>
c010c285:	83 ec 0c             	sub    $0xc,%esp
c010c288:	68 90 2b 11 c0       	push   $0xc0112b90
c010c28d:	6a 32                	push   $0x32
c010c28f:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c294:	68 3a 2b 11 c0       	push   $0xc0112b3a
c010c299:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c29e:	e8 c5 7f ff ff       	call   c0104268 <print>
c010c2a3:	83 c4 20             	add    $0x20,%esp
c010c2a6:	e8 d8 4c ff ff       	call   c0100f83 <backtrace>
c010c2ab:	fa                   	cli    
c010c2ac:	f4                   	hlt    
    int r = *(int*)right;
    return (l < r);
}

int
heaptest(int nargs, char** args) {
c010c2ad:	be 84 00 00 00       	mov    $0x84,%esi

    /* REPEAT to test if the heap is reusable */

    /* push TESTSIZE number of elements */
    for (i = TESTSIZE - 1; i >= 0; --i) {
        elem = (int*)kmalloc(sizeof(int));
c010c2b2:	83 ec 0c             	sub    $0xc,%esp
c010c2b5:	6a 04                	push   $0x4
c010c2b7:	e8 b0 5a ff ff       	call   c0101d6c <kmalloc>
c010c2bc:	89 c7                	mov    %eax,%edi
        assert(elem != NULL);
c010c2be:	83 c4 10             	add    $0x10,%esp
c010c2c1:	85 c0                	test   %eax,%eax
c010c2c3:	75 28                	jne    c010c2ed <heaptest+0x2f0>
c010c2c5:	83 ec 0c             	sub    $0xc,%esp
c010c2c8:	68 90 2b 11 c0       	push   $0xc0112b90
c010c2cd:	6a 39                	push   $0x39
c010c2cf:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c2d4:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010c2d9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c2de:	e8 85 7f ff ff       	call   c0104268 <print>
c010c2e3:	83 c4 20             	add    $0x20,%esp
c010c2e6:	e8 98 4c ff ff       	call   c0100f83 <backtrace>
c010c2eb:	fa                   	cli    
c010c2ec:	f4                   	hlt    
        *elem = i;
c010c2ed:	89 37                	mov    %esi,(%edi)
        /* check for ENOMEM */
        assert(heap_push(newheap, (void*)elem) == 0);
c010c2ef:	50                   	push   %eax
c010c2f0:	50                   	push   %eax
c010c2f1:	57                   	push   %edi
c010c2f2:	53                   	push   %ebx
c010c2f3:	e8 63 94 ff ff       	call   c010575b <heap_push>
c010c2f8:	83 c4 10             	add    $0x10,%esp
c010c2fb:	85 c0                	test   %eax,%eax
c010c2fd:	74 28                	je     c010c327 <heaptest+0x32a>
c010c2ff:	83 ec 0c             	sub    $0xc,%esp
c010c302:	68 90 2b 11 c0       	push   $0xc0112b90
c010c307:	6a 3c                	push   $0x3c
c010c309:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c30e:	68 f2 2a 11 c0       	push   $0xc0112af2
c010c313:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c318:	e8 4b 7f ff ff       	call   c0104268 <print>
c010c31d:	83 c4 20             	add    $0x20,%esp
c010c320:	e8 5e 4c ff ff       	call   c0100f83 <backtrace>
c010c325:	fa                   	cli    
c010c326:	f4                   	hlt    
    assert(heap_isempty(newheap));

    /* REPEAT to test if the heap is reusable */

    /* push TESTSIZE number of elements */
    for (i = TESTSIZE - 1; i >= 0; --i) {
c010c327:	4e                   	dec    %esi
c010c328:	83 fe ff             	cmp    $0xffffffff,%esi
c010c32b:	75 85                	jne    c010c2b2 <heaptest+0x2b5>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(heap_push(newheap, (void*)elem) == 0);
    }
    assert(heap_getsize(newheap) == TESTSIZE);
c010c32d:	83 ec 0c             	sub    $0xc,%esp
c010c330:	53                   	push   %ebx
c010c331:	e8 36 92 ff ff       	call   c010556c <heap_getsize>
c010c336:	83 c4 10             	add    $0x10,%esp
c010c339:	3d 85 00 00 00       	cmp    $0x85,%eax
c010c33e:	74 28                	je     c010c368 <heaptest+0x36b>
c010c340:	83 ec 0c             	sub    $0xc,%esp
c010c343:	68 90 2b 11 c0       	push   $0xc0112b90
c010c348:	6a 3e                	push   $0x3e
c010c34a:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c34f:	68 17 2b 11 c0       	push   $0xc0112b17
c010c354:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c359:	e8 0a 7f ff ff       	call   c0104268 <print>
c010c35e:	83 c4 20             	add    $0x20,%esp
c010c361:	e8 1d 4c ff ff       	call   c0100f83 <backtrace>
c010c366:	fa                   	cli    
c010c367:	f4                   	hlt    
    assert(!heap_isempty(newheap));
c010c368:	83 ec 0c             	sub    $0xc,%esp
c010c36b:	53                   	push   %ebx
c010c36c:	e8 7c 91 ff ff       	call   c01054ed <heap_isempty>
c010c371:	83 c4 10             	add    $0x10,%esp
c010c374:	85 c0                	test   %eax,%eax
c010c376:	74 28                	je     c010c3a0 <heaptest+0x3a3>
c010c378:	83 ec 0c             	sub    $0xc,%esp
c010c37b:	68 90 2b 11 c0       	push   $0xc0112b90
c010c380:	6a 3f                	push   $0x3f
c010c382:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c387:	68 39 2b 11 c0       	push   $0xc0112b39
c010c38c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c391:	e8 d2 7e ff ff       	call   c0104268 <print>
c010c396:	83 c4 20             	add    $0x20,%esp
c010c399:	e8 e5 4b ff ff       	call   c0100f83 <backtrace>
c010c39e:	fa                   	cli    
c010c39f:	f4                   	hlt    
    int r = *(int*)right;
    return (l < r);
}

int
heaptest(int nargs, char** args) {
c010c3a0:	31 f6                	xor    %esi,%esi
    assert(heap_getsize(newheap) == TESTSIZE);
    assert(!heap_isempty(newheap));

    /* pop TESTSIZE number of elements; expect numbers in increasing order */
    for (i = 0; i < TESTSIZE; ++i) {
        assert(*(int*)heap_top(newheap) == i);
c010c3a2:	83 ec 0c             	sub    $0xc,%esp
c010c3a5:	53                   	push   %ebx
c010c3a6:	e8 cd 90 ff ff       	call   c0105478 <heap_top>
c010c3ab:	83 c4 10             	add    $0x10,%esp
c010c3ae:	39 30                	cmp    %esi,(%eax)
c010c3b0:	74 28                	je     c010c3da <heaptest+0x3dd>
c010c3b2:	83 ec 0c             	sub    $0xc,%esp
c010c3b5:	68 90 2b 11 c0       	push   $0xc0112b90
c010c3ba:	6a 43                	push   $0x43
c010c3bc:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c3c1:	68 50 2b 11 c0       	push   $0xc0112b50
c010c3c6:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c3cb:	e8 98 7e ff ff       	call   c0104268 <print>
c010c3d0:	83 c4 20             	add    $0x20,%esp
c010c3d3:	e8 ab 4b ff ff       	call   c0100f83 <backtrace>
c010c3d8:	fa                   	cli    
c010c3d9:	f4                   	hlt    
        elem = (int*)heap_pop(newheap);
c010c3da:	83 ec 0c             	sub    $0xc,%esp
c010c3dd:	53                   	push   %ebx
c010c3de:	e8 04 96 ff ff       	call   c01059e7 <heap_pop>
c010c3e3:	89 c7                	mov    %eax,%edi
        assert(*elem == i);
c010c3e5:	83 c4 10             	add    $0x10,%esp
c010c3e8:	39 30                	cmp    %esi,(%eax)
c010c3ea:	74 28                	je     c010c414 <heaptest+0x417>
c010c3ec:	83 ec 0c             	sub    $0xc,%esp
c010c3ef:	68 90 2b 11 c0       	push   $0xc0112b90
c010c3f4:	6a 45                	push   $0x45
c010c3f6:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c3fb:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010c400:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c405:	e8 5e 7e ff ff       	call   c0104268 <print>
c010c40a:	83 c4 20             	add    $0x20,%esp
c010c40d:	e8 71 4b ff ff       	call   c0100f83 <backtrace>
c010c412:	fa                   	cli    
c010c413:	f4                   	hlt    
        /* REMEMBER to kfree elements we allocated in the beginning */
        kfree(elem);
c010c414:	83 ec 0c             	sub    $0xc,%esp
c010c417:	57                   	push   %edi
c010c418:	e8 4f 5a ff ff       	call   c0101e6c <kfree>
    }
    assert(heap_getsize(newheap) == TESTSIZE);
    assert(!heap_isempty(newheap));

    /* pop TESTSIZE number of elements; expect numbers in increasing order */
    for (i = 0; i < TESTSIZE; ++i) {
c010c41d:	46                   	inc    %esi
c010c41e:	83 c4 10             	add    $0x10,%esp
c010c421:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010c427:	0f 85 75 ff ff ff    	jne    c010c3a2 <heaptest+0x3a5>
        elem = (int*)heap_pop(newheap);
        assert(*elem == i);
        /* REMEMBER to kfree elements we allocated in the beginning */
        kfree(elem);
    }
    assert(heap_getsize(newheap) == 0);
c010c42d:	83 ec 0c             	sub    $0xc,%esp
c010c430:	53                   	push   %ebx
c010c431:	e8 36 91 ff ff       	call   c010556c <heap_getsize>
c010c436:	83 c4 10             	add    $0x10,%esp
c010c439:	85 c0                	test   %eax,%eax
c010c43b:	74 28                	je     c010c465 <heaptest+0x468>
c010c43d:	83 ec 0c             	sub    $0xc,%esp
c010c440:	68 90 2b 11 c0       	push   $0xc0112b90
c010c445:	6a 49                	push   $0x49
c010c447:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c44c:	68 ca 2a 11 c0       	push   $0xc0112aca
c010c451:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c456:	e8 0d 7e ff ff       	call   c0104268 <print>
c010c45b:	83 c4 20             	add    $0x20,%esp
c010c45e:	e8 20 4b ff ff       	call   c0100f83 <backtrace>
c010c463:	fa                   	cli    
c010c464:	f4                   	hlt    
    assert(heap_isempty(newheap));
c010c465:	83 ec 0c             	sub    $0xc,%esp
c010c468:	53                   	push   %ebx
c010c469:	e8 7f 90 ff ff       	call   c01054ed <heap_isempty>
c010c46e:	83 c4 10             	add    $0x10,%esp
c010c471:	85 c0                	test   %eax,%eax
c010c473:	75 28                	jne    c010c49d <heaptest+0x4a0>
c010c475:	83 ec 0c             	sub    $0xc,%esp
c010c478:	68 90 2b 11 c0       	push   $0xc0112b90
c010c47d:	6a 4a                	push   $0x4a
c010c47f:	68 aa 2a 11 c0       	push   $0xc0112aaa
c010c484:	68 3a 2b 11 c0       	push   $0xc0112b3a
c010c489:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c48e:	e8 d5 7d ff ff       	call   c0104268 <print>
c010c493:	83 c4 20             	add    $0x20,%esp
c010c496:	e8 e8 4a ff ff       	call   c0100f83 <backtrace>
c010c49b:	fa                   	cli    
c010c49c:	f4                   	hlt    

    heap_destroy(newheap);
c010c49d:	83 ec 0c             	sub    $0xc,%esp
c010c4a0:	53                   	push   %ebx
c010c4a1:	e8 39 91 ff ff       	call   c01055df <heap_destroy>

    print("heap test complete\n");
c010c4a6:	c7 04 24 79 2b 11 c0 	movl   $0xc0112b79,(%esp)
c010c4ad:	e8 b6 7d ff ff       	call   c0104268 <print>

    return 0;
}
c010c4b2:	31 c0                	xor    %eax,%eax
c010c4b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010c4b7:	5b                   	pop    %ebx
c010c4b8:	5e                   	pop    %esi
c010c4b9:	5f                   	pop    %edi
c010c4ba:	5d                   	pop    %ebp
c010c4bb:	c3                   	ret    

c010c4bc <int_comparator>:

#define TESTSIZE 133

static
int
int_comparator(void* left, void* right) {
c010c4bc:	55                   	push   %ebp
c010c4bd:	89 e5                	mov    %esp,%ebp
    int l = *(int*)left;
    int r = *(int*)right;
    return l - r;
c010c4bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c2:	8b 00                	mov    (%eax),%eax
c010c4c4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c4c7:	2b 02                	sub    (%edx),%eax
}
c010c4c9:	5d                   	pop    %ebp
c010c4ca:	c3                   	ret    

c010c4cb <listtest>:

int
listtest(int nargs, char** args) {
c010c4cb:	55                   	push   %ebp
c010c4cc:	89 e5                	mov    %esp,%ebp
c010c4ce:	56                   	push   %esi
c010c4cf:	53                   	push   %ebx
c010c4d0:	83 ec 1c             	sub    $0x1c,%esp
    (void)nargs;
    (void)args;

    print("Beginning list test...\n");
c010c4d3:	68 99 2b 11 c0       	push   $0xc0112b99
c010c4d8:	e8 8b 7d ff ff       	call   c0104268 <print>

    struct list* newlist;
    newlist = list_create();
c010c4dd:	e8 75 96 ff ff       	call   c0105b57 <list_create>
c010c4e2:	89 c3                	mov    %eax,%ebx
    assert(newlist != NULL);
c010c4e4:	83 c4 10             	add    $0x10,%esp
c010c4e7:	85 c0                	test   %eax,%eax
c010c4e9:	75 28                	jne    c010c513 <listtest+0x48>
c010c4eb:	83 ec 0c             	sub    $0xc,%esp
c010c4ee:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c4f3:	6a 19                	push   $0x19
c010c4f5:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c4fa:	68 c1 2b 11 c0       	push   $0xc0112bc1
c010c4ff:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c504:	e8 5f 7d ff ff       	call   c0104268 <print>
c010c509:	83 c4 20             	add    $0x20,%esp
c010c50c:	e8 72 4a ff ff       	call   c0100f83 <backtrace>
c010c511:	fa                   	cli    
c010c512:	f4                   	hlt    
    assert(list_getsize(newlist) == 0);
c010c513:	83 ec 0c             	sub    $0xc,%esp
c010c516:	53                   	push   %ebx
c010c517:	e8 47 9b ff ff       	call   c0106063 <list_getsize>
c010c51c:	83 c4 10             	add    $0x10,%esp
c010c51f:	85 c0                	test   %eax,%eax
c010c521:	74 28                	je     c010c54b <listtest+0x80>
c010c523:	83 ec 0c             	sub    $0xc,%esp
c010c526:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c52b:	6a 1a                	push   $0x1a
c010c52d:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c532:	68 d1 2b 11 c0       	push   $0xc0112bd1
c010c537:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c53c:	e8 27 7d ff ff       	call   c0104268 <print>
c010c541:	83 c4 20             	add    $0x20,%esp
c010c544:	e8 3a 4a ff ff       	call   c0100f83 <backtrace>
c010c549:	fa                   	cli    
c010c54a:	f4                   	hlt    
    assert(list_isempty(newlist));
c010c54b:	83 ec 0c             	sub    $0xc,%esp
c010c54e:	53                   	push   %ebx
c010c54f:	e8 97 9a ff ff       	call   c0105feb <list_isempty>
c010c554:	83 c4 10             	add    $0x10,%esp
c010c557:	85 c0                	test   %eax,%eax
c010c559:	75 28                	jne    c010c583 <listtest+0xb8>
c010c55b:	83 ec 0c             	sub    $0xc,%esp
c010c55e:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c563:	6a 1b                	push   $0x1b
c010c565:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c56a:	68 45 2c 11 c0       	push   $0xc0112c45
c010c56f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c574:	e8 ef 7c ff ff       	call   c0104268 <print>
c010c579:	83 c4 20             	add    $0x20,%esp
c010c57c:	e8 02 4a ff ff       	call   c0100f83 <backtrace>
c010c581:	fa                   	cli    
c010c582:	f4                   	hlt    
    list_assertvalid(newlist);
c010c583:	83 ec 0c             	sub    $0xc,%esp
c010c586:	53                   	push   %ebx
c010c587:	e8 e8 9b ff ff       	call   c0106174 <list_assertvalid>

    int i, found, removed;
    int* elem;
    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c58c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c593:	83 c4 10             	add    $0x10,%esp
c010c596:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010c59d:	0f 8f bf 00 00 00    	jg     c010c662 <listtest+0x197>
        elem = (int*)kmalloc(sizeof(int));
c010c5a3:	83 ec 0c             	sub    $0xc,%esp
c010c5a6:	6a 04                	push   $0x4
c010c5a8:	e8 bf 57 ff ff       	call   c0101d6c <kmalloc>
c010c5ad:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010c5af:	83 c4 10             	add    $0x10,%esp
c010c5b2:	85 c0                	test   %eax,%eax
c010c5b4:	75 28                	jne    c010c5de <listtest+0x113>
c010c5b6:	83 ec 0c             	sub    $0xc,%esp
c010c5b9:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c5be:	6a 23                	push   $0x23
c010c5c0:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c5c5:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010c5ca:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c5cf:	e8 94 7c ff ff       	call   c0104268 <print>
c010c5d4:	83 c4 20             	add    $0x20,%esp
c010c5d7:	e8 a7 49 ff ff       	call   c0100f83 <backtrace>
c010c5dc:	fa                   	cli    
c010c5dd:	f4                   	hlt    
        *elem = i;
c010c5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5e1:	89 06                	mov    %eax,(%esi)
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
c010c5e3:	52                   	push   %edx
c010c5e4:	52                   	push   %edx
c010c5e5:	56                   	push   %esi
c010c5e6:	53                   	push   %ebx
c010c5e7:	e8 9c 95 ff ff       	call   c0105b88 <list_push_back>
c010c5ec:	83 c4 10             	add    $0x10,%esp
c010c5ef:	85 c0                	test   %eax,%eax
c010c5f1:	74 28                	je     c010c61b <listtest+0x150>
c010c5f3:	83 ec 0c             	sub    $0xc,%esp
c010c5f6:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c5fb:	6a 26                	push   $0x26
c010c5fd:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c602:	68 ec 2b 11 c0       	push   $0xc0112bec
c010c607:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c60c:	e8 57 7c ff ff       	call   c0104268 <print>
c010c611:	83 c4 20             	add    $0x20,%esp
c010c614:	e8 6a 49 ff ff       	call   c0100f83 <backtrace>
c010c619:	fa                   	cli    
c010c61a:	f4                   	hlt    
        /* find the element added */
        found = *(int*)list_find(newlist, (void*) elem, &int_comparator);
c010c61b:	50                   	push   %eax
c010c61c:	68 bc c4 10 c0       	push   $0xc010c4bc
c010c621:	56                   	push   %esi
c010c622:	53                   	push   %ebx
c010c623:	e8 ff 97 ff ff       	call   c0105e27 <list_find>
        assert(found == i);
c010c628:	83 c4 10             	add    $0x10,%esp
c010c62b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c62e:	39 10                	cmp    %edx,(%eax)
c010c630:	74 28                	je     c010c65a <listtest+0x18f>
c010c632:	83 ec 0c             	sub    $0xc,%esp
c010c635:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c63a:	6a 29                	push   $0x29
c010c63c:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c641:	68 17 2c 11 c0       	push   $0xc0112c17
c010c646:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c64b:	e8 18 7c ff ff       	call   c0104268 <print>
c010c650:	83 c4 20             	add    $0x20,%esp
c010c653:	e8 2b 49 ff ff       	call   c0100f83 <backtrace>
c010c658:	fa                   	cli    
c010c659:	f4                   	hlt    
    list_assertvalid(newlist);

    int i, found, removed;
    int* elem;
    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c65a:	ff 45 f4             	incl   -0xc(%ebp)
c010c65d:	e9 34 ff ff ff       	jmp    c010c596 <listtest+0xcb>
        assert(list_push_back(newlist, (void*) elem) == 0);
        /* find the element added */
        found = *(int*)list_find(newlist, (void*) elem, &int_comparator);
        assert(found == i);
    }
    assert(list_getsize(newlist) == TESTSIZE);
c010c662:	83 ec 0c             	sub    $0xc,%esp
c010c665:	53                   	push   %ebx
c010c666:	e8 f8 99 ff ff       	call   c0106063 <list_getsize>
c010c66b:	83 c4 10             	add    $0x10,%esp
c010c66e:	3d 85 00 00 00       	cmp    $0x85,%eax
c010c673:	74 28                	je     c010c69d <listtest+0x1d2>
c010c675:	83 ec 0c             	sub    $0xc,%esp
c010c678:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c67d:	6a 2b                	push   $0x2b
c010c67f:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c684:	68 22 2c 11 c0       	push   $0xc0112c22
c010c689:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c68e:	e8 d5 7b ff ff       	call   c0104268 <print>
c010c693:	83 c4 20             	add    $0x20,%esp
c010c696:	e8 e8 48 ff ff       	call   c0100f83 <backtrace>
c010c69b:	fa                   	cli    
c010c69c:	f4                   	hlt    
    assert(!list_isempty(newlist));
c010c69d:	83 ec 0c             	sub    $0xc,%esp
c010c6a0:	53                   	push   %ebx
c010c6a1:	e8 45 99 ff ff       	call   c0105feb <list_isempty>
c010c6a6:	83 c4 10             	add    $0x10,%esp
c010c6a9:	85 c0                	test   %eax,%eax
c010c6ab:	74 28                	je     c010c6d5 <listtest+0x20a>
c010c6ad:	83 ec 0c             	sub    $0xc,%esp
c010c6b0:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c6b5:	6a 2c                	push   $0x2c
c010c6b7:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c6bc:	68 44 2c 11 c0       	push   $0xc0112c44
c010c6c1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c6c6:	e8 9d 7b ff ff       	call   c0104268 <print>
c010c6cb:	83 c4 20             	add    $0x20,%esp
c010c6ce:	e8 b0 48 ff ff       	call   c0100f83 <backtrace>
c010c6d3:	fa                   	cli    
c010c6d4:	f4                   	hlt    
    list_assertvalid(newlist);
c010c6d5:	83 ec 0c             	sub    $0xc,%esp
c010c6d8:	53                   	push   %ebx
c010c6d9:	e8 96 9a ff ff       	call   c0106174 <list_assertvalid>

    /* remove TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c6de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c6e5:	83 c4 10             	add    $0x10,%esp
c010c6e8:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010c6ef:	0f 8f 87 00 00 00    	jg     c010c77c <listtest+0x2b1>
        elem = (int*)kmalloc(sizeof(int));
c010c6f5:	83 ec 0c             	sub    $0xc,%esp
c010c6f8:	6a 04                	push   $0x4
c010c6fa:	e8 6d 56 ff ff       	call   c0101d6c <kmalloc>
c010c6ff:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010c701:	83 c4 10             	add    $0x10,%esp
c010c704:	85 c0                	test   %eax,%eax
c010c706:	75 28                	jne    c010c730 <listtest+0x265>
c010c708:	83 ec 0c             	sub    $0xc,%esp
c010c70b:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c710:	6a 32                	push   $0x32
c010c712:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c717:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010c71c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c721:	e8 42 7b ff ff       	call   c0104268 <print>
c010c726:	83 c4 20             	add    $0x20,%esp
c010c729:	e8 55 48 ff ff       	call   c0100f83 <backtrace>
c010c72e:	fa                   	cli    
c010c72f:	f4                   	hlt    
        *elem = i;
c010c730:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c733:	89 06                	mov    %eax,(%esi)
        removed = *(int*)list_remove(newlist, (void*) elem, &int_comparator);
c010c735:	50                   	push   %eax
c010c736:	68 bc c4 10 c0       	push   $0xc010c4bc
c010c73b:	56                   	push   %esi
c010c73c:	53                   	push   %ebx
c010c73d:	e8 a3 97 ff ff       	call   c0105ee5 <list_remove>
        assert(removed == i);
c010c742:	83 c4 10             	add    $0x10,%esp
c010c745:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010c748:	39 08                	cmp    %ecx,(%eax)
c010c74a:	74 28                	je     c010c774 <listtest+0x2a9>
c010c74c:	83 ec 0c             	sub    $0xc,%esp
c010c74f:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c754:	6a 35                	push   $0x35
c010c756:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c75b:	68 5b 2c 11 c0       	push   $0xc0112c5b
c010c760:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c765:	e8 fe 7a ff ff       	call   c0104268 <print>
c010c76a:	83 c4 20             	add    $0x20,%esp
c010c76d:	e8 11 48 ff ff       	call   c0100f83 <backtrace>
c010c772:	fa                   	cli    
c010c773:	f4                   	hlt    
    assert(list_getsize(newlist) == TESTSIZE);
    assert(!list_isempty(newlist));
    list_assertvalid(newlist);

    /* remove TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c774:	ff 45 f4             	incl   -0xc(%ebp)
c010c777:	e9 6c ff ff ff       	jmp    c010c6e8 <listtest+0x21d>
        assert(elem != NULL);
        *elem = i;
        removed = *(int*)list_remove(newlist, (void*) elem, &int_comparator);
        assert(removed == i);
    }
    assert(list_getsize(newlist) == 0);
c010c77c:	83 ec 0c             	sub    $0xc,%esp
c010c77f:	53                   	push   %ebx
c010c780:	e8 de 98 ff ff       	call   c0106063 <list_getsize>
c010c785:	83 c4 10             	add    $0x10,%esp
c010c788:	85 c0                	test   %eax,%eax
c010c78a:	74 28                	je     c010c7b4 <listtest+0x2e9>
c010c78c:	83 ec 0c             	sub    $0xc,%esp
c010c78f:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c794:	6a 37                	push   $0x37
c010c796:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c79b:	68 d1 2b 11 c0       	push   $0xc0112bd1
c010c7a0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c7a5:	e8 be 7a ff ff       	call   c0104268 <print>
c010c7aa:	83 c4 20             	add    $0x20,%esp
c010c7ad:	e8 d1 47 ff ff       	call   c0100f83 <backtrace>
c010c7b2:	fa                   	cli    
c010c7b3:	f4                   	hlt    
    assert(list_isempty(newlist));
c010c7b4:	83 ec 0c             	sub    $0xc,%esp
c010c7b7:	53                   	push   %ebx
c010c7b8:	e8 2e 98 ff ff       	call   c0105feb <list_isempty>
c010c7bd:	83 c4 10             	add    $0x10,%esp
c010c7c0:	85 c0                	test   %eax,%eax
c010c7c2:	75 28                	jne    c010c7ec <listtest+0x321>
c010c7c4:	83 ec 0c             	sub    $0xc,%esp
c010c7c7:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c7cc:	6a 38                	push   $0x38
c010c7ce:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c7d3:	68 45 2c 11 c0       	push   $0xc0112c45
c010c7d8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c7dd:	e8 86 7a ff ff       	call   c0104268 <print>
c010c7e2:	83 c4 20             	add    $0x20,%esp
c010c7e5:	e8 99 47 ff ff       	call   c0100f83 <backtrace>
c010c7ea:	fa                   	cli    
c010c7eb:	f4                   	hlt    
    list_assertvalid(newlist);
c010c7ec:	83 ec 0c             	sub    $0xc,%esp
c010c7ef:	53                   	push   %ebx
c010c7f0:	e8 7f 99 ff ff       	call   c0106174 <list_assertvalid>

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c7f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c7fc:	83 c4 10             	add    $0x10,%esp
c010c7ff:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010c806:	0f 8f 80 00 00 00    	jg     c010c88c <listtest+0x3c1>
        elem = (int*)kmalloc(sizeof(int));
c010c80c:	83 ec 0c             	sub    $0xc,%esp
c010c80f:	6a 04                	push   $0x4
c010c811:	e8 56 55 ff ff       	call   c0101d6c <kmalloc>
c010c816:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010c818:	83 c4 10             	add    $0x10,%esp
c010c81b:	85 c0                	test   %eax,%eax
c010c81d:	75 28                	jne    c010c847 <listtest+0x37c>
c010c81f:	83 ec 0c             	sub    $0xc,%esp
c010c822:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c827:	6a 3e                	push   $0x3e
c010c829:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c82e:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010c833:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c838:	e8 2b 7a ff ff       	call   c0104268 <print>
c010c83d:	83 c4 20             	add    $0x20,%esp
c010c840:	e8 3e 47 ff ff       	call   c0100f83 <backtrace>
c010c845:	fa                   	cli    
c010c846:	f4                   	hlt    
        *elem = i;
c010c847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c84a:	89 06                	mov    %eax,(%esi)
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
c010c84c:	50                   	push   %eax
c010c84d:	50                   	push   %eax
c010c84e:	56                   	push   %esi
c010c84f:	53                   	push   %ebx
c010c850:	e8 33 93 ff ff       	call   c0105b88 <list_push_back>
c010c855:	83 c4 10             	add    $0x10,%esp
c010c858:	85 c0                	test   %eax,%eax
c010c85a:	74 28                	je     c010c884 <listtest+0x3b9>
c010c85c:	83 ec 0c             	sub    $0xc,%esp
c010c85f:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c864:	6a 41                	push   $0x41
c010c866:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c86b:	68 ec 2b 11 c0       	push   $0xc0112bec
c010c870:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c875:	e8 ee 79 ff ff       	call   c0104268 <print>
c010c87a:	83 c4 20             	add    $0x20,%esp
c010c87d:	e8 01 47 ff ff       	call   c0100f83 <backtrace>
c010c882:	fa                   	cli    
c010c883:	f4                   	hlt    
    assert(list_getsize(newlist) == 0);
    assert(list_isempty(newlist));
    list_assertvalid(newlist);

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c884:	ff 45 f4             	incl   -0xc(%ebp)
c010c887:	e9 73 ff ff ff       	jmp    c010c7ff <listtest+0x334>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
    }
    assert(list_getsize(newlist) == TESTSIZE);
c010c88c:	83 ec 0c             	sub    $0xc,%esp
c010c88f:	53                   	push   %ebx
c010c890:	e8 ce 97 ff ff       	call   c0106063 <list_getsize>
c010c895:	83 c4 10             	add    $0x10,%esp
c010c898:	3d 85 00 00 00       	cmp    $0x85,%eax
c010c89d:	74 28                	je     c010c8c7 <listtest+0x3fc>
c010c89f:	83 ec 0c             	sub    $0xc,%esp
c010c8a2:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c8a7:	6a 43                	push   $0x43
c010c8a9:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c8ae:	68 22 2c 11 c0       	push   $0xc0112c22
c010c8b3:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c8b8:	e8 ab 79 ff ff       	call   c0104268 <print>
c010c8bd:	83 c4 20             	add    $0x20,%esp
c010c8c0:	e8 be 46 ff ff       	call   c0100f83 <backtrace>
c010c8c5:	fa                   	cli    
c010c8c6:	f4                   	hlt    
    assert(!list_isempty(newlist));
c010c8c7:	83 ec 0c             	sub    $0xc,%esp
c010c8ca:	53                   	push   %ebx
c010c8cb:	e8 1b 97 ff ff       	call   c0105feb <list_isempty>
c010c8d0:	83 c4 10             	add    $0x10,%esp
c010c8d3:	85 c0                	test   %eax,%eax
c010c8d5:	74 28                	je     c010c8ff <listtest+0x434>
c010c8d7:	83 ec 0c             	sub    $0xc,%esp
c010c8da:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c8df:	6a 44                	push   $0x44
c010c8e1:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c8e6:	68 44 2c 11 c0       	push   $0xc0112c44
c010c8eb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c8f0:	e8 73 79 ff ff       	call   c0104268 <print>
c010c8f5:	83 c4 20             	add    $0x20,%esp
c010c8f8:	e8 86 46 ff ff       	call   c0100f83 <backtrace>
c010c8fd:	fa                   	cli    
c010c8fe:	f4                   	hlt    
    list_assertvalid(newlist);
c010c8ff:	83 ec 0c             	sub    $0xc,%esp
c010c902:	53                   	push   %ebx
c010c903:	e8 6c 98 ff ff       	call   c0106174 <list_assertvalid>

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c908:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c90f:	83 c4 10             	add    $0x10,%esp
c010c912:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010c919:	7f 53                	jg     c010c96e <listtest+0x4a3>
        elem = (int*)list_front(newlist);
c010c91b:	83 ec 0c             	sub    $0xc,%esp
c010c91e:	53                   	push   %ebx
c010c91f:	e8 2b 94 ff ff       	call   c0105d4f <list_front>
c010c924:	89 c6                	mov    %eax,%esi
        assert(*elem == i);
c010c926:	83 c4 10             	add    $0x10,%esp
c010c929:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c92c:	39 06                	cmp    %eax,(%esi)
c010c92e:	74 28                	je     c010c958 <listtest+0x48d>
c010c930:	83 ec 0c             	sub    $0xc,%esp
c010c933:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c938:	6a 4a                	push   $0x4a
c010c93a:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c93f:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010c944:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c949:	e8 1a 79 ff ff       	call   c0104268 <print>
c010c94e:	83 c4 20             	add    $0x20,%esp
c010c951:	e8 2d 46 ff ff       	call   c0100f83 <backtrace>
c010c956:	fa                   	cli    
c010c957:	f4                   	hlt    
        list_pop_front(newlist);
c010c958:	83 ec 0c             	sub    $0xc,%esp
c010c95b:	53                   	push   %ebx
c010c95c:	e8 27 93 ff ff       	call   c0105c88 <list_pop_front>
        kfree(elem);
c010c961:	89 34 24             	mov    %esi,(%esp)
c010c964:	e8 03 55 ff ff       	call   c0101e6c <kfree>
    assert(list_getsize(newlist) == TESTSIZE);
    assert(!list_isempty(newlist));
    list_assertvalid(newlist);

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c969:	ff 45 f4             	incl   -0xc(%ebp)
c010c96c:	eb a1                	jmp    c010c90f <listtest+0x444>
        elem = (int*)list_front(newlist);
        assert(*elem == i);
        list_pop_front(newlist);
        kfree(elem);
    }
    assert(list_getsize(newlist) == 0);
c010c96e:	83 ec 0c             	sub    $0xc,%esp
c010c971:	53                   	push   %ebx
c010c972:	e8 ec 96 ff ff       	call   c0106063 <list_getsize>
c010c977:	83 c4 10             	add    $0x10,%esp
c010c97a:	85 c0                	test   %eax,%eax
c010c97c:	74 28                	je     c010c9a6 <listtest+0x4db>
c010c97e:	83 ec 0c             	sub    $0xc,%esp
c010c981:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c986:	6a 4e                	push   $0x4e
c010c988:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c98d:	68 d1 2b 11 c0       	push   $0xc0112bd1
c010c992:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c997:	e8 cc 78 ff ff       	call   c0104268 <print>
c010c99c:	83 c4 20             	add    $0x20,%esp
c010c99f:	e8 df 45 ff ff       	call   c0100f83 <backtrace>
c010c9a4:	fa                   	cli    
c010c9a5:	f4                   	hlt    
    assert(list_isempty(newlist));
c010c9a6:	83 ec 0c             	sub    $0xc,%esp
c010c9a9:	53                   	push   %ebx
c010c9aa:	e8 3c 96 ff ff       	call   c0105feb <list_isempty>
c010c9af:	83 c4 10             	add    $0x10,%esp
c010c9b2:	85 c0                	test   %eax,%eax
c010c9b4:	75 28                	jne    c010c9de <listtest+0x513>
c010c9b6:	83 ec 0c             	sub    $0xc,%esp
c010c9b9:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010c9be:	6a 4f                	push   $0x4f
c010c9c0:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010c9c5:	68 45 2c 11 c0       	push   $0xc0112c45
c010c9ca:	68 2b ff 10 c0       	push   $0xc010ff2b
c010c9cf:	e8 94 78 ff ff       	call   c0104268 <print>
c010c9d4:	83 c4 20             	add    $0x20,%esp
c010c9d7:	e8 a7 45 ff ff       	call   c0100f83 <backtrace>
c010c9dc:	fa                   	cli    
c010c9dd:	f4                   	hlt    
    list_assertvalid(newlist);
c010c9de:	83 ec 0c             	sub    $0xc,%esp
c010c9e1:	53                   	push   %ebx
c010c9e2:	e8 8d 97 ff ff       	call   c0106174 <list_assertvalid>

    /* REPEAT to test if the list is reusable */

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010c9e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c9ee:	83 c4 10             	add    $0x10,%esp
c010c9f1:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010c9f8:	0f 8f bf 00 00 00    	jg     c010cabd <listtest+0x5f2>
        elem = (int*)kmalloc(sizeof(int));
c010c9fe:	83 ec 0c             	sub    $0xc,%esp
c010ca01:	6a 04                	push   $0x4
c010ca03:	e8 64 53 ff ff       	call   c0101d6c <kmalloc>
c010ca08:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010ca0a:	83 c4 10             	add    $0x10,%esp
c010ca0d:	85 c0                	test   %eax,%eax
c010ca0f:	75 28                	jne    c010ca39 <listtest+0x56e>
c010ca11:	83 ec 0c             	sub    $0xc,%esp
c010ca14:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ca19:	6a 57                	push   $0x57
c010ca1b:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ca20:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010ca25:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ca2a:	e8 39 78 ff ff       	call   c0104268 <print>
c010ca2f:	83 c4 20             	add    $0x20,%esp
c010ca32:	e8 4c 45 ff ff       	call   c0100f83 <backtrace>
c010ca37:	fa                   	cli    
c010ca38:	f4                   	hlt    
        *elem = i;
c010ca39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca3c:	89 06                	mov    %eax,(%esi)
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
c010ca3e:	50                   	push   %eax
c010ca3f:	50                   	push   %eax
c010ca40:	56                   	push   %esi
c010ca41:	53                   	push   %ebx
c010ca42:	e8 41 91 ff ff       	call   c0105b88 <list_push_back>
c010ca47:	83 c4 10             	add    $0x10,%esp
c010ca4a:	85 c0                	test   %eax,%eax
c010ca4c:	74 28                	je     c010ca76 <listtest+0x5ab>
c010ca4e:	83 ec 0c             	sub    $0xc,%esp
c010ca51:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ca56:	6a 5a                	push   $0x5a
c010ca58:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ca5d:	68 ec 2b 11 c0       	push   $0xc0112bec
c010ca62:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ca67:	e8 fc 77 ff ff       	call   c0104268 <print>
c010ca6c:	83 c4 20             	add    $0x20,%esp
c010ca6f:	e8 0f 45 ff ff       	call   c0100f83 <backtrace>
c010ca74:	fa                   	cli    
c010ca75:	f4                   	hlt    
        /* find the element added */
        found = *(int*)list_find(newlist, (void*) elem, &int_comparator);
c010ca76:	50                   	push   %eax
c010ca77:	68 bc c4 10 c0       	push   $0xc010c4bc
c010ca7c:	56                   	push   %esi
c010ca7d:	53                   	push   %ebx
c010ca7e:	e8 a4 93 ff ff       	call   c0105e27 <list_find>
        assert(found == i);
c010ca83:	83 c4 10             	add    $0x10,%esp
c010ca86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca89:	39 10                	cmp    %edx,(%eax)
c010ca8b:	74 28                	je     c010cab5 <listtest+0x5ea>
c010ca8d:	83 ec 0c             	sub    $0xc,%esp
c010ca90:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ca95:	6a 5d                	push   $0x5d
c010ca97:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ca9c:	68 17 2c 11 c0       	push   $0xc0112c17
c010caa1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010caa6:	e8 bd 77 ff ff       	call   c0104268 <print>
c010caab:	83 c4 20             	add    $0x20,%esp
c010caae:	e8 d0 44 ff ff       	call   c0100f83 <backtrace>
c010cab3:	fa                   	cli    
c010cab4:	f4                   	hlt    
    list_assertvalid(newlist);

    /* REPEAT to test if the list is reusable */

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cab5:	ff 45 f4             	incl   -0xc(%ebp)
c010cab8:	e9 34 ff ff ff       	jmp    c010c9f1 <listtest+0x526>
        assert(list_push_back(newlist, (void*) elem) == 0);
        /* find the element added */
        found = *(int*)list_find(newlist, (void*) elem, &int_comparator);
        assert(found == i);
    }
    assert(list_getsize(newlist) == TESTSIZE);
c010cabd:	83 ec 0c             	sub    $0xc,%esp
c010cac0:	53                   	push   %ebx
c010cac1:	e8 9d 95 ff ff       	call   c0106063 <list_getsize>
c010cac6:	83 c4 10             	add    $0x10,%esp
c010cac9:	3d 85 00 00 00       	cmp    $0x85,%eax
c010cace:	74 28                	je     c010caf8 <listtest+0x62d>
c010cad0:	83 ec 0c             	sub    $0xc,%esp
c010cad3:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cad8:	6a 5f                	push   $0x5f
c010cada:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cadf:	68 22 2c 11 c0       	push   $0xc0112c22
c010cae4:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cae9:	e8 7a 77 ff ff       	call   c0104268 <print>
c010caee:	83 c4 20             	add    $0x20,%esp
c010caf1:	e8 8d 44 ff ff       	call   c0100f83 <backtrace>
c010caf6:	fa                   	cli    
c010caf7:	f4                   	hlt    
    assert(!list_isempty(newlist));
c010caf8:	83 ec 0c             	sub    $0xc,%esp
c010cafb:	53                   	push   %ebx
c010cafc:	e8 ea 94 ff ff       	call   c0105feb <list_isempty>
c010cb01:	83 c4 10             	add    $0x10,%esp
c010cb04:	85 c0                	test   %eax,%eax
c010cb06:	74 28                	je     c010cb30 <listtest+0x665>
c010cb08:	83 ec 0c             	sub    $0xc,%esp
c010cb0b:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cb10:	6a 60                	push   $0x60
c010cb12:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cb17:	68 44 2c 11 c0       	push   $0xc0112c44
c010cb1c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cb21:	e8 42 77 ff ff       	call   c0104268 <print>
c010cb26:	83 c4 20             	add    $0x20,%esp
c010cb29:	e8 55 44 ff ff       	call   c0100f83 <backtrace>
c010cb2e:	fa                   	cli    
c010cb2f:	f4                   	hlt    
    list_assertvalid(newlist);
c010cb30:	83 ec 0c             	sub    $0xc,%esp
c010cb33:	53                   	push   %ebx
c010cb34:	e8 3b 96 ff ff       	call   c0106174 <list_assertvalid>

    /* remove TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cb39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010cb40:	83 c4 10             	add    $0x10,%esp
c010cb43:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010cb4a:	0f 8f 87 00 00 00    	jg     c010cbd7 <listtest+0x70c>
        elem = (int*)kmalloc(sizeof(int));
c010cb50:	83 ec 0c             	sub    $0xc,%esp
c010cb53:	6a 04                	push   $0x4
c010cb55:	e8 12 52 ff ff       	call   c0101d6c <kmalloc>
c010cb5a:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010cb5c:	83 c4 10             	add    $0x10,%esp
c010cb5f:	85 c0                	test   %eax,%eax
c010cb61:	75 28                	jne    c010cb8b <listtest+0x6c0>
c010cb63:	83 ec 0c             	sub    $0xc,%esp
c010cb66:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cb6b:	6a 66                	push   $0x66
c010cb6d:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cb72:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010cb77:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cb7c:	e8 e7 76 ff ff       	call   c0104268 <print>
c010cb81:	83 c4 20             	add    $0x20,%esp
c010cb84:	e8 fa 43 ff ff       	call   c0100f83 <backtrace>
c010cb89:	fa                   	cli    
c010cb8a:	f4                   	hlt    
        *elem = i;
c010cb8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb8e:	89 06                	mov    %eax,(%esi)
        removed = *(int*)list_remove(newlist, (void*) elem, &int_comparator);
c010cb90:	50                   	push   %eax
c010cb91:	68 bc c4 10 c0       	push   $0xc010c4bc
c010cb96:	56                   	push   %esi
c010cb97:	53                   	push   %ebx
c010cb98:	e8 48 93 ff ff       	call   c0105ee5 <list_remove>
        assert(removed == i);
c010cb9d:	83 c4 10             	add    $0x10,%esp
c010cba0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010cba3:	39 08                	cmp    %ecx,(%eax)
c010cba5:	74 28                	je     c010cbcf <listtest+0x704>
c010cba7:	83 ec 0c             	sub    $0xc,%esp
c010cbaa:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cbaf:	6a 69                	push   $0x69
c010cbb1:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cbb6:	68 5b 2c 11 c0       	push   $0xc0112c5b
c010cbbb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cbc0:	e8 a3 76 ff ff       	call   c0104268 <print>
c010cbc5:	83 c4 20             	add    $0x20,%esp
c010cbc8:	e8 b6 43 ff ff       	call   c0100f83 <backtrace>
c010cbcd:	fa                   	cli    
c010cbce:	f4                   	hlt    
    assert(list_getsize(newlist) == TESTSIZE);
    assert(!list_isempty(newlist));
    list_assertvalid(newlist);

    /* remove TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cbcf:	ff 45 f4             	incl   -0xc(%ebp)
c010cbd2:	e9 6c ff ff ff       	jmp    c010cb43 <listtest+0x678>
        assert(elem != NULL);
        *elem = i;
        removed = *(int*)list_remove(newlist, (void*) elem, &int_comparator);
        assert(removed == i);
    }
    assert(list_getsize(newlist) == 0);
c010cbd7:	83 ec 0c             	sub    $0xc,%esp
c010cbda:	53                   	push   %ebx
c010cbdb:	e8 83 94 ff ff       	call   c0106063 <list_getsize>
c010cbe0:	83 c4 10             	add    $0x10,%esp
c010cbe3:	85 c0                	test   %eax,%eax
c010cbe5:	74 28                	je     c010cc0f <listtest+0x744>
c010cbe7:	83 ec 0c             	sub    $0xc,%esp
c010cbea:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cbef:	6a 6b                	push   $0x6b
c010cbf1:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cbf6:	68 d1 2b 11 c0       	push   $0xc0112bd1
c010cbfb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cc00:	e8 63 76 ff ff       	call   c0104268 <print>
c010cc05:	83 c4 20             	add    $0x20,%esp
c010cc08:	e8 76 43 ff ff       	call   c0100f83 <backtrace>
c010cc0d:	fa                   	cli    
c010cc0e:	f4                   	hlt    
    assert(list_isempty(newlist));
c010cc0f:	83 ec 0c             	sub    $0xc,%esp
c010cc12:	53                   	push   %ebx
c010cc13:	e8 d3 93 ff ff       	call   c0105feb <list_isempty>
c010cc18:	83 c4 10             	add    $0x10,%esp
c010cc1b:	85 c0                	test   %eax,%eax
c010cc1d:	75 28                	jne    c010cc47 <listtest+0x77c>
c010cc1f:	83 ec 0c             	sub    $0xc,%esp
c010cc22:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cc27:	6a 6c                	push   $0x6c
c010cc29:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cc2e:	68 45 2c 11 c0       	push   $0xc0112c45
c010cc33:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cc38:	e8 2b 76 ff ff       	call   c0104268 <print>
c010cc3d:	83 c4 20             	add    $0x20,%esp
c010cc40:	e8 3e 43 ff ff       	call   c0100f83 <backtrace>
c010cc45:	fa                   	cli    
c010cc46:	f4                   	hlt    
    list_assertvalid(newlist);
c010cc47:	83 ec 0c             	sub    $0xc,%esp
c010cc4a:	53                   	push   %ebx
c010cc4b:	e8 24 95 ff ff       	call   c0106174 <list_assertvalid>

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cc50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010cc57:	83 c4 10             	add    $0x10,%esp
c010cc5a:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010cc61:	0f 8f 80 00 00 00    	jg     c010cce7 <listtest+0x81c>
        elem = (int*)kmalloc(sizeof(int));
c010cc67:	83 ec 0c             	sub    $0xc,%esp
c010cc6a:	6a 04                	push   $0x4
c010cc6c:	e8 fb 50 ff ff       	call   c0101d6c <kmalloc>
c010cc71:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010cc73:	83 c4 10             	add    $0x10,%esp
c010cc76:	85 c0                	test   %eax,%eax
c010cc78:	75 28                	jne    c010cca2 <listtest+0x7d7>
c010cc7a:	83 ec 0c             	sub    $0xc,%esp
c010cc7d:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cc82:	6a 72                	push   $0x72
c010cc84:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cc89:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010cc8e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cc93:	e8 d0 75 ff ff       	call   c0104268 <print>
c010cc98:	83 c4 20             	add    $0x20,%esp
c010cc9b:	e8 e3 42 ff ff       	call   c0100f83 <backtrace>
c010cca0:	fa                   	cli    
c010cca1:	f4                   	hlt    
        *elem = i;
c010cca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cca5:	89 06                	mov    %eax,(%esi)
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
c010cca7:	51                   	push   %ecx
c010cca8:	51                   	push   %ecx
c010cca9:	56                   	push   %esi
c010ccaa:	53                   	push   %ebx
c010ccab:	e8 d8 8e ff ff       	call   c0105b88 <list_push_back>
c010ccb0:	83 c4 10             	add    $0x10,%esp
c010ccb3:	85 c0                	test   %eax,%eax
c010ccb5:	74 28                	je     c010ccdf <listtest+0x814>
c010ccb7:	83 ec 0c             	sub    $0xc,%esp
c010ccba:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ccbf:	6a 75                	push   $0x75
c010ccc1:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ccc6:	68 ec 2b 11 c0       	push   $0xc0112bec
c010cccb:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ccd0:	e8 93 75 ff ff       	call   c0104268 <print>
c010ccd5:	83 c4 20             	add    $0x20,%esp
c010ccd8:	e8 a6 42 ff ff       	call   c0100f83 <backtrace>
c010ccdd:	fa                   	cli    
c010ccde:	f4                   	hlt    
    assert(list_getsize(newlist) == 0);
    assert(list_isempty(newlist));
    list_assertvalid(newlist);

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010ccdf:	ff 45 f4             	incl   -0xc(%ebp)
c010cce2:	e9 73 ff ff ff       	jmp    c010cc5a <listtest+0x78f>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
    }
    assert(list_getsize(newlist) == TESTSIZE);
c010cce7:	83 ec 0c             	sub    $0xc,%esp
c010ccea:	53                   	push   %ebx
c010cceb:	e8 73 93 ff ff       	call   c0106063 <list_getsize>
c010ccf0:	83 c4 10             	add    $0x10,%esp
c010ccf3:	3d 85 00 00 00       	cmp    $0x85,%eax
c010ccf8:	74 28                	je     c010cd22 <listtest+0x857>
c010ccfa:	83 ec 0c             	sub    $0xc,%esp
c010ccfd:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cd02:	6a 77                	push   $0x77
c010cd04:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cd09:	68 22 2c 11 c0       	push   $0xc0112c22
c010cd0e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cd13:	e8 50 75 ff ff       	call   c0104268 <print>
c010cd18:	83 c4 20             	add    $0x20,%esp
c010cd1b:	e8 63 42 ff ff       	call   c0100f83 <backtrace>
c010cd20:	fa                   	cli    
c010cd21:	f4                   	hlt    
    assert(!list_isempty(newlist));
c010cd22:	83 ec 0c             	sub    $0xc,%esp
c010cd25:	53                   	push   %ebx
c010cd26:	e8 c0 92 ff ff       	call   c0105feb <list_isempty>
c010cd2b:	83 c4 10             	add    $0x10,%esp
c010cd2e:	85 c0                	test   %eax,%eax
c010cd30:	74 28                	je     c010cd5a <listtest+0x88f>
c010cd32:	83 ec 0c             	sub    $0xc,%esp
c010cd35:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cd3a:	6a 78                	push   $0x78
c010cd3c:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cd41:	68 44 2c 11 c0       	push   $0xc0112c44
c010cd46:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cd4b:	e8 18 75 ff ff       	call   c0104268 <print>
c010cd50:	83 c4 20             	add    $0x20,%esp
c010cd53:	e8 2b 42 ff ff       	call   c0100f83 <backtrace>
c010cd58:	fa                   	cli    
c010cd59:	f4                   	hlt    
    list_assertvalid(newlist);
c010cd5a:	83 ec 0c             	sub    $0xc,%esp
c010cd5d:	53                   	push   %ebx
c010cd5e:	e8 11 94 ff ff       	call   c0106174 <list_assertvalid>

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cd63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010cd6a:	83 c4 10             	add    $0x10,%esp
c010cd6d:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010cd74:	7f 53                	jg     c010cdc9 <listtest+0x8fe>
        elem = (int*)list_front(newlist);
c010cd76:	83 ec 0c             	sub    $0xc,%esp
c010cd79:	53                   	push   %ebx
c010cd7a:	e8 d0 8f ff ff       	call   c0105d4f <list_front>
c010cd7f:	89 c6                	mov    %eax,%esi
        assert(*elem == i);
c010cd81:	83 c4 10             	add    $0x10,%esp
c010cd84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd87:	39 06                	cmp    %eax,(%esi)
c010cd89:	74 28                	je     c010cdb3 <listtest+0x8e8>
c010cd8b:	83 ec 0c             	sub    $0xc,%esp
c010cd8e:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cd93:	6a 7e                	push   $0x7e
c010cd95:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cd9a:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010cd9f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cda4:	e8 bf 74 ff ff       	call   c0104268 <print>
c010cda9:	83 c4 20             	add    $0x20,%esp
c010cdac:	e8 d2 41 ff ff       	call   c0100f83 <backtrace>
c010cdb1:	fa                   	cli    
c010cdb2:	f4                   	hlt    
        list_pop_front(newlist);
c010cdb3:	83 ec 0c             	sub    $0xc,%esp
c010cdb6:	53                   	push   %ebx
c010cdb7:	e8 cc 8e ff ff       	call   c0105c88 <list_pop_front>
        kfree(elem);
c010cdbc:	89 34 24             	mov    %esi,(%esp)
c010cdbf:	e8 a8 50 ff ff       	call   c0101e6c <kfree>
    assert(list_getsize(newlist) == TESTSIZE);
    assert(!list_isempty(newlist));
    list_assertvalid(newlist);

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010cdc4:	ff 45 f4             	incl   -0xc(%ebp)
c010cdc7:	eb a1                	jmp    c010cd6a <listtest+0x89f>
        elem = (int*)list_front(newlist);
        assert(*elem == i);
        list_pop_front(newlist);
        kfree(elem);
    }
    assert(list_getsize(newlist) == 0);
c010cdc9:	83 ec 0c             	sub    $0xc,%esp
c010cdcc:	53                   	push   %ebx
c010cdcd:	e8 91 92 ff ff       	call   c0106063 <list_getsize>
c010cdd2:	83 c4 10             	add    $0x10,%esp
c010cdd5:	85 c0                	test   %eax,%eax
c010cdd7:	74 2b                	je     c010ce04 <listtest+0x939>
c010cdd9:	83 ec 0c             	sub    $0xc,%esp
c010cddc:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cde1:	68 82 00 00 00       	push   $0x82
c010cde6:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cdeb:	68 d1 2b 11 c0       	push   $0xc0112bd1
c010cdf0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cdf5:	e8 6e 74 ff ff       	call   c0104268 <print>
c010cdfa:	83 c4 20             	add    $0x20,%esp
c010cdfd:	e8 81 41 ff ff       	call   c0100f83 <backtrace>
c010ce02:	fa                   	cli    
c010ce03:	f4                   	hlt    
    assert(list_isempty(newlist));
c010ce04:	83 ec 0c             	sub    $0xc,%esp
c010ce07:	53                   	push   %ebx
c010ce08:	e8 de 91 ff ff       	call   c0105feb <list_isempty>
c010ce0d:	83 c4 10             	add    $0x10,%esp
c010ce10:	85 c0                	test   %eax,%eax
c010ce12:	75 2b                	jne    c010ce3f <listtest+0x974>
c010ce14:	83 ec 0c             	sub    $0xc,%esp
c010ce17:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ce1c:	68 83 00 00 00       	push   $0x83
c010ce21:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ce26:	68 45 2c 11 c0       	push   $0xc0112c45
c010ce2b:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ce30:	e8 33 74 ff ff       	call   c0104268 <print>
c010ce35:	83 c4 20             	add    $0x20,%esp
c010ce38:	e8 46 41 ff ff       	call   c0100f83 <backtrace>
c010ce3d:	fa                   	cli    
c010ce3e:	f4                   	hlt    
    list_assertvalid(newlist);
c010ce3f:	83 ec 0c             	sub    $0xc,%esp
c010ce42:	53                   	push   %ebx
c010ce43:	e8 2c 93 ff ff       	call   c0106174 <list_assertvalid>

    /* test for bug -- incorrect behavior when removing from end of list */
    for (i = 0; i < TESTSIZE; ++i) {
c010ce48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ce4f:	83 c4 10             	add    $0x10,%esp
c010ce52:	81 7d f4 84 00 00 00 	cmpl   $0x84,-0xc(%ebp)
c010ce59:	0f 8f 86 00 00 00    	jg     c010cee5 <listtest+0xa1a>
        elem = (int*)kmalloc(sizeof(int));
c010ce5f:	83 ec 0c             	sub    $0xc,%esp
c010ce62:	6a 04                	push   $0x4
c010ce64:	e8 03 4f ff ff       	call   c0101d6c <kmalloc>
c010ce69:	89 c6                	mov    %eax,%esi
        assert(elem != NULL);
c010ce6b:	83 c4 10             	add    $0x10,%esp
c010ce6e:	85 c0                	test   %eax,%eax
c010ce70:	75 2b                	jne    c010ce9d <listtest+0x9d2>
c010ce72:	83 ec 0c             	sub    $0xc,%esp
c010ce75:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ce7a:	68 89 00 00 00       	push   $0x89
c010ce7f:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010ce84:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010ce89:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ce8e:	e8 d5 73 ff ff       	call   c0104268 <print>
c010ce93:	83 c4 20             	add    $0x20,%esp
c010ce96:	e8 e8 40 ff ff       	call   c0100f83 <backtrace>
c010ce9b:	fa                   	cli    
c010ce9c:	f4                   	hlt    
        *elem = i;
c010ce9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cea0:	89 06                	mov    %eax,(%esi)
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
c010cea2:	52                   	push   %edx
c010cea3:	52                   	push   %edx
c010cea4:	56                   	push   %esi
c010cea5:	53                   	push   %ebx
c010cea6:	e8 dd 8c ff ff       	call   c0105b88 <list_push_back>
c010ceab:	83 c4 10             	add    $0x10,%esp
c010ceae:	85 c0                	test   %eax,%eax
c010ceb0:	74 2b                	je     c010cedd <listtest+0xa12>
c010ceb2:	83 ec 0c             	sub    $0xc,%esp
c010ceb5:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010ceba:	68 8c 00 00 00       	push   $0x8c
c010cebf:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cec4:	68 ec 2b 11 c0       	push   $0xc0112bec
c010cec9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cece:	e8 95 73 ff ff       	call   c0104268 <print>
c010ced3:	83 c4 20             	add    $0x20,%esp
c010ced6:	e8 a8 40 ff ff       	call   c0100f83 <backtrace>
c010cedb:	fa                   	cli    
c010cedc:	f4                   	hlt    
    assert(list_getsize(newlist) == 0);
    assert(list_isempty(newlist));
    list_assertvalid(newlist);

    /* test for bug -- incorrect behavior when removing from end of list */
    for (i = 0; i < TESTSIZE; ++i) {
c010cedd:	ff 45 f4             	incl   -0xc(%ebp)
c010cee0:	e9 6d ff ff ff       	jmp    c010ce52 <listtest+0x987>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(list_push_back(newlist, (void*) elem) == 0);
    }
    assert(list_getsize(newlist) == TESTSIZE);
c010cee5:	83 ec 0c             	sub    $0xc,%esp
c010cee8:	53                   	push   %ebx
c010cee9:	e8 75 91 ff ff       	call   c0106063 <list_getsize>
c010ceee:	83 c4 10             	add    $0x10,%esp
c010cef1:	3d 85 00 00 00       	cmp    $0x85,%eax
c010cef6:	74 2b                	je     c010cf23 <listtest+0xa58>
c010cef8:	83 ec 0c             	sub    $0xc,%esp
c010cefb:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cf00:	68 8e 00 00 00       	push   $0x8e
c010cf05:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cf0a:	68 22 2c 11 c0       	push   $0xc0112c22
c010cf0f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cf14:	e8 4f 73 ff ff       	call   c0104268 <print>
c010cf19:	83 c4 20             	add    $0x20,%esp
c010cf1c:	e8 62 40 ff ff       	call   c0100f83 <backtrace>
c010cf21:	fa                   	cli    
c010cf22:	f4                   	hlt    
    assert(!list_isempty(newlist));
c010cf23:	83 ec 0c             	sub    $0xc,%esp
c010cf26:	53                   	push   %ebx
c010cf27:	e8 bf 90 ff ff       	call   c0105feb <list_isempty>
c010cf2c:	83 c4 10             	add    $0x10,%esp
c010cf2f:	85 c0                	test   %eax,%eax
c010cf31:	74 2b                	je     c010cf5e <listtest+0xa93>
c010cf33:	83 ec 0c             	sub    $0xc,%esp
c010cf36:	68 7c 2c 11 c0       	push   $0xc0112c7c
c010cf3b:	68 8f 00 00 00       	push   $0x8f
c010cf40:	68 b1 2b 11 c0       	push   $0xc0112bb1
c010cf45:	68 44 2c 11 c0       	push   $0xc0112c44
c010cf4a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cf4f:	e8 14 73 ff ff       	call   c0104268 <print>
c010cf54:	83 c4 20             	add    $0x20,%esp
c010cf57:	e8 27 40 ff ff       	call   c0100f83 <backtrace>
c010cf5c:	fa                   	cli    
c010cf5d:	f4                   	hlt    
    i = TESTSIZE - 1;
c010cf5e:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
    list_remove(newlist, &i, &int_comparator);
c010cf65:	50                   	push   %eax
c010cf66:	68 bc c4 10 c0       	push   $0xc010c4bc
c010cf6b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010cf6e:	50                   	push   %eax
c010cf6f:	53                   	push   %ebx
c010cf70:	e8 70 8f ff ff       	call   c0105ee5 <list_remove>
    list_assertvalid(newlist);
c010cf75:	89 1c 24             	mov    %ebx,(%esp)
c010cf78:	e8 f7 91 ff ff       	call   c0106174 <list_assertvalid>

    /* destroys the list */
    list_destroy(newlist);
c010cf7d:	89 1c 24             	mov    %ebx,(%esp)
c010cf80:	e8 50 91 ff ff       	call   c01060d5 <list_destroy>

    print("List test complete\n");
c010cf85:	c7 04 24 68 2c 11 c0 	movl   $0xc0112c68,(%esp)
c010cf8c:	e8 d7 72 ff ff       	call   c0104268 <print>

    return 0;
}
c010cf91:	31 c0                	xor    %eax,%eax
c010cf93:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010cf96:	5b                   	pop    %ebx
c010cf97:	5e                   	pop    %esi
c010cf98:	5d                   	pop    %ebp
c010cf99:	c3                   	ret    

c010cf9a <queuetest>:
#include <kmm.h>

#define TESTSIZE 133

int
queuetest(int nargs, char** args) {
c010cf9a:	55                   	push   %ebp
c010cf9b:	89 e5                	mov    %esp,%ebp
c010cf9d:	57                   	push   %edi
c010cf9e:	56                   	push   %esi
c010cf9f:	53                   	push   %ebx
c010cfa0:	83 ec 18             	sub    $0x18,%esp
    (void)nargs;
    (void)args;

    print("Beginning queue test...\n");
c010cfa3:	68 85 2c 11 c0       	push   $0xc0112c85
c010cfa8:	e8 bb 72 ff ff       	call   c0104268 <print>

    struct queue* newqueue;
    newqueue = queue_create();
c010cfad:	e8 01 93 ff ff       	call   c01062b3 <queue_create>
c010cfb2:	89 c3                	mov    %eax,%ebx
    assert(newqueue != NULL);
c010cfb4:	83 c4 10             	add    $0x10,%esp
c010cfb7:	85 c0                	test   %eax,%eax
c010cfb9:	75 28                	jne    c010cfe3 <queuetest+0x49>
c010cfbb:	83 ec 0c             	sub    $0xc,%esp
c010cfbe:	68 58 2d 11 c0       	push   $0xc0112d58
c010cfc3:	6a 11                	push   $0x11
c010cfc5:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010cfca:	68 af 2c 11 c0       	push   $0xc0112caf
c010cfcf:	68 2b ff 10 c0       	push   $0xc010ff2b
c010cfd4:	e8 8f 72 ff ff       	call   c0104268 <print>
c010cfd9:	83 c4 20             	add    $0x20,%esp
c010cfdc:	e8 a2 3f ff ff       	call   c0100f83 <backtrace>
c010cfe1:	fa                   	cli    
c010cfe2:	f4                   	hlt    
    assert(queue_getsize(newqueue) == 0);
c010cfe3:	83 ec 0c             	sub    $0xc,%esp
c010cfe6:	53                   	push   %ebx
c010cfe7:	e8 dd 94 ff ff       	call   c01064c9 <queue_getsize>
c010cfec:	83 c4 10             	add    $0x10,%esp
c010cfef:	85 c0                	test   %eax,%eax
c010cff1:	74 28                	je     c010d01b <queuetest+0x81>
c010cff3:	83 ec 0c             	sub    $0xc,%esp
c010cff6:	68 58 2d 11 c0       	push   $0xc0112d58
c010cffb:	6a 12                	push   $0x12
c010cffd:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d002:	68 c0 2c 11 c0       	push   $0xc0112cc0
c010d007:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d00c:	e8 57 72 ff ff       	call   c0104268 <print>
c010d011:	83 c4 20             	add    $0x20,%esp
c010d014:	e8 6a 3f ff ff       	call   c0100f83 <backtrace>
c010d019:	fa                   	cli    
c010d01a:	f4                   	hlt    
    assert(queue_isempty(newqueue));
c010d01b:	83 ec 0c             	sub    $0xc,%esp
c010d01e:	53                   	push   %ebx
c010d01f:	e8 32 94 ff ff       	call   c0106456 <queue_isempty>
c010d024:	83 c4 10             	add    $0x10,%esp
c010d027:	85 c0                	test   %eax,%eax
c010d029:	75 28                	jne    c010d053 <queuetest+0xb9>
c010d02b:	83 ec 0c             	sub    $0xc,%esp
c010d02e:	68 58 2d 11 c0       	push   $0xc0112d58
c010d033:	6a 13                	push   $0x13
c010d035:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d03a:	68 2a 2d 11 c0       	push   $0xc0112d2a
c010d03f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d044:	e8 1f 72 ff ff       	call   c0104268 <print>
c010d049:	83 c4 20             	add    $0x20,%esp
c010d04c:	e8 32 3f ff ff       	call   c0100f83 <backtrace>
c010d051:	fa                   	cli    
c010d052:	f4                   	hlt    
    queue_assertvalid(newqueue);
c010d053:	83 ec 0c             	sub    $0xc,%esp
c010d056:	53                   	push   %ebx
c010d057:	e8 36 95 ff ff       	call   c0106592 <queue_assertvalid>
c010d05c:	83 c4 10             	add    $0x10,%esp

    int i;
    int* elem;
    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d05f:	31 f6                	xor    %esi,%esi
        elem = (int*)kmalloc(sizeof(int));
c010d061:	83 ec 0c             	sub    $0xc,%esp
c010d064:	6a 04                	push   $0x4
c010d066:	e8 01 4d ff ff       	call   c0101d6c <kmalloc>
c010d06b:	89 c7                	mov    %eax,%edi
        assert(elem != NULL);
c010d06d:	83 c4 10             	add    $0x10,%esp
c010d070:	85 c0                	test   %eax,%eax
c010d072:	75 28                	jne    c010d09c <queuetest+0x102>
c010d074:	83 ec 0c             	sub    $0xc,%esp
c010d077:	68 58 2d 11 c0       	push   $0xc0112d58
c010d07c:	6a 1b                	push   $0x1b
c010d07e:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d083:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010d088:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d08d:	e8 d6 71 ff ff       	call   c0104268 <print>
c010d092:	83 c4 20             	add    $0x20,%esp
c010d095:	e8 e9 3e ff ff       	call   c0100f83 <backtrace>
c010d09a:	fa                   	cli    
c010d09b:	f4                   	hlt    
        *elem = i;
c010d09c:	89 37                	mov    %esi,(%edi)
        /* check for ENOMEM */
        assert(queue_push(newqueue, (void*) elem) == 0);
c010d09e:	52                   	push   %edx
c010d09f:	52                   	push   %edx
c010d0a0:	57                   	push   %edi
c010d0a1:	53                   	push   %ebx
c010d0a2:	e8 4e 92 ff ff       	call   c01062f5 <queue_push>
c010d0a7:	83 c4 10             	add    $0x10,%esp
c010d0aa:	85 c0                	test   %eax,%eax
c010d0ac:	74 28                	je     c010d0d6 <queuetest+0x13c>
c010d0ae:	83 ec 0c             	sub    $0xc,%esp
c010d0b1:	68 58 2d 11 c0       	push   $0xc0112d58
c010d0b6:	6a 1e                	push   $0x1e
c010d0b8:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d0bd:	68 dd 2c 11 c0       	push   $0xc0112cdd
c010d0c2:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d0c7:	e8 9c 71 ff ff       	call   c0104268 <print>
c010d0cc:	83 c4 20             	add    $0x20,%esp
c010d0cf:	e8 af 3e ff ff       	call   c0100f83 <backtrace>
c010d0d4:	fa                   	cli    
c010d0d5:	f4                   	hlt    
    queue_assertvalid(newqueue);

    int i;
    int* elem;
    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d0d6:	46                   	inc    %esi
c010d0d7:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010d0dd:	75 82                	jne    c010d061 <queuetest+0xc7>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(queue_push(newqueue, (void*) elem) == 0);
    }
    assert(queue_getsize(newqueue) == TESTSIZE);
c010d0df:	83 ec 0c             	sub    $0xc,%esp
c010d0e2:	53                   	push   %ebx
c010d0e3:	e8 e1 93 ff ff       	call   c01064c9 <queue_getsize>
c010d0e8:	83 c4 10             	add    $0x10,%esp
c010d0eb:	3d 85 00 00 00       	cmp    $0x85,%eax
c010d0f0:	74 28                	je     c010d11a <queuetest+0x180>
c010d0f2:	83 ec 0c             	sub    $0xc,%esp
c010d0f5:	68 58 2d 11 c0       	push   $0xc0112d58
c010d0fa:	6a 20                	push   $0x20
c010d0fc:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d101:	68 05 2d 11 c0       	push   $0xc0112d05
c010d106:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d10b:	e8 58 71 ff ff       	call   c0104268 <print>
c010d110:	83 c4 20             	add    $0x20,%esp
c010d113:	e8 6b 3e ff ff       	call   c0100f83 <backtrace>
c010d118:	fa                   	cli    
c010d119:	f4                   	hlt    
    assert(!queue_isempty(newqueue));
c010d11a:	83 ec 0c             	sub    $0xc,%esp
c010d11d:	53                   	push   %ebx
c010d11e:	e8 33 93 ff ff       	call   c0106456 <queue_isempty>
c010d123:	83 c4 10             	add    $0x10,%esp
c010d126:	85 c0                	test   %eax,%eax
c010d128:	74 28                	je     c010d152 <queuetest+0x1b8>
c010d12a:	83 ec 0c             	sub    $0xc,%esp
c010d12d:	68 58 2d 11 c0       	push   $0xc0112d58
c010d132:	6a 21                	push   $0x21
c010d134:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d139:	68 29 2d 11 c0       	push   $0xc0112d29
c010d13e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d143:	e8 20 71 ff ff       	call   c0104268 <print>
c010d148:	83 c4 20             	add    $0x20,%esp
c010d14b:	e8 33 3e ff ff       	call   c0100f83 <backtrace>
c010d150:	fa                   	cli    
c010d151:	f4                   	hlt    
    queue_assertvalid(newqueue);
c010d152:	83 ec 0c             	sub    $0xc,%esp
c010d155:	53                   	push   %ebx
c010d156:	e8 37 94 ff ff       	call   c0106592 <queue_assertvalid>
c010d15b:	83 c4 10             	add    $0x10,%esp

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d15e:	31 f6                	xor    %esi,%esi
        elem = (int*)queue_front(newqueue);
c010d160:	83 ec 0c             	sub    $0xc,%esp
c010d163:	53                   	push   %ebx
c010d164:	e8 7a 92 ff ff       	call   c01063e3 <queue_front>
c010d169:	89 c7                	mov    %eax,%edi
        assert(*elem == i);
c010d16b:	83 c4 10             	add    $0x10,%esp
c010d16e:	39 30                	cmp    %esi,(%eax)
c010d170:	74 28                	je     c010d19a <queuetest+0x200>
c010d172:	83 ec 0c             	sub    $0xc,%esp
c010d175:	68 58 2d 11 c0       	push   $0xc0112d58
c010d17a:	6a 27                	push   $0x27
c010d17c:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d181:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010d186:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d18b:	e8 d8 70 ff ff       	call   c0104268 <print>
c010d190:	83 c4 20             	add    $0x20,%esp
c010d193:	e8 eb 3d ff ff       	call   c0100f83 <backtrace>
c010d198:	fa                   	cli    
c010d199:	f4                   	hlt    
        queue_pop(newqueue);
c010d19a:	83 ec 0c             	sub    $0xc,%esp
c010d19d:	53                   	push   %ebx
c010d19e:	e8 cd 91 ff ff       	call   c0106370 <queue_pop>
        kfree(elem);
c010d1a3:	89 3c 24             	mov    %edi,(%esp)
c010d1a6:	e8 c1 4c ff ff       	call   c0101e6c <kfree>
    assert(queue_getsize(newqueue) == TESTSIZE);
    assert(!queue_isempty(newqueue));
    queue_assertvalid(newqueue);

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d1ab:	46                   	inc    %esi
c010d1ac:	83 c4 10             	add    $0x10,%esp
c010d1af:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010d1b5:	75 a9                	jne    c010d160 <queuetest+0x1c6>
        elem = (int*)queue_front(newqueue);
        assert(*elem == i);
        queue_pop(newqueue);
        kfree(elem);
    }
    assert(queue_getsize(newqueue) == 0);
c010d1b7:	83 ec 0c             	sub    $0xc,%esp
c010d1ba:	53                   	push   %ebx
c010d1bb:	e8 09 93 ff ff       	call   c01064c9 <queue_getsize>
c010d1c0:	83 c4 10             	add    $0x10,%esp
c010d1c3:	85 c0                	test   %eax,%eax
c010d1c5:	74 28                	je     c010d1ef <queuetest+0x255>
c010d1c7:	83 ec 0c             	sub    $0xc,%esp
c010d1ca:	68 58 2d 11 c0       	push   $0xc0112d58
c010d1cf:	6a 2b                	push   $0x2b
c010d1d1:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d1d6:	68 c0 2c 11 c0       	push   $0xc0112cc0
c010d1db:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d1e0:	e8 83 70 ff ff       	call   c0104268 <print>
c010d1e5:	83 c4 20             	add    $0x20,%esp
c010d1e8:	e8 96 3d ff ff       	call   c0100f83 <backtrace>
c010d1ed:	fa                   	cli    
c010d1ee:	f4                   	hlt    
    assert(queue_isempty(newqueue));
c010d1ef:	83 ec 0c             	sub    $0xc,%esp
c010d1f2:	53                   	push   %ebx
c010d1f3:	e8 5e 92 ff ff       	call   c0106456 <queue_isempty>
c010d1f8:	83 c4 10             	add    $0x10,%esp
c010d1fb:	85 c0                	test   %eax,%eax
c010d1fd:	75 28                	jne    c010d227 <queuetest+0x28d>
c010d1ff:	83 ec 0c             	sub    $0xc,%esp
c010d202:	68 58 2d 11 c0       	push   $0xc0112d58
c010d207:	6a 2c                	push   $0x2c
c010d209:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d20e:	68 2a 2d 11 c0       	push   $0xc0112d2a
c010d213:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d218:	e8 4b 70 ff ff       	call   c0104268 <print>
c010d21d:	83 c4 20             	add    $0x20,%esp
c010d220:	e8 5e 3d ff ff       	call   c0100f83 <backtrace>
c010d225:	fa                   	cli    
c010d226:	f4                   	hlt    
    queue_assertvalid(newqueue);
c010d227:	83 ec 0c             	sub    $0xc,%esp
c010d22a:	53                   	push   %ebx
c010d22b:	e8 62 93 ff ff       	call   c0106592 <queue_assertvalid>
c010d230:	83 c4 10             	add    $0x10,%esp

    /* REPEAT to test if the queue is reusable */

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d233:	31 f6                	xor    %esi,%esi
        elem = (int*)kmalloc(sizeof(int));
c010d235:	83 ec 0c             	sub    $0xc,%esp
c010d238:	6a 04                	push   $0x4
c010d23a:	e8 2d 4b ff ff       	call   c0101d6c <kmalloc>
c010d23f:	89 c7                	mov    %eax,%edi
        assert(elem != NULL);
c010d241:	83 c4 10             	add    $0x10,%esp
c010d244:	85 c0                	test   %eax,%eax
c010d246:	75 28                	jne    c010d270 <queuetest+0x2d6>
c010d248:	83 ec 0c             	sub    $0xc,%esp
c010d24b:	68 58 2d 11 c0       	push   $0xc0112d58
c010d250:	6a 34                	push   $0x34
c010d252:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d257:	68 e5 2a 11 c0       	push   $0xc0112ae5
c010d25c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d261:	e8 02 70 ff ff       	call   c0104268 <print>
c010d266:	83 c4 20             	add    $0x20,%esp
c010d269:	e8 15 3d ff ff       	call   c0100f83 <backtrace>
c010d26e:	fa                   	cli    
c010d26f:	f4                   	hlt    
        *elem = i;
c010d270:	89 37                	mov    %esi,(%edi)
        /* check for ENOMEM */
        assert(queue_push(newqueue, (void*) elem) == 0);
c010d272:	50                   	push   %eax
c010d273:	50                   	push   %eax
c010d274:	57                   	push   %edi
c010d275:	53                   	push   %ebx
c010d276:	e8 7a 90 ff ff       	call   c01062f5 <queue_push>
c010d27b:	83 c4 10             	add    $0x10,%esp
c010d27e:	85 c0                	test   %eax,%eax
c010d280:	74 28                	je     c010d2aa <queuetest+0x310>
c010d282:	83 ec 0c             	sub    $0xc,%esp
c010d285:	68 58 2d 11 c0       	push   $0xc0112d58
c010d28a:	6a 37                	push   $0x37
c010d28c:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d291:	68 dd 2c 11 c0       	push   $0xc0112cdd
c010d296:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d29b:	e8 c8 6f ff ff       	call   c0104268 <print>
c010d2a0:	83 c4 20             	add    $0x20,%esp
c010d2a3:	e8 db 3c ff ff       	call   c0100f83 <backtrace>
c010d2a8:	fa                   	cli    
c010d2a9:	f4                   	hlt    
    queue_assertvalid(newqueue);

    /* REPEAT to test if the queue is reusable */

    /* push back TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d2aa:	46                   	inc    %esi
c010d2ab:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010d2b1:	75 82                	jne    c010d235 <queuetest+0x29b>
        assert(elem != NULL);
        *elem = i;
        /* check for ENOMEM */
        assert(queue_push(newqueue, (void*) elem) == 0);
    }
    assert(queue_getsize(newqueue) == TESTSIZE);
c010d2b3:	83 ec 0c             	sub    $0xc,%esp
c010d2b6:	53                   	push   %ebx
c010d2b7:	e8 0d 92 ff ff       	call   c01064c9 <queue_getsize>
c010d2bc:	83 c4 10             	add    $0x10,%esp
c010d2bf:	3d 85 00 00 00       	cmp    $0x85,%eax
c010d2c4:	74 28                	je     c010d2ee <queuetest+0x354>
c010d2c6:	83 ec 0c             	sub    $0xc,%esp
c010d2c9:	68 58 2d 11 c0       	push   $0xc0112d58
c010d2ce:	6a 39                	push   $0x39
c010d2d0:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d2d5:	68 05 2d 11 c0       	push   $0xc0112d05
c010d2da:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d2df:	e8 84 6f ff ff       	call   c0104268 <print>
c010d2e4:	83 c4 20             	add    $0x20,%esp
c010d2e7:	e8 97 3c ff ff       	call   c0100f83 <backtrace>
c010d2ec:	fa                   	cli    
c010d2ed:	f4                   	hlt    
    assert(!queue_isempty(newqueue));
c010d2ee:	83 ec 0c             	sub    $0xc,%esp
c010d2f1:	53                   	push   %ebx
c010d2f2:	e8 5f 91 ff ff       	call   c0106456 <queue_isempty>
c010d2f7:	83 c4 10             	add    $0x10,%esp
c010d2fa:	85 c0                	test   %eax,%eax
c010d2fc:	74 28                	je     c010d326 <queuetest+0x38c>
c010d2fe:	83 ec 0c             	sub    $0xc,%esp
c010d301:	68 58 2d 11 c0       	push   $0xc0112d58
c010d306:	6a 3a                	push   $0x3a
c010d308:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d30d:	68 29 2d 11 c0       	push   $0xc0112d29
c010d312:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d317:	e8 4c 6f ff ff       	call   c0104268 <print>
c010d31c:	83 c4 20             	add    $0x20,%esp
c010d31f:	e8 5f 3c ff ff       	call   c0100f83 <backtrace>
c010d324:	fa                   	cli    
c010d325:	f4                   	hlt    
    queue_assertvalid(newqueue);
c010d326:	83 ec 0c             	sub    $0xc,%esp
c010d329:	53                   	push   %ebx
c010d32a:	e8 63 92 ff ff       	call   c0106592 <queue_assertvalid>
c010d32f:	83 c4 10             	add    $0x10,%esp

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d332:	31 f6                	xor    %esi,%esi
        elem = (int*)queue_front(newqueue);
c010d334:	83 ec 0c             	sub    $0xc,%esp
c010d337:	53                   	push   %ebx
c010d338:	e8 a6 90 ff ff       	call   c01063e3 <queue_front>
c010d33d:	89 c7                	mov    %eax,%edi
        assert(*elem == i);
c010d33f:	83 c4 10             	add    $0x10,%esp
c010d342:	39 30                	cmp    %esi,(%eax)
c010d344:	74 28                	je     c010d36e <queuetest+0x3d4>
c010d346:	83 ec 0c             	sub    $0xc,%esp
c010d349:	68 58 2d 11 c0       	push   $0xc0112d58
c010d34e:	6a 40                	push   $0x40
c010d350:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d355:	68 6e 2b 11 c0       	push   $0xc0112b6e
c010d35a:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d35f:	e8 04 6f ff ff       	call   c0104268 <print>
c010d364:	83 c4 20             	add    $0x20,%esp
c010d367:	e8 17 3c ff ff       	call   c0100f83 <backtrace>
c010d36c:	fa                   	cli    
c010d36d:	f4                   	hlt    
        queue_pop(newqueue);
c010d36e:	83 ec 0c             	sub    $0xc,%esp
c010d371:	53                   	push   %ebx
c010d372:	e8 f9 8f ff ff       	call   c0106370 <queue_pop>
        kfree(elem);
c010d377:	89 3c 24             	mov    %edi,(%esp)
c010d37a:	e8 ed 4a ff ff       	call   c0101e6c <kfree>
    assert(queue_getsize(newqueue) == TESTSIZE);
    assert(!queue_isempty(newqueue));
    queue_assertvalid(newqueue);

    /* pop front TESTSIZE number of elements */
    for (i = 0; i < TESTSIZE; ++i) {
c010d37f:	46                   	inc    %esi
c010d380:	83 c4 10             	add    $0x10,%esp
c010d383:	81 fe 85 00 00 00    	cmp    $0x85,%esi
c010d389:	75 a9                	jne    c010d334 <queuetest+0x39a>
        elem = (int*)queue_front(newqueue);
        assert(*elem == i);
        queue_pop(newqueue);
        kfree(elem);
    }
    assert(queue_getsize(newqueue) == 0);
c010d38b:	83 ec 0c             	sub    $0xc,%esp
c010d38e:	53                   	push   %ebx
c010d38f:	e8 35 91 ff ff       	call   c01064c9 <queue_getsize>
c010d394:	83 c4 10             	add    $0x10,%esp
c010d397:	85 c0                	test   %eax,%eax
c010d399:	74 28                	je     c010d3c3 <queuetest+0x429>
c010d39b:	83 ec 0c             	sub    $0xc,%esp
c010d39e:	68 58 2d 11 c0       	push   $0xc0112d58
c010d3a3:	6a 44                	push   $0x44
c010d3a5:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d3aa:	68 c0 2c 11 c0       	push   $0xc0112cc0
c010d3af:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d3b4:	e8 af 6e ff ff       	call   c0104268 <print>
c010d3b9:	83 c4 20             	add    $0x20,%esp
c010d3bc:	e8 c2 3b ff ff       	call   c0100f83 <backtrace>
c010d3c1:	fa                   	cli    
c010d3c2:	f4                   	hlt    
    assert(queue_isempty(newqueue));
c010d3c3:	83 ec 0c             	sub    $0xc,%esp
c010d3c6:	53                   	push   %ebx
c010d3c7:	e8 8a 90 ff ff       	call   c0106456 <queue_isempty>
c010d3cc:	83 c4 10             	add    $0x10,%esp
c010d3cf:	85 c0                	test   %eax,%eax
c010d3d1:	75 28                	jne    c010d3fb <queuetest+0x461>
c010d3d3:	83 ec 0c             	sub    $0xc,%esp
c010d3d6:	68 58 2d 11 c0       	push   $0xc0112d58
c010d3db:	6a 45                	push   $0x45
c010d3dd:	68 9e 2c 11 c0       	push   $0xc0112c9e
c010d3e2:	68 2a 2d 11 c0       	push   $0xc0112d2a
c010d3e7:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d3ec:	e8 77 6e ff ff       	call   c0104268 <print>
c010d3f1:	83 c4 20             	add    $0x20,%esp
c010d3f4:	e8 8a 3b ff ff       	call   c0100f83 <backtrace>
c010d3f9:	fa                   	cli    
c010d3fa:	f4                   	hlt    
    queue_assertvalid(newqueue);
c010d3fb:	83 ec 0c             	sub    $0xc,%esp
c010d3fe:	53                   	push   %ebx
c010d3ff:	e8 8e 91 ff ff       	call   c0106592 <queue_assertvalid>

    queue_destroy(newqueue);
c010d404:	89 1c 24             	mov    %ebx,(%esp)
c010d407:	e8 30 91 ff ff       	call   c010653c <queue_destroy>

    print("queue test complete\n");
c010d40c:	c7 04 24 42 2d 11 c0 	movl   $0xc0112d42,(%esp)
c010d413:	e8 50 6e ff ff       	call   c0104268 <print>

    return 0;
}
c010d418:	31 c0                	xor    %eax,%eax
c010d41a:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010d41d:	5b                   	pop    %ebx
c010d41e:	5e                   	pop    %esi
c010d41f:	5f                   	pop    %edi
c010d420:	5d                   	pop    %ebp
c010d421:	c3                   	ret    

c010d422 <check_order>:
////////////////////////////////////////////////////////////
// support stuff

static
void
check_order(struct threadlist* tl, bool rev) {
c010d422:	55                   	push   %ebp
c010d423:	89 e5                	mov    %esp,%ebp
c010d425:	57                   	push   %edi
c010d426:	56                   	push   %esi
c010d427:	53                   	push   %ebx
c010d428:	83 ec 2c             	sub    $0x2c,%esp
c010d42b:	89 d6                	mov    %edx,%esi
c010d42d:	88 55 d7             	mov    %dl,-0x29(%ebp)
    const char string0[] = "...";
c010d430:	c7 45 e0 2e 2e 2e 00 	movl   $0x2e2e2e,-0x20(%ebp)
    const char stringN[] = "~~~";
c010d437:	c7 45 e4 7e 7e 7e 00 	movl   $0x7e7e7e,-0x1c(%ebp)

    struct thread* t;
    const char* first = rev ? stringN : string0;
c010d43e:	84 d2                	test   %dl,%dl
c010d440:	74 08                	je     c010d44a <check_order+0x28>
c010d442:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    const char* last = rev ? string0 : stringN;
c010d445:	8d 5d e0             	lea    -0x20(%ebp),%ebx
c010d448:	eb 06                	jmp    c010d450 <check_order+0x2e>
check_order(struct threadlist* tl, bool rev) {
    const char string0[] = "...";
    const char stringN[] = "~~~";

    struct thread* t;
    const char* first = rev ? stringN : string0;
c010d44a:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    const char* last = rev ? string0 : stringN;
c010d44d:	8d 5d e4             	lea    -0x1c(%ebp),%ebx
    const char* prev;
    int cmp;

    prev = first;
    THREADLIST_FORALL(t, *tl) {
c010d450:	8b 40 04             	mov    0x4(%eax),%eax
c010d453:	8b 78 08             	mov    0x8(%eax),%edi
c010d456:	85 ff                	test   %edi,%edi
c010d458:	74 54                	je     c010d4ae <check_order+0x8c>
        cmp = strcmp(prev, t->name);
c010d45a:	52                   	push   %edx
c010d45b:	52                   	push   %edx
c010d45c:	ff 77 10             	pushl  0x10(%edi)
c010d45f:	51                   	push   %ecx
c010d460:	e8 9e 73 ff ff       	call   c0104803 <strcmp>
        assert(rev ? (cmp > 0) : (cmp < 0));
c010d465:	83 c4 10             	add    $0x10,%esp
c010d468:	80 7d d7 00          	cmpb   $0x0,-0x29(%ebp)
c010d46c:	74 07                	je     c010d475 <check_order+0x53>
c010d46e:	85 c0                	test   %eax,%eax
c010d470:	0f 9e c0             	setle  %al
c010d473:	eb 05                	jmp    c010d47a <check_order+0x58>
c010d475:	f7 d0                	not    %eax
c010d477:	c1 e8 1f             	shr    $0x1f,%eax
c010d47a:	84 c0                	test   %al,%al
c010d47c:	74 28                	je     c010d4a6 <check_order+0x84>
c010d47e:	83 ec 0c             	sub    $0xc,%esp
c010d481:	68 7c 30 11 c0       	push   $0xc011307c
c010d486:	6a 4c                	push   $0x4c
c010d488:	68 62 2d 11 c0       	push   $0xc0112d62
c010d48d:	68 78 2d 11 c0       	push   $0xc0112d78
c010d492:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d497:	e8 cc 6d ff ff       	call   c0104268 <print>
c010d49c:	83 c4 20             	add    $0x20,%esp
c010d49f:	e8 df 3a ff ff       	call   c0100f83 <backtrace>
c010d4a4:	fa                   	cli    
c010d4a5:	f4                   	hlt    
        prev = t->name;
c010d4a6:	8b 4f 10             	mov    0x10(%edi),%ecx
    const char* last = rev ? string0 : stringN;
    const char* prev;
    int cmp;

    prev = first;
    THREADLIST_FORALL(t, *tl) {
c010d4a9:	8b 47 08             	mov    0x8(%edi),%eax
c010d4ac:	eb a5                	jmp    c010d453 <check_order+0x31>
        cmp = strcmp(prev, t->name);
        assert(rev ? (cmp > 0) : (cmp < 0));
        prev = t->name;
    }
    cmp = strcmp(prev, last);
c010d4ae:	50                   	push   %eax
c010d4af:	50                   	push   %eax
c010d4b0:	53                   	push   %ebx
c010d4b1:	51                   	push   %ecx
c010d4b2:	e8 4c 73 ff ff       	call   c0104803 <strcmp>
    assert(rev ? (cmp > 0) : (cmp < 0));
c010d4b7:	83 c4 10             	add    $0x10,%esp
c010d4ba:	89 f3                	mov    %esi,%ebx
c010d4bc:	84 db                	test   %bl,%bl
c010d4be:	74 07                	je     c010d4c7 <check_order+0xa5>
c010d4c0:	85 c0                	test   %eax,%eax
c010d4c2:	0f 9e c0             	setle  %al
c010d4c5:	eb 05                	jmp    c010d4cc <check_order+0xaa>
c010d4c7:	f7 d0                	not    %eax
c010d4c9:	c1 e8 1f             	shr    $0x1f,%eax
c010d4cc:	84 c0                	test   %al,%al
c010d4ce:	74 28                	je     c010d4f8 <check_order+0xd6>
c010d4d0:	83 ec 0c             	sub    $0xc,%esp
c010d4d3:	68 7c 30 11 c0       	push   $0xc011307c
c010d4d8:	6a 50                	push   $0x50
c010d4da:	68 62 2d 11 c0       	push   $0xc0112d62
c010d4df:	68 78 2d 11 c0       	push   $0xc0112d78
c010d4e4:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d4e9:	e8 7a 6d ff ff       	call   c0104268 <print>
c010d4ee:	83 c4 20             	add    $0x20,%esp
c010d4f1:	e8 8d 3a ff ff       	call   c0100f83 <backtrace>
c010d4f6:	fa                   	cli    
c010d4f7:	f4                   	hlt    
}
c010d4f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010d4fb:	5b                   	pop    %ebx
c010d4fc:	5e                   	pop    %esi
c010d4fd:	5f                   	pop    %edi
c010d4fe:	5d                   	pop    %ebp
c010d4ff:	c3                   	ret    

c010d500 <threadlisttest>:

////////////////////////////////////////////////////////////
// external interface

int
threadlisttest(int nargs, char** args) {
c010d500:	55                   	push   %ebp
c010d501:	89 e5                	mov    %esp,%ebp
c010d503:	57                   	push   %edi
c010d504:	56                   	push   %esi
c010d505:	53                   	push   %ebx
c010d506:	83 ec 48             	sub    $0x48,%esp
    unsigned i;

    (void)nargs;
    (void)args;

    print("Testing threadlists...\n");
c010d509:	68 94 2d 11 c0       	push   $0xc0112d94
c010d50e:	e8 55 6d ff ff       	call   c0104268 <print>
c010d513:	83 c4 10             	add    $0x10,%esp
c010d516:	31 f6                	xor    %esi,%esi

    for (i = 0; i < NUMNAMES; i++)
        fakethreads[i] = fakethread_create(names[i]);
c010d518:	8b be c4 30 11 c0    	mov    -0x3feecf3c(%esi),%edi
static
struct thread*
fakethread_create(const char* name) {
    struct thread* t;

    t = kmalloc(sizeof(*t));
c010d51e:	83 ec 0c             	sub    $0xc,%esp
c010d521:	6a 3c                	push   $0x3c
c010d523:	e8 44 48 ff ff       	call   c0101d6c <kmalloc>
c010d528:	89 c3                	mov    %eax,%ebx
    if (t == NULL)
c010d52a:	83 c4 10             	add    $0x10,%esp
c010d52d:	85 c0                	test   %eax,%eax
c010d52f:	75 19                	jne    c010d54a <threadlisttest+0x4a>
        panic("threadlisttest: Out of memory\n");
c010d531:	68 ac 2d 11 c0       	push   $0xc0112dac
c010d536:	68 b0 30 11 c0       	push   $0xc01130b0
c010d53b:	6a 23                	push   $0x23
c010d53d:	68 62 2d 11 c0       	push   $0xc0112d62
c010d542:	e8 2e 67 ff ff       	call   c0103c75 <_panic>
c010d547:	83 c4 10             	add    $0x10,%esp
    /* ignore most of the fields, zero everything for tidiness */
    memset(t, 0, sizeof(*t));
c010d54a:	50                   	push   %eax
c010d54b:	6a 3c                	push   $0x3c
c010d54d:	6a 00                	push   $0x0
c010d54f:	53                   	push   %ebx
c010d550:	e8 d5 73 ff ff       	call   c010492a <memset>
    t->name = strdup(name);
c010d555:	89 3c 24             	mov    %edi,(%esp)
c010d558:	e8 2d 74 ff ff       	call   c010498a <strdup>
c010d55d:	89 43 10             	mov    %eax,0x10(%ebx)
    if (t->name == NULL)
c010d560:	83 c4 10             	add    $0x10,%esp
c010d563:	85 c0                	test   %eax,%eax
c010d565:	75 19                	jne    c010d580 <threadlisttest+0x80>
        panic("threadlisttest: Out of memory\n");
c010d567:	68 ac 2d 11 c0       	push   $0xc0112dac
c010d56c:	68 b0 30 11 c0       	push   $0xc01130b0
c010d571:	6a 28                	push   $0x28
c010d573:	68 62 2d 11 c0       	push   $0xc0112d62
c010d578:	e8 f8 66 ff ff       	call   c0103c75 <_panic>
c010d57d:	83 c4 10             	add    $0x10,%esp
    t->stack = FAKE_MAGIC;
c010d580:	c7 43 24 aa ab ba 00 	movl   $0xbaabaa,0x24(%ebx)
    threadlistnode_init(&t->listnode, t);
c010d587:	51                   	push   %ecx
c010d588:	51                   	push   %ecx
c010d589:	53                   	push   %ebx
c010d58a:	8d 43 04             	lea    0x4(%ebx),%eax
c010d58d:	50                   	push   %eax
c010d58e:	e8 6f b8 ff ff       	call   c0108e02 <threadlistnode_init>
    (void)args;

    print("Testing threadlists...\n");

    for (i = 0; i < NUMNAMES; i++)
        fakethreads[i] = fakethread_create(names[i]);
c010d593:	89 9e 80 d0 14 c0    	mov    %ebx,-0x3feb2f80(%esi)
c010d599:	83 c6 04             	add    $0x4,%esi
    (void)nargs;
    (void)args;

    print("Testing threadlists...\n");

    for (i = 0; i < NUMNAMES; i++)
c010d59c:	83 c4 10             	add    $0x10,%esp
c010d59f:	83 fe 1c             	cmp    $0x1c,%esi
c010d5a2:	0f 85 70 ff ff ff    	jne    c010d518 <threadlisttest+0x18>
static
void
threadlisttest_a(void) {
    struct threadlist tl;

    threadlist_init(&tl);
c010d5a8:	83 ec 0c             	sub    $0xc,%esp
c010d5ab:	8d 5d cc             	lea    -0x34(%ebp),%ebx
c010d5ae:	53                   	push   %ebx
c010d5af:	e8 8a b9 ff ff       	call   c0108f3e <threadlist_init>
    assert(threadlist_isempty(&tl));
c010d5b4:	89 1c 24             	mov    %ebx,(%esp)
c010d5b7:	e8 e6 b9 ff ff       	call   c0108fa2 <threadlist_isempty>
c010d5bc:	83 c4 10             	add    $0x10,%esp
c010d5bf:	84 c0                	test   %al,%al
c010d5c1:	75 28                	jne    c010d5eb <threadlisttest+0xeb>
c010d5c3:	83 ec 0c             	sub    $0xc,%esp
c010d5c6:	68 9c 30 11 c0       	push   $0xc011309c
c010d5cb:	6a 5c                	push   $0x5c
c010d5cd:	68 62 2d 11 c0       	push   $0xc0112d62
c010d5d2:	68 cb 2d 11 c0       	push   $0xc0112dcb
c010d5d7:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d5dc:	e8 87 6c ff ff       	call   c0104268 <print>
c010d5e1:	83 c4 20             	add    $0x20,%esp
c010d5e4:	e8 9a 39 ff ff       	call   c0100f83 <backtrace>
c010d5e9:	fa                   	cli    
c010d5ea:	f4                   	hlt    
    threadlist_cleanup(&tl);
c010d5eb:	83 ec 0c             	sub    $0xc,%esp
c010d5ee:	53                   	push   %ebx
c010d5ef:	e8 ee b9 ff ff       	call   c0108fe2 <threadlist_cleanup>
void
threadlisttest_b(void) {
    struct threadlist tl;
    struct thread* t;

    threadlist_init(&tl);
c010d5f4:	89 1c 24             	mov    %ebx,(%esp)
c010d5f7:	e8 42 b9 ff ff       	call   c0108f3e <threadlist_init>

    threadlist_addhead(&tl, fakethreads[0]);
c010d5fc:	58                   	pop    %eax
c010d5fd:	5a                   	pop    %edx
c010d5fe:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010d604:	53                   	push   %ebx
c010d605:	e8 8b bb ff ff       	call   c0109195 <threadlist_addhead>
    check_order(&tl, false);
c010d60a:	31 d2                	xor    %edx,%edx
c010d60c:	89 d8                	mov    %ebx,%eax
c010d60e:	e8 0f fe ff ff       	call   c010d422 <check_order>
    check_order(&tl, true);
c010d613:	ba 01 00 00 00       	mov    $0x1,%edx
c010d618:	89 d8                	mov    %ebx,%eax
c010d61a:	e8 03 fe ff ff       	call   c010d422 <check_order>
    assert(tl.tl_count == 1);
c010d61f:	83 c4 10             	add    $0x10,%esp
c010d622:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010d626:	74 28                	je     c010d650 <threadlisttest+0x150>
c010d628:	83 ec 0c             	sub    $0xc,%esp
c010d62b:	68 88 30 11 c0       	push   $0xc0113088
c010d630:	6a 6b                	push   $0x6b
c010d632:	68 62 2d 11 c0       	push   $0xc0112d62
c010d637:	68 e3 2d 11 c0       	push   $0xc0112de3
c010d63c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d641:	e8 22 6c ff ff       	call   c0104268 <print>
c010d646:	83 c4 20             	add    $0x20,%esp
c010d649:	e8 35 39 ff ff       	call   c0100f83 <backtrace>
c010d64e:	fa                   	cli    
c010d64f:	f4                   	hlt    
    t = threadlist_remhead(&tl);
c010d650:	83 ec 0c             	sub    $0xc,%esp
c010d653:	53                   	push   %ebx
c010d654:	e8 2f bc ff ff       	call   c0109288 <threadlist_remhead>
c010d659:	89 c6                	mov    %eax,%esi
    assert(tl.tl_count == 0);
c010d65b:	83 c4 10             	add    $0x10,%esp
c010d65e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d662:	74 28                	je     c010d68c <threadlisttest+0x18c>
c010d664:	83 ec 0c             	sub    $0xc,%esp
c010d667:	68 88 30 11 c0       	push   $0xc0113088
c010d66c:	6a 6d                	push   $0x6d
c010d66e:	68 62 2d 11 c0       	push   $0xc0112d62
c010d673:	68 f4 2d 11 c0       	push   $0xc0112df4
c010d678:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d67d:	e8 e6 6b ff ff       	call   c0104268 <print>
c010d682:	83 c4 20             	add    $0x20,%esp
c010d685:	e8 f9 38 ff ff       	call   c0100f83 <backtrace>
c010d68a:	fa                   	cli    
c010d68b:	f4                   	hlt    
    assert(t == fakethreads[0]);
c010d68c:	3b 35 80 d0 14 c0    	cmp    0xc014d080,%esi
c010d692:	74 28                	je     c010d6bc <threadlisttest+0x1bc>
c010d694:	83 ec 0c             	sub    $0xc,%esp
c010d697:	68 88 30 11 c0       	push   $0xc0113088
c010d69c:	6a 6e                	push   $0x6e
c010d69e:	68 62 2d 11 c0       	push   $0xc0112d62
c010d6a3:	68 05 2e 11 c0       	push   $0xc0112e05
c010d6a8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d6ad:	e8 b6 6b ff ff       	call   c0104268 <print>
c010d6b2:	83 c4 20             	add    $0x20,%esp
c010d6b5:	e8 c9 38 ff ff       	call   c0100f83 <backtrace>
c010d6ba:	fa                   	cli    
c010d6bb:	f4                   	hlt    

    threadlist_addtail(&tl, fakethreads[0]);
c010d6bc:	50                   	push   %eax
c010d6bd:	50                   	push   %eax
c010d6be:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010d6c4:	53                   	push   %ebx
c010d6c5:	e8 41 bb ff ff       	call   c010920b <threadlist_addtail>
    check_order(&tl, false);
c010d6ca:	31 d2                	xor    %edx,%edx
c010d6cc:	89 d8                	mov    %ebx,%eax
c010d6ce:	e8 4f fd ff ff       	call   c010d422 <check_order>
    check_order(&tl, true);
c010d6d3:	ba 01 00 00 00       	mov    $0x1,%edx
c010d6d8:	89 d8                	mov    %ebx,%eax
c010d6da:	e8 43 fd ff ff       	call   c010d422 <check_order>
    assert(tl.tl_count == 1);
c010d6df:	83 c4 10             	add    $0x10,%esp
c010d6e2:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010d6e6:	74 28                	je     c010d710 <threadlisttest+0x210>
c010d6e8:	83 ec 0c             	sub    $0xc,%esp
c010d6eb:	68 88 30 11 c0       	push   $0xc0113088
c010d6f0:	6a 73                	push   $0x73
c010d6f2:	68 62 2d 11 c0       	push   $0xc0112d62
c010d6f7:	68 e3 2d 11 c0       	push   $0xc0112de3
c010d6fc:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d701:	e8 62 6b ff ff       	call   c0104268 <print>
c010d706:	83 c4 20             	add    $0x20,%esp
c010d709:	e8 75 38 ff ff       	call   c0100f83 <backtrace>
c010d70e:	fa                   	cli    
c010d70f:	f4                   	hlt    
    t = threadlist_remtail(&tl);
c010d710:	83 ec 0c             	sub    $0xc,%esp
c010d713:	53                   	push   %ebx
c010d714:	e8 f6 bb ff ff       	call   c010930f <threadlist_remtail>
c010d719:	89 c6                	mov    %eax,%esi
    assert(tl.tl_count == 0);
c010d71b:	83 c4 10             	add    $0x10,%esp
c010d71e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d722:	74 28                	je     c010d74c <threadlisttest+0x24c>
c010d724:	83 ec 0c             	sub    $0xc,%esp
c010d727:	68 88 30 11 c0       	push   $0xc0113088
c010d72c:	6a 75                	push   $0x75
c010d72e:	68 62 2d 11 c0       	push   $0xc0112d62
c010d733:	68 f4 2d 11 c0       	push   $0xc0112df4
c010d738:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d73d:	e8 26 6b ff ff       	call   c0104268 <print>
c010d742:	83 c4 20             	add    $0x20,%esp
c010d745:	e8 39 38 ff ff       	call   c0100f83 <backtrace>
c010d74a:	fa                   	cli    
c010d74b:	f4                   	hlt    
    assert(t == fakethreads[0]);
c010d74c:	3b 35 80 d0 14 c0    	cmp    0xc014d080,%esi
c010d752:	74 28                	je     c010d77c <threadlisttest+0x27c>
c010d754:	83 ec 0c             	sub    $0xc,%esp
c010d757:	68 88 30 11 c0       	push   $0xc0113088
c010d75c:	6a 76                	push   $0x76
c010d75e:	68 62 2d 11 c0       	push   $0xc0112d62
c010d763:	68 05 2e 11 c0       	push   $0xc0112e05
c010d768:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d76d:	e8 f6 6a ff ff       	call   c0104268 <print>
c010d772:	83 c4 20             	add    $0x20,%esp
c010d775:	e8 09 38 ff ff       	call   c0100f83 <backtrace>
c010d77a:	fa                   	cli    
c010d77b:	f4                   	hlt    

    threadlist_cleanup(&tl);
c010d77c:	83 ec 0c             	sub    $0xc,%esp
c010d77f:	53                   	push   %ebx
c010d780:	e8 5d b8 ff ff       	call   c0108fe2 <threadlist_cleanup>
void
threadlisttest_c(void) {
    struct threadlist tl;
    struct thread* t;

    threadlist_init(&tl);
c010d785:	89 1c 24             	mov    %ebx,(%esp)
c010d788:	e8 b1 b7 ff ff       	call   c0108f3e <threadlist_init>

    threadlist_addhead(&tl, fakethreads[0]);
c010d78d:	59                   	pop    %ecx
c010d78e:	5e                   	pop    %esi
c010d78f:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010d795:	53                   	push   %ebx
c010d796:	e8 fa b9 ff ff       	call   c0109195 <threadlist_addhead>
    threadlist_addhead(&tl, fakethreads[1]);
c010d79b:	5f                   	pop    %edi
c010d79c:	58                   	pop    %eax
c010d79d:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010d7a3:	53                   	push   %ebx
c010d7a4:	e8 ec b9 ff ff       	call   c0109195 <threadlist_addhead>
    assert(tl.tl_count == 2);
c010d7a9:	83 c4 10             	add    $0x10,%esp
c010d7ac:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
c010d7b0:	74 2b                	je     c010d7dd <threadlisttest+0x2dd>
c010d7b2:	83 ec 0c             	sub    $0xc,%esp
c010d7b5:	68 68 30 11 c0       	push   $0xc0113068
c010d7ba:	68 85 00 00 00       	push   $0x85
c010d7bf:	68 62 2d 11 c0       	push   $0xc0112d62
c010d7c4:	68 19 2e 11 c0       	push   $0xc0112e19
c010d7c9:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d7ce:	e8 95 6a ff ff       	call   c0104268 <print>
c010d7d3:	83 c4 20             	add    $0x20,%esp
c010d7d6:	e8 a8 37 ff ff       	call   c0100f83 <backtrace>
c010d7db:	fa                   	cli    
c010d7dc:	f4                   	hlt    

    check_order(&tl, true);
c010d7dd:	ba 01 00 00 00       	mov    $0x1,%edx
c010d7e2:	89 d8                	mov    %ebx,%eax
c010d7e4:	e8 39 fc ff ff       	call   c010d422 <check_order>

    t = threadlist_remhead(&tl);
c010d7e9:	83 ec 0c             	sub    $0xc,%esp
c010d7ec:	53                   	push   %ebx
c010d7ed:	e8 96 ba ff ff       	call   c0109288 <threadlist_remhead>
    assert(t == fakethreads[1]);
c010d7f2:	83 c4 10             	add    $0x10,%esp
c010d7f5:	3b 05 84 d0 14 c0    	cmp    0xc014d084,%eax
c010d7fb:	74 2b                	je     c010d828 <threadlisttest+0x328>
c010d7fd:	83 ec 0c             	sub    $0xc,%esp
c010d800:	68 68 30 11 c0       	push   $0xc0113068
c010d805:	68 8a 00 00 00       	push   $0x8a
c010d80a:	68 62 2d 11 c0       	push   $0xc0112d62
c010d80f:	68 2a 2e 11 c0       	push   $0xc0112e2a
c010d814:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d819:	e8 4a 6a ff ff       	call   c0104268 <print>
c010d81e:	83 c4 20             	add    $0x20,%esp
c010d821:	e8 5d 37 ff ff       	call   c0100f83 <backtrace>
c010d826:	fa                   	cli    
c010d827:	f4                   	hlt    
    t = threadlist_remhead(&tl);
c010d828:	83 ec 0c             	sub    $0xc,%esp
c010d82b:	53                   	push   %ebx
c010d82c:	e8 57 ba ff ff       	call   c0109288 <threadlist_remhead>
    assert(t == fakethreads[0]);
c010d831:	83 c4 10             	add    $0x10,%esp
c010d834:	3b 05 80 d0 14 c0    	cmp    0xc014d080,%eax
c010d83a:	74 2b                	je     c010d867 <threadlisttest+0x367>
c010d83c:	83 ec 0c             	sub    $0xc,%esp
c010d83f:	68 68 30 11 c0       	push   $0xc0113068
c010d844:	68 8c 00 00 00       	push   $0x8c
c010d849:	68 62 2d 11 c0       	push   $0xc0112d62
c010d84e:	68 05 2e 11 c0       	push   $0xc0112e05
c010d853:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d858:	e8 0b 6a ff ff       	call   c0104268 <print>
c010d85d:	83 c4 20             	add    $0x20,%esp
c010d860:	e8 1e 37 ff ff       	call   c0100f83 <backtrace>
c010d865:	fa                   	cli    
c010d866:	f4                   	hlt    
    assert(tl.tl_count == 0);
c010d867:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d86b:	74 2b                	je     c010d898 <threadlisttest+0x398>
c010d86d:	83 ec 0c             	sub    $0xc,%esp
c010d870:	68 68 30 11 c0       	push   $0xc0113068
c010d875:	68 8d 00 00 00       	push   $0x8d
c010d87a:	68 62 2d 11 c0       	push   $0xc0112d62
c010d87f:	68 f4 2d 11 c0       	push   $0xc0112df4
c010d884:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d889:	e8 da 69 ff ff       	call   c0104268 <print>
c010d88e:	83 c4 20             	add    $0x20,%esp
c010d891:	e8 ed 36 ff ff       	call   c0100f83 <backtrace>
c010d896:	fa                   	cli    
c010d897:	f4                   	hlt    

    threadlist_addtail(&tl, fakethreads[0]);
c010d898:	50                   	push   %eax
c010d899:	50                   	push   %eax
c010d89a:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010d8a0:	53                   	push   %ebx
c010d8a1:	e8 65 b9 ff ff       	call   c010920b <threadlist_addtail>
    threadlist_addtail(&tl, fakethreads[1]);
c010d8a6:	58                   	pop    %eax
c010d8a7:	5a                   	pop    %edx
c010d8a8:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010d8ae:	53                   	push   %ebx
c010d8af:	e8 57 b9 ff ff       	call   c010920b <threadlist_addtail>
    assert(tl.tl_count == 2);
c010d8b4:	83 c4 10             	add    $0x10,%esp
c010d8b7:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
c010d8bb:	74 2b                	je     c010d8e8 <threadlisttest+0x3e8>
c010d8bd:	83 ec 0c             	sub    $0xc,%esp
c010d8c0:	68 68 30 11 c0       	push   $0xc0113068
c010d8c5:	68 91 00 00 00       	push   $0x91
c010d8ca:	68 62 2d 11 c0       	push   $0xc0112d62
c010d8cf:	68 19 2e 11 c0       	push   $0xc0112e19
c010d8d4:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d8d9:	e8 8a 69 ff ff       	call   c0104268 <print>
c010d8de:	83 c4 20             	add    $0x20,%esp
c010d8e1:	e8 9d 36 ff ff       	call   c0100f83 <backtrace>
c010d8e6:	fa                   	cli    
c010d8e7:	f4                   	hlt    

    check_order(&tl, false);
c010d8e8:	31 d2                	xor    %edx,%edx
c010d8ea:	89 d8                	mov    %ebx,%eax
c010d8ec:	e8 31 fb ff ff       	call   c010d422 <check_order>

    t = threadlist_remtail(&tl);
c010d8f1:	83 ec 0c             	sub    $0xc,%esp
c010d8f4:	53                   	push   %ebx
c010d8f5:	e8 15 ba ff ff       	call   c010930f <threadlist_remtail>
    assert(t == fakethreads[1]);
c010d8fa:	83 c4 10             	add    $0x10,%esp
c010d8fd:	3b 05 84 d0 14 c0    	cmp    0xc014d084,%eax
c010d903:	74 2b                	je     c010d930 <threadlisttest+0x430>
c010d905:	83 ec 0c             	sub    $0xc,%esp
c010d908:	68 68 30 11 c0       	push   $0xc0113068
c010d90d:	68 96 00 00 00       	push   $0x96
c010d912:	68 62 2d 11 c0       	push   $0xc0112d62
c010d917:	68 2a 2e 11 c0       	push   $0xc0112e2a
c010d91c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d921:	e8 42 69 ff ff       	call   c0104268 <print>
c010d926:	83 c4 20             	add    $0x20,%esp
c010d929:	e8 55 36 ff ff       	call   c0100f83 <backtrace>
c010d92e:	fa                   	cli    
c010d92f:	f4                   	hlt    
    t = threadlist_remtail(&tl);
c010d930:	83 ec 0c             	sub    $0xc,%esp
c010d933:	53                   	push   %ebx
c010d934:	e8 d6 b9 ff ff       	call   c010930f <threadlist_remtail>
    assert(t == fakethreads[0]);
c010d939:	83 c4 10             	add    $0x10,%esp
c010d93c:	3b 05 80 d0 14 c0    	cmp    0xc014d080,%eax
c010d942:	74 2b                	je     c010d96f <threadlisttest+0x46f>
c010d944:	83 ec 0c             	sub    $0xc,%esp
c010d947:	68 68 30 11 c0       	push   $0xc0113068
c010d94c:	68 98 00 00 00       	push   $0x98
c010d951:	68 62 2d 11 c0       	push   $0xc0112d62
c010d956:	68 05 2e 11 c0       	push   $0xc0112e05
c010d95b:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d960:	e8 03 69 ff ff       	call   c0104268 <print>
c010d965:	83 c4 20             	add    $0x20,%esp
c010d968:	e8 16 36 ff ff       	call   c0100f83 <backtrace>
c010d96d:	fa                   	cli    
c010d96e:	f4                   	hlt    
    assert(tl.tl_count == 0);
c010d96f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d973:	74 2b                	je     c010d9a0 <threadlisttest+0x4a0>
c010d975:	83 ec 0c             	sub    $0xc,%esp
c010d978:	68 68 30 11 c0       	push   $0xc0113068
c010d97d:	68 99 00 00 00       	push   $0x99
c010d982:	68 62 2d 11 c0       	push   $0xc0112d62
c010d987:	68 f4 2d 11 c0       	push   $0xc0112df4
c010d98c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d991:	e8 d2 68 ff ff       	call   c0104268 <print>
c010d996:	83 c4 20             	add    $0x20,%esp
c010d999:	e8 e5 35 ff ff       	call   c0100f83 <backtrace>
c010d99e:	fa                   	cli    
c010d99f:	f4                   	hlt    

    threadlist_cleanup(&tl);
c010d9a0:	83 ec 0c             	sub    $0xc,%esp
c010d9a3:	53                   	push   %ebx
c010d9a4:	e8 39 b6 ff ff       	call   c0108fe2 <threadlist_cleanup>
void
threadlisttest_d(void) {
    struct threadlist tl;
    struct thread* t;

    threadlist_init(&tl);
c010d9a9:	89 1c 24             	mov    %ebx,(%esp)
c010d9ac:	e8 8d b5 ff ff       	call   c0108f3e <threadlist_init>

    threadlist_addhead(&tl, fakethreads[0]);
c010d9b1:	59                   	pop    %ecx
c010d9b2:	5e                   	pop    %esi
c010d9b3:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010d9b9:	53                   	push   %ebx
c010d9ba:	e8 d6 b7 ff ff       	call   c0109195 <threadlist_addhead>
    threadlist_addtail(&tl, fakethreads[1]);
c010d9bf:	5f                   	pop    %edi
c010d9c0:	58                   	pop    %eax
c010d9c1:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010d9c7:	53                   	push   %ebx
c010d9c8:	e8 3e b8 ff ff       	call   c010920b <threadlist_addtail>
    assert(tl.tl_count == 2);
c010d9cd:	83 c4 10             	add    $0x10,%esp
c010d9d0:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
c010d9d4:	74 2b                	je     c010da01 <threadlisttest+0x501>
c010d9d6:	83 ec 0c             	sub    $0xc,%esp
c010d9d9:	68 54 30 11 c0       	push   $0xc0113054
c010d9de:	68 a8 00 00 00       	push   $0xa8
c010d9e3:	68 62 2d 11 c0       	push   $0xc0112d62
c010d9e8:	68 19 2e 11 c0       	push   $0xc0112e19
c010d9ed:	68 2b ff 10 c0       	push   $0xc010ff2b
c010d9f2:	e8 71 68 ff ff       	call   c0104268 <print>
c010d9f7:	83 c4 20             	add    $0x20,%esp
c010d9fa:	e8 84 35 ff ff       	call   c0100f83 <backtrace>
c010d9ff:	fa                   	cli    
c010da00:	f4                   	hlt    

    check_order(&tl, false);
c010da01:	31 d2                	xor    %edx,%edx
c010da03:	89 d8                	mov    %ebx,%eax
c010da05:	e8 18 fa ff ff       	call   c010d422 <check_order>

    t = threadlist_remhead(&tl);
c010da0a:	83 ec 0c             	sub    $0xc,%esp
c010da0d:	53                   	push   %ebx
c010da0e:	e8 75 b8 ff ff       	call   c0109288 <threadlist_remhead>
    assert(t == fakethreads[0]);
c010da13:	83 c4 10             	add    $0x10,%esp
c010da16:	3b 05 80 d0 14 c0    	cmp    0xc014d080,%eax
c010da1c:	74 2b                	je     c010da49 <threadlisttest+0x549>
c010da1e:	83 ec 0c             	sub    $0xc,%esp
c010da21:	68 54 30 11 c0       	push   $0xc0113054
c010da26:	68 ad 00 00 00       	push   $0xad
c010da2b:	68 62 2d 11 c0       	push   $0xc0112d62
c010da30:	68 05 2e 11 c0       	push   $0xc0112e05
c010da35:	68 2b ff 10 c0       	push   $0xc010ff2b
c010da3a:	e8 29 68 ff ff       	call   c0104268 <print>
c010da3f:	83 c4 20             	add    $0x20,%esp
c010da42:	e8 3c 35 ff ff       	call   c0100f83 <backtrace>
c010da47:	fa                   	cli    
c010da48:	f4                   	hlt    
    t = threadlist_remtail(&tl);
c010da49:	83 ec 0c             	sub    $0xc,%esp
c010da4c:	53                   	push   %ebx
c010da4d:	e8 bd b8 ff ff       	call   c010930f <threadlist_remtail>
    assert(t == fakethreads[1]);
c010da52:	83 c4 10             	add    $0x10,%esp
c010da55:	3b 05 84 d0 14 c0    	cmp    0xc014d084,%eax
c010da5b:	74 2b                	je     c010da88 <threadlisttest+0x588>
c010da5d:	83 ec 0c             	sub    $0xc,%esp
c010da60:	68 54 30 11 c0       	push   $0xc0113054
c010da65:	68 af 00 00 00       	push   $0xaf
c010da6a:	68 62 2d 11 c0       	push   $0xc0112d62
c010da6f:	68 2a 2e 11 c0       	push   $0xc0112e2a
c010da74:	68 2b ff 10 c0       	push   $0xc010ff2b
c010da79:	e8 ea 67 ff ff       	call   c0104268 <print>
c010da7e:	83 c4 20             	add    $0x20,%esp
c010da81:	e8 fd 34 ff ff       	call   c0100f83 <backtrace>
c010da86:	fa                   	cli    
c010da87:	f4                   	hlt    
    assert(tl.tl_count == 0);
c010da88:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010da8c:	74 2b                	je     c010dab9 <threadlisttest+0x5b9>
c010da8e:	83 ec 0c             	sub    $0xc,%esp
c010da91:	68 54 30 11 c0       	push   $0xc0113054
c010da96:	68 b0 00 00 00       	push   $0xb0
c010da9b:	68 62 2d 11 c0       	push   $0xc0112d62
c010daa0:	68 f4 2d 11 c0       	push   $0xc0112df4
c010daa5:	68 2b ff 10 c0       	push   $0xc010ff2b
c010daaa:	e8 b9 67 ff ff       	call   c0104268 <print>
c010daaf:	83 c4 20             	add    $0x20,%esp
c010dab2:	e8 cc 34 ff ff       	call   c0100f83 <backtrace>
c010dab7:	fa                   	cli    
c010dab8:	f4                   	hlt    

    threadlist_addhead(&tl, fakethreads[0]);
c010dab9:	57                   	push   %edi
c010daba:	57                   	push   %edi
c010dabb:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010dac1:	53                   	push   %ebx
c010dac2:	e8 ce b6 ff ff       	call   c0109195 <threadlist_addhead>
    threadlist_addtail(&tl, fakethreads[1]);
c010dac7:	58                   	pop    %eax
c010dac8:	5a                   	pop    %edx
c010dac9:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010dacf:	53                   	push   %ebx
c010dad0:	e8 36 b7 ff ff       	call   c010920b <threadlist_addtail>
    assert(tl.tl_count == 2);
c010dad5:	83 c4 10             	add    $0x10,%esp
c010dad8:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
c010dadc:	74 2b                	je     c010db09 <threadlisttest+0x609>
c010dade:	83 ec 0c             	sub    $0xc,%esp
c010dae1:	68 54 30 11 c0       	push   $0xc0113054
c010dae6:	68 b4 00 00 00       	push   $0xb4
c010daeb:	68 62 2d 11 c0       	push   $0xc0112d62
c010daf0:	68 19 2e 11 c0       	push   $0xc0112e19
c010daf5:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dafa:	e8 69 67 ff ff       	call   c0104268 <print>
c010daff:	83 c4 20             	add    $0x20,%esp
c010db02:	e8 7c 34 ff ff       	call   c0100f83 <backtrace>
c010db07:	fa                   	cli    
c010db08:	f4                   	hlt    

    check_order(&tl, false);
c010db09:	31 d2                	xor    %edx,%edx
c010db0b:	89 d8                	mov    %ebx,%eax
c010db0d:	e8 10 f9 ff ff       	call   c010d422 <check_order>

    t = threadlist_remtail(&tl);
c010db12:	83 ec 0c             	sub    $0xc,%esp
c010db15:	53                   	push   %ebx
c010db16:	e8 f4 b7 ff ff       	call   c010930f <threadlist_remtail>
    assert(t == fakethreads[1]);
c010db1b:	83 c4 10             	add    $0x10,%esp
c010db1e:	3b 05 84 d0 14 c0    	cmp    0xc014d084,%eax
c010db24:	74 2b                	je     c010db51 <threadlisttest+0x651>
c010db26:	83 ec 0c             	sub    $0xc,%esp
c010db29:	68 54 30 11 c0       	push   $0xc0113054
c010db2e:	68 b9 00 00 00       	push   $0xb9
c010db33:	68 62 2d 11 c0       	push   $0xc0112d62
c010db38:	68 2a 2e 11 c0       	push   $0xc0112e2a
c010db3d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010db42:	e8 21 67 ff ff       	call   c0104268 <print>
c010db47:	83 c4 20             	add    $0x20,%esp
c010db4a:	e8 34 34 ff ff       	call   c0100f83 <backtrace>
c010db4f:	fa                   	cli    
c010db50:	f4                   	hlt    
    t = threadlist_remtail(&tl);
c010db51:	83 ec 0c             	sub    $0xc,%esp
c010db54:	53                   	push   %ebx
c010db55:	e8 b5 b7 ff ff       	call   c010930f <threadlist_remtail>
    assert(t == fakethreads[0]);
c010db5a:	83 c4 10             	add    $0x10,%esp
c010db5d:	3b 05 80 d0 14 c0    	cmp    0xc014d080,%eax
c010db63:	74 2b                	je     c010db90 <threadlisttest+0x690>
c010db65:	83 ec 0c             	sub    $0xc,%esp
c010db68:	68 54 30 11 c0       	push   $0xc0113054
c010db6d:	68 bb 00 00 00       	push   $0xbb
c010db72:	68 62 2d 11 c0       	push   $0xc0112d62
c010db77:	68 05 2e 11 c0       	push   $0xc0112e05
c010db7c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010db81:	e8 e2 66 ff ff       	call   c0104268 <print>
c010db86:	83 c4 20             	add    $0x20,%esp
c010db89:	e8 f5 33 ff ff       	call   c0100f83 <backtrace>
c010db8e:	fa                   	cli    
c010db8f:	f4                   	hlt    
    assert(tl.tl_count == 0);
c010db90:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010db94:	74 2b                	je     c010dbc1 <threadlisttest+0x6c1>
c010db96:	83 ec 0c             	sub    $0xc,%esp
c010db99:	68 54 30 11 c0       	push   $0xc0113054
c010db9e:	68 bc 00 00 00       	push   $0xbc
c010dba3:	68 62 2d 11 c0       	push   $0xc0112d62
c010dba8:	68 f4 2d 11 c0       	push   $0xc0112df4
c010dbad:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dbb2:	e8 b1 66 ff ff       	call   c0104268 <print>
c010dbb7:	83 c4 20             	add    $0x20,%esp
c010dbba:	e8 c4 33 ff ff       	call   c0100f83 <backtrace>
c010dbbf:	fa                   	cli    
c010dbc0:	f4                   	hlt    

    threadlist_cleanup(&tl);
c010dbc1:	83 ec 0c             	sub    $0xc,%esp
c010dbc4:	53                   	push   %ebx
c010dbc5:	e8 18 b4 ff ff       	call   c0108fe2 <threadlist_cleanup>
threadlisttest_e(void) {
    struct threadlist tl;
    struct thread* t;
    unsigned i;

    threadlist_init(&tl);
c010dbca:	89 1c 24             	mov    %ebx,(%esp)
c010dbcd:	e8 6c b3 ff ff       	call   c0108f3e <threadlist_init>

    threadlist_addhead(&tl, fakethreads[1]);
c010dbd2:	58                   	pop    %eax
c010dbd3:	5a                   	pop    %edx
c010dbd4:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010dbda:	53                   	push   %ebx
c010dbdb:	e8 b5 b5 ff ff       	call   c0109195 <threadlist_addhead>
    threadlist_addtail(&tl, fakethreads[3]);
c010dbe0:	59                   	pop    %ecx
c010dbe1:	5e                   	pop    %esi
c010dbe2:	ff 35 8c d0 14 c0    	pushl  0xc014d08c
c010dbe8:	53                   	push   %ebx
c010dbe9:	e8 1d b6 ff ff       	call   c010920b <threadlist_addtail>
    assert(tl.tl_count == 2);
c010dbee:	83 c4 10             	add    $0x10,%esp
c010dbf1:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
c010dbf5:	74 2b                	je     c010dc22 <threadlisttest+0x722>
c010dbf7:	83 ec 0c             	sub    $0xc,%esp
c010dbfa:	68 40 30 11 c0       	push   $0xc0113040
c010dbff:	68 cc 00 00 00       	push   $0xcc
c010dc04:	68 62 2d 11 c0       	push   $0xc0112d62
c010dc09:	68 19 2e 11 c0       	push   $0xc0112e19
c010dc0e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dc13:	e8 50 66 ff ff       	call   c0104268 <print>
c010dc18:	83 c4 20             	add    $0x20,%esp
c010dc1b:	e8 63 33 ff ff       	call   c0100f83 <backtrace>
c010dc20:	fa                   	cli    
c010dc21:	f4                   	hlt    
    check_order(&tl, false);
c010dc22:	31 d2                	xor    %edx,%edx
c010dc24:	89 d8                	mov    %ebx,%eax
c010dc26:	e8 f7 f7 ff ff       	call   c010d422 <check_order>

    threadlist_insertafter(&tl, fakethreads[3], fakethreads[4]);
c010dc2b:	57                   	push   %edi
c010dc2c:	ff 35 90 d0 14 c0    	pushl  0xc014d090
c010dc32:	ff 35 8c d0 14 c0    	pushl  0xc014d08c
c010dc38:	53                   	push   %ebx
c010dc39:	e8 57 b7 ff ff       	call   c0109395 <threadlist_insertafter>
    assert(tl.tl_count == 3);
c010dc3e:	83 c4 10             	add    $0x10,%esp
c010dc41:	83 7d e4 03          	cmpl   $0x3,-0x1c(%ebp)
c010dc45:	74 2b                	je     c010dc72 <threadlisttest+0x772>
c010dc47:	83 ec 0c             	sub    $0xc,%esp
c010dc4a:	68 40 30 11 c0       	push   $0xc0113040
c010dc4f:	68 d0 00 00 00       	push   $0xd0
c010dc54:	68 62 2d 11 c0       	push   $0xc0112d62
c010dc59:	68 3e 2e 11 c0       	push   $0xc0112e3e
c010dc5e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dc63:	e8 00 66 ff ff       	call   c0104268 <print>
c010dc68:	83 c4 20             	add    $0x20,%esp
c010dc6b:	e8 13 33 ff ff       	call   c0100f83 <backtrace>
c010dc70:	fa                   	cli    
c010dc71:	f4                   	hlt    
    check_order(&tl, false);
c010dc72:	31 d2                	xor    %edx,%edx
c010dc74:	89 d8                	mov    %ebx,%eax
c010dc76:	e8 a7 f7 ff ff       	call   c010d422 <check_order>

    threadlist_insertbefore(&tl, fakethreads[0], fakethreads[1]);
c010dc7b:	56                   	push   %esi
c010dc7c:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010dc82:	ff 35 80 d0 14 c0    	pushl  0xc014d080
c010dc88:	53                   	push   %ebx
c010dc89:	e8 24 b7 ff ff       	call   c01093b2 <threadlist_insertbefore>
    assert(tl.tl_count == 4);
c010dc8e:	83 c4 10             	add    $0x10,%esp
c010dc91:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
c010dc95:	74 2b                	je     c010dcc2 <threadlisttest+0x7c2>
c010dc97:	83 ec 0c             	sub    $0xc,%esp
c010dc9a:	68 40 30 11 c0       	push   $0xc0113040
c010dc9f:	68 d4 00 00 00       	push   $0xd4
c010dca4:	68 62 2d 11 c0       	push   $0xc0112d62
c010dca9:	68 4f 2e 11 c0       	push   $0xc0112e4f
c010dcae:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dcb3:	e8 b0 65 ff ff       	call   c0104268 <print>
c010dcb8:	83 c4 20             	add    $0x20,%esp
c010dcbb:	e8 c3 32 ff ff       	call   c0100f83 <backtrace>
c010dcc0:	fa                   	cli    
c010dcc1:	f4                   	hlt    
    check_order(&tl, false);
c010dcc2:	31 d2                	xor    %edx,%edx
c010dcc4:	89 d8                	mov    %ebx,%eax
c010dcc6:	e8 57 f7 ff ff       	call   c010d422 <check_order>

    threadlist_insertafter(&tl, fakethreads[1], fakethreads[2]);
c010dccb:	51                   	push   %ecx
c010dccc:	ff 35 88 d0 14 c0    	pushl  0xc014d088
c010dcd2:	ff 35 84 d0 14 c0    	pushl  0xc014d084
c010dcd8:	53                   	push   %ebx
c010dcd9:	e8 b7 b6 ff ff       	call   c0109395 <threadlist_insertafter>
    assert(tl.tl_count == 5);
c010dcde:	83 c4 10             	add    $0x10,%esp
c010dce1:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
c010dce5:	74 2b                	je     c010dd12 <threadlisttest+0x812>
c010dce7:	83 ec 0c             	sub    $0xc,%esp
c010dcea:	68 40 30 11 c0       	push   $0xc0113040
c010dcef:	68 d8 00 00 00       	push   $0xd8
c010dcf4:	68 62 2d 11 c0       	push   $0xc0112d62
c010dcf9:	68 60 2e 11 c0       	push   $0xc0112e60
c010dcfe:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dd03:	e8 60 65 ff ff       	call   c0104268 <print>
c010dd08:	83 c4 20             	add    $0x20,%esp
c010dd0b:	e8 73 32 ff ff       	call   c0100f83 <backtrace>
c010dd10:	fa                   	cli    
c010dd11:	f4                   	hlt    
    check_order(&tl, false);
c010dd12:	31 d2                	xor    %edx,%edx
c010dd14:	89 d8                	mov    %ebx,%eax
c010dd16:	e8 07 f7 ff ff       	call   c010d422 <check_order>

    assert(fakethreads[4]->listnode.tln_prev->tln_self ==
c010dd1b:	a1 90 d0 14 c0       	mov    0xc014d090,%eax
c010dd20:	8b 40 04             	mov    0x4(%eax),%eax
c010dd23:	8b 0d 8c d0 14 c0    	mov    0xc014d08c,%ecx
c010dd29:	39 48 08             	cmp    %ecx,0x8(%eax)
c010dd2c:	74 2b                	je     c010dd59 <threadlisttest+0x859>
c010dd2e:	83 ec 0c             	sub    $0xc,%esp
c010dd31:	68 40 30 11 c0       	push   $0xc0113040
c010dd36:	68 dc 00 00 00       	push   $0xdc
c010dd3b:	68 62 2d 11 c0       	push   $0xc0112d62
c010dd40:	68 71 2e 11 c0       	push   $0xc0112e71
c010dd45:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dd4a:	e8 19 65 ff ff       	call   c0104268 <print>
c010dd4f:	83 c4 20             	add    $0x20,%esp
c010dd52:	e8 2c 32 ff ff       	call   c0100f83 <backtrace>
c010dd57:	fa                   	cli    
c010dd58:	f4                   	hlt    
           fakethreads[3]);
    assert(fakethreads[3]->listnode.tln_prev->tln_self ==
c010dd59:	a1 8c d0 14 c0       	mov    0xc014d08c,%eax
c010dd5e:	8b 40 04             	mov    0x4(%eax),%eax
c010dd61:	8b 0d 88 d0 14 c0    	mov    0xc014d088,%ecx
c010dd67:	39 48 08             	cmp    %ecx,0x8(%eax)
c010dd6a:	74 2b                	je     c010dd97 <threadlisttest+0x897>
c010dd6c:	83 ec 0c             	sub    $0xc,%esp
c010dd6f:	68 40 30 11 c0       	push   $0xc0113040
c010dd74:	68 de 00 00 00       	push   $0xde
c010dd79:	68 62 2d 11 c0       	push   $0xc0112d62
c010dd7e:	68 af 2e 11 c0       	push   $0xc0112eaf
c010dd83:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dd88:	e8 db 64 ff ff       	call   c0104268 <print>
c010dd8d:	83 c4 20             	add    $0x20,%esp
c010dd90:	e8 ee 31 ff ff       	call   c0100f83 <backtrace>
c010dd95:	fa                   	cli    
c010dd96:	f4                   	hlt    
           fakethreads[2]);
    assert(fakethreads[2]->listnode.tln_prev->tln_self ==
c010dd97:	a1 88 d0 14 c0       	mov    0xc014d088,%eax
c010dd9c:	8b 40 04             	mov    0x4(%eax),%eax
c010dd9f:	8b 0d 84 d0 14 c0    	mov    0xc014d084,%ecx
c010dda5:	39 48 08             	cmp    %ecx,0x8(%eax)
c010dda8:	74 2b                	je     c010ddd5 <threadlisttest+0x8d5>
c010ddaa:	83 ec 0c             	sub    $0xc,%esp
c010ddad:	68 40 30 11 c0       	push   $0xc0113040
c010ddb2:	68 e0 00 00 00       	push   $0xe0
c010ddb7:	68 62 2d 11 c0       	push   $0xc0112d62
c010ddbc:	68 ed 2e 11 c0       	push   $0xc0112eed
c010ddc1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ddc6:	e8 9d 64 ff ff       	call   c0104268 <print>
c010ddcb:	83 c4 20             	add    $0x20,%esp
c010ddce:	e8 b0 31 ff ff       	call   c0100f83 <backtrace>
c010ddd3:	fa                   	cli    
c010ddd4:	f4                   	hlt    
           fakethreads[1]);
    assert(fakethreads[1]->listnode.tln_prev->tln_self ==
c010ddd5:	a1 84 d0 14 c0       	mov    0xc014d084,%eax
c010ddda:	8b 40 04             	mov    0x4(%eax),%eax
c010dddd:	8b 0d 80 d0 14 c0    	mov    0xc014d080,%ecx
c010dde3:	39 48 08             	cmp    %ecx,0x8(%eax)
c010dde6:	74 2b                	je     c010de13 <threadlisttest+0x913>
c010dde8:	83 ec 0c             	sub    $0xc,%esp
c010ddeb:	68 40 30 11 c0       	push   $0xc0113040
c010ddf0:	68 e2 00 00 00       	push   $0xe2
c010ddf5:	68 62 2d 11 c0       	push   $0xc0112d62
c010ddfa:	68 2b 2f 11 c0       	push   $0xc0112f2b
c010ddff:	68 2b ff 10 c0       	push   $0xc010ff2b
c010de04:	e8 5f 64 ff ff       	call   c0104268 <print>
c010de09:	83 c4 20             	add    $0x20,%esp
c010de0c:	e8 72 31 ff ff       	call   c0100f83 <backtrace>
c010de11:	fa                   	cli    
c010de12:	f4                   	hlt    
    unsigned i;

    (void)nargs;
    (void)args;

    print("Testing threadlists...\n");
c010de13:	31 f6                	xor    %esi,%esi
           fakethreads[1]);
    assert(fakethreads[1]->listnode.tln_prev->tln_self ==
           fakethreads[0]);

    for (i = 0; i < 5; i++) {
        t = threadlist_remhead(&tl);
c010de15:	8d 5d cc             	lea    -0x34(%ebp),%ebx
c010de18:	83 ec 0c             	sub    $0xc,%esp
c010de1b:	53                   	push   %ebx
c010de1c:	e8 67 b4 ff ff       	call   c0109288 <threadlist_remhead>
        assert(t == fakethreads[i]);
c010de21:	83 c4 10             	add    $0x10,%esp
c010de24:	3b 86 80 d0 14 c0    	cmp    -0x3feb2f80(%esi),%eax
c010de2a:	74 2b                	je     c010de57 <threadlisttest+0x957>
c010de2c:	83 ec 0c             	sub    $0xc,%esp
c010de2f:	68 40 30 11 c0       	push   $0xc0113040
c010de34:	68 e6 00 00 00       	push   $0xe6
c010de39:	68 62 2d 11 c0       	push   $0xc0112d62
c010de3e:	68 69 2f 11 c0       	push   $0xc0112f69
c010de43:	68 2b ff 10 c0       	push   $0xc010ff2b
c010de48:	e8 1b 64 ff ff       	call   c0104268 <print>
c010de4d:	83 c4 20             	add    $0x20,%esp
c010de50:	e8 2e 31 ff ff       	call   c0100f83 <backtrace>
c010de55:	fa                   	cli    
c010de56:	f4                   	hlt    
c010de57:	83 c6 04             	add    $0x4,%esi
    assert(fakethreads[2]->listnode.tln_prev->tln_self ==
           fakethreads[1]);
    assert(fakethreads[1]->listnode.tln_prev->tln_self ==
           fakethreads[0]);

    for (i = 0; i < 5; i++) {
c010de5a:	83 fe 14             	cmp    $0x14,%esi
c010de5d:	75 b9                	jne    c010de18 <threadlisttest+0x918>
        t = threadlist_remhead(&tl);
        assert(t == fakethreads[i]);
    }
    assert(tl.tl_count == 0);
c010de5f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010de63:	74 2b                	je     c010de90 <threadlisttest+0x990>
c010de65:	83 ec 0c             	sub    $0xc,%esp
c010de68:	68 40 30 11 c0       	push   $0xc0113040
c010de6d:	68 e8 00 00 00       	push   $0xe8
c010de72:	68 62 2d 11 c0       	push   $0xc0112d62
c010de77:	68 f4 2d 11 c0       	push   $0xc0112df4
c010de7c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010de81:	e8 e2 63 ff ff       	call   c0104268 <print>
c010de86:	83 c4 20             	add    $0x20,%esp
c010de89:	e8 f5 30 ff ff       	call   c0100f83 <backtrace>
c010de8e:	fa                   	cli    
c010de8f:	f4                   	hlt    

    threadlist_cleanup(&tl);
c010de90:	83 ec 0c             	sub    $0xc,%esp
c010de93:	53                   	push   %ebx
c010de94:	e8 49 b1 ff ff       	call   c0108fe2 <threadlist_cleanup>
threadlisttest_f(void) {
    struct threadlist tl;
    struct thread* t;
    unsigned i;

    threadlist_init(&tl);
c010de99:	89 1c 24             	mov    %ebx,(%esp)
c010de9c:	e8 9d b0 ff ff       	call   c0108f3e <threadlist_init>
c010dea1:	83 c4 10             	add    $0x10,%esp
c010dea4:	31 f6                	xor    %esi,%esi

    for (i = 0; i < NUMNAMES; i++)
        threadlist_addtail(&tl, fakethreads[i]);
c010dea6:	52                   	push   %edx
c010dea7:	52                   	push   %edx
c010dea8:	ff b6 80 d0 14 c0    	pushl  -0x3feb2f80(%esi)
c010deae:	53                   	push   %ebx
c010deaf:	e8 57 b3 ff ff       	call   c010920b <threadlist_addtail>
c010deb4:	83 c6 04             	add    $0x4,%esi
    struct thread* t;
    unsigned i;

    threadlist_init(&tl);

    for (i = 0; i < NUMNAMES; i++)
c010deb7:	83 c4 10             	add    $0x10,%esp
c010deba:	83 fe 1c             	cmp    $0x1c,%esi
c010debd:	75 e7                	jne    c010dea6 <threadlisttest+0x9a6>
        threadlist_addtail(&tl, fakethreads[i]);
    assert(tl.tl_count == NUMNAMES);
c010debf:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
c010dec3:	74 2b                	je     c010def0 <threadlisttest+0x9f0>
c010dec5:	83 ec 0c             	sub    $0xc,%esp
c010dec8:	68 2c 30 11 c0       	push   $0xc011302c
c010decd:	68 f8 00 00 00       	push   $0xf8
c010ded2:	68 62 2d 11 c0       	push   $0xc0112d62
c010ded7:	68 7d 2f 11 c0       	push   $0xc0112f7d
c010dedc:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dee1:	e8 82 63 ff ff       	call   c0104268 <print>
c010dee6:	83 c4 20             	add    $0x20,%esp
c010dee9:	e8 95 30 ff ff       	call   c0100f83 <backtrace>
c010deee:	fa                   	cli    
c010deef:	f4                   	hlt    

    i = 0;
    THREADLIST_FORALL(t, tl) {
c010def0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010def3:	8b 78 08             	mov    0x8(%eax),%edi

    for (i = 0; i < NUMNAMES; i++)
        threadlist_addtail(&tl, fakethreads[i]);
    assert(tl.tl_count == NUMNAMES);

    i = 0;
c010def6:	31 f6                	xor    %esi,%esi
    THREADLIST_FORALL(t, tl) {
c010def8:	85 ff                	test   %edi,%edi
c010defa:	74 3d                	je     c010df39 <threadlisttest+0xa39>
        assert(t == fakethreads[i]);
c010defc:	39 3c b5 80 d0 14 c0 	cmp    %edi,-0x3feb2f80(,%esi,4)
c010df03:	74 2b                	je     c010df30 <threadlisttest+0xa30>
c010df05:	83 ec 0c             	sub    $0xc,%esp
c010df08:	68 2c 30 11 c0       	push   $0xc011302c
c010df0d:	68 fc 00 00 00       	push   $0xfc
c010df12:	68 62 2d 11 c0       	push   $0xc0112d62
c010df17:	68 69 2f 11 c0       	push   $0xc0112f69
c010df1c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010df21:	e8 42 63 ff ff       	call   c0104268 <print>
c010df26:	83 c4 20             	add    $0x20,%esp
c010df29:	e8 55 30 ff ff       	call   c0100f83 <backtrace>
c010df2e:	fa                   	cli    
c010df2f:	f4                   	hlt    
        i++;
c010df30:	46                   	inc    %esi
    for (i = 0; i < NUMNAMES; i++)
        threadlist_addtail(&tl, fakethreads[i]);
    assert(tl.tl_count == NUMNAMES);

    i = 0;
    THREADLIST_FORALL(t, tl) {
c010df31:	8b 47 08             	mov    0x8(%edi),%eax
c010df34:	8b 78 08             	mov    0x8(%eax),%edi
c010df37:	eb bf                	jmp    c010def8 <threadlisttest+0x9f8>
        assert(t == fakethreads[i]);
        i++;
    }
    assert(i == NUMNAMES);
c010df39:	83 fe 07             	cmp    $0x7,%esi
c010df3c:	74 2b                	je     c010df69 <threadlisttest+0xa69>
c010df3e:	83 ec 0c             	sub    $0xc,%esp
c010df41:	68 2c 30 11 c0       	push   $0xc011302c
c010df46:	68 ff 00 00 00       	push   $0xff
c010df4b:	68 62 2d 11 c0       	push   $0xc0112d62
c010df50:	68 95 2f 11 c0       	push   $0xc0112f95
c010df55:	68 2b ff 10 c0       	push   $0xc010ff2b
c010df5a:	e8 09 63 ff ff       	call   c0104268 <print>
c010df5f:	83 c4 20             	add    $0x20,%esp
c010df62:	e8 1c 30 ff ff       	call   c0100f83 <backtrace>
c010df67:	fa                   	cli    
c010df68:	f4                   	hlt    

    i = 0;
    THREADLIST_FORALL_REV(t, tl) {
c010df69:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010df6c:	8b 70 08             	mov    0x8(%eax),%esi
c010df6f:	b8 80 d0 14 c0       	mov    $0xc014d080,%eax
        assert(t == fakethreads[i]);
        i++;
    }
    assert(i == NUMNAMES);

    i = 0;
c010df74:	31 ff                	xor    %edi,%edi
    THREADLIST_FORALL_REV(t, tl) {
c010df76:	85 f6                	test   %esi,%esi
c010df78:	74 42                	je     c010dfbc <threadlisttest+0xabc>
        assert(t == fakethreads[NUMNAMES - i - 1]);
c010df7a:	39 70 18             	cmp    %esi,0x18(%eax)
c010df7d:	74 31                	je     c010dfb0 <threadlisttest+0xab0>
c010df7f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010df82:	83 ec 0c             	sub    $0xc,%esp
c010df85:	68 2c 30 11 c0       	push   $0xc011302c
c010df8a:	68 03 01 00 00       	push   $0x103
c010df8f:	68 62 2d 11 c0       	push   $0xc0112d62
c010df94:	68 a3 2f 11 c0       	push   $0xc0112fa3
c010df99:	68 2b ff 10 c0       	push   $0xc010ff2b
c010df9e:	e8 c5 62 ff ff       	call   c0104268 <print>
c010dfa3:	83 c4 20             	add    $0x20,%esp
c010dfa6:	e8 d8 2f ff ff       	call   c0100f83 <backtrace>
c010dfab:	fa                   	cli    
c010dfac:	f4                   	hlt    
c010dfad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
        i++;
c010dfb0:	47                   	inc    %edi
        i++;
    }
    assert(i == NUMNAMES);

    i = 0;
    THREADLIST_FORALL_REV(t, tl) {
c010dfb1:	8b 56 04             	mov    0x4(%esi),%edx
c010dfb4:	8b 72 08             	mov    0x8(%edx),%esi
c010dfb7:	83 e8 04             	sub    $0x4,%eax
c010dfba:	eb ba                	jmp    c010df76 <threadlisttest+0xa76>
        assert(t == fakethreads[NUMNAMES - i - 1]);
        i++;
    }
    assert(i == NUMNAMES);
c010dfbc:	83 ff 07             	cmp    $0x7,%edi
c010dfbf:	74 2b                	je     c010dfec <threadlisttest+0xaec>
c010dfc1:	83 ec 0c             	sub    $0xc,%esp
c010dfc4:	68 2c 30 11 c0       	push   $0xc011302c
c010dfc9:	68 06 01 00 00       	push   $0x106
c010dfce:	68 62 2d 11 c0       	push   $0xc0112d62
c010dfd3:	68 95 2f 11 c0       	push   $0xc0112f95
c010dfd8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010dfdd:	e8 86 62 ff ff       	call   c0104268 <print>
c010dfe2:	83 c4 20             	add    $0x20,%esp
c010dfe5:	e8 99 2f ff ff       	call   c0100f83 <backtrace>
c010dfea:	fa                   	cli    
c010dfeb:	f4                   	hlt    
        assert(t == fakethreads[i]);
        i++;
    }
    assert(i == NUMNAMES);

    i = 0;
c010dfec:	31 f6                	xor    %esi,%esi
        i++;
    }
    assert(i == NUMNAMES);

    for (i = 0; i < NUMNAMES; i++) {
        t = threadlist_remhead(&tl);
c010dfee:	83 ec 0c             	sub    $0xc,%esp
c010dff1:	53                   	push   %ebx
c010dff2:	e8 91 b2 ff ff       	call   c0109288 <threadlist_remhead>
        assert(t == fakethreads[i]);
c010dff7:	83 c4 10             	add    $0x10,%esp
c010dffa:	3b 86 80 d0 14 c0    	cmp    -0x3feb2f80(%esi),%eax
c010e000:	74 2b                	je     c010e02d <threadlisttest+0xb2d>
c010e002:	83 ec 0c             	sub    $0xc,%esp
c010e005:	68 2c 30 11 c0       	push   $0xc011302c
c010e00a:	68 0a 01 00 00       	push   $0x10a
c010e00f:	68 62 2d 11 c0       	push   $0xc0112d62
c010e014:	68 69 2f 11 c0       	push   $0xc0112f69
c010e019:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e01e:	e8 45 62 ff ff       	call   c0104268 <print>
c010e023:	83 c4 20             	add    $0x20,%esp
c010e026:	e8 58 2f ff ff       	call   c0100f83 <backtrace>
c010e02b:	fa                   	cli    
c010e02c:	f4                   	hlt    
c010e02d:	83 c6 04             	add    $0x4,%esi
        assert(t == fakethreads[NUMNAMES - i - 1]);
        i++;
    }
    assert(i == NUMNAMES);

    for (i = 0; i < NUMNAMES; i++) {
c010e030:	83 fe 1c             	cmp    $0x1c,%esi
c010e033:	75 b9                	jne    c010dfee <threadlisttest+0xaee>
        t = threadlist_remhead(&tl);
        assert(t == fakethreads[i]);
    }
    assert(tl.tl_count == 0);
c010e035:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e039:	74 2b                	je     c010e066 <threadlisttest+0xb66>
c010e03b:	83 ec 0c             	sub    $0xc,%esp
c010e03e:	68 2c 30 11 c0       	push   $0xc011302c
c010e043:	68 0c 01 00 00       	push   $0x10c
c010e048:	68 62 2d 11 c0       	push   $0xc0112d62
c010e04d:	68 f4 2d 11 c0       	push   $0xc0112df4
c010e052:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e057:	e8 0c 62 ff ff       	call   c0104268 <print>
c010e05c:	83 c4 20             	add    $0x20,%esp
c010e05f:	e8 1f 2f ff ff       	call   c0100f83 <backtrace>
c010e064:	fa                   	cli    
c010e065:	f4                   	hlt    
c010e066:	31 db                	xor    %ebx,%ebx
    threadlisttest_d();
    threadlisttest_e();
    threadlisttest_f();

    for (i = 0; i < NUMNAMES; i++) {
        fakethread_destroy(fakethreads[i]);
c010e068:	8b b3 80 d0 14 c0    	mov    -0x3feb2f80(%ebx),%esi
 * Destroy a fake thread.
 */
static
void
fakethread_destroy(struct thread* t) {
    assert(t->stack == FAKE_MAGIC);
c010e06e:	81 7e 24 aa ab ba 00 	cmpl   $0xbaabaa,0x24(%esi)
c010e075:	74 28                	je     c010e09f <threadlisttest+0xb9f>
c010e077:	83 ec 0c             	sub    $0xc,%esp
c010e07a:	68 18 30 11 c0       	push   $0xc0113018
c010e07f:	6a 34                	push   $0x34
c010e081:	68 62 2d 11 c0       	push   $0xc0112d62
c010e086:	68 c6 2f 11 c0       	push   $0xc0112fc6
c010e08b:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e090:	e8 d3 61 ff ff       	call   c0104268 <print>
c010e095:	83 c4 20             	add    $0x20,%esp
c010e098:	e8 e6 2e ff ff       	call   c0100f83 <backtrace>
c010e09d:	fa                   	cli    
c010e09e:	f4                   	hlt    
    threadlistnode_cleanup(&t->listnode);
c010e09f:	83 ec 0c             	sub    $0xc,%esp
c010e0a2:	8d 46 04             	lea    0x4(%esi),%eax
c010e0a5:	50                   	push   %eax
c010e0a6:	e8 d1 ad ff ff       	call   c0108e7c <threadlistnode_cleanup>
    kfree(t->name);
c010e0ab:	58                   	pop    %eax
c010e0ac:	ff 76 10             	pushl  0x10(%esi)
c010e0af:	e8 b8 3d ff ff       	call   c0101e6c <kfree>
    kfree(t);
c010e0b4:	89 34 24             	mov    %esi,(%esp)
c010e0b7:	e8 b0 3d ff ff       	call   c0101e6c <kfree>
    threadlisttest_e();
    threadlisttest_f();

    for (i = 0; i < NUMNAMES; i++) {
        fakethread_destroy(fakethreads[i]);
        fakethreads[i] = NULL;
c010e0bc:	c7 83 80 d0 14 c0 00 	movl   $0x0,-0x3feb2f80(%ebx)
c010e0c3:	00 00 00 
c010e0c6:	83 c3 04             	add    $0x4,%ebx
    threadlisttest_c();
    threadlisttest_d();
    threadlisttest_e();
    threadlisttest_f();

    for (i = 0; i < NUMNAMES; i++) {
c010e0c9:	83 c4 10             	add    $0x10,%esp
c010e0cc:	83 fb 1c             	cmp    $0x1c,%ebx
c010e0cf:	75 97                	jne    c010e068 <threadlisttest+0xb68>
        fakethread_destroy(fakethreads[i]);
        fakethreads[i] = NULL;
    }

    print("Done.\n");
c010e0d1:	83 ec 0c             	sub    $0xc,%esp
c010e0d4:	68 dd 2f 11 c0       	push   $0xc0112fdd
c010e0d9:	e8 8a 61 ff ff       	call   c0104268 <print>
    return 0;
}
c010e0de:	31 c0                	xor    %eax,%eax
c010e0e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e0e3:	5b                   	pop    %ebx
c010e0e4:	5e                   	pop    %esi
c010e0e5:	5f                   	pop    %edi
c010e0e6:	5d                   	pop    %ebp
c010e0e7:	c3                   	ret    

c010e0e8 <runthreads>:
    return 0;
}

static
void
runthreads(int testnum) {
c010e0e8:	55                   	push   %ebp
c010e0e9:	89 e5                	mov    %esp,%ebp
c010e0eb:	57                   	push   %edi
c010e0ec:	56                   	push   %esi
c010e0ed:	53                   	push   %ebx
c010e0ee:	83 ec 1c             	sub    $0x1c,%esp
c010e0f1:	89 c6                	mov    %eax,%esi
    char name[16];
    int i, result;

    for (i = 0; i < NTHREADS; i++) {
c010e0f3:	31 db                	xor    %ebx,%ebx
        snprintf(name, sizeof(name), "threadtest%d", i);
c010e0f5:	8d 7d d8             	lea    -0x28(%ebp),%edi
c010e0f8:	53                   	push   %ebx
c010e0f9:	68 e0 30 11 c0       	push   $0xc01130e0
c010e0fe:	6a 10                	push   $0x10
c010e100:	57                   	push   %edi
c010e101:	e8 5f 66 ff ff       	call   c0104765 <snprintf>
        result = thread_fork(name, NULL, NULL,
c010e106:	83 c4 10             	add    $0x10,%esp
c010e109:	b8 76 e1 10 c0       	mov    $0xc010e176,%eax
c010e10e:	85 f6                	test   %esi,%esi
c010e110:	74 0f                	je     c010e121 <runthreads+0x39>
                testnum == 0 ? quietthread
                : testnum == 1 ? mixthread : loudthread, NULL, i);
c010e112:	b8 c5 e1 10 c0       	mov    $0xc010e1c5,%eax
c010e117:	83 fe 01             	cmp    $0x1,%esi
c010e11a:	74 05                	je     c010e121 <runthreads+0x39>
c010e11c:	b8 90 e3 10 c0       	mov    $0xc010e390,%eax
    char name[16];
    int i, result;

    for (i = 0; i < NTHREADS; i++) {
        snprintf(name, sizeof(name), "threadtest%d", i);
        result = thread_fork(name, NULL, NULL,
c010e121:	52                   	push   %edx
c010e122:	52                   	push   %edx
c010e123:	53                   	push   %ebx
c010e124:	6a 00                	push   $0x0
c010e126:	50                   	push   %eax
c010e127:	6a 00                	push   $0x0
c010e129:	6a 00                	push   $0x0
c010e12b:	57                   	push   %edi
c010e12c:	e8 45 a3 ff ff       	call   c0108476 <thread_fork>
                testnum == 0 ? quietthread
                : testnum == 1 ? mixthread : loudthread, NULL, i);
        if (result)
c010e131:	83 c4 20             	add    $0x20,%esp
c010e134:	85 c0                	test   %eax,%eax
c010e136:	74 1c                	je     c010e154 <runthreads+0x6c>
            panic("threadtest: thread_fork failed)\n");
c010e138:	68 ed 30 11 c0       	push   $0xc01130ed
c010e13d:	68 04 32 11 c0       	push   $0xc0113204
c010e142:	68 85 00 00 00       	push   $0x85
c010e147:	68 0e 31 11 c0       	push   $0xc011310e
c010e14c:	e8 24 5b ff ff       	call   c0103c75 <_panic>
c010e151:	83 c4 10             	add    $0x10,%esp
void
runthreads(int testnum) {
    char name[16];
    int i, result;

    for (i = 0; i < NTHREADS; i++) {
c010e154:	43                   	inc    %ebx
c010e155:	83 fb 20             	cmp    $0x20,%ebx
c010e158:	75 9e                	jne    c010e0f8 <runthreads+0x10>
        if (result)
            panic("threadtest: thread_fork failed)\n");
    }

    for (i = 0; i < NTHREADS; i++)
        P(tsem);
c010e15a:	83 ec 0c             	sub    $0xc,%esp
c010e15d:	ff 35 9c d0 14 c0    	pushl  0xc014d09c
c010e163:	e8 bc 52 ff ff       	call   c0103424 <P>
                : testnum == 1 ? mixthread : loudthread, NULL, i);
        if (result)
            panic("threadtest: thread_fork failed)\n");
    }

    for (i = 0; i < NTHREADS; i++)
c010e168:	83 c4 10             	add    $0x10,%esp
c010e16b:	4b                   	dec    %ebx
c010e16c:	75 ec                	jne    c010e15a <runthreads+0x72>
        P(tsem);
}
c010e16e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e171:	5b                   	pop    %ebx
c010e172:	5e                   	pop    %esi
c010e173:	5f                   	pop    %edi
c010e174:	5d                   	pop    %ebp
c010e175:	c3                   	ret    

c010e176 <quietthread>:
 * The delay loop is supposed to be long enough that it should be clear
 * if either timeslicing or the scheduler is not working right.
 */
static
int
quietthread(void* junk, unsigned long num) {
c010e176:	55                   	push   %ebp
c010e177:	89 e5                	mov    %esp,%ebp
c010e179:	53                   	push   %ebx
c010e17a:	83 ec 20             	sub    $0x20,%esp
    int ch = '0' + num;
    volatile int i;

    (void)junk;

    putc(ch);
c010e17d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e180:	8d 58 30             	lea    0x30(%eax),%ebx
c010e183:	0f be db             	movsbl %bl,%ebx
c010e186:	53                   	push   %ebx
c010e187:	e8 00 c7 ff ff       	call   c010a88c <putc>
    for (i = 0; i < 2000000; i++);
c010e18c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e193:	83 c4 10             	add    $0x10,%esp
c010e196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e199:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e19e:	7f 09                	jg     c010e1a9 <quietthread+0x33>
c010e1a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1a3:	40                   	inc    %eax
c010e1a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e1a7:	eb ed                	jmp    c010e196 <quietthread+0x20>
    putc(ch);
c010e1a9:	83 ec 0c             	sub    $0xc,%esp
c010e1ac:	53                   	push   %ebx
c010e1ad:	e8 da c6 ff ff       	call   c010a88c <putc>

    V(tsem);
c010e1b2:	58                   	pop    %eax
c010e1b3:	ff 35 9c d0 14 c0    	pushl  0xc014d09c
c010e1b9:	e8 3e 53 ff ff       	call   c01034fc <V>
    return 0;
}
c010e1be:	31 c0                	xor    %eax,%eax
c010e1c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010e1c3:	c9                   	leave  
c010e1c4:	c3                   	ret    

c010e1c5 <mixthread>:

static
int
mixthread(void* junk, unsigned long num) {
c010e1c5:	55                   	push   %ebp
c010e1c6:	89 e5                	mov    %esp,%ebp
c010e1c8:	56                   	push   %esi
c010e1c9:	53                   	push   %ebx
c010e1ca:	83 ec 1c             	sub    $0x1c,%esp
c010e1cd:	8b 75 0c             	mov    0xc(%ebp),%esi
    int ch = '0' + num;
    volatile int i;

    (void)junk;

    putc(ch);
c010e1d0:	8d 5e 30             	lea    0x30(%esi),%ebx
c010e1d3:	0f be db             	movsbl %bl,%ebx
c010e1d6:	53                   	push   %ebx
c010e1d7:	e8 b0 c6 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e1dc:	83 c4 10             	add    $0x10,%esp
c010e1df:	83 fe 1f             	cmp    $0x1f,%esi
c010e1e2:	75 0d                	jne    c010e1f1 <mixthread+0x2c>
        putc('\n');
c010e1e4:	83 ec 0c             	sub    $0xc,%esp
c010e1e7:	6a 0a                	push   $0xa
c010e1e9:	e8 9e c6 ff ff       	call   c010a88c <putc>
c010e1ee:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2500000; i++);
c010e1f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e1f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1fb:	3d 9f 25 26 00       	cmp    $0x26259f,%eax
c010e200:	7f 09                	jg     c010e20b <mixthread+0x46>
c010e202:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e205:	40                   	inc    %eax
c010e206:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e209:	eb ed                	jmp    c010e1f8 <mixthread+0x33>
    putc(ch);
c010e20b:	83 ec 0c             	sub    $0xc,%esp
c010e20e:	53                   	push   %ebx
c010e20f:	e8 78 c6 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e214:	83 c4 10             	add    $0x10,%esp
c010e217:	83 fe 1f             	cmp    $0x1f,%esi
c010e21a:	75 0d                	jne    c010e229 <mixthread+0x64>
        putc('\n');
c010e21c:	83 ec 0c             	sub    $0xc,%esp
c010e21f:	6a 0a                	push   $0xa
c010e221:	e8 66 c6 ff ff       	call   c010a88c <putc>
c010e226:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e229:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e230:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e233:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e238:	7f 09                	jg     c010e243 <mixthread+0x7e>
c010e23a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e23d:	40                   	inc    %eax
c010e23e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e241:	eb ed                	jmp    c010e230 <mixthread+0x6b>
    putc(ch);
c010e243:	83 ec 0c             	sub    $0xc,%esp
c010e246:	53                   	push   %ebx
c010e247:	e8 40 c6 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e24c:	83 c4 10             	add    $0x10,%esp
c010e24f:	83 fe 1f             	cmp    $0x1f,%esi
c010e252:	75 0d                	jne    c010e261 <mixthread+0x9c>
        putc('\n');
c010e254:	83 ec 0c             	sub    $0xc,%esp
c010e257:	6a 0a                	push   $0xa
c010e259:	e8 2e c6 ff ff       	call   c010a88c <putc>
c010e25e:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e261:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e268:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e26b:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e270:	7f 09                	jg     c010e27b <mixthread+0xb6>
c010e272:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e275:	40                   	inc    %eax
c010e276:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e279:	eb ed                	jmp    c010e268 <mixthread+0xa3>
    putc(ch);
c010e27b:	83 ec 0c             	sub    $0xc,%esp
c010e27e:	53                   	push   %ebx
c010e27f:	e8 08 c6 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e284:	83 c4 10             	add    $0x10,%esp
c010e287:	83 fe 1f             	cmp    $0x1f,%esi
c010e28a:	75 0d                	jne    c010e299 <mixthread+0xd4>
        putc('\n');
c010e28c:	83 ec 0c             	sub    $0xc,%esp
c010e28f:	6a 0a                	push   $0xa
c010e291:	e8 f6 c5 ff ff       	call   c010a88c <putc>
c010e296:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e299:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e2a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2a3:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e2a8:	7f 09                	jg     c010e2b3 <mixthread+0xee>
c010e2aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2ad:	40                   	inc    %eax
c010e2ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e2b1:	eb ed                	jmp    c010e2a0 <mixthread+0xdb>
    putc(ch);
c010e2b3:	83 ec 0c             	sub    $0xc,%esp
c010e2b6:	53                   	push   %ebx
c010e2b7:	e8 d0 c5 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e2bc:	83 c4 10             	add    $0x10,%esp
c010e2bf:	83 fe 1f             	cmp    $0x1f,%esi
c010e2c2:	75 0d                	jne    c010e2d1 <mixthread+0x10c>
        putc('\n');
c010e2c4:	83 ec 0c             	sub    $0xc,%esp
c010e2c7:	6a 0a                	push   $0xa
c010e2c9:	e8 be c5 ff ff       	call   c010a88c <putc>
c010e2ce:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e2d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e2d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2db:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e2e0:	7f 09                	jg     c010e2eb <mixthread+0x126>
c010e2e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2e5:	40                   	inc    %eax
c010e2e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e2e9:	eb ed                	jmp    c010e2d8 <mixthread+0x113>
    putc(ch);
c010e2eb:	83 ec 0c             	sub    $0xc,%esp
c010e2ee:	53                   	push   %ebx
c010e2ef:	e8 98 c5 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e2f4:	83 c4 10             	add    $0x10,%esp
c010e2f7:	83 fe 1f             	cmp    $0x1f,%esi
c010e2fa:	75 0d                	jne    c010e309 <mixthread+0x144>
        putc('\n');
c010e2fc:	83 ec 0c             	sub    $0xc,%esp
c010e2ff:	6a 0a                	push   $0xa
c010e301:	e8 86 c5 ff ff       	call   c010a88c <putc>
c010e306:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e309:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e310:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e313:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e318:	7f 09                	jg     c010e323 <mixthread+0x15e>
c010e31a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e31d:	40                   	inc    %eax
c010e31e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e321:	eb ed                	jmp    c010e310 <mixthread+0x14b>
    putc(ch);
c010e323:	83 ec 0c             	sub    $0xc,%esp
c010e326:	53                   	push   %ebx
c010e327:	e8 60 c5 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e32c:	83 c4 10             	add    $0x10,%esp
c010e32f:	83 fe 1f             	cmp    $0x1f,%esi
c010e332:	75 0d                	jne    c010e341 <mixthread+0x17c>
        putc('\n');
c010e334:	83 ec 0c             	sub    $0xc,%esp
c010e337:	6a 0a                	push   $0xa
c010e339:	e8 4e c5 ff ff       	call   c010a88c <putc>
c010e33e:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2000000; i++);
c010e341:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e34b:	3d 7f 84 1e 00       	cmp    $0x1e847f,%eax
c010e350:	7f 09                	jg     c010e35b <mixthread+0x196>
c010e352:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e355:	40                   	inc    %eax
c010e356:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e359:	eb ed                	jmp    c010e348 <mixthread+0x183>
    putc(ch);
c010e35b:	83 ec 0c             	sub    $0xc,%esp
c010e35e:	53                   	push   %ebx
c010e35f:	e8 28 c5 ff ff       	call   c010a88c <putc>
    if (num == NTHREADS - 1)
c010e364:	83 c4 10             	add    $0x10,%esp
c010e367:	83 fe 1f             	cmp    $0x1f,%esi
c010e36a:	75 0d                	jne    c010e379 <mixthread+0x1b4>
        putc('\n');
c010e36c:	83 ec 0c             	sub    $0xc,%esp
c010e36f:	6a 0a                	push   $0xa
c010e371:	e8 16 c5 ff ff       	call   c010a88c <putc>
c010e376:	83 c4 10             	add    $0x10,%esp



    V(tsem);
c010e379:	83 ec 0c             	sub    $0xc,%esp
c010e37c:	ff 35 9c d0 14 c0    	pushl  0xc014d09c
c010e382:	e8 75 51 ff ff       	call   c01034fc <V>
    return 0;
}
c010e387:	31 c0                	xor    %eax,%eax
c010e389:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010e38c:	5b                   	pop    %ebx
c010e38d:	5e                   	pop    %esi
c010e38e:	5d                   	pop    %ebp
c010e38f:	c3                   	ret    

c010e390 <loudthread>:
    tsem = NULL;
}

static
int
loudthread(void* junk, unsigned long num) {
c010e390:	55                   	push   %ebp
c010e391:	89 e5                	mov    %esp,%ebp
c010e393:	57                   	push   %edi
c010e394:	56                   	push   %esi
c010e395:	53                   	push   %ebx
c010e396:	83 ec 1c             	sub    $0x1c,%esp
c010e399:	8b 45 0c             	mov    0xc(%ebp),%eax
    int ch = '0' + num;
c010e39c:	8d 50 30             	lea    0x30(%eax),%edx
c010e39f:	bb 28 00 00 00       	mov    $0x28,%ebx
    int i;

    (void)junk;

    for (i = 0; i < 40; i++) {
        putc(ch);
c010e3a4:	0f be ca             	movsbl %dl,%ecx
c010e3a7:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        for (int j = 0; j < 1000000; ++j);
        if ((random() % NTHREADS) % 5 == 0)
            thread_yield();
        for (int j = 0; j < 1000000; ++j);
        if (random() % (num + 1) % 5 == 0)
c010e3aa:	40                   	inc    %eax
c010e3ab:	89 c6                	mov    %eax,%esi
c010e3ad:	31 ff                	xor    %edi,%edi
    int i;

    (void)junk;

    for (i = 0; i < 40; i++) {
        putc(ch);
c010e3af:	83 ec 0c             	sub    $0xc,%esp
c010e3b2:	ff 75 dc             	pushl  -0x24(%ebp)
c010e3b5:	e8 d2 c4 ff ff       	call   c010a88c <putc>
        for (int j = 0; j < 1000000; ++j);
        if ((random() % NTHREADS) % 5 == 0)
c010e3ba:	e8 51 67 ff ff       	call   c0104b10 <random>
c010e3bf:	83 e0 1f             	and    $0x1f,%eax
c010e3c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e3c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010e3cc:	6a 00                	push   $0x0
c010e3ce:	6a 05                	push   $0x5
c010e3d0:	ff 75 e4             	pushl  -0x1c(%ebp)
c010e3d3:	ff 75 e0             	pushl  -0x20(%ebp)
c010e3d6:	e8 ad 19 00 00       	call   c010fd88 <__umoddi3>
c010e3db:	83 c4 20             	add    $0x20,%esp
c010e3de:	09 c2                	or     %eax,%edx
c010e3e0:	75 05                	jne    c010e3e7 <loudthread+0x57>
            thread_yield();
c010e3e2:	e8 a6 26 ff ff       	call   c0100a8d <thread_yield>
        for (int j = 0; j < 1000000; ++j);
        if (random() % (num + 1) % 5 == 0)
c010e3e7:	e8 24 67 ff ff       	call   c0104b10 <random>
c010e3ec:	57                   	push   %edi
c010e3ed:	56                   	push   %esi
c010e3ee:	52                   	push   %edx
c010e3ef:	50                   	push   %eax
c010e3f0:	e8 93 19 00 00       	call   c010fd88 <__umoddi3>
c010e3f5:	83 c4 10             	add    $0x10,%esp
c010e3f8:	6a 00                	push   $0x0
c010e3fa:	6a 05                	push   $0x5
c010e3fc:	52                   	push   %edx
c010e3fd:	50                   	push   %eax
c010e3fe:	e8 85 19 00 00       	call   c010fd88 <__umoddi3>
c010e403:	83 c4 10             	add    $0x10,%esp
c010e406:	09 c2                	or     %eax,%edx
c010e408:	75 05                	jne    c010e40f <loudthread+0x7f>
            thread_yield();
c010e40a:	e8 7e 26 ff ff       	call   c0100a8d <thread_yield>
    int ch = '0' + num;
    int i;

    (void)junk;

    for (i = 0; i < 40; i++) {
c010e40f:	4b                   	dec    %ebx
c010e410:	75 9d                	jne    c010e3af <loudthread+0x1f>
            thread_yield();
        for (int j = 0; j < 1000000; ++j);
        if (random() % (num + 1) % 5 == 0)
            thread_yield();
    }
    V(tsem);
c010e412:	83 ec 0c             	sub    $0xc,%esp
c010e415:	ff 35 9c d0 14 c0    	pushl  0xc014d09c
c010e41b:	e8 dc 50 ff ff       	call   c01034fc <V>
    return 0;
}
c010e420:	31 c0                	xor    %eax,%eax
c010e422:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e425:	5b                   	pop    %ebx
c010e426:	5e                   	pop    %esi
c010e427:	5f                   	pop    %edi
c010e428:	5d                   	pop    %ebp
c010e429:	c3                   	ret    

c010e42a <term_sem>:
        panic("threadtest: semaphore_create failed\n");
}

static
void
term_sem(void) {
c010e42a:	55                   	push   %ebp
c010e42b:	89 e5                	mov    %esp,%ebp
c010e42d:	83 ec 08             	sub    $0x8,%esp
    assert(tsem != NULL);
c010e430:	83 3d 9c d0 14 c0 00 	cmpl   $0x0,0xc014d09c
c010e437:	75 28                	jne    c010e461 <term_sem+0x37>
c010e439:	83 ec 0c             	sub    $0xc,%esp
c010e43c:	68 f8 31 11 c0       	push   $0xc01131f8
c010e441:	6a 17                	push   $0x17
c010e443:	68 0e 31 11 c0       	push   $0xc011310e
c010e448:	68 20 31 11 c0       	push   $0xc0113120
c010e44d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e452:	e8 11 5e ff ff       	call   c0104268 <print>
c010e457:	83 c4 20             	add    $0x20,%esp
c010e45a:	e8 24 2b ff ff       	call   c0100f83 <backtrace>
c010e45f:	fa                   	cli    
c010e460:	f4                   	hlt    
    semaphore_destroy(tsem);
c010e461:	83 ec 0c             	sub    $0xc,%esp
c010e464:	ff 35 9c d0 14 c0    	pushl  0xc014d09c
c010e46a:	e8 55 4f ff ff       	call   c01033c4 <semaphore_destroy>
    tsem = NULL;
c010e46f:	c7 05 9c d0 14 c0 00 	movl   $0x0,0xc014d09c
c010e476:	00 00 00 
}
c010e479:	83 c4 10             	add    $0x10,%esp
c010e47c:	c9                   	leave  
c010e47d:	c3                   	ret    

c010e47e <init_sem>:

static struct semaphore* tsem = NULL;

static
void
init_sem(void) {
c010e47e:	55                   	push   %ebp
c010e47f:	89 e5                	mov    %esp,%ebp
c010e481:	83 ec 08             	sub    $0x8,%esp
    assert(tsem == NULL);
c010e484:	83 3d 9c d0 14 c0 00 	cmpl   $0x0,0xc014d09c
c010e48b:	74 28                	je     c010e4b5 <init_sem+0x37>
c010e48d:	83 ec 0c             	sub    $0xc,%esp
c010e490:	68 10 32 11 c0       	push   $0xc0113210
c010e495:	6a 0e                	push   $0xe
c010e497:	68 0e 31 11 c0       	push   $0xc011310e
c010e49c:	68 2d 31 11 c0       	push   $0xc011312d
c010e4a1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e4a6:	e8 bd 5d ff ff       	call   c0104268 <print>
c010e4ab:	83 c4 20             	add    $0x20,%esp
c010e4ae:	e8 d0 2a ff ff       	call   c0100f83 <backtrace>
c010e4b3:	fa                   	cli    
c010e4b4:	f4                   	hlt    
    tsem = semaphore_create("tsem", 0);
c010e4b5:	50                   	push   %eax
c010e4b6:	50                   	push   %eax
c010e4b7:	6a 00                	push   $0x0
c010e4b9:	68 3a 31 11 c0       	push   $0xc011313a
c010e4be:	e8 86 4e ff ff       	call   c0103349 <semaphore_create>
c010e4c3:	a3 9c d0 14 c0       	mov    %eax,0xc014d09c
    if (tsem == NULL)
c010e4c8:	83 c4 10             	add    $0x10,%esp
c010e4cb:	85 c0                	test   %eax,%eax
c010e4cd:	75 19                	jne    c010e4e8 <init_sem+0x6a>
        panic("threadtest: semaphore_create failed\n");
c010e4cf:	68 3f 31 11 c0       	push   $0xc011313f
c010e4d4:	68 10 32 11 c0       	push   $0xc0113210
c010e4d9:	6a 11                	push   $0x11
c010e4db:	68 0e 31 11 c0       	push   $0xc011310e
c010e4e0:	e8 90 57 ff ff       	call   c0103c75 <_panic>
c010e4e5:	83 c4 10             	add    $0x10,%esp
}
c010e4e8:	c9                   	leave  
c010e4e9:	c3                   	ret    

c010e4ea <threadtest>:
    for (i = 0; i < NTHREADS; i++)
        P(tsem);
}

int
threadtest(int nargs, char** args) {
c010e4ea:	55                   	push   %ebp
c010e4eb:	89 e5                	mov    %esp,%ebp
c010e4ed:	83 ec 08             	sub    $0x8,%esp
    (void)nargs;
    (void)args;

    init_sem();
c010e4f0:	e8 89 ff ff ff       	call   c010e47e <init_sem>
    print("Starting thread test 1...\n");
c010e4f5:	83 ec 0c             	sub    $0xc,%esp
c010e4f8:	68 64 31 11 c0       	push   $0xc0113164
c010e4fd:	e8 66 5d ff ff       	call   c0104268 <print>
    runthreads(0);
c010e502:	31 c0                	xor    %eax,%eax
c010e504:	e8 df fb ff ff       	call   c010e0e8 <runthreads>
    print("\nThread test 1 done.\n");
c010e509:	c7 04 24 7f 31 11 c0 	movl   $0xc011317f,(%esp)
c010e510:	e8 53 5d ff ff       	call   c0104268 <print>
    term_sem();
c010e515:	e8 10 ff ff ff       	call   c010e42a <term_sem>

    return 0;
}
c010e51a:	31 c0                	xor    %eax,%eax
c010e51c:	c9                   	leave  
c010e51d:	c3                   	ret    

c010e51e <threadtest2>:

int
threadtest2(int nargs, char** args) {
c010e51e:	55                   	push   %ebp
c010e51f:	89 e5                	mov    %esp,%ebp
c010e521:	83 ec 08             	sub    $0x8,%esp
    (void)nargs;
    (void)args;

    init_sem();
c010e524:	e8 55 ff ff ff       	call   c010e47e <init_sem>
    print("Starting thread test 2...\n");
c010e529:	83 ec 0c             	sub    $0xc,%esp
c010e52c:	68 95 31 11 c0       	push   $0xc0113195
c010e531:	e8 32 5d ff ff       	call   c0104268 <print>
    runthreads(1);
c010e536:	b8 01 00 00 00       	mov    $0x1,%eax
c010e53b:	e8 a8 fb ff ff       	call   c010e0e8 <runthreads>
    print("\nThread test 2 done.\n");
c010e540:	c7 04 24 b0 31 11 c0 	movl   $0xc01131b0,(%esp)
c010e547:	e8 1c 5d ff ff       	call   c0104268 <print>
    term_sem();
c010e54c:	e8 d9 fe ff ff       	call   c010e42a <term_sem>

    return 0;
}
c010e551:	31 c0                	xor    %eax,%eax
c010e553:	c9                   	leave  
c010e554:	c3                   	ret    

c010e555 <threadtest3>:

int
threadtest3(int nargs, char** args) {
c010e555:	55                   	push   %ebp
c010e556:	89 e5                	mov    %esp,%ebp
c010e558:	83 ec 08             	sub    $0x8,%esp
    (void)nargs;
    (void)args;

    init_sem();
c010e55b:	e8 1e ff ff ff       	call   c010e47e <init_sem>
    print("Starting thread test 3...\n");
c010e560:	83 ec 0c             	sub    $0xc,%esp
c010e563:	68 c6 31 11 c0       	push   $0xc01131c6
c010e568:	e8 fb 5c ff ff       	call   c0104268 <print>
    runthreads(2);
c010e56d:	b8 02 00 00 00       	mov    $0x2,%eax
c010e572:	e8 71 fb ff ff       	call   c010e0e8 <runthreads>
    print("\nThread test 3 done.\n");
c010e577:	c7 04 24 e1 31 11 c0 	movl   $0xc01131e1,(%esp)
c010e57e:	e8 e5 5c ff ff       	call   c0104268 <print>
    term_sem();
c010e583:	e8 a2 fe ff ff       	call   c010e42a <term_sem>

    return 0;
}
c010e588:	31 c0                	xor    %eax,%eax
c010e58a:	c9                   	leave  
c010e58b:	c3                   	ret    

c010e58c <waker_thread>:
    return 0;
}

static
int
waker_thread(void* junk1, unsigned long junk2) {
c010e58c:	55                   	push   %ebp
c010e58d:	89 e5                	mov    %esp,%ebp
c010e58f:	57                   	push   %edi
c010e590:	56                   	push   %esi
c010e591:	53                   	push   %ebx
c010e592:	83 ec 0c             	sub    $0xc,%esp

    (void)junk1;
    (void)junk2;

    while (1) {
        P(wakersem);
c010e595:	83 ec 0c             	sub    $0xc,%esp
c010e598:	ff 35 a4 d0 14 c0    	pushl  0xc014d0a4
c010e59e:	e8 81 4e ff ff       	call   c0103424 <P>
        done = wakerdone;
c010e5a3:	8b 1d a8 d0 14 c0    	mov    0xc014d0a8,%ebx
        V(wakersem);
c010e5a9:	59                   	pop    %ecx
c010e5aa:	ff 35 a4 d0 14 c0    	pushl  0xc014d0a4
c010e5b0:	e8 47 4f ff ff       	call   c01034fc <V>
        if (done)
c010e5b5:	83 c4 10             	add    $0x10,%esp
c010e5b8:	85 db                	test   %ebx,%ebx
c010e5ba:	75 49                	jne    c010e605 <waker_thread+0x79>
c010e5bc:	bb 64 00 00 00       	mov    $0x64,%ebx
        for (ii = 0; ii < WAKER_WAKES; ii++) {
            unsigned n;
            struct spinlock* lk;
            struct wchan* wc;

            n = random() % NWAITCHANS;
c010e5c1:	e8 4a 65 ff ff       	call   c0104b10 <random>
c010e5c6:	6a 00                	push   $0x0
c010e5c8:	6a 0c                	push   $0xc
c010e5ca:	52                   	push   %edx
c010e5cb:	50                   	push   %eax
c010e5cc:	e8 b7 17 00 00       	call   c010fd88 <__umoddi3>
            lk = &spinlocks[n];
c010e5d1:	8d 34 c5 00 d1 14 c0 	lea    -0x3feb2f00(,%eax,8),%esi
            wc = waitchans[n];
c010e5d8:	8b 3c 85 c0 d0 14 c0 	mov    -0x3feb2f40(,%eax,4),%edi
            spinlock_acquire(lk);
c010e5df:	89 34 24             	mov    %esi,(%esp)
c010e5e2:	e8 4c 50 ff ff       	call   c0103633 <spinlock_acquire>
            wchan_wakeall(wc, lk);
c010e5e7:	58                   	pop    %eax
c010e5e8:	5a                   	pop    %edx
c010e5e9:	56                   	push   %esi
c010e5ea:	57                   	push   %edi
c010e5eb:	e8 7d 55 ff ff       	call   c0103b6d <wchan_wakeall>
            spinlock_release(lk);
c010e5f0:	89 34 24             	mov    %esi,(%esp)
c010e5f3:	e8 f1 50 ff ff       	call   c01036e9 <spinlock_release>

            thread_yield();
c010e5f8:	e8 90 24 ff ff       	call   c0100a8d <thread_yield>
        done = wakerdone;
        V(wakersem);
        if (done)
            break;

        for (ii = 0; ii < WAKER_WAKES; ii++) {
c010e5fd:	83 c4 10             	add    $0x10,%esp
c010e600:	4b                   	dec    %ebx
c010e601:	75 be                	jne    c010e5c1 <waker_thread+0x35>
c010e603:	eb 90                	jmp    c010e595 <waker_thread+0x9>
            spinlock_release(lk);

            thread_yield();
        }
    }
    V(donesem);
c010e605:	83 ec 0c             	sub    $0xc,%esp
c010e608:	ff 35 a0 d0 14 c0    	pushl  0xc014d0a0
c010e60e:	e8 e9 4e ff ff       	call   c01034fc <V>
    return 0;
}
c010e613:	31 c0                	xor    %eax,%eax
c010e615:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e618:	5b                   	pop    %ebx
c010e619:	5e                   	pop    %esi
c010e61a:	5f                   	pop    %edi
c010e61b:	5d                   	pop    %ebp
c010e61c:	c3                   	ret    

c010e61d <sleepalot_thread>:
    wakerdone = 0;
}

static
int
sleepalot_thread(void* junk, unsigned long num) {
c010e61d:	55                   	push   %ebp
c010e61e:	89 e5                	mov    %esp,%ebp
c010e620:	57                   	push   %edi
c010e621:	56                   	push   %esi
c010e622:	53                   	push   %ebx
c010e623:	83 ec 1c             	sub    $0x1c,%esp
c010e626:	be 14 00 00 00       	mov    $0x14,%esi
c010e62b:	bb 04 00 00 00       	mov    $0x4,%ebx
        for (j = 0; j < SLEEPALOT_ITERS; j++) {
            unsigned n;
            struct spinlock* lk;
            struct wchan* wc;

            n = random() % NWAITCHANS;
c010e630:	e8 db 64 ff ff       	call   c0104b10 <random>
c010e635:	6a 00                	push   $0x0
c010e637:	6a 0c                	push   $0xc
c010e639:	52                   	push   %edx
c010e63a:	50                   	push   %eax
c010e63b:	e8 48 17 00 00       	call   c010fd88 <__umoddi3>
            lk = &spinlocks[n];
c010e640:	8d 3c c5 00 d1 14 c0 	lea    -0x3feb2f00(,%eax,8),%edi
            wc = waitchans[n];
c010e647:	8b 04 85 c0 d0 14 c0 	mov    -0x3feb2f40(,%eax,4),%eax
c010e64e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            spinlock_acquire(lk);
c010e651:	89 3c 24             	mov    %edi,(%esp)
c010e654:	e8 da 4f ff ff       	call   c0103633 <spinlock_acquire>
            wchan_sleep(wc, lk);
c010e659:	5a                   	pop    %edx
c010e65a:	59                   	pop    %ecx
c010e65b:	57                   	push   %edi
c010e65c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e65f:	50                   	push   %eax
c010e660:	e8 c5 53 ff ff       	call   c0103a2a <wchan_sleep>
            spinlock_release(lk);
c010e665:	89 3c 24             	mov    %edi,(%esp)
c010e668:	e8 7c 50 ff ff       	call   c01036e9 <spinlock_release>
    int ii, j;

    (void)junk;

    for (ii = 0; ii < SLEEPALOT_PRINTS; ii++) {
        for (j = 0; j < SLEEPALOT_ITERS; j++) {
c010e66d:	83 c4 10             	add    $0x10,%esp
c010e670:	4b                   	dec    %ebx
c010e671:	75 bd                	jne    c010e630 <sleepalot_thread+0x13>
            wc = waitchans[n];
            spinlock_acquire(lk);
            wchan_sleep(wc, lk);
            spinlock_release(lk);
        }
        print("[%lu]", num);
c010e673:	50                   	push   %eax
c010e674:	50                   	push   %eax
c010e675:	ff 75 0c             	pushl  0xc(%ebp)
c010e678:	68 19 32 11 c0       	push   $0xc0113219
c010e67d:	e8 e6 5b ff ff       	call   c0104268 <print>
sleepalot_thread(void* junk, unsigned long num) {
    int ii, j;

    (void)junk;

    for (ii = 0; ii < SLEEPALOT_PRINTS; ii++) {
c010e682:	83 c4 10             	add    $0x10,%esp
c010e685:	4e                   	dec    %esi
c010e686:	75 a3                	jne    c010e62b <sleepalot_thread+0xe>
            wchan_sleep(wc, lk);
            spinlock_release(lk);
        }
        print("[%lu]", num);
    }
    V(donesem);
c010e688:	83 ec 0c             	sub    $0xc,%esp
c010e68b:	ff 35 a0 d0 14 c0    	pushl  0xc014d0a0
c010e691:	e8 66 4e ff ff       	call   c01034fc <V>
    return 0;
}
c010e696:	31 c0                	xor    %eax,%eax
c010e698:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e69b:	5b                   	pop    %ebx
c010e69c:	5e                   	pop    %esi
c010e69d:	5f                   	pop    %edi
c010e69e:	5d                   	pop    %ebp
c010e69f:	c3                   	ret    

c010e6a0 <compute_thread>:
        panic("thread_fork failed\n");
}

static
int
compute_thread(void* junk1, unsigned long num) {
c010e6a0:	55                   	push   %ebp
c010e6a1:	89 e5                	mov    %esp,%ebp
c010e6a3:	57                   	push   %edi
c010e6a4:	56                   	push   %esi
c010e6a5:	53                   	push   %ebx
c010e6a6:	83 ec 38             	sub    $0x38,%esp
    int ii, j, k, m;
    uint32_t rand;

    (void)junk1;

    m1 = kmalloc(sizeof(struct matrix));
c010e6a9:	6a 64                	push   $0x64
c010e6ab:	e8 bc 36 ff ff       	call   c0101d6c <kmalloc>
c010e6b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(m1 != NULL);
c010e6b3:	83 c4 10             	add    $0x10,%esp
c010e6b6:	85 c0                	test   %eax,%eax
c010e6b8:	75 2b                	jne    c010e6e5 <compute_thread+0x45>
c010e6ba:	83 ec 0c             	sub    $0xc,%esp
c010e6bd:	68 e8 32 11 c0       	push   $0xc01132e8
c010e6c2:	68 93 00 00 00       	push   $0x93
c010e6c7:	68 1f 32 11 c0       	push   $0xc011321f
c010e6cc:	68 32 32 11 c0       	push   $0xc0113232
c010e6d1:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e6d6:	e8 8d 5b ff ff       	call   c0104268 <print>
c010e6db:	83 c4 20             	add    $0x20,%esp
c010e6de:	e8 a0 28 ff ff       	call   c0100f83 <backtrace>
c010e6e3:	fa                   	cli    
c010e6e4:	f4                   	hlt    
    m2 = kmalloc(sizeof(struct matrix));
c010e6e5:	83 ec 0c             	sub    $0xc,%esp
c010e6e8:	6a 64                	push   $0x64
c010e6ea:	e8 7d 36 ff ff       	call   c0101d6c <kmalloc>
c010e6ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(m2 != NULL);
c010e6f2:	83 c4 10             	add    $0x10,%esp
c010e6f5:	85 c0                	test   %eax,%eax
c010e6f7:	75 2b                	jne    c010e724 <compute_thread+0x84>
c010e6f9:	83 ec 0c             	sub    $0xc,%esp
c010e6fc:	68 e8 32 11 c0       	push   $0xc01132e8
c010e701:	68 95 00 00 00       	push   $0x95
c010e706:	68 1f 32 11 c0       	push   $0xc011321f
c010e70b:	68 3d 32 11 c0       	push   $0xc011323d
c010e710:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e715:	e8 4e 5b ff ff       	call   c0104268 <print>
c010e71a:	83 c4 20             	add    $0x20,%esp
c010e71d:	e8 61 28 ff ff       	call   c0100f83 <backtrace>
c010e722:	fa                   	cli    
c010e723:	f4                   	hlt    
    m3 = kmalloc(sizeof(struct matrix));
c010e724:	83 ec 0c             	sub    $0xc,%esp
c010e727:	6a 64                	push   $0x64
c010e729:	e8 3e 36 ff ff       	call   c0101d6c <kmalloc>
c010e72e:	89 c7                	mov    %eax,%edi
    assert(m3 != NULL);
c010e730:	83 c4 10             	add    $0x10,%esp
c010e733:	85 c0                	test   %eax,%eax
c010e735:	75 2b                	jne    c010e762 <compute_thread+0xc2>
c010e737:	83 ec 0c             	sub    $0xc,%esp
c010e73a:	68 e8 32 11 c0       	push   $0xc01132e8
c010e73f:	68 97 00 00 00       	push   $0x97
c010e744:	68 1f 32 11 c0       	push   $0xc011321f
c010e749:	68 48 32 11 c0       	push   $0xc0113248
c010e74e:	68 2b ff 10 c0       	push   $0xc010ff2b
c010e753:	e8 10 5b ff ff       	call   c0104268 <print>
c010e758:	83 c4 20             	add    $0x20,%esp
c010e75b:	e8 23 28 ff ff       	call   c0100f83 <backtrace>
c010e760:	fa                   	cli    
c010e761:	f4                   	hlt    
c010e762:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
        panic("thread_fork failed\n");
}

static
int
compute_thread(void* junk1, unsigned long num) {
c010e769:	31 db                	xor    %ebx,%ebx
c010e76b:	31 f6                	xor    %esi,%esi
    for (m = 0; m < COMPUTE_ITERS; m++) {

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
                rand = random();
                m1->m[ii][j] = rand >> 16;
c010e76d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e770:	8d 0c 18             	lea    (%eax,%ebx,1),%ecx
                m2->m[ii][j] = rand & 0xffff;
c010e773:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e776:	01 d8                	add    %ebx,%eax
c010e778:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e77b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)

    for (m = 0; m < COMPUTE_ITERS; m++) {

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
                rand = random();
c010e77e:	e8 8d 63 ff ff       	call   c0104b10 <random>
                m1->m[ii][j] = rand >> 16;
c010e783:	89 c2                	mov    %eax,%edx
c010e785:	c1 ea 10             	shr    $0x10,%edx
c010e788:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010e78b:	88 14 31             	mov    %dl,(%ecx,%esi,1)
                m2->m[ii][j] = rand & 0xffff;
c010e78e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e791:	88 04 32             	mov    %al,(%edx,%esi,1)
    assert(m3 != NULL);

    for (m = 0; m < COMPUTE_ITERS; m++) {

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
c010e794:	46                   	inc    %esi
c010e795:	83 fe 0a             	cmp    $0xa,%esi
c010e798:	75 e1                	jne    c010e77b <compute_thread+0xdb>
c010e79a:	83 c3 0a             	add    $0xa,%ebx
    m3 = kmalloc(sizeof(struct matrix));
    assert(m3 != NULL);

    for (m = 0; m < COMPUTE_ITERS; m++) {

        for (ii = 0; ii < DIM; ii++) {
c010e79d:	83 fb 64             	cmp    $0x64,%ebx
c010e7a0:	75 c9                	jne    c010e76b <compute_thread+0xcb>
c010e7a2:	31 d2                	xor    %edx,%edx
        panic("thread_fork failed\n");
}

static
int
compute_thread(void* junk1, unsigned long num) {
c010e7a4:	31 c9                	xor    %ecx,%ecx

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
                tot = 0;
                for (k = 0; k < DIM; k++)
                    tot += m1->m[ii][k] * m2->m[k][j];
c010e7a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e7a9:	01 d0                	add    %edx,%eax
c010e7ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
                m3->m[ii][j] = tot;
c010e7ae:	8d 04 17             	lea    (%edi,%edx,1),%eax
c010e7b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        panic("thread_fork failed\n");
}

static
int
compute_thread(void* junk1, unsigned long num) {
c010e7b4:	31 db                	xor    %ebx,%ebx
c010e7b6:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
                tot = 0;
                for (k = 0; k < DIM; k++)
                    tot += m1->m[ii][k] * m2->m[k][j];
c010e7ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e7bd:	01 c8                	add    %ecx,%eax
c010e7bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010e7c2:	6b c3 0a             	imul   $0xa,%ebx,%eax
c010e7c5:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c010e7c8:	8a 04 06             	mov    (%esi,%eax,1),%al
c010e7cb:	8b 75 d0             	mov    -0x30(%ebp),%esi
c010e7ce:	f6 24 1e             	mulb   (%esi,%ebx,1)
c010e7d1:	00 45 dc             	add    %al,-0x24(%ebp)
        }

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
                tot = 0;
                for (k = 0; k < DIM; k++)
c010e7d4:	43                   	inc    %ebx
c010e7d5:	83 fb 0a             	cmp    $0xa,%ebx
c010e7d8:	75 e8                	jne    c010e7c2 <compute_thread+0x122>
                    tot += m1->m[ii][k] * m2->m[k][j];
                m3->m[ii][j] = tot;
c010e7da:	8b 75 cc             	mov    -0x34(%ebp),%esi
c010e7dd:	8a 45 dc             	mov    -0x24(%ebp),%al
c010e7e0:	88 04 0e             	mov    %al,(%esi,%ecx,1)
                m2->m[ii][j] = rand & 0xffff;
            }
        }

        for (ii = 0; ii < DIM; ii++) {
            for (j = 0; j < DIM; j++) {
c010e7e3:	41                   	inc    %ecx
c010e7e4:	83 f9 0a             	cmp    $0xa,%ecx
c010e7e7:	75 cb                	jne    c010e7b4 <compute_thread+0x114>
c010e7e9:	83 c2 0a             	add    $0xa,%edx
                m1->m[ii][j] = rand >> 16;
                m2->m[ii][j] = rand & 0xffff;
            }
        }

        for (ii = 0; ii < DIM; ii++) {
c010e7ec:	83 fa 64             	cmp    $0x64,%edx
c010e7ef:	75 b3                	jne    c010e7a4 <compute_thread+0x104>
c010e7f1:	31 d2                	xor    %edx,%edx
c010e7f3:	31 c0                	xor    %eax,%eax
            }
        }

        tot = 0;
        for (ii = 0; ii < DIM; ii++)
            tot += m3->m[ii][ii];
c010e7f5:	02 04 17             	add    (%edi,%edx,1),%al
c010e7f8:	83 c2 0b             	add    $0xb,%edx
                m3->m[ii][j] = tot;
            }
        }

        tot = 0;
        for (ii = 0; ii < DIM; ii++)
c010e7fb:	83 fa 6e             	cmp    $0x6e,%edx
c010e7fe:	75 f5                	jne    c010e7f5 <compute_thread+0x155>
            tot += m3->m[ii][ii];

        print("{%lu: %u}", num, (unsigned) tot);
c010e800:	51                   	push   %ecx
c010e801:	0f b6 c0             	movzbl %al,%eax
c010e804:	50                   	push   %eax
c010e805:	ff 75 0c             	pushl  0xc(%ebp)
c010e808:	68 53 32 11 c0       	push   $0xc0113253
c010e80d:	e8 56 5a ff ff       	call   c0104268 <print>
        thread_yield();
c010e812:	e8 76 22 ff ff       	call   c0100a8d <thread_yield>
    m2 = kmalloc(sizeof(struct matrix));
    assert(m2 != NULL);
    m3 = kmalloc(sizeof(struct matrix));
    assert(m3 != NULL);

    for (m = 0; m < COMPUTE_ITERS; m++) {
c010e817:	83 c4 10             	add    $0x10,%esp
c010e81a:	ff 4d d8             	decl   -0x28(%ebp)
c010e81d:	0f 85 46 ff ff ff    	jne    c010e769 <compute_thread+0xc9>

        print("{%lu: %u}", num, (unsigned) tot);
        thread_yield();
    }

    kfree(m1);
c010e823:	83 ec 0c             	sub    $0xc,%esp
c010e826:	ff 75 e4             	pushl  -0x1c(%ebp)
c010e829:	e8 3e 36 ff ff       	call   c0101e6c <kfree>
    kfree(m2);
c010e82e:	58                   	pop    %eax
c010e82f:	ff 75 e0             	pushl  -0x20(%ebp)
c010e832:	e8 35 36 ff ff       	call   c0101e6c <kfree>
    kfree(m3);
c010e837:	89 3c 24             	mov    %edi,(%esp)
c010e83a:	e8 2d 36 ff ff       	call   c0101e6c <kfree>

    V(donesem);
c010e83f:	5a                   	pop    %edx
c010e840:	ff 35 a0 d0 14 c0    	pushl  0xc014d0a0
c010e846:	e8 b1 4c ff ff       	call   c01034fc <V>
    return 0;
}
c010e84b:	31 c0                	xor    %eax,%eax
c010e84d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010e850:	5b                   	pop    %ebx
c010e851:	5e                   	pop    %esi
c010e852:	5f                   	pop    %edi
c010e853:	5d                   	pop    %ebp
c010e854:	c3                   	ret    

c010e855 <threadtest4>:
    make_computes(ncomputes);
    finish(nsleeps + ncomputes);
}

int
threadtest4(int argc, char** argv) {
c010e855:	55                   	push   %ebp
c010e856:	89 e5                	mov    %esp,%ebp
c010e858:	57                   	push   %edi
c010e859:	56                   	push   %esi
c010e85a:	53                   	push   %ebx
c010e85b:	83 ec 2c             	sub    $0x2c,%esp
    (void) argc;
    (void) argv;
    runtest4(random() % 32 + 1, random() % 32 + 1);
c010e85e:	e8 ad 62 ff ff       	call   c0104b10 <random>
c010e863:	83 e0 1f             	and    $0x1f,%eax
c010e866:	8d 58 01             	lea    0x1(%eax),%ebx
c010e869:	e8 a2 62 ff ff       	call   c0104b10 <random>
c010e86e:	83 e0 1f             	and    $0x1f,%eax
c010e871:	40                   	inc    %eax
c010e872:	89 45 d4             	mov    %eax,-0x2c(%ebp)
void
setup(void) {
    char tmp[16];
    int ii;

    if (wakersem == NULL) {
c010e875:	83 3d a4 d0 14 c0 00 	cmpl   $0x0,0xc014d0a4
c010e87c:	8d 75 d8             	lea    -0x28(%ebp),%esi
c010e87f:	74 20                	je     c010e8a1 <threadtest4+0x4c>
            spinlock_init(&spinlocks[ii]);
            snprintf(tmp, sizeof(tmp), "wc%d", ii);
            waitchans[ii] = wchan_create(strdup(tmp));
        }
    }
    wakerdone = 0;
c010e881:	c7 05 a8 d0 14 c0 00 	movl   $0x0,0xc014d0a8
c010e888:	00 00 00 

static
void
runtest4(int nsleeps, int ncomputes) {
    setup();
    print("Starting thread test 4 (%d [sleepalots], %d {computes}, 1 waker)\n",
c010e88b:	50                   	push   %eax
c010e88c:	53                   	push   %ebx
c010e88d:	ff 75 d4             	pushl  -0x2c(%ebp)
c010e890:	68 5d 32 11 c0       	push   $0xc011325d
c010e895:	e8 ce 59 ff ff       	call   c0104268 <print>
c010e89a:	83 c4 10             	add    $0x10,%esp
void
make_sleepalots(int howmany) {
    char name[16];
    int ii, result;

    for (ii = 0; ii < howmany; ii++) {
c010e89d:	31 ff                	xor    %edi,%edi
c010e89f:	eb 7c                	jmp    c010e91d <threadtest4+0xc8>
setup(void) {
    char tmp[16];
    int ii;

    if (wakersem == NULL) {
        wakersem = semaphore_create("wakersem", 1);
c010e8a1:	51                   	push   %ecx
c010e8a2:	51                   	push   %ecx
c010e8a3:	6a 01                	push   $0x1
c010e8a5:	68 9f 32 11 c0       	push   $0xc011329f
c010e8aa:	e8 9a 4a ff ff       	call   c0103349 <semaphore_create>
c010e8af:	a3 a4 d0 14 c0       	mov    %eax,0xc014d0a4
        donesem = semaphore_create("donesem", 0);
c010e8b4:	5f                   	pop    %edi
c010e8b5:	58                   	pop    %eax
c010e8b6:	6a 00                	push   $0x0
c010e8b8:	68 a8 32 11 c0       	push   $0xc01132a8
c010e8bd:	e8 87 4a ff ff       	call   c0103349 <semaphore_create>
c010e8c2:	a3 a0 d0 14 c0       	mov    %eax,0xc014d0a0
c010e8c7:	ba 00 d1 14 c0       	mov    $0xc014d100,%edx
c010e8cc:	83 c4 10             	add    $0x10,%esp
        for (ii = 0; ii < NWAITCHANS; ii++) {
c010e8cf:	31 ff                	xor    %edi,%edi
            spinlock_init(&spinlocks[ii]);
c010e8d1:	83 ec 0c             	sub    $0xc,%esp
c010e8d4:	52                   	push   %edx
c010e8d5:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010e8d8:	e8 10 4d ff ff       	call   c01035ed <spinlock_init>
            snprintf(tmp, sizeof(tmp), "wc%d", ii);
c010e8dd:	57                   	push   %edi
c010e8de:	68 b0 32 11 c0       	push   $0xc01132b0
c010e8e3:	6a 10                	push   $0x10
c010e8e5:	56                   	push   %esi
c010e8e6:	e8 7a 5e ff ff       	call   c0104765 <snprintf>
            waitchans[ii] = wchan_create(strdup(tmp));
c010e8eb:	83 c4 14             	add    $0x14,%esp
c010e8ee:	56                   	push   %esi
c010e8ef:	e8 96 60 ff ff       	call   c010498a <strdup>
c010e8f4:	89 04 24             	mov    %eax,(%esp)
c010e8f7:	e8 b7 4f ff ff       	call   c01038b3 <wchan_create>
c010e8fc:	89 04 bd c0 d0 14 c0 	mov    %eax,-0x3feb2f40(,%edi,4)
    int ii;

    if (wakersem == NULL) {
        wakersem = semaphore_create("wakersem", 1);
        donesem = semaphore_create("donesem", 0);
        for (ii = 0; ii < NWAITCHANS; ii++) {
c010e903:	47                   	inc    %edi
c010e904:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e907:	83 c2 08             	add    $0x8,%edx
c010e90a:	83 c4 10             	add    $0x10,%esp
c010e90d:	83 ff 0c             	cmp    $0xc,%edi
c010e910:	75 bf                	jne    c010e8d1 <threadtest4+0x7c>
c010e912:	e9 6a ff ff ff       	jmp    c010e881 <threadtest4+0x2c>
void
make_sleepalots(int howmany) {
    char name[16];
    int ii, result;

    for (ii = 0; ii < howmany; ii++) {
c010e917:	47                   	inc    %edi
c010e918:	39 7d d4             	cmp    %edi,-0x2c(%ebp)
c010e91b:	7e 44                	jle    c010e961 <threadtest4+0x10c>
        snprintf(name, sizeof(name), "sleepalot%d", ii);
c010e91d:	57                   	push   %edi
c010e91e:	68 b5 32 11 c0       	push   $0xc01132b5
c010e923:	6a 10                	push   $0x10
c010e925:	56                   	push   %esi
c010e926:	e8 3a 5e ff ff       	call   c0104765 <snprintf>
        result = thread_fork(name, NULL, NULL, sleepalot_thread, NULL, ii);
c010e92b:	58                   	pop    %eax
c010e92c:	5a                   	pop    %edx
c010e92d:	57                   	push   %edi
c010e92e:	6a 00                	push   $0x0
c010e930:	68 1d e6 10 c0       	push   $0xc010e61d
c010e935:	6a 00                	push   $0x0
c010e937:	6a 00                	push   $0x0
c010e939:	56                   	push   %esi
c010e93a:	e8 37 9b ff ff       	call   c0108476 <thread_fork>
        if (result)
c010e93f:	83 c4 20             	add    $0x20,%esp
c010e942:	85 c0                	test   %eax,%eax
c010e944:	74 d1                	je     c010e917 <threadtest4+0xc2>
            panic("thread_fork failed\n");
c010e946:	68 68 33 11 c0       	push   $0xc0113368
c010e94b:	68 08 33 11 c0       	push   $0xc0113308
c010e950:	6a 7e                	push   $0x7e
c010e952:	68 1f 32 11 c0       	push   $0xc011321f
c010e957:	e8 19 53 ff ff       	call   c0103c75 <_panic>
c010e95c:	83 c4 10             	add    $0x10,%esp
c010e95f:	eb b6                	jmp    c010e917 <threadtest4+0xc2>
    }
    result = thread_fork("waker", NULL, NULL, waker_thread, NULL, 0);
c010e961:	50                   	push   %eax
c010e962:	50                   	push   %eax
c010e963:	6a 00                	push   $0x0
c010e965:	6a 00                	push   $0x0
c010e967:	68 8c e5 10 c0       	push   $0xc010e58c
c010e96c:	6a 00                	push   $0x0
c010e96e:	6a 00                	push   $0x0
c010e970:	68 c1 32 11 c0       	push   $0xc01132c1
c010e975:	e8 fc 9a ff ff       	call   c0108476 <thread_fork>
    if (result)
c010e97a:	83 c4 20             	add    $0x20,%esp
c010e97d:	85 c0                	test   %eax,%eax
c010e97f:	74 1c                	je     c010e99d <threadtest4+0x148>
        panic("thread_fork failed\n");
c010e981:	68 68 33 11 c0       	push   $0xc0113368
c010e986:	68 08 33 11 c0       	push   $0xc0113308
c010e98b:	68 82 00 00 00       	push   $0x82
c010e990:	68 1f 32 11 c0       	push   $0xc011321f
c010e995:	e8 db 52 ff ff       	call   c0103c75 <_panic>
c010e99a:	83 c4 10             	add    $0x10,%esp
void
make_computes(int howmany) {
    char name[16];
    int ii, result;

    for (ii = 0; ii < howmany; ii++) {
c010e99d:	31 ff                	xor    %edi,%edi
        snprintf(name, sizeof(name), "compute%d", ii);
c010e99f:	57                   	push   %edi
c010e9a0:	68 c7 32 11 c0       	push   $0xc01132c7
c010e9a5:	6a 10                	push   $0x10
c010e9a7:	56                   	push   %esi
c010e9a8:	e8 b8 5d ff ff       	call   c0104765 <snprintf>
        result = thread_fork(name, NULL, NULL, compute_thread, NULL, ii);
c010e9ad:	59                   	pop    %ecx
c010e9ae:	58                   	pop    %eax
c010e9af:	57                   	push   %edi
c010e9b0:	6a 00                	push   $0x0
c010e9b2:	68 a0 e6 10 c0       	push   $0xc010e6a0
c010e9b7:	6a 00                	push   $0x0
c010e9b9:	6a 00                	push   $0x0
c010e9bb:	56                   	push   %esi
c010e9bc:	e8 b5 9a ff ff       	call   c0108476 <thread_fork>
        if (result)
c010e9c1:	83 c4 20             	add    $0x20,%esp
c010e9c4:	85 c0                	test   %eax,%eax
c010e9c6:	74 1c                	je     c010e9e4 <threadtest4+0x18f>
            panic("thread_fork failed\n");
c010e9c8:	68 68 33 11 c0       	push   $0xc0113368
c010e9cd:	68 f8 32 11 c0       	push   $0xc01132f8
c010e9d2:	68 c6 00 00 00       	push   $0xc6
c010e9d7:	68 1f 32 11 c0       	push   $0xc011321f
c010e9dc:	e8 94 52 ff ff       	call   c0103c75 <_panic>
c010e9e1:	83 c4 10             	add    $0x10,%esp
void
make_computes(int howmany) {
    char name[16];
    int ii, result;

    for (ii = 0; ii < howmany; ii++) {
c010e9e4:	47                   	inc    %edi
c010e9e5:	39 fb                	cmp    %edi,%ebx
c010e9e7:	7f b6                	jg     c010e99f <threadtest4+0x14a>
    setup();
    print("Starting thread test 4 (%d [sleepalots], %d {computes}, 1 waker)\n",
          nsleeps, ncomputes);
    make_sleepalots(nsleeps);
    make_computes(ncomputes);
    finish(nsleeps + ncomputes);
c010e9e9:	03 5d d4             	add    -0x2c(%ebp),%ebx

static
void
finish(int howmanytotal) {
    int ii;
    for (ii = 0; ii < howmanytotal; ii++)
c010e9ec:	31 f6                	xor    %esi,%esi
        P(donesem);
c010e9ee:	83 ec 0c             	sub    $0xc,%esp
c010e9f1:	ff 35 a0 d0 14 c0    	pushl  0xc014d0a0
c010e9f7:	e8 28 4a ff ff       	call   c0103424 <P>

static
void
finish(int howmanytotal) {
    int ii;
    for (ii = 0; ii < howmanytotal; ii++)
c010e9fc:	46                   	inc    %esi
c010e9fd:	83 c4 10             	add    $0x10,%esp
c010ea00:	39 f3                	cmp    %esi,%ebx
c010ea02:	75 ea                	jne    c010e9ee <threadtest4+0x199>
        P(donesem);
    P(wakersem);
c010ea04:	83 ec 0c             	sub    $0xc,%esp
c010ea07:	ff 35 a4 d0 14 c0    	pushl  0xc014d0a4
c010ea0d:	e8 12 4a ff ff       	call   c0103424 <P>
    wakerdone = 1;
c010ea12:	c7 05 a8 d0 14 c0 01 	movl   $0x1,0xc014d0a8
c010ea19:	00 00 00 
    V(wakersem);
c010ea1c:	58                   	pop    %eax
c010ea1d:	ff 35 a4 d0 14 c0    	pushl  0xc014d0a4
c010ea23:	e8 d4 4a ff ff       	call   c01034fc <V>
    P(donesem);
c010ea28:	5a                   	pop    %edx
c010ea29:	ff 35 a0 d0 14 c0    	pushl  0xc014d0a0
c010ea2f:	e8 f0 49 ff ff       	call   c0103424 <P>
int
threadtest4(int argc, char** argv) {
    (void) argc;
    (void) argv;
    runtest4(random() % 32 + 1, random() % 32 + 1);
    print("\nThread test 4 done\n");
c010ea34:	c7 04 24 d1 32 11 c0 	movl   $0xc01132d1,(%esp)
c010ea3b:	e8 28 58 ff ff       	call   c0104268 <print>
c010ea40:	fb                   	sti    
    sti();
    return 0;
}
c010ea41:	31 c0                	xor    %eax,%eax
c010ea43:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010ea46:	5b                   	pop    %ebx
c010ea47:	5e                   	pop    %esi
c010ea48:	5f                   	pop    %edi
c010ea49:	5d                   	pop    %ebp
c010ea4a:	c3                   	ret    

c010ea4b <thread_return>:
    for (int i = 0; i < 2 * NTHREADS; ++i)
        array[i] = i;
}

int
thread_return(void* stuff, unsigned long num) {
c010ea4b:	55                   	push   %ebp
c010ea4c:	89 e5                	mov    %esp,%ebp
    (void) stuff;
    (void) num;

    return 0;
}
c010ea4e:	31 c0                	xor    %eax,%eax
c010ea50:	5d                   	pop    %ebp
c010ea51:	c3                   	ret    

c010ea52 <return_one>:

// each thread returns the value 1 and the result will be summed and verified to
// match NTHREADS
int return_one(void* data1, unsigned long data2) {
c010ea52:	55                   	push   %ebp
c010ea53:	89 e5                	mov    %esp,%ebp
    (void) data1;
    (void) data2;

    return 1;
}
c010ea55:	b8 01 00 00 00       	mov    $0x1,%eax
c010ea5a:	5d                   	pop    %ebp
c010ea5b:	c3                   	ret    

c010ea5c <sum_array>:

// each thread will sum and return two elements from the array and the total
// returned from all threads will be checks to equal the expected value
int sum_array(void* data1, unsigned long data2) {
c010ea5c:	55                   	push   %ebp
c010ea5d:	89 e5                	mov    %esp,%ebp
c010ea5f:	8b 55 0c             	mov    0xc(%ebp),%edx
    (void) data1;

    return array[data2] + array[data2 + NTHREADS];
c010ea62:	8b 0c 95 60 d1 14 c0 	mov    -0x3feb2ea0(,%edx,4),%ecx
c010ea69:	83 c2 08             	add    $0x8,%edx
c010ea6c:	8b 04 95 60 d1 14 c0 	mov    -0x3feb2ea0(,%edx,4),%eax
c010ea73:	01 c8                	add    %ecx,%eax
}
c010ea75:	5d                   	pop    %ebp
c010ea76:	c3                   	ret    

c010ea77 <threadtester>:

// this accepts a test number and administers the corresponding thread_join test
int threadtester(int test) {
c010ea77:	55                   	push   %ebp
c010ea78:	89 e5                	mov    %esp,%ebp
c010ea7a:	57                   	push   %edi
c010ea7b:	56                   	push   %esi
c010ea7c:	53                   	push   %ebx
c010ea7d:	83 ec 4c             	sub    $0x4c,%esp
    if (test == 1)
c010ea80:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010ea84:	74 1d                	je     c010eaa3 <threadtester+0x2c>
        init_array();
    char name[16] = {'\0'};
c010ea86:	8d 7d b8             	lea    -0x48(%ebp),%edi
c010ea89:	b9 04 00 00 00       	mov    $0x4,%ecx
c010ea8e:	31 c0                	xor    %eax,%eax
c010ea90:	f3 ab                	rep stos %eax,%es:(%edi)
    struct thread* t[NTHREADS];
    int tot = 0;
    int tret = 0;
c010ea92:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
c010ea99:	8d 75 c8             	lea    -0x38(%ebp),%esi
    int sum = 0;
    int ret = 0;

    for (int i = 0; i < NTHREADS; ++i) {
c010ea9c:	31 db                	xor    %ebx,%ebx
c010ea9e:	8d 7d b8             	lea    -0x48(%ebp),%edi
c010eaa1:	eb 67                	jmp    c010eb0a <threadtester+0x93>
c010eaa3:	31 c0                	xor    %eax,%eax
#define NTHREADS 8

static volatile int array[2 * NTHREADS];
static void init_array(void) {
    for (int i = 0; i < 2 * NTHREADS; ++i)
        array[i] = i;
c010eaa5:	89 04 85 60 d1 14 c0 	mov    %eax,-0x3feb2ea0(,%eax,4)

#define NTHREADS 8

static volatile int array[2 * NTHREADS];
static void init_array(void) {
    for (int i = 0; i < 2 * NTHREADS; ++i)
c010eaac:	40                   	inc    %eax
c010eaad:	83 f8 10             	cmp    $0x10,%eax
c010eab0:	75 f3                	jne    c010eaa5 <threadtester+0x2e>
c010eab2:	eb d2                	jmp    c010ea86 <threadtester+0xf>
    int sum = 0;
    int ret = 0;

    for (int i = 0; i < NTHREADS; ++i) {
        snprintf(name, sizeof(name), "threadtester%d", i);
        switch (test) {
c010eab4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c010eab8:	0f 84 8b 00 00 00    	je     c010eb49 <threadtester+0xd2>
c010eabe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010eac2:	0f 85 09 01 00 00    	jne    c010ebd1 <threadtester+0x15a>
            case 0:
                ret = thread_fork("test_fork", NULL, NULL, thread_return, NULL, 0);
c010eac8:	50                   	push   %eax
c010eac9:	50                   	push   %eax
c010eaca:	6a 00                	push   $0x0
c010eacc:	6a 00                	push   $0x0
c010eace:	68 4b ea 10 c0       	push   $0xc010ea4b
c010ead3:	6a 00                	push   $0x0
c010ead5:	6a 00                	push   $0x0
c010ead7:	68 27 33 11 c0       	push   $0xc0113327
c010eadc:	e8 95 99 ff ff       	call   c0108476 <thread_fork>
                if (ret)
c010eae1:	83 c4 20             	add    $0x20,%esp
c010eae4:	85 c0                	test   %eax,%eax
c010eae6:	74 19                	je     c010eb01 <threadtester+0x8a>
                    panic("ERROR: in thread_fork");
c010eae8:	68 31 33 11 c0       	push   $0xc0113331
c010eaed:	68 08 34 11 c0       	push   $0xc0113408
c010eaf2:	6a 37                	push   $0x37
                    panic("threadtester: thread_fork failed\n");
                break;
            case 2:
                ret = thread_fork(name, &t[i], NULL, sum_array, NULL, i);
                if (ret)
                    panic("threadtester: thread_fork failed\n");
c010eaf4:	68 47 33 11 c0       	push   $0xc0113347
c010eaf9:	e8 77 51 ff ff       	call   c0103c75 <_panic>
c010eafe:	83 c4 10             	add    $0x10,%esp
    int tot = 0;
    int tret = 0;
    int sum = 0;
    int ret = 0;

    for (int i = 0; i < NTHREADS; ++i) {
c010eb01:	43                   	inc    %ebx
c010eb02:	83 c6 04             	add    $0x4,%esi
c010eb05:	83 fb 08             	cmp    $0x8,%ebx
c010eb08:	74 67                	je     c010eb71 <threadtester+0xfa>
        snprintf(name, sizeof(name), "threadtester%d", i);
c010eb0a:	53                   	push   %ebx
c010eb0b:	68 18 33 11 c0       	push   $0xc0113318
c010eb10:	6a 10                	push   $0x10
c010eb12:	57                   	push   %edi
c010eb13:	e8 4d 5c ff ff       	call   c0104765 <snprintf>
        switch (test) {
c010eb18:	83 c4 10             	add    $0x10,%esp
c010eb1b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010eb1f:	75 93                	jne    c010eab4 <threadtester+0x3d>
                ret = thread_fork("test_fork", NULL, NULL, thread_return, NULL, 0);
                if (ret)
                    panic("ERROR: in thread_fork");
                break;
            case 1:
                ret = thread_fork(name, &t[i], NULL, return_one, NULL, i);
c010eb21:	51                   	push   %ecx
c010eb22:	51                   	push   %ecx
c010eb23:	53                   	push   %ebx
c010eb24:	6a 00                	push   $0x0
c010eb26:	68 52 ea 10 c0       	push   $0xc010ea52
c010eb2b:	6a 00                	push   $0x0
c010eb2d:	56                   	push   %esi
c010eb2e:	57                   	push   %edi
c010eb2f:	e8 42 99 ff ff       	call   c0108476 <thread_fork>
                if (ret)
c010eb34:	83 c4 20             	add    $0x20,%esp
c010eb37:	85 c0                	test   %eax,%eax
c010eb39:	74 c6                	je     c010eb01 <threadtester+0x8a>
                    panic("threadtester: thread_fork failed\n");
c010eb3b:	68 5a 33 11 c0       	push   $0xc011335a
c010eb40:	68 08 34 11 c0       	push   $0xc0113408
c010eb45:	6a 3c                	push   $0x3c
c010eb47:	eb ab                	jmp    c010eaf4 <threadtester+0x7d>
                break;
            case 2:
                ret = thread_fork(name, &t[i], NULL, sum_array, NULL, i);
c010eb49:	52                   	push   %edx
c010eb4a:	52                   	push   %edx
c010eb4b:	53                   	push   %ebx
c010eb4c:	6a 00                	push   $0x0
c010eb4e:	68 5c ea 10 c0       	push   $0xc010ea5c
c010eb53:	6a 00                	push   $0x0
c010eb55:	56                   	push   %esi
c010eb56:	57                   	push   %edi
c010eb57:	e8 1a 99 ff ff       	call   c0108476 <thread_fork>
                if (ret)
c010eb5c:	83 c4 20             	add    $0x20,%esp
c010eb5f:	85 c0                	test   %eax,%eax
c010eb61:	74 9e                	je     c010eb01 <threadtester+0x8a>
                    panic("threadtester: thread_fork failed\n");
c010eb63:	68 5a 33 11 c0       	push   $0xc011335a
c010eb68:	68 08 34 11 c0       	push   $0xc0113408
c010eb6d:	6a 41                	push   $0x41
c010eb6f:	eb 83                	jmp    c010eaf4 <threadtester+0x7d>
        }
    }

    switch (test) {
        case 0:
            return 0;
c010eb71:	31 c0                	xor    %eax,%eax
            default:
                return 0;
        }
    }

    if (test != 0) {
c010eb73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010eb77:	74 5a                	je     c010ebd3 <threadtester+0x15c>
c010eb79:	31 db                	xor    %ebx,%ebx
c010eb7b:	31 ff                	xor    %edi,%edi
        for (int i = 0; i < NTHREADS; ++i) {
            ret = thread_join(t[i], &tret);
c010eb7d:	8d 75 b4             	lea    -0x4c(%ebp),%esi
c010eb80:	50                   	push   %eax
c010eb81:	50                   	push   %eax
c010eb82:	56                   	push   %esi
c010eb83:	ff 74 9d c8          	pushl  -0x38(%ebp,%ebx,4)
c010eb87:	e8 94 96 ff ff       	call   c0108220 <thread_join>
            if (ret)
c010eb8c:	83 c4 10             	add    $0x10,%esp
c010eb8f:	85 c0                	test   %eax,%eax
c010eb91:	74 19                	je     c010ebac <threadtester+0x135>
                panic("threadtester: thread_join failed\n");
c010eb93:	68 7c 33 11 c0       	push   $0xc011337c
c010eb98:	68 08 34 11 c0       	push   $0xc0113408
c010eb9d:	6a 4c                	push   $0x4c
c010eb9f:	68 47 33 11 c0       	push   $0xc0113347
c010eba4:	e8 cc 50 ff ff       	call   c0103c75 <_panic>
c010eba9:	83 c4 10             	add    $0x10,%esp
            tot += tret;
c010ebac:	03 7d b4             	add    -0x4c(%ebp),%edi
                return 0;
        }
    }

    if (test != 0) {
        for (int i = 0; i < NTHREADS; ++i) {
c010ebaf:	43                   	inc    %ebx
c010ebb0:	83 fb 08             	cmp    $0x8,%ebx
c010ebb3:	75 cb                	jne    c010eb80 <threadtester+0x109>
                panic("threadtester: thread_join failed\n");
            tot += tret;
        }
    }

    switch (test) {
c010ebb5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010ebb9:	74 0b                	je     c010ebc6 <threadtester+0x14f>
c010ebbb:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c010ebbf:	75 10                	jne    c010ebd1 <threadtester+0x15a>
        case 1:
            return tot != NTHREADS;
        case 2:
            for (int i = 0; i < 2 * NTHREADS; ++i)
                sum += i;
            return tot != sum;
c010ebc1:	83 ff 78             	cmp    $0x78,%edi
c010ebc4:	eb 03                	jmp    c010ebc9 <threadtester+0x152>

    switch (test) {
        case 0:
            return 0;
        case 1:
            return tot != NTHREADS;
c010ebc6:	83 ff 08             	cmp    $0x8,%edi
        case 2:
            for (int i = 0; i < 2 * NTHREADS; ++i)
                sum += i;
            return tot != sum;
c010ebc9:	0f 95 c0             	setne  %al
c010ebcc:	0f b6 c0             	movzbl %al,%eax
c010ebcf:	eb 02                	jmp    c010ebd3 <threadtester+0x15c>
        }
    }

    switch (test) {
        case 0:
            return 0;
c010ebd1:	31 c0                	xor    %eax,%eax
                sum += i;
            return tot != sum;
        default:
            return 0;
    }
}
c010ebd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010ebd6:	5b                   	pop    %ebx
c010ebd7:	5e                   	pop    %esi
c010ebd8:	5f                   	pop    %edi
c010ebd9:	5d                   	pop    %ebp
c010ebda:	c3                   	ret    

c010ebdb <threadtest5>:

int
threadtest5(int argc, char** argv) {
c010ebdb:	55                   	push   %ebp
c010ebdc:	89 e5                	mov    %esp,%ebp
c010ebde:	83 ec 14             	sub    $0x14,%esp
    (void) argc;
    (void) argv;

    print("Beginning thread test 5...\n");
c010ebe1:	68 9e 33 11 c0       	push   $0xc011339e
c010ebe6:	e8 7d 56 ff ff       	call   c0104268 <print>

    assert(threadtester(0) == 0);
c010ebeb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ebf2:	e8 80 fe ff ff       	call   c010ea77 <threadtester>
c010ebf7:	83 c4 10             	add    $0x10,%esp
c010ebfa:	85 c0                	test   %eax,%eax
c010ebfc:	74 28                	je     c010ec26 <threadtest5+0x4b>
c010ebfe:	83 ec 0c             	sub    $0xc,%esp
c010ec01:	68 fc 33 11 c0       	push   $0xc01133fc
c010ec06:	6a 66                	push   $0x66
c010ec08:	68 47 33 11 c0       	push   $0xc0113347
c010ec0d:	68 ba 33 11 c0       	push   $0xc01133ba
c010ec12:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ec17:	e8 4c 56 ff ff       	call   c0104268 <print>
c010ec1c:	83 c4 20             	add    $0x20,%esp
c010ec1f:	e8 5f 23 ff ff       	call   c0100f83 <backtrace>
c010ec24:	fa                   	cli    
c010ec25:	f4                   	hlt    
    assert(threadtester(1) == 0);
c010ec26:	83 ec 0c             	sub    $0xc,%esp
c010ec29:	6a 01                	push   $0x1
c010ec2b:	e8 47 fe ff ff       	call   c010ea77 <threadtester>
c010ec30:	83 c4 10             	add    $0x10,%esp
c010ec33:	85 c0                	test   %eax,%eax
c010ec35:	74 28                	je     c010ec5f <threadtest5+0x84>
c010ec37:	83 ec 0c             	sub    $0xc,%esp
c010ec3a:	68 fc 33 11 c0       	push   $0xc01133fc
c010ec3f:	6a 67                	push   $0x67
c010ec41:	68 47 33 11 c0       	push   $0xc0113347
c010ec46:	68 cf 33 11 c0       	push   $0xc01133cf
c010ec4b:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ec50:	e8 13 56 ff ff       	call   c0104268 <print>
c010ec55:	83 c4 20             	add    $0x20,%esp
c010ec58:	e8 26 23 ff ff       	call   c0100f83 <backtrace>
c010ec5d:	fa                   	cli    
c010ec5e:	f4                   	hlt    
    // assert(threadtester(2) == 0);

    print("Thread test 5 complete\n");
c010ec5f:	83 ec 0c             	sub    $0xc,%esp
c010ec62:	68 e4 33 11 c0       	push   $0xc01133e4
c010ec67:	e8 fc 55 ff ff       	call   c0104268 <print>

    return 0;
}
c010ec6c:	31 c0                	xor    %eax,%eax
c010ec6e:	c9                   	leave  
c010ec6f:	c3                   	ret    

c010ec70 <factorial>:
#include <lib.h>
#include <test.h>
#include <thread.h>

int
factorial(void* ptr, unsigned long val) {
c010ec70:	55                   	push   %ebp
c010ec71:	89 e5                	mov    %esp,%ebp
c010ec73:	57                   	push   %edi
c010ec74:	56                   	push   %esi
c010ec75:	53                   	push   %ebx
c010ec76:	83 ec 3c             	sub    $0x3c,%esp
c010ec79:	b8 01 00 00 00       	mov    $0x1,%eax
    (void) ptr;

    if (val == 0)
c010ec7e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ec82:	0f 84 90 00 00 00    	je     c010ed18 <factorial+0xa8>
        return 1;

    char name[24] = {0};
c010ec88:	8d 7d d0             	lea    -0x30(%ebp),%edi
c010ec8b:	b9 06 00 00 00       	mov    $0x6,%ecx
c010ec90:	31 c0                	xor    %eax,%eax
c010ec92:	f3 ab                	rep stos %eax,%es:(%edi)
    int num = 10 * (int) ptr;
    struct thread* t[val];
c010ec94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ec97:	8d 04 85 12 00 00 00 	lea    0x12(,%eax,4),%eax
c010ec9e:	83 e0 f0             	and    $0xfffffff0,%eax
c010eca1:	29 c4                	sub    %eax,%esp
c010eca3:	89 65 c4             	mov    %esp,-0x3c(%ebp)
c010eca6:	6b 7d 08 0a          	imul   $0xa,0x8(%ebp),%edi
c010ecaa:	89 e3                	mov    %esp,%ebx
c010ecac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ecaf:	01 f8                	add    %edi,%eax
c010ecb1:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (uint32_t i = 0; i < val; ++i) {
        snprintf(name, sizeof(name), "thread%d", num + i);
c010ecb4:	8d 75 d0             	lea    -0x30(%ebp),%esi
        thread_fork(name, &t[i], NULL, factorial, (void*) num + i, val - 1);
c010ecb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ecba:	48                   	dec    %eax
c010ecbb:	89 45 bc             	mov    %eax,-0x44(%ebp)
        return 1;

    char name[24] = {0};
    int num = 10 * (int) ptr;
    struct thread* t[val];
    for (uint32_t i = 0; i < val; ++i) {
c010ecbe:	3b 7d c0             	cmp    -0x40(%ebp),%edi
c010ecc1:	74 2b                	je     c010ecee <factorial+0x7e>
        snprintf(name, sizeof(name), "thread%d", num + i);
c010ecc3:	57                   	push   %edi
c010ecc4:	68 15 34 11 c0       	push   $0xc0113415
c010ecc9:	6a 18                	push   $0x18
c010eccb:	56                   	push   %esi
c010eccc:	e8 94 5a ff ff       	call   c0104765 <snprintf>
        thread_fork(name, &t[i], NULL, factorial, (void*) num + i, val - 1);
c010ecd1:	5a                   	pop    %edx
c010ecd2:	59                   	pop    %ecx
c010ecd3:	ff 75 bc             	pushl  -0x44(%ebp)
c010ecd6:	57                   	push   %edi
c010ecd7:	68 70 ec 10 c0       	push   $0xc010ec70
c010ecdc:	6a 00                	push   $0x0
c010ecde:	53                   	push   %ebx
c010ecdf:	56                   	push   %esi
c010ece0:	e8 91 97 ff ff       	call   c0108476 <thread_fork>
c010ece5:	47                   	inc    %edi
c010ece6:	83 c3 04             	add    $0x4,%ebx
c010ece9:	83 c4 20             	add    $0x20,%esp
c010ecec:	eb d0                	jmp    c010ecbe <factorial+0x4e>
    }

    int ret = 0;
    int tret = 0;
c010ecee:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    for (uint32_t i = 0; i < val; ++i) {
c010ecf5:	31 f6                	xor    %esi,%esi
    for (uint32_t i = 0; i < val; ++i) {
        snprintf(name, sizeof(name), "thread%d", num + i);
        thread_fork(name, &t[i], NULL, factorial, (void*) num + i, val - 1);
    }

    int ret = 0;
c010ecf7:	31 db                	xor    %ebx,%ebx
    int tret = 0;
    for (uint32_t i = 0; i < val; ++i) {
        thread_join(t[i], &tret);
c010ecf9:	8d 7d cc             	lea    -0x34(%ebp),%edi
c010ecfc:	50                   	push   %eax
c010ecfd:	50                   	push   %eax
c010ecfe:	57                   	push   %edi
c010ecff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ed02:	ff 34 b0             	pushl  (%eax,%esi,4)
c010ed05:	e8 16 95 ff ff       	call   c0108220 <thread_join>
        ret += tret;
c010ed0a:	03 5d cc             	add    -0x34(%ebp),%ebx
        thread_fork(name, &t[i], NULL, factorial, (void*) num + i, val - 1);
    }

    int ret = 0;
    int tret = 0;
    for (uint32_t i = 0; i < val; ++i) {
c010ed0d:	46                   	inc    %esi
c010ed0e:	83 c4 10             	add    $0x10,%esp
c010ed11:	39 75 0c             	cmp    %esi,0xc(%ebp)
c010ed14:	75 e6                	jne    c010ecfc <factorial+0x8c>
        thread_join(t[i], &tret);
        ret += tret;
c010ed16:	89 d8                	mov    %ebx,%eax
    }

    return ret;
}
c010ed18:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010ed1b:	5b                   	pop    %ebx
c010ed1c:	5e                   	pop    %esi
c010ed1d:	5f                   	pop    %edi
c010ed1e:	5d                   	pop    %ebp
c010ed1f:	c3                   	ret    

c010ed20 <threadtest6>:

int
threadtest6(int argc, char** argv) {
c010ed20:	55                   	push   %ebp
c010ed21:	89 e5                	mov    %esp,%ebp
c010ed23:	53                   	push   %ebx
c010ed24:	83 ec 10             	sub    $0x10,%esp
    (void) argc;
    (void) argv;

    print("Starting thread test 6...\n");
c010ed27:	68 1e 34 11 c0       	push   $0xc011341e
c010ed2c:	e8 37 55 ff ff       	call   c0104268 <print>
c010ed31:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i <= 6; ++i)
c010ed34:	bb 01 00 00 00       	mov    $0x1,%ebx
        print("factorial(%d) = %d\n", i, factorial((void*) 0, (uint64_t) i));
c010ed39:	50                   	push   %eax
c010ed3a:	50                   	push   %eax
c010ed3b:	53                   	push   %ebx
c010ed3c:	6a 00                	push   $0x0
c010ed3e:	e8 2d ff ff ff       	call   c010ec70 <factorial>
c010ed43:	83 c4 0c             	add    $0xc,%esp
c010ed46:	50                   	push   %eax
c010ed47:	53                   	push   %ebx
c010ed48:	68 39 34 11 c0       	push   $0xc0113439
c010ed4d:	e8 16 55 ff ff       	call   c0104268 <print>
    (void) argc;
    (void) argv;

    print("Starting thread test 6...\n");

    for (int i = 1; i <= 6; ++i)
c010ed52:	43                   	inc    %ebx
c010ed53:	83 c4 10             	add    $0x10,%esp
c010ed56:	83 fb 07             	cmp    $0x7,%ebx
c010ed59:	75 de                	jne    c010ed39 <threadtest6+0x19>
        print("factorial(%d) = %d\n", i, factorial((void*) 0, (uint64_t) i));

    print("Thread test 6 complete.\n");
c010ed5b:	83 ec 0c             	sub    $0xc,%esp
c010ed5e:	68 4d 34 11 c0       	push   $0xc011344d
c010ed63:	e8 00 55 ff ff       	call   c0104268 <print>

    return 0;
}
c010ed68:	31 c0                	xor    %eax,%eax
c010ed6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010ed6d:	c9                   	leave  
c010ed6e:	c3                   	ret    

c010ed6f <sum>:
#include <lib.h>
#include <test.h>
#include <thread.h>

int
sum(void* ptr, unsigned long val) {
c010ed6f:	55                   	push   %ebp
c010ed70:	89 e5                	mov    %esp,%ebp
c010ed72:	57                   	push   %edi
c010ed73:	53                   	push   %ebx
c010ed74:	83 ec 20             	sub    $0x20,%esp
c010ed77:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    (void) ptr;

    if (val < 2)
        return val;
c010ed7a:	89 d8                	mov    %ebx,%eax

int
sum(void* ptr, unsigned long val) {
    (void) ptr;

    if (val < 2)
c010ed7c:	83 fb 01             	cmp    $0x1,%ebx
c010ed7f:	76 51                	jbe    c010edd2 <sum+0x63>
        return val;

    char name[24] = {0};
c010ed81:	8d 7d e0             	lea    -0x20(%ebp),%edi
c010ed84:	b9 06 00 00 00       	mov    $0x6,%ecx
c010ed89:	31 c0                	xor    %eax,%eax
c010ed8b:	f3 ab                	rep stos %eax,%es:(%edi)
    snprintf(name, sizeof(name), "thread%d", val);
c010ed8d:	53                   	push   %ebx
c010ed8e:	68 15 34 11 c0       	push   $0xc0113415
c010ed93:	6a 18                	push   $0x18
c010ed95:	8d 7d e0             	lea    -0x20(%ebp),%edi
c010ed98:	57                   	push   %edi
c010ed99:	e8 c7 59 ff ff       	call   c0104765 <snprintf>

    struct thread* t;
    thread_fork(name, &t, NULL, sum, NULL, val - 1);
c010ed9e:	58                   	pop    %eax
c010ed9f:	5a                   	pop    %edx
c010eda0:	4b                   	dec    %ebx
c010eda1:	53                   	push   %ebx
c010eda2:	6a 00                	push   $0x0
c010eda4:	68 6f ed 10 c0       	push   $0xc010ed6f
c010eda9:	6a 00                	push   $0x0
c010edab:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010edae:	50                   	push   %eax
c010edaf:	57                   	push   %edi
c010edb0:	e8 c1 96 ff ff       	call   c0108476 <thread_fork>

    int tret = 0;
c010edb5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    thread_join(t, &tret);
c010edbc:	83 c4 18             	add    $0x18,%esp
c010edbf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010edc2:	50                   	push   %eax
c010edc3:	ff 75 d8             	pushl  -0x28(%ebp)
c010edc6:	e8 55 94 ff ff       	call   c0108220 <thread_join>

    return 1 + tret;
c010edcb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010edce:	40                   	inc    %eax
c010edcf:	83 c4 10             	add    $0x10,%esp
}
c010edd2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010edd5:	5b                   	pop    %ebx
c010edd6:	5f                   	pop    %edi
c010edd7:	5d                   	pop    %ebp
c010edd8:	c3                   	ret    

c010edd9 <threadtest7>:

int
threadtest7(int argc, char** argv) {
c010edd9:	55                   	push   %ebp
c010edda:	89 e5                	mov    %esp,%ebp
c010eddc:	56                   	push   %esi
c010eddd:	53                   	push   %ebx
    (void) argc;
    (void) argv;

    print("Starting thread test 7...\n");
c010edde:	83 ec 0c             	sub    $0xc,%esp
c010ede1:	68 66 34 11 c0       	push   $0xc0113466
c010ede6:	e8 7d 54 ff ff       	call   c0104268 <print>
c010edeb:	83 c4 10             	add    $0x10,%esp
c010edee:	bb 40 00 00 00       	mov    $0x40,%ebx

    for (int i = 0; i < 64; ++i) {
        int count = random() % 0xFF;
c010edf3:	e8 18 5d ff ff       	call   c0104b10 <random>
c010edf8:	6a 00                	push   $0x0
c010edfa:	68 ff 00 00 00       	push   $0xff
c010edff:	52                   	push   %edx
c010ee00:	50                   	push   %eax
c010ee01:	e8 82 0f 00 00       	call   c010fd88 <__umoddi3>
c010ee06:	5a                   	pop    %edx
c010ee07:	59                   	pop    %ecx
c010ee08:	89 c6                	mov    %eax,%esi
        assert(sum(NULL, count) == count);
c010ee0a:	50                   	push   %eax
c010ee0b:	6a 00                	push   $0x0
c010ee0d:	e8 5d ff ff ff       	call   c010ed6f <sum>
c010ee12:	83 c4 10             	add    $0x10,%esp
c010ee15:	39 f0                	cmp    %esi,%eax
c010ee17:	74 28                	je     c010ee41 <threadtest7+0x68>
c010ee19:	83 ec 0c             	sub    $0xc,%esp
c010ee1c:	68 c8 34 11 c0       	push   $0xc01134c8
c010ee21:	6a 21                	push   $0x21
c010ee23:	68 81 34 11 c0       	push   $0xc0113481
c010ee28:	68 94 34 11 c0       	push   $0xc0113494
c010ee2d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010ee32:	e8 31 54 ff ff       	call   c0104268 <print>
c010ee37:	83 c4 20             	add    $0x20,%esp
c010ee3a:	e8 44 21 ff ff       	call   c0100f83 <backtrace>
c010ee3f:	fa                   	cli    
c010ee40:	f4                   	hlt    
    (void) argc;
    (void) argv;

    print("Starting thread test 7...\n");

    for (int i = 0; i < 64; ++i) {
c010ee41:	4b                   	dec    %ebx
c010ee42:	75 af                	jne    c010edf3 <threadtest7+0x1a>
        int count = random() % 0xFF;
        assert(sum(NULL, count) == count);
    }

    print("Thread test 7 complete.\n");
c010ee44:	83 ec 0c             	sub    $0xc,%esp
c010ee47:	68 ae 34 11 c0       	push   $0xc01134ae
c010ee4c:	e8 17 54 ff ff       	call   c0104268 <print>

    return 0;
}
c010ee51:	31 c0                	xor    %eax,%eax
c010ee53:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010ee56:	5b                   	pop    %ebx
c010ee57:	5e                   	pop    %esi
c010ee58:	5d                   	pop    %ebp
c010ee59:	c3                   	ret    

c010ee5a <mallocthread>:
#define ITEMSIZE  997
#define NTHREADS  256

static
int
mallocthread(void* sm, unsigned long num) {
c010ee5a:	55                   	push   %ebp
c010ee5b:	89 e5                	mov    %esp,%ebp
c010ee5d:	57                   	push   %edi
c010ee5e:	56                   	push   %esi
c010ee5f:	53                   	push   %ebx
c010ee60:	83 ec 1c             	sub    $0x1c,%esp
c010ee63:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010ee66:	c7 45 e4 b0 04 00 00 	movl   $0x4b0,-0x1c(%ebp)
    struct semaphore* sem = sm;
    void* oldptr = NULL;
    void* oldptr2 = NULL;
c010ee6d:	31 d2                	xor    %edx,%edx

static
int
mallocthread(void* sm, unsigned long num) {
    struct semaphore* sem = sm;
    void* oldptr = NULL;
c010ee6f:	31 f6                	xor    %esi,%esi
c010ee71:	89 55 e0             	mov    %edx,-0x20(%ebp)
    void* oldptr2 = NULL;

    for (int i = 0; i < NTRIES; i++) {
        void* ptr = kmalloc(ITEMSIZE);
c010ee74:	83 ec 0c             	sub    $0xc,%esp
c010ee77:	68 e5 03 00 00       	push   $0x3e5
c010ee7c:	e8 eb 2e ff ff       	call   c0101d6c <kmalloc>
c010ee81:	89 c7                	mov    %eax,%edi
        if (ptr == NULL) {
c010ee83:	83 c4 10             	add    $0x10,%esp
c010ee86:	85 c0                	test   %eax,%eax
c010ee88:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ee8b:	75 32                	jne    c010eebf <mallocthread+0x65>
            if (sem) {
c010ee8d:	85 db                	test   %ebx,%ebx
c010ee8f:	74 19                	je     c010eeaa <mallocthread+0x50>
                print("thread %lu: kmalloc returned NULL\n",
c010ee91:	50                   	push   %eax
c010ee92:	50                   	push   %eax
c010ee93:	ff 75 0c             	pushl  0xc(%ebp)
c010ee96:	68 d4 34 11 c0       	push   $0xc01134d4
c010ee9b:	e8 c8 53 ff ff       	call   c0104268 <print>
                      num);
                V(sem);
c010eea0:	89 1c 24             	mov    %ebx,(%esp)
c010eea3:	e8 54 46 ff ff       	call   c01034fc <V>
c010eea8:	eb 0d                	jmp    c010eeb7 <mallocthread+0x5d>
                return -1;
            }
            print("kmalloc returned null; test failed.\n");
c010eeaa:	83 ec 0c             	sub    $0xc,%esp
c010eead:	68 f7 34 11 c0       	push   $0xc01134f7
c010eeb2:	e8 b1 53 ff ff       	call   c0104268 <print>
            return -1;
c010eeb7:	83 c4 10             	add    $0x10,%esp
c010eeba:	83 c8 ff             	or     $0xffffffff,%eax
c010eebd:	eb 49                	jmp    c010ef08 <mallocthread+0xae>
        }
        if (oldptr2)
c010eebf:	85 d2                	test   %edx,%edx
c010eec1:	74 0c                	je     c010eecf <mallocthread+0x75>
            kfree(oldptr2);
c010eec3:	83 ec 0c             	sub    $0xc,%esp
c010eec6:	52                   	push   %edx
c010eec7:	e8 a0 2f ff ff       	call   c0101e6c <kfree>
c010eecc:	83 c4 10             	add    $0x10,%esp
c010eecf:	89 f2                	mov    %esi,%edx
mallocthread(void* sm, unsigned long num) {
    struct semaphore* sem = sm;
    void* oldptr = NULL;
    void* oldptr2 = NULL;

    for (int i = 0; i < NTRIES; i++) {
c010eed1:	ff 4d e4             	decl   -0x1c(%ebp)
c010eed4:	74 04                	je     c010eeda <mallocthread+0x80>
c010eed6:	89 fe                	mov    %edi,%esi
c010eed8:	eb 97                	jmp    c010ee71 <mallocthread+0x17>
            kfree(oldptr2);
        oldptr2 = oldptr;
        oldptr = ptr;
    }

    if (oldptr2)
c010eeda:	85 f6                	test   %esi,%esi
c010eedc:	74 0c                	je     c010eeea <mallocthread+0x90>
        kfree(oldptr2);
c010eede:	83 ec 0c             	sub    $0xc,%esp
c010eee1:	56                   	push   %esi
c010eee2:	e8 85 2f ff ff       	call   c0101e6c <kfree>
c010eee7:	83 c4 10             	add    $0x10,%esp
    if (oldptr)
        kfree(oldptr);
c010eeea:	83 ec 0c             	sub    $0xc,%esp
c010eeed:	57                   	push   %edi
c010eeee:	e8 79 2f ff ff       	call   c0101e6c <kfree>
    if (sem)
c010eef3:	83 c4 10             	add    $0x10,%esp
c010eef6:	85 db                	test   %ebx,%ebx
c010eef8:	74 0c                	je     c010ef06 <mallocthread+0xac>
        V(sem);
c010eefa:	83 ec 0c             	sub    $0xc,%esp
c010eefd:	53                   	push   %ebx
c010eefe:	e8 f9 45 ff ff       	call   c01034fc <V>
c010ef03:	83 c4 10             	add    $0x10,%esp

    if (oldptr2)
        kfree(oldptr2);
    if (oldptr)
        kfree(oldptr);
    if (sem)
c010ef06:	31 c0                	xor    %eax,%eax
        V(sem);

    return 0;
}
c010ef08:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010ef0b:	5b                   	pop    %ebx
c010ef0c:	5e                   	pop    %esi
c010ef0d:	5f                   	pop    %edi
c010ef0e:	5d                   	pop    %ebp
c010ef0f:	c3                   	ret    

c010ef10 <malloctest>:

int
malloctest(int argc, char** argv) {
c010ef10:	55                   	push   %ebp
c010ef11:	89 e5                	mov    %esp,%ebp
c010ef13:	83 ec 14             	sub    $0x14,%esp
    (void)argc;
    (void)argv;

    print("Starting kmalloc test...\n");
c010ef16:	68 1c 35 11 c0       	push   $0xc011351c
c010ef1b:	e8 48 53 ff ff       	call   c0104268 <print>

    mallocthread(NULL, 0);
c010ef20:	58                   	pop    %eax
c010ef21:	5a                   	pop    %edx
c010ef22:	6a 00                	push   $0x0
c010ef24:	6a 00                	push   $0x0
c010ef26:	e8 2f ff ff ff       	call   c010ee5a <mallocthread>

    print("kmalloc test done\n");
c010ef2b:	c7 04 24 36 35 11 c0 	movl   $0xc0113536,(%esp)
c010ef32:	e8 31 53 ff ff       	call   c0104268 <print>

    return 0;
}
c010ef37:	31 c0                	xor    %eax,%eax
c010ef39:	c9                   	leave  
c010ef3a:	c3                   	ret    

c010ef3b <mallocstress>:

int
mallocstress(int argc, char** argv) {
c010ef3b:	55                   	push   %ebp
c010ef3c:	89 e5                	mov    %esp,%ebp
c010ef3e:	56                   	push   %esi
c010ef3f:	53                   	push   %ebx
    int i, result;

    (void)argc;
    (void)argv;

    sem = semaphore_create("mallocstress", 0);
c010ef40:	52                   	push   %edx
c010ef41:	52                   	push   %edx
c010ef42:	6a 00                	push   $0x0
c010ef44:	68 49 35 11 c0       	push   $0xc0113549
c010ef49:	e8 fb 43 ff ff       	call   c0103349 <semaphore_create>
c010ef4e:	89 c3                	mov    %eax,%ebx
    if (sem == NULL)
c010ef50:	83 c4 10             	add    $0x10,%esp
c010ef53:	85 c0                	test   %eax,%eax
c010ef55:	75 19                	jne    c010ef70 <mallocstress+0x35>
        panic("mallocstress: semaphore_create failed\n");
c010ef57:	68 56 35 11 c0       	push   $0xc0113556
c010ef5c:	68 c4 37 11 c0       	push   $0xc01137c4
c010ef61:	6a 56                	push   $0x56
c010ef63:	68 7d 35 11 c0       	push   $0xc011357d
c010ef68:	e8 08 4d ff ff       	call   c0103c75 <_panic>
c010ef6d:	83 c4 10             	add    $0x10,%esp

    print("Starting kmalloc stress test...\n");
c010ef70:	83 ec 0c             	sub    $0xc,%esp
c010ef73:	68 8f 35 11 c0       	push   $0xc011358f
c010ef78:	e8 eb 52 ff ff       	call   c0104268 <print>
c010ef7d:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < NTHREADS; i++) {
c010ef80:	31 f6                	xor    %esi,%esi
        result = thread_fork("mallocstress", NULL, NULL, mallocthread, sem, i);
c010ef82:	50                   	push   %eax
c010ef83:	50                   	push   %eax
c010ef84:	56                   	push   %esi
c010ef85:	53                   	push   %ebx
c010ef86:	68 5a ee 10 c0       	push   $0xc010ee5a
c010ef8b:	6a 00                	push   $0x0
c010ef8d:	6a 00                	push   $0x0
c010ef8f:	68 49 35 11 c0       	push   $0xc0113549
c010ef94:	e8 dd 94 ff ff       	call   c0108476 <thread_fork>
        if (result)
c010ef99:	83 c4 20             	add    $0x20,%esp
c010ef9c:	85 c0                	test   %eax,%eax
c010ef9e:	74 19                	je     c010efb9 <mallocstress+0x7e>
            panic("mallocstress: thread_fork failed\n");
c010efa0:	68 b0 35 11 c0       	push   $0xc01135b0
c010efa5:	68 c4 37 11 c0       	push   $0xc01137c4
c010efaa:	6a 5d                	push   $0x5d
c010efac:	68 7d 35 11 c0       	push   $0xc011357d
c010efb1:	e8 bf 4c ff ff       	call   c0103c75 <_panic>
c010efb6:	83 c4 10             	add    $0x10,%esp
    if (sem == NULL)
        panic("mallocstress: semaphore_create failed\n");

    print("Starting kmalloc stress test...\n");

    for (i = 0; i < NTHREADS; i++) {
c010efb9:	46                   	inc    %esi
c010efba:	81 fe 00 01 00 00    	cmp    $0x100,%esi
c010efc0:	75 c0                	jne    c010ef82 <mallocstress+0x47>
        if (result)
            panic("mallocstress: thread_fork failed\n");
    }

    for (i = 0; i < NTHREADS; i++)
        P(sem);
c010efc2:	83 ec 0c             	sub    $0xc,%esp
c010efc5:	53                   	push   %ebx
c010efc6:	e8 59 44 ff ff       	call   c0103424 <P>
        result = thread_fork("mallocstress", NULL, NULL, mallocthread, sem, i);
        if (result)
            panic("mallocstress: thread_fork failed\n");
    }

    for (i = 0; i < NTHREADS; i++)
c010efcb:	83 c4 10             	add    $0x10,%esp
c010efce:	4e                   	dec    %esi
c010efcf:	75 f1                	jne    c010efc2 <mallocstress+0x87>
        P(sem);

    semaphore_destroy(sem);
c010efd1:	83 ec 0c             	sub    $0xc,%esp
c010efd4:	53                   	push   %ebx
c010efd5:	e8 ea 43 ff ff       	call   c01033c4 <semaphore_destroy>
    print("kmalloc stress test done\n");
c010efda:	c7 04 24 d2 35 11 c0 	movl   $0xc01135d2,(%esp)
c010efe1:	e8 82 52 ff ff       	call   c0104268 <print>
c010efe6:	fb                   	sti    

    sti();

    return 0;
}
c010efe7:	31 c0                	xor    %eax,%eax
c010efe9:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010efec:	5b                   	pop    %ebx
c010efed:	5e                   	pop    %esi
c010efee:	5d                   	pop    %ebp
c010efef:	c3                   	ret    

c010eff0 <malloctest2>:
    print("malloctest2: passed\n");
    return 0;
}

int
malloctest2(int argc, char** argv) {
c010eff0:	55                   	push   %ebp
c010eff1:	89 e5                	mov    %esp,%ebp
c010eff3:	57                   	push   %edi
c010eff4:	56                   	push   %esi
c010eff5:	53                   	push   %ebx
c010eff6:	83 ec 3c             	sub    $0x3c,%esp
c010eff9:	c7 45 c0 08 00 00 00 	movl   $0x8,-0x40(%ebp)
    (void) argc;
    (void) argv;

    for (int i = 0; i < 8; ++i)
        malloctester(random() % 16384 + 16384);
c010f000:	e8 0b 5b ff ff       	call   c0104b10 <random>
c010f005:	25 ff 3f 00 00       	and    $0x3fff,%eax
c010f00a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010f00d:	05 00 40 00 00       	add    $0x4000,%eax
c010f012:	89 45 e0             	mov    %eax,-0x20(%ebp)

    ptrspace = numptrs * sizeof(void*);

    /* Use the subpage allocator for the pointer blocks too. */
    blocksize = PG_SIZE / 4;
    numptrblocks = DIVROUNDUP(ptrspace, blocksize);
c010f015:	8d 1c 85 ff 03 00 00 	lea    0x3ff(,%eax,4),%ebx
c010f01c:	c1 eb 0a             	shr    $0xa,%ebx

    print("malloctest2: %u objects, %u pointer blocks\n",
c010f01f:	51                   	push   %ecx
c010f020:	53                   	push   %ebx
c010f021:	50                   	push   %eax
c010f022:	68 ec 35 11 c0       	push   $0xc01135ec
c010f027:	e8 3c 52 ff ff       	call   c0104268 <print>
          numptrs, numptrblocks);

    ptrblocks = kmalloc(numptrblocks * sizeof(ptrblocks[0]));
c010f02c:	8d 04 9d 00 00 00 00 	lea    0x0(,%ebx,4),%eax
c010f033:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010f036:	89 04 24             	mov    %eax,(%esp)
c010f039:	e8 2e 2d ff ff       	call   c0101d6c <kmalloc>
c010f03e:	89 c7                	mov    %eax,%edi
    if (ptrblocks == NULL)
c010f040:	83 c4 10             	add    $0x10,%esp
c010f043:	85 c0                	test   %eax,%eax
c010f045:	75 1c                	jne    c010f063 <malloctest2+0x73>
        panic("malloctest2: failed on pointer block array\n");
c010f047:	68 18 36 11 c0       	push   $0xc0113618
c010f04c:	68 b4 37 11 c0       	push   $0xc01137b4
c010f051:	68 83 00 00 00       	push   $0x83
c010f056:	68 7d 35 11 c0       	push   $0xc011357d
c010f05b:	e8 15 4c ff ff       	call   c0103c75 <_panic>
c010f060:	83 c4 10             	add    $0x10,%esp
    print("malloctest2: passed\n");
    return 0;
}

int
malloctest2(int argc, char** argv) {
c010f063:	31 f6                	xor    %esi,%esi

    ptrblocks = kmalloc(numptrblocks * sizeof(ptrblocks[0]));
    if (ptrblocks == NULL)
        panic("malloctest2: failed on pointer block array\n");
    for (i = 0; i < numptrblocks; i++) {
        ptrblocks[i] = kmalloc(blocksize);
c010f065:	83 ec 0c             	sub    $0xc,%esp
c010f068:	68 00 04 00 00       	push   $0x400
c010f06d:	e8 fa 2c ff ff       	call   c0101d6c <kmalloc>
c010f072:	89 04 b7             	mov    %eax,(%edi,%esi,4)
        if (ptrblocks[i] == NULL)
c010f075:	83 c4 10             	add    $0x10,%esp
c010f078:	85 c0                	test   %eax,%eax
c010f07a:	75 20                	jne    c010f09c <malloctest2+0xac>
            panic("malloctest2: failed on pointer block %u\n", i);
c010f07c:	83 ec 0c             	sub    $0xc,%esp
c010f07f:	56                   	push   %esi
c010f080:	68 44 36 11 c0       	push   $0xc0113644
c010f085:	68 b4 37 11 c0       	push   $0xc01137b4
c010f08a:	68 87 00 00 00       	push   $0x87
c010f08f:	68 7d 35 11 c0       	push   $0xc011357d
c010f094:	e8 dc 4b ff ff       	call   c0103c75 <_panic>
c010f099:	83 c4 20             	add    $0x20,%esp
          numptrs, numptrblocks);

    ptrblocks = kmalloc(numptrblocks * sizeof(ptrblocks[0]));
    if (ptrblocks == NULL)
        panic("malloctest2: failed on pointer block array\n");
    for (i = 0; i < numptrblocks; i++) {
c010f09c:	46                   	inc    %esi
c010f09d:	39 f3                	cmp    %esi,%ebx
c010f09f:	75 c4                	jne    c010f065 <malloctest2+0x75>
c010f0a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f0a4:	05 01 40 00 00       	add    $0x4001,%eax
c010f0a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010f0ac:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c010f0b3:	31 f6                	xor    %esi,%esi
c010f0b5:	31 db                	xor    %ebx,%ebx
c010f0b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0ba:	05 ff ff ff 07       	add    $0x7ffffff,%eax
c010f0bf:	c1 e0 05             	shl    $0x5,%eax
c010f0c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010f0c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0c8:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010f0cb:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    curpos = 0;
    cursizeindex = 0;
    totalsize = 0;
    for (i = 0; i < numptrs; i++) {
        cursize = sizes[cursizeindex];
        ptr = kmalloc(cursize);
c010f0ce:	83 ec 0c             	sub    $0xc,%esp
c010f0d1:	6a 20                	push   $0x20
c010f0d3:	e8 94 2c ff ff       	call   c0101d6c <kmalloc>
        if (ptr == NULL) {
c010f0d8:	83 c4 10             	add    $0x10,%esp
c010f0db:	85 c0                	test   %eax,%eax
c010f0dd:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010f0e0:	75 4e                	jne    c010f130 <malloctest2+0x140>
c010f0e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
            print("malloctest2: failed on object %u size %u\n",
c010f0e5:	50                   	push   %eax
c010f0e6:	6a 20                	push   $0x20
c010f0e8:	51                   	push   %ecx
c010f0e9:	68 6d 36 11 c0       	push   $0xc011366d
c010f0ee:	e8 75 51 ff ff       	call   c0104268 <print>
                  i, cursize);
            print("malloctest2: pos %u in pointer block %u\n",
c010f0f3:	83 c4 0c             	add    $0xc,%esp
c010f0f6:	56                   	push   %esi
c010f0f7:	53                   	push   %ebx
c010f0f8:	68 97 36 11 c0       	push   $0xc0113697
c010f0fd:	e8 66 51 ff ff       	call   c0104268 <print>
                  curpos, curblock);
            print("malloctest2: total so far %u\n", totalsize);
c010f102:	58                   	pop    %eax
c010f103:	5a                   	pop    %edx
c010f104:	ff 75 d4             	pushl  -0x2c(%ebp)
c010f107:	68 c0 36 11 c0       	push   $0xc01136c0
c010f10c:	e8 57 51 ff ff       	call   c0104268 <print>
            panic("malloctest2: failed.\n");
c010f111:	68 de 36 11 c0       	push   $0xc01136de
c010f116:	68 b4 37 11 c0       	push   $0xc01137b4
c010f11b:	68 97 00 00 00       	push   $0x97
c010f120:	68 7d 35 11 c0       	push   $0xc011357d
c010f125:	e8 4b 4b ff ff       	call   c0103c75 <_panic>
c010f12a:	83 c4 20             	add    $0x20,%esp
c010f12d:	8b 45 d0             	mov    -0x30(%ebp),%eax
          numptrs, numptrblocks);

    ptrblocks = kmalloc(numptrblocks * sizeof(ptrblocks[0]));
    if (ptrblocks == NULL)
        panic("malloctest2: failed on pointer block array\n");
    for (i = 0; i < numptrblocks; i++) {
c010f130:	31 c9                	xor    %ecx,%ecx
                  curpos, curblock);
            print("malloctest2: total so far %u\n", totalsize);
            panic("malloctest2: failed.\n");
        }
        for (j = 0; j < cursize; j++)
            ptr[j] = (unsigned char) i;
c010f132:	8a 55 e4             	mov    -0x1c(%ebp),%dl
c010f135:	4a                   	dec    %edx
c010f136:	88 14 08             	mov    %dl,(%eax,%ecx,1)
            print("malloctest2: pos %u in pointer block %u\n",
                  curpos, curblock);
            print("malloctest2: total so far %u\n", totalsize);
            panic("malloctest2: failed.\n");
        }
        for (j = 0; j < cursize; j++)
c010f139:	41                   	inc    %ecx
c010f13a:	83 f9 20             	cmp    $0x20,%ecx
c010f13d:	75 f7                	jne    c010f136 <malloctest2+0x146>
            ptr[j] = (unsigned char) i;
        ptrblocks[curblock][curpos] = ptr;
c010f13f:	8b 0c b7             	mov    (%edi,%esi,4),%ecx
c010f142:	89 04 99             	mov    %eax,(%ecx,%ebx,4)
        curpos++;
c010f145:	43                   	inc    %ebx
        if (curpos >= blocksize / sizeof(void*)) {
c010f146:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
c010f14c:	76 03                	jbe    c010f151 <malloctest2+0x161>
            curblock++;
c010f14e:	46                   	inc    %esi
            curpos = 0;
c010f14f:	31 db                	xor    %ebx,%ebx
c010f151:	ff 45 e4             	incl   -0x1c(%ebp)

    curblock = 0;
    curpos = 0;
    cursizeindex = 0;
    totalsize = 0;
    for (i = 0; i < numptrs; i++) {
c010f154:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f157:	39 55 dc             	cmp    %edx,-0x24(%ebp)
c010f15a:	0f 85 57 ff ff ff    	jne    c010f0b7 <malloctest2+0xc7>
c010f160:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f163:	c1 e0 05             	shl    $0x5,%eax
c010f166:	89 45 d0             	mov    %eax,-0x30(%ebp)
            curpos = 0;
        }
        totalsize += cursize;
    }

    print("malloctest2: %u bytes allocated\n", totalsize);
c010f169:	53                   	push   %ebx
c010f16a:	53                   	push   %ebx
c010f16b:	50                   	push   %eax
c010f16c:	68 f4 36 11 c0       	push   $0xc01136f4
c010f171:	e8 f2 50 ff ff       	call   c0104268 <print>
c010f176:	83 c4 10             	add    $0x10,%esp
        curpos++;
        if (curpos >= blocksize / sizeof(void*)) {
            curblock++;
            curpos = 0;
        }
        totalsize += cursize;
c010f179:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f17c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    print("malloctest2: %u bytes allocated\n", totalsize);

    curblock = 0;
    curpos = 0;
    cursizeindex = 0;
    for (i = 0; i < numptrs; i++) {
c010f17f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    }

    print("malloctest2: %u bytes allocated\n", totalsize);

    curblock = 0;
    curpos = 0;
c010f186:	31 f6                	xor    %esi,%esi
        totalsize += cursize;
    }

    print("malloctest2: %u bytes allocated\n", totalsize);

    curblock = 0;
c010f188:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    curpos = 0;
    cursizeindex = 0;
    for (i = 0; i < numptrs; i++) {
        cursize = sizes[cursizeindex];
        ptr = ptrblocks[curblock][curpos];
c010f18f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f192:	8b 04 87             	mov    (%edi,%eax,4),%eax
c010f195:	8b 04 b0             	mov    (%eax,%esi,4),%eax
c010f198:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(ptr != NULL);
c010f19b:	85 c0                	test   %eax,%eax
c010f19d:	75 2b                	jne    c010f1ca <malloctest2+0x1da>
c010f19f:	83 ec 0c             	sub    $0xc,%esp
c010f1a2:	68 b4 37 11 c0       	push   $0xc01137b4
c010f1a7:	68 ac 00 00 00       	push   $0xac
c010f1ac:	68 7d 35 11 c0       	push   $0xc011357d
c010f1b1:	68 15 37 11 c0       	push   $0xc0113715
c010f1b6:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f1bb:	e8 a8 50 ff ff       	call   c0104268 <print>
c010f1c0:	83 c4 20             	add    $0x20,%esp
c010f1c3:	e8 bb 1d ff ff       	call   c0100f83 <backtrace>
c010f1c8:	fa                   	cli    
c010f1c9:	f4                   	hlt    
        totalsize += cursize;
    }

    print("malloctest2: %u bytes allocated\n", totalsize);

    curblock = 0;
c010f1ca:	31 db                	xor    %ebx,%ebx
    for (i = 0; i < numptrs; i++) {
        cursize = sizes[cursizeindex];
        ptr = ptrblocks[curblock][curpos];
        assert(ptr != NULL);
        for (j = 0; j < cursize; j++) {
            if (ptr[j] == (unsigned char) i)
c010f1cc:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010f1d0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010f1d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f1d6:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
c010f1da:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c010f1dd:	74 62                	je     c010f241 <malloctest2+0x251>
                continue;
            print("malloctest2: failed on object %u size %u\n",
c010f1df:	50                   	push   %eax
c010f1e0:	6a 20                	push   $0x20
c010f1e2:	ff 75 dc             	pushl  -0x24(%ebp)
c010f1e5:	68 6d 36 11 c0       	push   $0xc011366d
c010f1ea:	e8 79 50 ff ff       	call   c0104268 <print>
                  i, cursize);
            print("malloctest2: pos %u in pointer block %u\n",
c010f1ef:	83 c4 0c             	add    $0xc,%esp
c010f1f2:	ff 75 d4             	pushl  -0x2c(%ebp)
c010f1f5:	56                   	push   %esi
c010f1f6:	68 97 36 11 c0       	push   $0xc0113697
c010f1fb:	e8 68 50 ff ff       	call   c0104268 <print>
                  curpos, curblock);
            print("malloctest2: at object offset %u\n", j);
c010f200:	5a                   	pop    %edx
c010f201:	59                   	pop    %ecx
c010f202:	53                   	push   %ebx
c010f203:	68 21 37 11 c0       	push   $0xc0113721
c010f208:	e8 5b 50 ff ff       	call   c0104268 <print>
            print("malloctest2: expected 0x%x, found 0x%x\n",
c010f20d:	83 c4 0c             	add    $0xc,%esp
c010f210:	ff 75 c4             	pushl  -0x3c(%ebp)
c010f213:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f216:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
c010f21a:	50                   	push   %eax
c010f21b:	68 43 37 11 c0       	push   $0xc0113743
c010f220:	e8 43 50 ff ff       	call   c0104268 <print>
                  ptr[j], (unsigned char) i);
            panic("malloctest2: failed.\n");
c010f225:	68 de 36 11 c0       	push   $0xc01136de
c010f22a:	68 b4 37 11 c0       	push   $0xc01137b4
c010f22f:	68 b7 00 00 00       	push   $0xb7
c010f234:	68 7d 35 11 c0       	push   $0xc011357d
c010f239:	e8 37 4a ff ff       	call   c0103c75 <_panic>
c010f23e:	83 c4 20             	add    $0x20,%esp
    cursizeindex = 0;
    for (i = 0; i < numptrs; i++) {
        cursize = sizes[cursizeindex];
        ptr = ptrblocks[curblock][curpos];
        assert(ptr != NULL);
        for (j = 0; j < cursize; j++) {
c010f241:	43                   	inc    %ebx
c010f242:	83 fb 20             	cmp    $0x20,%ebx
c010f245:	75 8c                	jne    c010f1d3 <malloctest2+0x1e3>
            print("malloctest2: at object offset %u\n", j);
            print("malloctest2: expected 0x%x, found 0x%x\n",
                  ptr[j], (unsigned char) i);
            panic("malloctest2: failed.\n");
        }
        kfree(ptr);
c010f247:	83 ec 0c             	sub    $0xc,%esp
c010f24a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010f24d:	e8 1a 2c ff ff       	call   c0101e6c <kfree>
        curpos++;
c010f252:	46                   	inc    %esi
        if (curpos >= blocksize / sizeof(void*)) {
c010f253:	83 c4 10             	add    $0x10,%esp
c010f256:	81 fe ff 00 00 00    	cmp    $0xff,%esi
c010f25c:	76 05                	jbe    c010f263 <malloctest2+0x273>
            curblock++;
c010f25e:	ff 45 d4             	incl   -0x2c(%ebp)
            curpos = 0;
c010f261:	31 f6                	xor    %esi,%esi
        }
        assert(totalsize > 0);
c010f263:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010f267:	75 2b                	jne    c010f294 <malloctest2+0x2a4>
c010f269:	83 ec 0c             	sub    $0xc,%esp
c010f26c:	68 b4 37 11 c0       	push   $0xc01137b4
c010f271:	68 bf 00 00 00       	push   $0xbf
c010f276:	68 7d 35 11 c0       	push   $0xc011357d
c010f27b:	68 6b 37 11 c0       	push   $0xc011376b
c010f280:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f285:	e8 de 4f ff ff       	call   c0104268 <print>
c010f28a:	83 c4 20             	add    $0x20,%esp
c010f28d:	e8 f1 1c ff ff       	call   c0100f83 <backtrace>
c010f292:	fa                   	cli    
c010f293:	f4                   	hlt    
        totalsize -= cursize;
c010f294:	83 6d c8 20          	subl   $0x20,-0x38(%ebp)
    print("malloctest2: %u bytes allocated\n", totalsize);

    curblock = 0;
    curpos = 0;
    cursizeindex = 0;
    for (i = 0; i < numptrs; i++) {
c010f298:	ff 45 dc             	incl   -0x24(%ebp)
c010f29b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f29e:	39 55 e0             	cmp    %edx,-0x20(%ebp)
c010f2a1:	0f 87 e8 fe ff ff    	ja     c010f18f <malloctest2+0x19f>
            curpos = 0;
        }
        assert(totalsize > 0);
        totalsize -= cursize;
    }
    assert(totalsize == 0);
c010f2a7:	6b 45 d8 e0          	imul   $0xffffffe0,-0x28(%ebp),%eax
c010f2ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f2ae:	8d 84 02 00 00 f8 ff 	lea    -0x80000(%edx,%eax,1),%eax
c010f2b5:	85 c0                	test   %eax,%eax
c010f2b7:	74 2b                	je     c010f2e4 <malloctest2+0x2f4>
c010f2b9:	83 ec 0c             	sub    $0xc,%esp
c010f2bc:	68 b4 37 11 c0       	push   $0xc01137b4
c010f2c1:	68 c2 00 00 00       	push   $0xc2
c010f2c6:	68 7d 35 11 c0       	push   $0xc011357d
c010f2cb:	68 79 37 11 c0       	push   $0xc0113779
c010f2d0:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f2d5:	e8 8e 4f ff ff       	call   c0104268 <print>
c010f2da:	83 c4 20             	add    $0x20,%esp
c010f2dd:	e8 a1 1c ff ff       	call   c0100f83 <backtrace>
c010f2e2:	fa                   	cli    
c010f2e3:	f4                   	hlt    
c010f2e4:	89 fe                	mov    %edi,%esi
c010f2e6:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010f2e9:	01 fb                	add    %edi,%ebx

    for (i = 0; i < numptrblocks; i++) {
        assert(ptrblocks[i] != NULL);
c010f2eb:	83 3e 00             	cmpl   $0x0,(%esi)
c010f2ee:	75 2b                	jne    c010f31b <malloctest2+0x32b>
c010f2f0:	83 ec 0c             	sub    $0xc,%esp
c010f2f3:	68 b4 37 11 c0       	push   $0xc01137b4
c010f2f8:	68 c5 00 00 00       	push   $0xc5
c010f2fd:	68 7d 35 11 c0       	push   $0xc011357d
c010f302:	68 88 37 11 c0       	push   $0xc0113788
c010f307:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f30c:	e8 57 4f ff ff       	call   c0104268 <print>
c010f311:	83 c4 20             	add    $0x20,%esp
c010f314:	e8 6a 1c ff ff       	call   c0100f83 <backtrace>
c010f319:	fa                   	cli    
c010f31a:	f4                   	hlt    
        kfree(ptrblocks[i]);
c010f31b:	83 ec 0c             	sub    $0xc,%esp
c010f31e:	ff 36                	pushl  (%esi)
c010f320:	e8 47 2b ff ff       	call   c0101e6c <kfree>
c010f325:	83 c6 04             	add    $0x4,%esi
        assert(totalsize > 0);
        totalsize -= cursize;
    }
    assert(totalsize == 0);

    for (i = 0; i < numptrblocks; i++) {
c010f328:	83 c4 10             	add    $0x10,%esp
c010f32b:	39 f3                	cmp    %esi,%ebx
c010f32d:	75 bc                	jne    c010f2eb <malloctest2+0x2fb>
        assert(ptrblocks[i] != NULL);
        kfree(ptrblocks[i]);
    }
    kfree(ptrblocks);
c010f32f:	83 ec 0c             	sub    $0xc,%esp
c010f332:	57                   	push   %edi
c010f333:	e8 34 2b ff ff       	call   c0101e6c <kfree>

    print("malloctest2: passed\n");
c010f338:	c7 04 24 9d 37 11 c0 	movl   $0xc011379d,(%esp)
c010f33f:	e8 24 4f ff ff       	call   c0104268 <print>
int
malloctest2(int argc, char** argv) {
    (void) argc;
    (void) argv;

    for (int i = 0; i < 8; ++i)
c010f344:	83 c4 10             	add    $0x10,%esp
c010f347:	ff 4d c0             	decl   -0x40(%ebp)
c010f34a:	0f 85 b0 fc ff ff    	jne    c010f000 <malloctest2+0x10>
        malloctester(random() % 16384 + 16384);

    return 0;
}
c010f350:	31 c0                	xor    %eax,%eax
c010f352:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010f355:	5b                   	pop    %ebx
c010f356:	5e                   	pop    %esi
c010f357:	5f                   	pop    %edi
c010f358:	5d                   	pop    %ebp
c010f359:	c3                   	ret    

c010f35a <wait_and_set>:

/*
 * Helper function that does nothing for a while,
 * then updates cv_var to 1
 */
int wait_and_set(void* stuff, unsigned long num) {
c010f35a:	55                   	push   %ebp
c010f35b:	89 e5                	mov    %esp,%ebp
    (void) stuff;
    (void) num;

    cv_var = 1;
c010f35d:	c7 05 a8 d1 14 c0 01 	movl   $0x1,0xc014d1a8
c010f364:	00 00 00 
    return 0;
}
c010f367:	31 c0                	xor    %eax,%eax
c010f369:	5d                   	pop    %ebp
c010f36a:	c3                   	ret    

c010f36b <signal_sleep>:

/*
 * Helper function that puts a thread to sleep on test_cv's
 * wait channel and once awoken, increments signal_wakes by 1
 */
int signal_sleep(void* stuff, unsigned long num) {
c010f36b:	55                   	push   %ebp
c010f36c:	89 e5                	mov    %esp,%ebp
c010f36e:	83 ec 14             	sub    $0x14,%esp
    (void) stuff;
    (void) num;

    // Put the thread on testcv's wait channel
    spinlock_acquire(&test_cv->cv_splock);
c010f371:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f376:	83 c0 08             	add    $0x8,%eax
c010f379:	50                   	push   %eax
c010f37a:	e8 b4 42 ff ff       	call   c0103633 <spinlock_acquire>
    wchan_sleep(test_cv->cv_wchan, &test_cv->cv_splock);
c010f37f:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f384:	5a                   	pop    %edx
c010f385:	59                   	pop    %ecx
c010f386:	8d 50 08             	lea    0x8(%eax),%edx
c010f389:	52                   	push   %edx
c010f38a:	ff 70 04             	pushl  0x4(%eax)
c010f38d:	e8 98 46 ff ff       	call   c0103a2a <wchan_sleep>
    signal_wakes++;
c010f392:	a1 a4 d1 14 c0       	mov    0xc014d1a4,%eax
c010f397:	40                   	inc    %eax
c010f398:	a3 a4 d1 14 c0       	mov    %eax,0xc014d1a4
    spinlock_release(&test_cv->cv_splock);
c010f39d:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f3a2:	83 c0 08             	add    $0x8,%eax
c010f3a5:	89 04 24             	mov    %eax,(%esp)
c010f3a8:	e8 3c 43 ff ff       	call   c01036e9 <spinlock_release>

    return 0;
}
c010f3ad:	31 c0                	xor    %eax,%eax
c010f3af:	c9                   	leave  
c010f3b0:	c3                   	ret    

c010f3b1 <broadcast_sleep>:

/*
 * Helper function that decrements broadcast_wakes, puts a thread to sleep
 * on test_cv's wait channel and once awoken, increments broadcast_wakes
 */
int broadcast_sleep(void* stuff, unsigned long num) {
c010f3b1:	55                   	push   %ebp
c010f3b2:	89 e5                	mov    %esp,%ebp
c010f3b4:	83 ec 14             	sub    $0x14,%esp
    (void) stuff;
    (void) num;
    spinlock_acquire(&test_cv->cv_splock);
c010f3b7:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f3bc:	83 c0 08             	add    $0x8,%eax
c010f3bf:	50                   	push   %eax
c010f3c0:	e8 6e 42 ff ff       	call   c0103633 <spinlock_acquire>
    broadcast_wakes--;
c010f3c5:	a1 a0 d1 14 c0       	mov    0xc014d1a0,%eax
c010f3ca:	48                   	dec    %eax
c010f3cb:	a3 a0 d1 14 c0       	mov    %eax,0xc014d1a0
    // Put the thread on testcv's wait channel
    wchan_sleep(test_cv->cv_wchan, &test_cv->cv_splock);
c010f3d0:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f3d5:	5a                   	pop    %edx
c010f3d6:	59                   	pop    %ecx
c010f3d7:	8d 50 08             	lea    0x8(%eax),%edx
c010f3da:	52                   	push   %edx
c010f3db:	ff 70 04             	pushl  0x4(%eax)
c010f3de:	e8 47 46 ff ff       	call   c0103a2a <wchan_sleep>
    // Should only get here if awoken by the broadcast
    broadcast_wakes++;
c010f3e3:	a1 a0 d1 14 c0       	mov    0xc014d1a0,%eax
c010f3e8:	40                   	inc    %eax
c010f3e9:	a3 a0 d1 14 c0       	mov    %eax,0xc014d1a0
    spinlock_release(&test_cv->cv_splock);
c010f3ee:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f3f3:	83 c0 08             	add    $0x8,%eax
c010f3f6:	89 04 24             	mov    %eax,(%esp)
c010f3f9:	e8 eb 42 ff ff       	call   c01036e9 <spinlock_release>

    return 0;
}
c010f3fe:	31 c0                	xor    %eax,%eax
c010f400:	c9                   	leave  
c010f401:	c3                   	ret    

c010f402 <test_create_cv>:
static volatile unsigned int broadcast_wakes;

/*
 * Simply makes sure cv_create succeeds and returns a non-null value
 */
int test_create_cv() {
c010f402:	55                   	push   %ebp
c010f403:	89 e5                	mov    %esp,%ebp
c010f405:	53                   	push   %ebx
c010f406:	83 ec 10             	sub    $0x10,%esp
    test_cv = cv_create("test_cv");
c010f409:	68 d1 37 11 c0       	push   $0xc01137d1
c010f40e:	e8 d3 39 ff ff       	call   c0102de6 <cv_create>
c010f413:	89 c3                	mov    %eax,%ebx
c010f415:	a3 ac d1 14 c0       	mov    %eax,0xc014d1ac
    int ret = test_cv == NULL ? -1 : 0;
    cv_destroy(test_cv);
c010f41a:	89 04 24             	mov    %eax,(%esp)
c010f41d:	e8 22 3a ff ff       	call   c0102e44 <cv_destroy>
    return ret;
c010f422:	83 c4 10             	add    $0x10,%esp
c010f425:	31 c0                	xor    %eax,%eax
c010f427:	85 db                	test   %ebx,%ebx
c010f429:	0f 94 c0             	sete   %al
c010f42c:	f7 d8                	neg    %eax
}
c010f42e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f431:	c9                   	leave  
c010f432:	c3                   	ret    

c010f433 <test_cv_wait>:
 * the global var is updated), then sets the global variable to 1. The original
 * thread waits until the forked thread updates the global variable and then
 * finishes. This tests the basic functionality of cv_wait: give up control
 * until a condition is met.
 */
int test_cv_wait() {
c010f433:	55                   	push   %ebp
c010f434:	89 e5                	mov    %esp,%ebp
c010f436:	53                   	push   %ebx
c010f437:	83 ec 20             	sub    $0x20,%esp
    int tret;
    struct thread* t;
    struct lock* cv_lock = lock_create("test_cv_wait_lk");
c010f43a:	68 d9 37 11 c0       	push   $0xc01137d9
c010f43f:	e8 2f 3b ff ff       	call   c0102f73 <lock_create>
c010f444:	89 c3                	mov    %eax,%ebx
    test_cv = cv_create("test_cv");
c010f446:	c7 04 24 d1 37 11 c0 	movl   $0xc01137d1,(%esp)
c010f44d:	e8 94 39 ff ff       	call   c0102de6 <cv_create>
c010f452:	a3 ac d1 14 c0       	mov    %eax,0xc014d1ac
    cv_var = 0;
c010f457:	c7 05 a8 d1 14 c0 00 	movl   $0x0,0xc014d1a8
c010f45e:	00 00 00 
    thread_fork("waitandset", &t, NULL, wait_and_set, NULL, 0);
c010f461:	59                   	pop    %ecx
c010f462:	58                   	pop    %eax
c010f463:	6a 00                	push   $0x0
c010f465:	6a 00                	push   $0x0
c010f467:	68 5a f3 10 c0       	push   $0xc010f35a
c010f46c:	6a 00                	push   $0x0
c010f46e:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010f471:	50                   	push   %eax
c010f472:	68 e9 37 11 c0       	push   $0xc01137e9
c010f477:	e8 fa 8f ff ff       	call   c0108476 <thread_fork>
    thread_join(t, &tret);
c010f47c:	83 c4 18             	add    $0x18,%esp
c010f47f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010f482:	50                   	push   %eax
c010f483:	ff 75 f4             	pushl  -0xc(%ebp)
c010f486:	e8 95 8d ff ff       	call   c0108220 <thread_join>
    lock_acquire(cv_lock);
c010f48b:	89 1c 24             	mov    %ebx,(%esp)
c010f48e:	e8 60 3c ff ff       	call   c01030f3 <lock_acquire>
    while (cv_var == 0)
        cv_wait(test_cv, cv_lock);
c010f493:	83 c4 10             	add    $0x10,%esp
    test_cv = cv_create("test_cv");
    cv_var = 0;
    thread_fork("waitandset", &t, NULL, wait_and_set, NULL, 0);
    thread_join(t, &tret);
    lock_acquire(cv_lock);
    while (cv_var == 0)
c010f496:	a1 a8 d1 14 c0       	mov    0xc014d1a8,%eax
c010f49b:	85 c0                	test   %eax,%eax
c010f49d:	75 10                	jne    c010f4af <test_cv_wait+0x7c>
        cv_wait(test_cv, cv_lock);
c010f49f:	52                   	push   %edx
c010f4a0:	52                   	push   %edx
c010f4a1:	53                   	push   %ebx
c010f4a2:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f4a8:	e8 f7 39 ff ff       	call   c0102ea4 <cv_wait>
c010f4ad:	eb e4                	jmp    c010f493 <test_cv_wait+0x60>
    lock_release(cv_lock);
c010f4af:	83 ec 0c             	sub    $0xc,%esp
c010f4b2:	53                   	push   %ebx
c010f4b3:	e8 ac 3d ff ff       	call   c0103264 <lock_release>

    cv_destroy(test_cv);
c010f4b8:	58                   	pop    %eax
c010f4b9:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f4bf:	e8 80 39 ff ff       	call   c0102e44 <cv_destroy>
    lock_destroy(cv_lock);
c010f4c4:	89 1c 24             	mov    %ebx,(%esp)
c010f4c7:	e8 2a 3b ff ff       	call   c0102ff6 <lock_destroy>

    return 0;
}
c010f4cc:	31 c0                	xor    %eax,%eax
c010f4ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f4d1:	c9                   	leave  
c010f4d2:	c3                   	ret    

c010f4d3 <test_cv_signal>:
 * on the wait channel. The forked thread then updates a global variable and the
 * test only passes if this global variable has been updated, ie. the sleeping
 * thread was signaled and awoken. This tests the basic functionality of cv_signal:
 * wake something that is waiting on the cv's wait channel.
 */
int test_cv_signal() {
c010f4d3:	55                   	push   %ebp
c010f4d4:	89 e5                	mov    %esp,%ebp
c010f4d6:	53                   	push   %ebx
c010f4d7:	83 ec 20             	sub    $0x20,%esp
    struct lock* cv_lock = lock_create("test_cv_signal_lk");
c010f4da:	68 f4 37 11 c0       	push   $0xc01137f4
c010f4df:	e8 8f 3a ff ff       	call   c0102f73 <lock_create>
c010f4e4:	89 c3                	mov    %eax,%ebx
    int tret;
    struct thread* t;
    test_cv = cv_create("test_cv");
c010f4e6:	c7 04 24 d1 37 11 c0 	movl   $0xc01137d1,(%esp)
c010f4ed:	e8 f4 38 ff ff       	call   c0102de6 <cv_create>
c010f4f2:	a3 ac d1 14 c0       	mov    %eax,0xc014d1ac
    signal_wakes = 0;
c010f4f7:	c7 05 a4 d1 14 c0 00 	movl   $0x0,0xc014d1a4
c010f4fe:	00 00 00 

    thread_fork("sleep", &t, NULL, signal_sleep, NULL, 0);
c010f501:	59                   	pop    %ecx
c010f502:	58                   	pop    %eax
c010f503:	6a 00                	push   $0x0
c010f505:	6a 00                	push   $0x0
c010f507:	68 6b f3 10 c0       	push   $0xc010f36b
c010f50c:	6a 00                	push   $0x0
c010f50e:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010f511:	50                   	push   %eax
c010f512:	68 06 38 11 c0       	push   $0xc0113806
c010f517:	e8 5a 8f ff ff       	call   c0108476 <thread_fork>

    // the spinlock must be help prior to calling wchan_isempty due to KASSERTs
    spinlock_acquire(&test_cv->cv_splock);
c010f51c:	83 c4 14             	add    $0x14,%esp
c010f51f:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f524:	83 c0 08             	add    $0x8,%eax
c010f527:	50                   	push   %eax
    while (wchan_isempty(test_cv->cv_wchan, &test_cv->cv_splock)) {
        // don't don't don't sleep while holding the spinlock
        spinlock_release(&test_cv->cv_splock);
        thread_yield();
        // must re-acquire before going round the loop
        spinlock_acquire(&test_cv->cv_splock);
c010f528:	e8 06 41 ff ff       	call   c0103633 <spinlock_acquire>
c010f52d:	83 c4 10             	add    $0x10,%esp

    thread_fork("sleep", &t, NULL, signal_sleep, NULL, 0);

    // the spinlock must be help prior to calling wchan_isempty due to KASSERTs
    spinlock_acquire(&test_cv->cv_splock);
    while (wchan_isempty(test_cv->cv_wchan, &test_cv->cv_splock)) {
c010f530:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f535:	52                   	push   %edx
c010f536:	52                   	push   %edx
c010f537:	8d 50 08             	lea    0x8(%eax),%edx
c010f53a:	52                   	push   %edx
c010f53b:	ff 70 04             	pushl  0x4(%eax)
c010f53e:	e8 df 46 ff ff       	call   c0103c22 <wchan_isempty>
c010f543:	83 c4 10             	add    $0x10,%esp
c010f546:	84 c0                	test   %al,%al
c010f548:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f54d:	74 1e                	je     c010f56d <test_cv_signal+0x9a>
        // don't don't don't sleep while holding the spinlock
        spinlock_release(&test_cv->cv_splock);
c010f54f:	83 ec 0c             	sub    $0xc,%esp
c010f552:	83 c0 08             	add    $0x8,%eax
c010f555:	50                   	push   %eax
c010f556:	e8 8e 41 ff ff       	call   c01036e9 <spinlock_release>
        thread_yield();
c010f55b:	e8 2d 15 ff ff       	call   c0100a8d <thread_yield>
        // must re-acquire before going round the loop
        spinlock_acquire(&test_cv->cv_splock);
c010f560:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f565:	83 c0 08             	add    $0x8,%eax
c010f568:	89 04 24             	mov    %eax,(%esp)
c010f56b:	eb bb                	jmp    c010f528 <test_cv_signal+0x55>
    }
    spinlock_release(&test_cv->cv_splock);
c010f56d:	83 ec 0c             	sub    $0xc,%esp
c010f570:	83 c0 08             	add    $0x8,%eax
c010f573:	50                   	push   %eax
c010f574:	e8 70 41 ff ff       	call   c01036e9 <spinlock_release>

    // must hold the lock prior to calling cv_signal due to KASSERTs
    lock_acquire(cv_lock);
c010f579:	89 1c 24             	mov    %ebx,(%esp)
c010f57c:	e8 72 3b ff ff       	call   c01030f3 <lock_acquire>
    cv_signal(test_cv, cv_lock);
c010f581:	58                   	pop    %eax
c010f582:	5a                   	pop    %edx
c010f583:	53                   	push   %ebx
c010f584:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f58a:	e8 5a 39 ff ff       	call   c0102ee9 <cv_signal>
    lock_release(cv_lock);
c010f58f:	89 1c 24             	mov    %ebx,(%esp)
c010f592:	e8 cd 3c ff ff       	call   c0103264 <lock_release>

    thread_join(t, &tret);
c010f597:	59                   	pop    %ecx
c010f598:	58                   	pop    %eax
c010f599:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010f59c:	50                   	push   %eax
c010f59d:	ff 75 f4             	pushl  -0xc(%ebp)
c010f5a0:	e8 7b 8c ff ff       	call   c0108220 <thread_join>

    cv_destroy(test_cv);
c010f5a5:	58                   	pop    %eax
c010f5a6:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f5ac:	e8 93 38 ff ff       	call   c0102e44 <cv_destroy>
    lock_destroy(cv_lock);
c010f5b1:	89 1c 24             	mov    %ebx,(%esp)
c010f5b4:	e8 3d 3a ff ff       	call   c0102ff6 <lock_destroy>

    return signal_wakes == 1 ? 0 : -1;
c010f5b9:	a1 a4 d1 14 c0       	mov    0xc014d1a4,%eax
c010f5be:	83 c4 10             	add    $0x10,%esp
c010f5c1:	48                   	dec    %eax
c010f5c2:	0f 95 c0             	setne  %al
c010f5c5:	0f b6 c0             	movzbl %al,%eax
c010f5c8:	f7 d8                	neg    %eax
}
c010f5ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f5cd:	c9                   	leave  
c010f5ce:	c3                   	ret    

c010f5cf <test_cv_broadcast>:
 * a call to cv_broadcast after all the threads have been put to sleep on the cv's
 * wait channel. Passes if all 5 threads were awoken and incremented the global
 * variable. Tests the basic functionality of cv_broadcast: Awaking all threads
 * on a cv's wait channel.
 */
int test_cv_broadcast() {
c010f5cf:	55                   	push   %ebp
c010f5d0:	89 e5                	mov    %esp,%ebp
c010f5d2:	57                   	push   %edi
c010f5d3:	56                   	push   %esi
c010f5d4:	53                   	push   %ebx
c010f5d5:	83 ec 48             	sub    $0x48,%esp
    struct lock* cv_lock = lock_create("test_cv_broadcast_lk");
c010f5d8:	68 0c 38 11 c0       	push   $0xc011380c
c010f5dd:	e8 91 39 ff ff       	call   c0102f73 <lock_create>
c010f5e2:	89 c3                	mov    %eax,%ebx
    int n, tret;
    struct thread* t[5];
    test_cv = cv_create("test_cv");
c010f5e4:	c7 04 24 d1 37 11 c0 	movl   $0xc01137d1,(%esp)
c010f5eb:	e8 f6 37 ff ff       	call   c0102de6 <cv_create>
c010f5f0:	a3 ac d1 14 c0       	mov    %eax,0xc014d1ac
    broadcast_wakes = 5;
c010f5f5:	c7 05 a0 d1 14 c0 05 	movl   $0x5,0xc014d1a0
c010f5fc:	00 00 00 
c010f5ff:	8d 7d d4             	lea    -0x2c(%ebp),%edi
c010f602:	83 c4 10             	add    $0x10,%esp
c010f605:	89 fe                	mov    %edi,%esi

    // Put multiple threads on the wait channel
    for (n = 0; n < 5; n++)
        thread_fork("sleep", &t[n], NULL, broadcast_sleep, NULL, 0);
c010f607:	50                   	push   %eax
c010f608:	50                   	push   %eax
c010f609:	6a 00                	push   $0x0
c010f60b:	6a 00                	push   $0x0
c010f60d:	68 b1 f3 10 c0       	push   $0xc010f3b1
c010f612:	6a 00                	push   $0x0
c010f614:	57                   	push   %edi
c010f615:	68 06 38 11 c0       	push   $0xc0113806
c010f61a:	e8 57 8e ff ff       	call   c0108476 <thread_fork>
c010f61f:	83 c7 04             	add    $0x4,%edi
    struct thread* t[5];
    test_cv = cv_create("test_cv");
    broadcast_wakes = 5;

    // Put multiple threads on the wait channel
    for (n = 0; n < 5; n++)
c010f622:	83 c4 20             	add    $0x20,%esp
c010f625:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f628:	39 c7                	cmp    %eax,%edi
c010f62a:	75 db                	jne    c010f607 <test_cv_broadcast+0x38>
        thread_fork("sleep", &t[n], NULL, broadcast_sleep, NULL, 0);

    spinlock_acquire(&test_cv->cv_splock);
c010f62c:	83 ec 0c             	sub    $0xc,%esp
c010f62f:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f634:	83 c0 08             	add    $0x8,%eax
c010f637:	50                   	push   %eax
    while (broadcast_wakes > 0) {
        // don't don't don't sleep while holding the spinlock
        spinlock_release(&test_cv->cv_splock);
        thread_yield();
        // must re-acquire before going round the loop
        spinlock_acquire(&test_cv->cv_splock);
c010f638:	e8 f6 3f ff ff       	call   c0103633 <spinlock_acquire>
c010f63d:	83 c4 10             	add    $0x10,%esp
    // Put multiple threads on the wait channel
    for (n = 0; n < 5; n++)
        thread_fork("sleep", &t[n], NULL, broadcast_sleep, NULL, 0);

    spinlock_acquire(&test_cv->cv_splock);
    while (broadcast_wakes > 0) {
c010f640:	a1 a0 d1 14 c0       	mov    0xc014d1a0,%eax
c010f645:	85 c0                	test   %eax,%eax
c010f647:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f64c:	74 1e                	je     c010f66c <test_cv_broadcast+0x9d>
        // don't don't don't sleep while holding the spinlock
        spinlock_release(&test_cv->cv_splock);
c010f64e:	83 ec 0c             	sub    $0xc,%esp
c010f651:	83 c0 08             	add    $0x8,%eax
c010f654:	50                   	push   %eax
c010f655:	e8 8f 40 ff ff       	call   c01036e9 <spinlock_release>
        thread_yield();
c010f65a:	e8 2e 14 ff ff       	call   c0100a8d <thread_yield>
        // must re-acquire before going round the loop
        spinlock_acquire(&test_cv->cv_splock);
c010f65f:	a1 ac d1 14 c0       	mov    0xc014d1ac,%eax
c010f664:	83 c0 08             	add    $0x8,%eax
c010f667:	89 04 24             	mov    %eax,(%esp)
c010f66a:	eb cc                	jmp    c010f638 <test_cv_broadcast+0x69>
    }
    spinlock_release(&test_cv->cv_splock);
c010f66c:	83 ec 0c             	sub    $0xc,%esp
c010f66f:	83 c0 08             	add    $0x8,%eax
c010f672:	50                   	push   %eax
c010f673:	e8 71 40 ff ff       	call   c01036e9 <spinlock_release>
    // Need to wait here for a while?
    // must hold the lock prior to calling cv_signal due to KASSERTs
    lock_acquire(cv_lock);
c010f678:	89 1c 24             	mov    %ebx,(%esp)
c010f67b:	e8 73 3a ff ff       	call   c01030f3 <lock_acquire>
    cv_broadcast(test_cv, cv_lock);
c010f680:	5a                   	pop    %edx
c010f681:	59                   	pop    %ecx
c010f682:	53                   	push   %ebx
c010f683:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f689:	e8 a0 38 ff ff       	call   c0102f2e <cv_broadcast>
    lock_release(cv_lock);
c010f68e:	89 1c 24             	mov    %ebx,(%esp)
c010f691:	e8 ce 3b ff ff       	call   c0103264 <lock_release>
c010f696:	83 c4 10             	add    $0x10,%esp

    for (n = 0; n < 5; n++)
c010f699:	31 ff                	xor    %edi,%edi
        thread_join(t[n], &tret);
c010f69b:	8d 55 d0             	lea    -0x30(%ebp),%edx
c010f69e:	50                   	push   %eax
c010f69f:	50                   	push   %eax
c010f6a0:	52                   	push   %edx
c010f6a1:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010f6a4:	ff 34 be             	pushl  (%esi,%edi,4)
c010f6a7:	e8 74 8b ff ff       	call   c0108220 <thread_join>
    // must hold the lock prior to calling cv_signal due to KASSERTs
    lock_acquire(cv_lock);
    cv_broadcast(test_cv, cv_lock);
    lock_release(cv_lock);

    for (n = 0; n < 5; n++)
c010f6ac:	47                   	inc    %edi
c010f6ad:	83 c4 10             	add    $0x10,%esp
c010f6b0:	83 ff 05             	cmp    $0x5,%edi
c010f6b3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010f6b6:	75 e6                	jne    c010f69e <test_cv_broadcast+0xcf>
        thread_join(t[n], &tret);

    cv_destroy(test_cv);
c010f6b8:	83 ec 0c             	sub    $0xc,%esp
c010f6bb:	ff 35 ac d1 14 c0    	pushl  0xc014d1ac
c010f6c1:	e8 7e 37 ff ff       	call   c0102e44 <cv_destroy>
    lock_destroy(cv_lock);
c010f6c6:	89 1c 24             	mov    %ebx,(%esp)
c010f6c9:	e8 28 39 ff ff       	call   c0102ff6 <lock_destroy>

    return broadcast_wakes == 5 ? 0 : -1;
c010f6ce:	a1 a0 d1 14 c0       	mov    0xc014d1a0,%eax
c010f6d3:	83 c4 10             	add    $0x10,%esp
c010f6d6:	83 f8 05             	cmp    $0x5,%eax
c010f6d9:	0f 95 c0             	setne  %al
c010f6dc:	0f b6 c0             	movzbl %al,%eax
c010f6df:	f7 d8                	neg    %eax
}
c010f6e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010f6e4:	5b                   	pop    %ebx
c010f6e5:	5e                   	pop    %esi
c010f6e6:	5f                   	pop    %edi
c010f6e7:	5d                   	pop    %ebp
c010f6e8:	c3                   	ret    

c010f6e9 <cvtest>:

int
cvtest(int argc, char** argv) {
c010f6e9:	55                   	push   %ebp
c010f6ea:	89 e5                	mov    %esp,%ebp
c010f6ec:	83 ec 14             	sub    $0x14,%esp
    (void) argc;
    (void) argv;

    print("Beginning cv test...\n");
c010f6ef:	68 21 38 11 c0       	push   $0xc0113821
c010f6f4:	e8 6f 4b ff ff       	call   c0104268 <print>

    assert(test_create_cv() == 0);
c010f6f9:	e8 04 fd ff ff       	call   c010f402 <test_create_cv>
c010f6fe:	83 c4 10             	add    $0x10,%esp
c010f701:	85 c0                	test   %eax,%eax
c010f703:	74 2b                	je     c010f730 <cvtest+0x47>
c010f705:	83 ec 0c             	sub    $0xc,%esp
c010f708:	68 b0 38 11 c0       	push   $0xc01138b0
c010f70d:	68 bb 00 00 00       	push   $0xbb
c010f712:	68 37 38 11 c0       	push   $0xc0113837
c010f717:	68 45 38 11 c0       	push   $0xc0113845
c010f71c:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f721:	e8 42 4b ff ff       	call   c0104268 <print>
c010f726:	83 c4 20             	add    $0x20,%esp
c010f729:	e8 55 18 ff ff       	call   c0100f83 <backtrace>
c010f72e:	fa                   	cli    
c010f72f:	f4                   	hlt    
    assert(test_cv_wait() == 0);
c010f730:	e8 fe fc ff ff       	call   c010f433 <test_cv_wait>
c010f735:	85 c0                	test   %eax,%eax
c010f737:	74 2b                	je     c010f764 <cvtest+0x7b>
c010f739:	83 ec 0c             	sub    $0xc,%esp
c010f73c:	68 b0 38 11 c0       	push   $0xc01138b0
c010f741:	68 bc 00 00 00       	push   $0xbc
c010f746:	68 37 38 11 c0       	push   $0xc0113837
c010f74b:	68 5b 38 11 c0       	push   $0xc011385b
c010f750:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f755:	e8 0e 4b ff ff       	call   c0104268 <print>
c010f75a:	83 c4 20             	add    $0x20,%esp
c010f75d:	e8 21 18 ff ff       	call   c0100f83 <backtrace>
c010f762:	fa                   	cli    
c010f763:	f4                   	hlt    
    assert(test_cv_signal() == 0);
c010f764:	e8 6a fd ff ff       	call   c010f4d3 <test_cv_signal>
c010f769:	85 c0                	test   %eax,%eax
c010f76b:	74 2b                	je     c010f798 <cvtest+0xaf>
c010f76d:	83 ec 0c             	sub    $0xc,%esp
c010f770:	68 b0 38 11 c0       	push   $0xc01138b0
c010f775:	68 bd 00 00 00       	push   $0xbd
c010f77a:	68 37 38 11 c0       	push   $0xc0113837
c010f77f:	68 6f 38 11 c0       	push   $0xc011386f
c010f784:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f789:	e8 da 4a ff ff       	call   c0104268 <print>
c010f78e:	83 c4 20             	add    $0x20,%esp
c010f791:	e8 ed 17 ff ff       	call   c0100f83 <backtrace>
c010f796:	fa                   	cli    
c010f797:	f4                   	hlt    
    assert(test_cv_broadcast() == 0);
c010f798:	e8 32 fe ff ff       	call   c010f5cf <test_cv_broadcast>
c010f79d:	85 c0                	test   %eax,%eax
c010f79f:	74 2b                	je     c010f7cc <cvtest+0xe3>
c010f7a1:	83 ec 0c             	sub    $0xc,%esp
c010f7a4:	68 b0 38 11 c0       	push   $0xc01138b0
c010f7a9:	68 be 00 00 00       	push   $0xbe
c010f7ae:	68 37 38 11 c0       	push   $0xc0113837
c010f7b3:	68 85 38 11 c0       	push   $0xc0113885
c010f7b8:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f7bd:	e8 a6 4a ff ff       	call   c0104268 <print>
c010f7c2:	83 c4 20             	add    $0x20,%esp
c010f7c5:	e8 b9 17 ff ff       	call   c0100f83 <backtrace>
c010f7ca:	fa                   	cli    
c010f7cb:	f4                   	hlt    

    print("CV test complete\n");
c010f7cc:	83 ec 0c             	sub    $0xc,%esp
c010f7cf:	68 9e 38 11 c0       	push   $0xc011389e
c010f7d4:	e8 8f 4a ff ff       	call   c0104268 <print>

    return 0;
}
c010f7d9:	31 c0                	xor    %eax,%eax
c010f7db:	c9                   	leave  
c010f7dc:	c3                   	ret    

c010f7dd <locktester_array_thread>:

    return 0;
}

// entry point function for threads in locktester_array
static int locktester_array_thread(void* junk, unsigned long num) {
c010f7dd:	55                   	push   %ebp
c010f7de:	89 e5                	mov    %esp,%ebp
c010f7e0:	83 ec 14             	sub    $0x14,%esp
    (void) junk;
    lock_acquire(lock_test_lock);
c010f7e3:	ff 35 b0 d1 14 c0    	pushl  0xc014d1b0
c010f7e9:	e8 05 39 ff ff       	call   c01030f3 <lock_acquire>
    testarray[num] = true;
c010f7ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f7f1:	c6 80 b4 d1 14 c0 01 	movb   $0x1,-0x3feb2e4c(%eax)
    lock_release(lock_test_lock);
c010f7f8:	58                   	pop    %eax
c010f7f9:	ff 35 b0 d1 14 c0    	pushl  0xc014d1b0
c010f7ff:	e8 60 3a ff ff       	call   c0103264 <lock_release>
    return 0;
}
c010f804:	31 c0                	xor    %eax,%eax
c010f806:	c9                   	leave  
c010f807:	c3                   	ret    

c010f808 <locktester_simple>:
static volatile bool testarray[NTHREADS];
static struct lock* lock_test_lock;

// tests basic lock functionality: create, acquire, release
// with just one thread
int locktester_simple(void) {
c010f808:	55                   	push   %ebp
c010f809:	89 e5                	mov    %esp,%ebp
c010f80b:	56                   	push   %esi
c010f80c:	53                   	push   %ebx
    struct lock* l1 = lock_create("l1");
c010f80d:	83 ec 0c             	sub    $0xc,%esp
c010f810:	68 d3 29 11 c0       	push   $0xc01129d3
c010f815:	e8 59 37 ff ff       	call   c0102f73 <lock_create>
c010f81a:	89 c3                	mov    %eax,%ebx
    assert(!lock_holding(l1));
c010f81c:	89 04 24             	mov    %eax,(%esp)
c010f81f:	e8 3b 38 ff ff       	call   c010305f <lock_holding>
c010f824:	83 c4 10             	add    $0x10,%esp
c010f827:	84 c0                	test   %al,%al
c010f829:	74 28                	je     c010f853 <locktester_simple+0x4b>
c010f82b:	83 ec 0c             	sub    $0xc,%esp
c010f82e:	68 d8 39 11 c0       	push   $0xc01139d8
c010f833:	6a 0f                	push   $0xf
c010f835:	68 b7 38 11 c0       	push   $0xc01138b7
c010f83a:	68 c7 38 11 c0       	push   $0xc01138c7
c010f83f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f844:	e8 1f 4a ff ff       	call   c0104268 <print>
c010f849:	83 c4 20             	add    $0x20,%esp
c010f84c:	e8 32 17 ff ff       	call   c0100f83 <backtrace>
c010f851:	fa                   	cli    
c010f852:	f4                   	hlt    

    lock_acquire(l1);
c010f853:	83 ec 0c             	sub    $0xc,%esp
c010f856:	53                   	push   %ebx
c010f857:	e8 97 38 ff ff       	call   c01030f3 <lock_acquire>
    assert(lock_holding(l1));
c010f85c:	89 1c 24             	mov    %ebx,(%esp)
c010f85f:	e8 fb 37 ff ff       	call   c010305f <lock_holding>
c010f864:	83 c4 10             	add    $0x10,%esp
c010f867:	84 c0                	test   %al,%al
c010f869:	75 28                	jne    c010f893 <locktester_simple+0x8b>
c010f86b:	83 ec 0c             	sub    $0xc,%esp
c010f86e:	68 d8 39 11 c0       	push   $0xc01139d8
c010f873:	6a 12                	push   $0x12
c010f875:	68 b7 38 11 c0       	push   $0xc01138b7
c010f87a:	68 c8 38 11 c0       	push   $0xc01138c8
c010f87f:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f884:	e8 df 49 ff ff       	call   c0104268 <print>
c010f889:	83 c4 20             	add    $0x20,%esp
c010f88c:	e8 f2 16 ff ff       	call   c0100f83 <backtrace>
c010f891:	fa                   	cli    
c010f892:	f4                   	hlt    

    lock_release(l1);
c010f893:	83 ec 0c             	sub    $0xc,%esp
c010f896:	53                   	push   %ebx
c010f897:	e8 c8 39 ff ff       	call   c0103264 <lock_release>
    assert(!lock_holding(l1));
c010f89c:	89 1c 24             	mov    %ebx,(%esp)
c010f89f:	e8 bb 37 ff ff       	call   c010305f <lock_holding>
c010f8a4:	83 c4 10             	add    $0x10,%esp
c010f8a7:	84 c0                	test   %al,%al
c010f8a9:	74 28                	je     c010f8d3 <locktester_simple+0xcb>
c010f8ab:	83 ec 0c             	sub    $0xc,%esp
c010f8ae:	68 d8 39 11 c0       	push   $0xc01139d8
c010f8b3:	6a 15                	push   $0x15
c010f8b5:	68 b7 38 11 c0       	push   $0xc01138b7
c010f8ba:	68 c7 38 11 c0       	push   $0xc01138c7
c010f8bf:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f8c4:	e8 9f 49 ff ff       	call   c0104268 <print>
c010f8c9:	83 c4 20             	add    $0x20,%esp
c010f8cc:	e8 b2 16 ff ff       	call   c0100f83 <backtrace>
c010f8d1:	fa                   	cli    
c010f8d2:	f4                   	hlt    
    /*
     * acquire lock twice
     * makes sure lk_count works properly
     * should require 2 releases before I don't hold
     */
    lock_acquire(l1);
c010f8d3:	83 ec 0c             	sub    $0xc,%esp
c010f8d6:	53                   	push   %ebx
c010f8d7:	e8 17 38 ff ff       	call   c01030f3 <lock_acquire>
    lock_acquire(l1);
c010f8dc:	89 1c 24             	mov    %ebx,(%esp)
c010f8df:	e8 0f 38 ff ff       	call   c01030f3 <lock_acquire>
    assert(lock_holding(l1));
c010f8e4:	89 1c 24             	mov    %ebx,(%esp)
c010f8e7:	e8 73 37 ff ff       	call   c010305f <lock_holding>
c010f8ec:	83 c4 10             	add    $0x10,%esp
c010f8ef:	84 c0                	test   %al,%al
c010f8f1:	75 28                	jne    c010f91b <locktester_simple+0x113>
c010f8f3:	83 ec 0c             	sub    $0xc,%esp
c010f8f6:	68 d8 39 11 c0       	push   $0xc01139d8
c010f8fb:	6a 1e                	push   $0x1e
c010f8fd:	68 b7 38 11 c0       	push   $0xc01138b7
c010f902:	68 c8 38 11 c0       	push   $0xc01138c8
c010f907:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f90c:	e8 57 49 ff ff       	call   c0104268 <print>
c010f911:	83 c4 20             	add    $0x20,%esp
c010f914:	e8 6a 16 ff ff       	call   c0100f83 <backtrace>
c010f919:	fa                   	cli    
c010f91a:	f4                   	hlt    

    lock_release(l1);
c010f91b:	83 ec 0c             	sub    $0xc,%esp
c010f91e:	53                   	push   %ebx
c010f91f:	e8 40 39 ff ff       	call   c0103264 <lock_release>
    assert(lock_holding(l1));
c010f924:	89 1c 24             	mov    %ebx,(%esp)
c010f927:	e8 33 37 ff ff       	call   c010305f <lock_holding>
c010f92c:	83 c4 10             	add    $0x10,%esp
c010f92f:	84 c0                	test   %al,%al
c010f931:	75 28                	jne    c010f95b <locktester_simple+0x153>
c010f933:	83 ec 0c             	sub    $0xc,%esp
c010f936:	68 d8 39 11 c0       	push   $0xc01139d8
c010f93b:	6a 21                	push   $0x21
c010f93d:	68 b7 38 11 c0       	push   $0xc01138b7
c010f942:	68 c8 38 11 c0       	push   $0xc01138c8
c010f947:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f94c:	e8 17 49 ff ff       	call   c0104268 <print>
c010f951:	83 c4 20             	add    $0x20,%esp
c010f954:	e8 2a 16 ff ff       	call   c0100f83 <backtrace>
c010f959:	fa                   	cli    
c010f95a:	f4                   	hlt    

    lock_release(l1);
c010f95b:	83 ec 0c             	sub    $0xc,%esp
c010f95e:	53                   	push   %ebx
c010f95f:	e8 00 39 ff ff       	call   c0103264 <lock_release>
    assert(!lock_holding(l1));
c010f964:	89 1c 24             	mov    %ebx,(%esp)
c010f967:	e8 f3 36 ff ff       	call   c010305f <lock_holding>
c010f96c:	83 c4 10             	add    $0x10,%esp
c010f96f:	84 c0                	test   %al,%al
c010f971:	74 28                	je     c010f99b <locktester_simple+0x193>
c010f973:	83 ec 0c             	sub    $0xc,%esp
c010f976:	68 d8 39 11 c0       	push   $0xc01139d8
c010f97b:	6a 24                	push   $0x24
c010f97d:	68 b7 38 11 c0       	push   $0xc01138b7
c010f982:	68 c7 38 11 c0       	push   $0xc01138c7
c010f987:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f98c:	e8 d7 48 ff ff       	call   c0104268 <print>
c010f991:	83 c4 20             	add    $0x20,%esp
c010f994:	e8 ea 15 ff ff       	call   c0100f83 <backtrace>
c010f999:	fa                   	cli    
c010f99a:	f4                   	hlt    

    struct lock* l2 = lock_create("l2");
c010f99b:	83 ec 0c             	sub    $0xc,%esp
c010f99e:	68 e8 29 11 c0       	push   $0xc01129e8
c010f9a3:	e8 cb 35 ff ff       	call   c0102f73 <lock_create>
c010f9a8:	89 c6                	mov    %eax,%esi

    /*
     * make sure acquiring l1 doesn't somehow make this
     * thread think that it holds all locks
     */
    lock_acquire(l1);
c010f9aa:	89 1c 24             	mov    %ebx,(%esp)
c010f9ad:	e8 41 37 ff ff       	call   c01030f3 <lock_acquire>
    assert(lock_holding(l1));
c010f9b2:	89 1c 24             	mov    %ebx,(%esp)
c010f9b5:	e8 a5 36 ff ff       	call   c010305f <lock_holding>
c010f9ba:	83 c4 10             	add    $0x10,%esp
c010f9bd:	84 c0                	test   %al,%al
c010f9bf:	75 28                	jne    c010f9e9 <locktester_simple+0x1e1>
c010f9c1:	83 ec 0c             	sub    $0xc,%esp
c010f9c4:	68 d8 39 11 c0       	push   $0xc01139d8
c010f9c9:	6a 2d                	push   $0x2d
c010f9cb:	68 b7 38 11 c0       	push   $0xc01138b7
c010f9d0:	68 c8 38 11 c0       	push   $0xc01138c8
c010f9d5:	68 2b ff 10 c0       	push   $0xc010ff2b
c010f9da:	e8 89 48 ff ff       	call   c0104268 <print>
c010f9df:	83 c4 20             	add    $0x20,%esp
c010f9e2:	e8 9c 15 ff ff       	call   c0100f83 <backtrace>
c010f9e7:	fa                   	cli    
c010f9e8:	f4                   	hlt    
    assert(!lock_holding(l2));
c010f9e9:	83 ec 0c             	sub    $0xc,%esp
c010f9ec:	56                   	push   %esi
c010f9ed:	e8 6d 36 ff ff       	call   c010305f <lock_holding>
c010f9f2:	83 c4 10             	add    $0x10,%esp
c010f9f5:	84 c0                	test   %al,%al
c010f9f7:	74 28                	je     c010fa21 <locktester_simple+0x219>
c010f9f9:	83 ec 0c             	sub    $0xc,%esp
c010f9fc:	68 d8 39 11 c0       	push   $0xc01139d8
c010fa01:	6a 2e                	push   $0x2e
c010fa03:	68 b7 38 11 c0       	push   $0xc01138b7
c010fa08:	68 d9 38 11 c0       	push   $0xc01138d9
c010fa0d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010fa12:	e8 51 48 ff ff       	call   c0104268 <print>
c010fa17:	83 c4 20             	add    $0x20,%esp
c010fa1a:	e8 64 15 ff ff       	call   c0100f83 <backtrace>
c010fa1f:	fa                   	cli    
c010fa20:	f4                   	hlt    

    lock_destroy(l2);
c010fa21:	83 ec 0c             	sub    $0xc,%esp
c010fa24:	56                   	push   %esi
c010fa25:	e8 cc 35 ff ff       	call   c0102ff6 <lock_destroy>
    lock_release(l1);
c010fa2a:	89 1c 24             	mov    %ebx,(%esp)
c010fa2d:	e8 32 38 ff ff       	call   c0103264 <lock_release>
    lock_destroy(l1);
c010fa32:	89 1c 24             	mov    %ebx,(%esp)
c010fa35:	e8 bc 35 ff ff       	call   c0102ff6 <lock_destroy>

    return 0;
}
c010fa3a:	31 c0                	xor    %eax,%eax
c010fa3c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010fa3f:	5b                   	pop    %ebx
c010fa40:	5e                   	pop    %esi
c010fa41:	5d                   	pop    %ebp
c010fa42:	c3                   	ret    

c010fa43 <locktester_array>:
}

// tests multiple threads trying to acquire a single lock
// makes sure each thread gets the lock eventually and that
// data structure has expected post state
int locktester_array(void) {
c010fa43:	55                   	push   %ebp
c010fa44:	89 e5                	mov    %esp,%ebp
c010fa46:	57                   	push   %edi
c010fa47:	56                   	push   %esi
c010fa48:	53                   	push   %ebx
c010fa49:	83 ec 3c             	sub    $0x3c,%esp
c010fa4c:	8d 7d c8             	lea    -0x38(%ebp),%edi
    unsigned int i;
    int err;
    struct thread* threads[NTHREADS];

    for (i = 0; i < NTHREADS; i++) {
c010fa4f:	31 db                	xor    %ebx,%ebx
c010fa51:	89 fe                	mov    %edi,%esi
        err = thread_fork("locktest_array_thread", &threads[i], NULL,
c010fa53:	52                   	push   %edx
c010fa54:	52                   	push   %edx
c010fa55:	53                   	push   %ebx
c010fa56:	6a 00                	push   $0x0
c010fa58:	68 dd f7 10 c0       	push   $0xc010f7dd
c010fa5d:	6a 00                	push   $0x0
c010fa5f:	57                   	push   %edi
c010fa60:	68 eb 38 11 c0       	push   $0xc01138eb
c010fa65:	e8 0c 8a ff ff       	call   c0108476 <thread_fork>
                          locktester_array_thread, NULL, i);
        if (err)
c010fa6a:	83 c4 20             	add    $0x20,%esp
c010fa6d:	85 c0                	test   %eax,%eax
c010fa6f:	74 19                	je     c010fa8a <locktester_array+0x47>
            panic("locktest: thread_fork failed\n");
c010fa71:	68 01 39 11 c0       	push   $0xc0113901
c010fa76:	68 c4 39 11 c0       	push   $0xc01139c4
c010fa7b:	6a 4c                	push   $0x4c
c010fa7d:	68 b7 38 11 c0       	push   $0xc01138b7
c010fa82:	e8 ee 41 ff ff       	call   c0103c75 <_panic>
c010fa87:	83 c4 10             	add    $0x10,%esp
int locktester_array(void) {
    unsigned int i;
    int err;
    struct thread* threads[NTHREADS];

    for (i = 0; i < NTHREADS; i++) {
c010fa8a:	43                   	inc    %ebx
c010fa8b:	83 c7 04             	add    $0x4,%edi
c010fa8e:	83 fb 08             	cmp    $0x8,%ebx
c010fa91:	75 c0                	jne    c010fa53 <locktester_array+0x10>
c010fa93:	31 db                	xor    %ebx,%ebx
            panic("locktest: thread_fork failed\n");
    }

    int ret;
    for (i = 0; i < NTHREADS; i++)
        thread_join(threads[i], &ret);
c010fa95:	8d 7d c4             	lea    -0x3c(%ebp),%edi
c010fa98:	50                   	push   %eax
c010fa99:	50                   	push   %eax
c010fa9a:	57                   	push   %edi
c010fa9b:	ff 34 9e             	pushl  (%esi,%ebx,4)
c010fa9e:	e8 7d 87 ff ff       	call   c0108220 <thread_join>
        if (err)
            panic("locktest: thread_fork failed\n");
    }

    int ret;
    for (i = 0; i < NTHREADS; i++)
c010faa3:	43                   	inc    %ebx
c010faa4:	83 c4 10             	add    $0x10,%esp
c010faa7:	83 fb 08             	cmp    $0x8,%ebx
c010faaa:	75 ec                	jne    c010fa98 <locktester_array+0x55>
c010faac:	31 db                	xor    %ebx,%ebx
        thread_join(threads[i], &ret);

    for (i = 0; i < NTHREADS; i++)
        assert(testarray[i]);
c010faae:	8a 83 b4 d1 14 c0    	mov    -0x3feb2e4c(%ebx),%al
c010fab4:	84 c0                	test   %al,%al
c010fab6:	75 28                	jne    c010fae0 <locktester_array+0x9d>
c010fab8:	83 ec 0c             	sub    $0xc,%esp
c010fabb:	68 c4 39 11 c0       	push   $0xc01139c4
c010fac0:	6a 54                	push   $0x54
c010fac2:	68 b7 38 11 c0       	push   $0xc01138b7
c010fac7:	68 1f 39 11 c0       	push   $0xc011391f
c010facc:	68 2b ff 10 c0       	push   $0xc010ff2b
c010fad1:	e8 92 47 ff ff       	call   c0104268 <print>
c010fad6:	83 c4 20             	add    $0x20,%esp
c010fad9:	e8 a5 14 ff ff       	call   c0100f83 <backtrace>
c010fade:	fa                   	cli    
c010fadf:	f4                   	hlt    

    int ret;
    for (i = 0; i < NTHREADS; i++)
        thread_join(threads[i], &ret);

    for (i = 0; i < NTHREADS; i++)
c010fae0:	43                   	inc    %ebx
c010fae1:	83 fb 08             	cmp    $0x8,%ebx
c010fae4:	75 c8                	jne    c010faae <locktester_array+0x6b>
        assert(testarray[i]);

    return 0;
}
c010fae6:	31 c0                	xor    %eax,%eax
c010fae8:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010faeb:	5b                   	pop    %ebx
c010faec:	5e                   	pop    %esi
c010faed:	5f                   	pop    %edi
c010faee:	5d                   	pop    %ebp
c010faef:	c3                   	ret    

c010faf0 <locktest>:

// launches each lock test and returns the test's return value
int
locktest(int argc, char** argv) {
c010faf0:	55                   	push   %ebp
c010faf1:	89 e5                	mov    %esp,%ebp
c010faf3:	83 ec 14             	sub    $0x14,%esp
    (void) argc;
    (void) argv;

    print("Beginning lock test...\n");
c010faf6:	68 2c 39 11 c0       	push   $0xc011392c
c010fafb:	e8 68 47 ff ff       	call   c0104268 <print>

    lock_test_lock = lock_create("lock_test_lock");
c010fb00:	c7 04 24 44 39 11 c0 	movl   $0xc0113944,(%esp)
c010fb07:	e8 67 34 ff ff       	call   c0102f73 <lock_create>
c010fb0c:	a3 b0 d1 14 c0       	mov    %eax,0xc014d1b0
    if (lock_test_lock == NULL)
c010fb11:	83 c4 10             	add    $0x10,%esp
c010fb14:	85 c0                	test   %eax,%eax
c010fb16:	75 19                	jne    c010fb31 <locktest+0x41>
        panic("asst1_test: lock_create failed\n");
c010fb18:	68 53 39 11 c0       	push   $0xc0113953
c010fb1d:	68 b8 39 11 c0       	push   $0xc01139b8
c010fb22:	6a 63                	push   $0x63
c010fb24:	68 b7 38 11 c0       	push   $0xc01138b7
c010fb29:	e8 47 41 ff ff       	call   c0103c75 <_panic>
c010fb2e:	83 c4 10             	add    $0x10,%esp
    return 0;
}

// launches each lock test and returns the test's return value
int
locktest(int argc, char** argv) {
c010fb31:	31 c0                	xor    %eax,%eax
    lock_test_lock = lock_create("lock_test_lock");
    if (lock_test_lock == NULL)
        panic("asst1_test: lock_create failed\n");

    for (int i = 0; i < NTHREADS; i++)
        testarray[i] = false;
c010fb33:	c6 80 b4 d1 14 c0 00 	movb   $0x0,-0x3feb2e4c(%eax)

    lock_test_lock = lock_create("lock_test_lock");
    if (lock_test_lock == NULL)
        panic("asst1_test: lock_create failed\n");

    for (int i = 0; i < NTHREADS; i++)
c010fb3a:	40                   	inc    %eax
c010fb3b:	83 f8 08             	cmp    $0x8,%eax
c010fb3e:	75 f3                	jne    c010fb33 <locktest+0x43>
        testarray[i] = false;
    assert(locktester_simple() == 0);
c010fb40:	e8 c3 fc ff ff       	call   c010f808 <locktester_simple>
c010fb45:	85 c0                	test   %eax,%eax
c010fb47:	74 28                	je     c010fb71 <locktest+0x81>
c010fb49:	83 ec 0c             	sub    $0xc,%esp
c010fb4c:	68 b8 39 11 c0       	push   $0xc01139b8
c010fb51:	6a 67                	push   $0x67
c010fb53:	68 b7 38 11 c0       	push   $0xc01138b7
c010fb58:	68 73 39 11 c0       	push   $0xc0113973
c010fb5d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010fb62:	e8 01 47 ff ff       	call   c0104268 <print>
c010fb67:	83 c4 20             	add    $0x20,%esp
c010fb6a:	e8 14 14 ff ff       	call   c0100f83 <backtrace>
c010fb6f:	fa                   	cli    
c010fb70:	f4                   	hlt    
    return 0;
}

// launches each lock test and returns the test's return value
int
locktest(int argc, char** argv) {
c010fb71:	31 c0                	xor    %eax,%eax
    for (int i = 0; i < NTHREADS; i++)
        testarray[i] = false;
    assert(locktester_simple() == 0);

    for (int i = 0; i < NTHREADS; i++)
        testarray[i] = false;
c010fb73:	c6 80 b4 d1 14 c0 00 	movb   $0x0,-0x3feb2e4c(%eax)

    for (int i = 0; i < NTHREADS; i++)
        testarray[i] = false;
    assert(locktester_simple() == 0);

    for (int i = 0; i < NTHREADS; i++)
c010fb7a:	40                   	inc    %eax
c010fb7b:	83 f8 08             	cmp    $0x8,%eax
c010fb7e:	75 f3                	jne    c010fb73 <locktest+0x83>
        testarray[i] = false;
    assert(locktester_array() == 0);
c010fb80:	e8 be fe ff ff       	call   c010fa43 <locktester_array>
c010fb85:	85 c0                	test   %eax,%eax
c010fb87:	74 28                	je     c010fbb1 <locktest+0xc1>
c010fb89:	83 ec 0c             	sub    $0xc,%esp
c010fb8c:	68 b8 39 11 c0       	push   $0xc01139b8
c010fb91:	6a 6b                	push   $0x6b
c010fb93:	68 b7 38 11 c0       	push   $0xc01138b7
c010fb98:	68 8c 39 11 c0       	push   $0xc011398c
c010fb9d:	68 2b ff 10 c0       	push   $0xc010ff2b
c010fba2:	e8 c1 46 ff ff       	call   c0104268 <print>
c010fba7:	83 c4 20             	add    $0x20,%esp
c010fbaa:	e8 d4 13 ff ff       	call   c0100f83 <backtrace>
c010fbaf:	fa                   	cli    
c010fbb0:	f4                   	hlt    

    lock_destroy(lock_test_lock);
c010fbb1:	83 ec 0c             	sub    $0xc,%esp
c010fbb4:	ff 35 b0 d1 14 c0    	pushl  0xc014d1b0
c010fbba:	e8 37 34 ff ff       	call   c0102ff6 <lock_destroy>

    print("Lock test complete\n");
c010fbbf:	c7 04 24 a4 39 11 c0 	movl   $0xc01139a4,(%esp)
c010fbc6:	e8 9d 46 ff ff       	call   c0104268 <print>

    return 0;
}
c010fbcb:	31 c0                	xor    %eax,%eax
c010fbcd:	c9                   	leave  
c010fbce:	c3                   	ret    

c010fbcf <spin>:
#include <time.h>

#define NTIMES 25000

void
spin() {
c010fbcf:	55                   	push   %ebp
c010fbd0:	89 e5                	mov    %esp,%ebp
    static volatile int x;
    x = 0;
c010fbd2:	c7 05 c0 d1 14 c0 00 	movl   $0x0,0xc014d1c0
c010fbd9:	00 00 00 
    while (x++ < NTIMES);
c010fbdc:	a1 c0 d1 14 c0       	mov    0xc014d1c0,%eax
c010fbe1:	8d 50 01             	lea    0x1(%eax),%edx
c010fbe4:	89 15 c0 d1 14 c0    	mov    %edx,0xc014d1c0
c010fbea:	3d a7 61 00 00       	cmp    $0x61a7,%eax
c010fbef:	7e eb                	jle    c010fbdc <spin+0xd>
}
c010fbf1:	5d                   	pop    %ebp
c010fbf2:	c3                   	ret    

c010fbf3 <timertest>:

int
timertest(int argc, char** argv) {
c010fbf3:	55                   	push   %ebp
c010fbf4:	89 e5                	mov    %esp,%ebp
c010fbf6:	57                   	push   %edi
c010fbf7:	56                   	push   %esi
c010fbf8:	53                   	push   %ebx
c010fbf9:	83 ec 28             	sub    $0x28,%esp
    (void) argc;
    (void) argv;

    print("Starting timer test...\n");
c010fbfc:	68 ea 39 11 c0       	push   $0xc01139ea
c010fc01:	e8 62 46 ff ff       	call   c0104268 <print>

    int timer_id = timer_create();
c010fc06:	e8 19 50 ff ff       	call   c0104c24 <timer_create>
c010fc0b:	89 c3                	mov    %eax,%ebx
    timer_start(timer_id);
c010fc0d:	89 04 24             	mov    %eax,(%esp)
c010fc10:	e8 4b 50 ff ff       	call   c0104c60 <timer_start>

    static volatile int x;
    x = 0;
c010fc15:	c7 05 bc d1 14 c0 00 	movl   $0x0,0xc014d1bc
c010fc1c:	00 00 00 
    while (x++ < NTIMES)
c010fc1f:	83 c4 10             	add    $0x10,%esp
c010fc22:	a1 bc d1 14 c0       	mov    0xc014d1bc,%eax
c010fc27:	8d 50 01             	lea    0x1(%eax),%edx
c010fc2a:	89 15 bc d1 14 c0    	mov    %edx,0xc014d1bc
c010fc30:	3d a7 61 00 00       	cmp    $0x61a7,%eax
c010fc35:	7f 07                	jg     c010fc3e <timertest+0x4b>
        spin();
c010fc37:	e8 93 ff ff ff       	call   c010fbcf <spin>
c010fc3c:	eb e4                	jmp    c010fc22 <timertest+0x2f>

    struct time time = timer_stop(timer_id);
c010fc3e:	8d 75 d8             	lea    -0x28(%ebp),%esi
c010fc41:	50                   	push   %eax
c010fc42:	50                   	push   %eax
c010fc43:	53                   	push   %ebx
c010fc44:	56                   	push   %esi
c010fc45:	e8 2d 51 ff ff       	call   c0104d77 <timer_stop>
    print_time(time);
c010fc4a:	52                   	push   %edx
c010fc4b:	b9 04 00 00 00       	mov    $0x4,%ecx
c010fc50:	89 e7                	mov    %esp,%edi
c010fc52:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010fc54:	e8 27 53 ff ff       	call   c0104f80 <print_time>

    timer_delete(timer_id);
c010fc59:	89 1c 24             	mov    %ebx,(%esp)
c010fc5c:	e8 8e 52 ff ff       	call   c0104eef <timer_delete>

    print("Timer test complete.\n");
c010fc61:	c7 04 24 02 3a 11 c0 	movl   $0xc0113a02,(%esp)
c010fc68:	e8 fb 45 ff ff       	call   c0104268 <print>

    return 0;
}
c010fc6d:	31 c0                	xor    %eax,%eax
c010fc6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010fc72:	5b                   	pop    %ebx
c010fc73:	5e                   	pop    %esi
c010fc74:	5f                   	pop    %edi
c010fc75:	5d                   	pop    %ebp
c010fc76:	c3                   	ret    
c010fc77:	90                   	nop

c010fc78 <__udivdi3>:
c010fc78:	55                   	push   %ebp
c010fc79:	57                   	push   %edi
c010fc7a:	56                   	push   %esi
c010fc7b:	53                   	push   %ebx
c010fc7c:	83 ec 1c             	sub    $0x1c,%esp
c010fc7f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
c010fc83:	8b 4c 24 34          	mov    0x34(%esp),%ecx
c010fc87:	8b 7c 24 38          	mov    0x38(%esp),%edi
c010fc8b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010fc8f:	89 ca                	mov    %ecx,%edx
c010fc91:	89 f8                	mov    %edi,%eax
c010fc93:	8b 74 24 3c          	mov    0x3c(%esp),%esi
c010fc97:	85 f6                	test   %esi,%esi
c010fc99:	75 2d                	jne    c010fcc8 <__udivdi3+0x50>
c010fc9b:	39 cf                	cmp    %ecx,%edi
c010fc9d:	77 65                	ja     c010fd04 <__udivdi3+0x8c>
c010fc9f:	89 fd                	mov    %edi,%ebp
c010fca1:	85 ff                	test   %edi,%edi
c010fca3:	75 0b                	jne    c010fcb0 <__udivdi3+0x38>
c010fca5:	b8 01 00 00 00       	mov    $0x1,%eax
c010fcaa:	31 d2                	xor    %edx,%edx
c010fcac:	f7 f7                	div    %edi
c010fcae:	89 c5                	mov    %eax,%ebp
c010fcb0:	31 d2                	xor    %edx,%edx
c010fcb2:	89 c8                	mov    %ecx,%eax
c010fcb4:	f7 f5                	div    %ebp
c010fcb6:	89 c1                	mov    %eax,%ecx
c010fcb8:	89 d8                	mov    %ebx,%eax
c010fcba:	f7 f5                	div    %ebp
c010fcbc:	89 cf                	mov    %ecx,%edi
c010fcbe:	89 fa                	mov    %edi,%edx
c010fcc0:	83 c4 1c             	add    $0x1c,%esp
c010fcc3:	5b                   	pop    %ebx
c010fcc4:	5e                   	pop    %esi
c010fcc5:	5f                   	pop    %edi
c010fcc6:	5d                   	pop    %ebp
c010fcc7:	c3                   	ret    
c010fcc8:	39 ce                	cmp    %ecx,%esi
c010fcca:	77 28                	ja     c010fcf4 <__udivdi3+0x7c>
c010fccc:	0f bd fe             	bsr    %esi,%edi
c010fccf:	83 f7 1f             	xor    $0x1f,%edi
c010fcd2:	75 40                	jne    c010fd14 <__udivdi3+0x9c>
c010fcd4:	39 ce                	cmp    %ecx,%esi
c010fcd6:	72 0a                	jb     c010fce2 <__udivdi3+0x6a>
c010fcd8:	3b 44 24 08          	cmp    0x8(%esp),%eax
c010fcdc:	0f 87 9e 00 00 00    	ja     c010fd80 <__udivdi3+0x108>
c010fce2:	b8 01 00 00 00       	mov    $0x1,%eax
c010fce7:	89 fa                	mov    %edi,%edx
c010fce9:	83 c4 1c             	add    $0x1c,%esp
c010fcec:	5b                   	pop    %ebx
c010fced:	5e                   	pop    %esi
c010fcee:	5f                   	pop    %edi
c010fcef:	5d                   	pop    %ebp
c010fcf0:	c3                   	ret    
c010fcf1:	8d 76 00             	lea    0x0(%esi),%esi
c010fcf4:	31 ff                	xor    %edi,%edi
c010fcf6:	31 c0                	xor    %eax,%eax
c010fcf8:	89 fa                	mov    %edi,%edx
c010fcfa:	83 c4 1c             	add    $0x1c,%esp
c010fcfd:	5b                   	pop    %ebx
c010fcfe:	5e                   	pop    %esi
c010fcff:	5f                   	pop    %edi
c010fd00:	5d                   	pop    %ebp
c010fd01:	c3                   	ret    
c010fd02:	66 90                	xchg   %ax,%ax
c010fd04:	89 d8                	mov    %ebx,%eax
c010fd06:	f7 f7                	div    %edi
c010fd08:	31 ff                	xor    %edi,%edi
c010fd0a:	89 fa                	mov    %edi,%edx
c010fd0c:	83 c4 1c             	add    $0x1c,%esp
c010fd0f:	5b                   	pop    %ebx
c010fd10:	5e                   	pop    %esi
c010fd11:	5f                   	pop    %edi
c010fd12:	5d                   	pop    %ebp
c010fd13:	c3                   	ret    
c010fd14:	bd 20 00 00 00       	mov    $0x20,%ebp
c010fd19:	89 eb                	mov    %ebp,%ebx
c010fd1b:	29 fb                	sub    %edi,%ebx
c010fd1d:	89 f9                	mov    %edi,%ecx
c010fd1f:	d3 e6                	shl    %cl,%esi
c010fd21:	89 c5                	mov    %eax,%ebp
c010fd23:	88 d9                	mov    %bl,%cl
c010fd25:	d3 ed                	shr    %cl,%ebp
c010fd27:	89 e9                	mov    %ebp,%ecx
c010fd29:	09 f1                	or     %esi,%ecx
c010fd2b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010fd2f:	89 f9                	mov    %edi,%ecx
c010fd31:	d3 e0                	shl    %cl,%eax
c010fd33:	89 c5                	mov    %eax,%ebp
c010fd35:	89 d6                	mov    %edx,%esi
c010fd37:	88 d9                	mov    %bl,%cl
c010fd39:	d3 ee                	shr    %cl,%esi
c010fd3b:	89 f9                	mov    %edi,%ecx
c010fd3d:	d3 e2                	shl    %cl,%edx
c010fd3f:	8b 44 24 08          	mov    0x8(%esp),%eax
c010fd43:	88 d9                	mov    %bl,%cl
c010fd45:	d3 e8                	shr    %cl,%eax
c010fd47:	09 c2                	or     %eax,%edx
c010fd49:	89 d0                	mov    %edx,%eax
c010fd4b:	89 f2                	mov    %esi,%edx
c010fd4d:	f7 74 24 0c          	divl   0xc(%esp)
c010fd51:	89 d6                	mov    %edx,%esi
c010fd53:	89 c3                	mov    %eax,%ebx
c010fd55:	f7 e5                	mul    %ebp
c010fd57:	39 d6                	cmp    %edx,%esi
c010fd59:	72 19                	jb     c010fd74 <__udivdi3+0xfc>
c010fd5b:	74 0b                	je     c010fd68 <__udivdi3+0xf0>
c010fd5d:	89 d8                	mov    %ebx,%eax
c010fd5f:	31 ff                	xor    %edi,%edi
c010fd61:	e9 58 ff ff ff       	jmp    c010fcbe <__udivdi3+0x46>
c010fd66:	66 90                	xchg   %ax,%ax
c010fd68:	8b 54 24 08          	mov    0x8(%esp),%edx
c010fd6c:	89 f9                	mov    %edi,%ecx
c010fd6e:	d3 e2                	shl    %cl,%edx
c010fd70:	39 c2                	cmp    %eax,%edx
c010fd72:	73 e9                	jae    c010fd5d <__udivdi3+0xe5>
c010fd74:	8d 43 ff             	lea    -0x1(%ebx),%eax
c010fd77:	31 ff                	xor    %edi,%edi
c010fd79:	e9 40 ff ff ff       	jmp    c010fcbe <__udivdi3+0x46>
c010fd7e:	66 90                	xchg   %ax,%ax
c010fd80:	31 c0                	xor    %eax,%eax
c010fd82:	e9 37 ff ff ff       	jmp    c010fcbe <__udivdi3+0x46>
c010fd87:	90                   	nop

c010fd88 <__umoddi3>:
c010fd88:	55                   	push   %ebp
c010fd89:	57                   	push   %edi
c010fd8a:	56                   	push   %esi
c010fd8b:	53                   	push   %ebx
c010fd8c:	83 ec 1c             	sub    $0x1c,%esp
c010fd8f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
c010fd93:	8b 74 24 34          	mov    0x34(%esp),%esi
c010fd97:	8b 7c 24 38          	mov    0x38(%esp),%edi
c010fd9b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
c010fd9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010fda3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010fda7:	89 f3                	mov    %esi,%ebx
c010fda9:	89 fa                	mov    %edi,%edx
c010fdab:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fdaf:	89 34 24             	mov    %esi,(%esp)
c010fdb2:	85 c0                	test   %eax,%eax
c010fdb4:	75 1a                	jne    c010fdd0 <__umoddi3+0x48>
c010fdb6:	39 f7                	cmp    %esi,%edi
c010fdb8:	0f 86 a2 00 00 00    	jbe    c010fe60 <__umoddi3+0xd8>
c010fdbe:	89 c8                	mov    %ecx,%eax
c010fdc0:	89 f2                	mov    %esi,%edx
c010fdc2:	f7 f7                	div    %edi
c010fdc4:	89 d0                	mov    %edx,%eax
c010fdc6:	31 d2                	xor    %edx,%edx
c010fdc8:	83 c4 1c             	add    $0x1c,%esp
c010fdcb:	5b                   	pop    %ebx
c010fdcc:	5e                   	pop    %esi
c010fdcd:	5f                   	pop    %edi
c010fdce:	5d                   	pop    %ebp
c010fdcf:	c3                   	ret    
c010fdd0:	39 f0                	cmp    %esi,%eax
c010fdd2:	0f 87 ac 00 00 00    	ja     c010fe84 <__umoddi3+0xfc>
c010fdd8:	0f bd e8             	bsr    %eax,%ebp
c010fddb:	83 f5 1f             	xor    $0x1f,%ebp
c010fdde:	0f 84 ac 00 00 00    	je     c010fe90 <__umoddi3+0x108>
c010fde4:	bf 20 00 00 00       	mov    $0x20,%edi
c010fde9:	29 ef                	sub    %ebp,%edi
c010fdeb:	89 fe                	mov    %edi,%esi
c010fded:	89 7c 24 0c          	mov    %edi,0xc(%esp)
c010fdf1:	89 e9                	mov    %ebp,%ecx
c010fdf3:	d3 e0                	shl    %cl,%eax
c010fdf5:	89 d7                	mov    %edx,%edi
c010fdf7:	89 f1                	mov    %esi,%ecx
c010fdf9:	d3 ef                	shr    %cl,%edi
c010fdfb:	09 c7                	or     %eax,%edi
c010fdfd:	89 e9                	mov    %ebp,%ecx
c010fdff:	d3 e2                	shl    %cl,%edx
c010fe01:	89 14 24             	mov    %edx,(%esp)
c010fe04:	89 d8                	mov    %ebx,%eax
c010fe06:	d3 e0                	shl    %cl,%eax
c010fe08:	89 c2                	mov    %eax,%edx
c010fe0a:	8b 44 24 08          	mov    0x8(%esp),%eax
c010fe0e:	d3 e0                	shl    %cl,%eax
c010fe10:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe14:	8b 44 24 08          	mov    0x8(%esp),%eax
c010fe18:	89 f1                	mov    %esi,%ecx
c010fe1a:	d3 e8                	shr    %cl,%eax
c010fe1c:	09 d0                	or     %edx,%eax
c010fe1e:	d3 eb                	shr    %cl,%ebx
c010fe20:	89 da                	mov    %ebx,%edx
c010fe22:	f7 f7                	div    %edi
c010fe24:	89 d3                	mov    %edx,%ebx
c010fe26:	f7 24 24             	mull   (%esp)
c010fe29:	89 c6                	mov    %eax,%esi
c010fe2b:	89 d1                	mov    %edx,%ecx
c010fe2d:	39 d3                	cmp    %edx,%ebx
c010fe2f:	0f 82 87 00 00 00    	jb     c010febc <__umoddi3+0x134>
c010fe35:	0f 84 91 00 00 00    	je     c010fecc <__umoddi3+0x144>
c010fe3b:	8b 54 24 04          	mov    0x4(%esp),%edx
c010fe3f:	29 f2                	sub    %esi,%edx
c010fe41:	19 cb                	sbb    %ecx,%ebx
c010fe43:	89 d8                	mov    %ebx,%eax
c010fe45:	8a 4c 24 0c          	mov    0xc(%esp),%cl
c010fe49:	d3 e0                	shl    %cl,%eax
c010fe4b:	89 e9                	mov    %ebp,%ecx
c010fe4d:	d3 ea                	shr    %cl,%edx
c010fe4f:	09 d0                	or     %edx,%eax
c010fe51:	89 e9                	mov    %ebp,%ecx
c010fe53:	d3 eb                	shr    %cl,%ebx
c010fe55:	89 da                	mov    %ebx,%edx
c010fe57:	83 c4 1c             	add    $0x1c,%esp
c010fe5a:	5b                   	pop    %ebx
c010fe5b:	5e                   	pop    %esi
c010fe5c:	5f                   	pop    %edi
c010fe5d:	5d                   	pop    %ebp
c010fe5e:	c3                   	ret    
c010fe5f:	90                   	nop
c010fe60:	89 fd                	mov    %edi,%ebp
c010fe62:	85 ff                	test   %edi,%edi
c010fe64:	75 0b                	jne    c010fe71 <__umoddi3+0xe9>
c010fe66:	b8 01 00 00 00       	mov    $0x1,%eax
c010fe6b:	31 d2                	xor    %edx,%edx
c010fe6d:	f7 f7                	div    %edi
c010fe6f:	89 c5                	mov    %eax,%ebp
c010fe71:	89 f0                	mov    %esi,%eax
c010fe73:	31 d2                	xor    %edx,%edx
c010fe75:	f7 f5                	div    %ebp
c010fe77:	89 c8                	mov    %ecx,%eax
c010fe79:	f7 f5                	div    %ebp
c010fe7b:	89 d0                	mov    %edx,%eax
c010fe7d:	e9 44 ff ff ff       	jmp    c010fdc6 <__umoddi3+0x3e>
c010fe82:	66 90                	xchg   %ax,%ax
c010fe84:	89 c8                	mov    %ecx,%eax
c010fe86:	89 f2                	mov    %esi,%edx
c010fe88:	83 c4 1c             	add    $0x1c,%esp
c010fe8b:	5b                   	pop    %ebx
c010fe8c:	5e                   	pop    %esi
c010fe8d:	5f                   	pop    %edi
c010fe8e:	5d                   	pop    %ebp
c010fe8f:	c3                   	ret    
c010fe90:	3b 04 24             	cmp    (%esp),%eax
c010fe93:	72 06                	jb     c010fe9b <__umoddi3+0x113>
c010fe95:	3b 7c 24 04          	cmp    0x4(%esp),%edi
c010fe99:	77 0f                	ja     c010feaa <__umoddi3+0x122>
c010fe9b:	89 f2                	mov    %esi,%edx
c010fe9d:	29 f9                	sub    %edi,%ecx
c010fe9f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
c010fea3:	89 14 24             	mov    %edx,(%esp)
c010fea6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010feaa:	8b 44 24 04          	mov    0x4(%esp),%eax
c010feae:	8b 14 24             	mov    (%esp),%edx
c010feb1:	83 c4 1c             	add    $0x1c,%esp
c010feb4:	5b                   	pop    %ebx
c010feb5:	5e                   	pop    %esi
c010feb6:	5f                   	pop    %edi
c010feb7:	5d                   	pop    %ebp
c010feb8:	c3                   	ret    
c010feb9:	8d 76 00             	lea    0x0(%esi),%esi
c010febc:	2b 04 24             	sub    (%esp),%eax
c010febf:	19 fa                	sbb    %edi,%edx
c010fec1:	89 d1                	mov    %edx,%ecx
c010fec3:	89 c6                	mov    %eax,%esi
c010fec5:	e9 71 ff ff ff       	jmp    c010fe3b <__umoddi3+0xb3>
c010feca:	66 90                	xchg   %ax,%ax
c010fecc:	39 44 24 04          	cmp    %eax,0x4(%esp)
c010fed0:	72 ea                	jb     c010febc <__umoddi3+0x134>
c010fed2:	89 d9                	mov    %ebx,%ecx
c010fed4:	e9 62 ff ff ff       	jmp    c010fe3b <__umoddi3+0xb3>

Disassembly of section .text.startup:

c010fedc <main>:
#include <ulib.h>

int
main(int argc, char** argv) {
c010fedc:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c010fee0:	83 e4 f0             	and    $0xfffffff0,%esp
c010fee3:	ff 71 fc             	pushl  -0x4(%ecx)
c010fee6:	55                   	push   %ebp
c010fee7:	89 e5                	mov    %esp,%ebp
c010fee9:	51                   	push   %ecx
c010feea:	83 ec 10             	sub    $0x10,%esp
    (void) argc;
    (void) argv;

    print("Hello! You are in userspace.\n");
c010feed:	68 18 3a 11 c0       	push   $0xc0113a18
c010fef2:	e8 71 43 ff ff       	call   c0104268 <print>

    return 0;
c010fef7:	83 c4 10             	add    $0x10,%esp
}
c010fefa:	31 c0                	xor    %eax,%eax
c010fefc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010feff:	c9                   	leave  
c010ff00:	8d 61 fc             	lea    -0x4(%ecx),%esp
c010ff03:	c3                   	ret    
